field_name: humor_and_comedy
subfield: Comedic Writing and Scriptwriting
task: Develop and refine joke structures and punchline timing
tool_description: |-
  **STEP 1 — Rate task difficulty**

  This task has medium difficulty. While joke writing appears creative and subjective, it involves analyzable structural elements like setup-punchline relationships, timing patterns, and comedic devices. The complexity comes from balancing multiple factors (audience, context, delivery style) and the iterative refinement process, but the core components can be systematically approached.

  **STEP 2 — Set a tool budget**

  For this medium difficulty task, I'll target 12 tools to cover the various aspects of joke development, structure analysis, timing optimization, and refinement workflows.

  **STEP 3 — List all tool names and dependencies**

  1. **Joke Structure Analyzer** - Consumes: raw joke text → Produces: structural breakdown and comedic elements
  2. **Setup Builder** - Consumes: topic/premise → Produces: structured joke setup
  3. **Punchline Generator** - Consumes: setup, comedic style → Produces: multiple punchline options
  4. **Timing Optimizer** - Consumes: joke text, delivery style → Produces: timing markers and pauses
  5. **Comedy Style Classifier** - Consumes: joke samples → Produces: style categorization and characteristics
  6. **Audience Matcher** - Consumes: joke content, target demographics → Produces: suitability scores
  7. **Callback Reference Tracker** - Consumes: multiple jokes → Produces: callback opportunities and references
  8. **Comedic Device Detector** - Consumes: joke text → Produces: identified comedic techniques and devices
  9. **Rhythm Pattern Analyzer** - Consumes: joke text → Produces: syllable patterns and flow metrics
  10. **Punchline Impact Scorer** - Consumes: setup-punchline pairs → Produces: surprise and impact ratings
  11. **Joke Sequence Organizer** - Consumes: multiple jokes, performance context → Produces: optimized joke ordering
  12. **Comedy Feedback Integrator** - Consumes: jokes, feedback data → Produces: revision suggestions

  **STEP 4 — Multi-tool plans**

  **Simple Plans:**
  - Basic joke creation: Setup Builder → Punchline Generator → Timing Optimizer
  - Style analysis: Comedy Style Classifier → Comedic Device Detector

  **Medium Plans:**
  - Joke development cycle: Setup Builder → Punchline Generator → Punchline Impact Scorer → Timing Optimizer → Audience Matcher
  - Structure refinement: Joke Structure Analyzer → Comedic Device Detector → Rhythm Pattern Analyzer → Comedy Feedback Integrator

  **Complex Plans:**
  - Full routine development: Setup Builder → Punchline Generator → multiple jokes → Callback Reference Tracker → Joke Sequence Organizer → Timing Optimizer → Audience Matcher
  - Comprehensive joke optimization: Joke Structure Analyzer → Comedy Style Classifier → Punchline Impact Scorer → Rhythm Pattern Analyzer → Comedy Feedback Integrator → revised jokes → Timing Optimizer → final performance sequence

  **STEP 5 — Produce tools**

  ```json
  {
    "tool_name": "Joke Structure Analyzer",
    "tool_description": "Analyzes the structural components of jokes, identifying setup elements, punchline mechanics, and comedic devices used.",
    "parameters": {
      "joke_text": {
        "type": "string",
        "required": true,
        "description": "The complete joke text to analyze"
      },
      "include_subtext": {
        "type": "boolean",
        "required": false,
        "description": "Whether to analyze implied meanings and subtext",
        "default": false
      }
    },
    "error_messages": [
      "Empty joke text: Provide a non-empty joke text for analysis.",
      "Text too short: Joke text must be at least 10 characters long to analyze structure.",
      "Invalid format: Joke text contains unsupported characters or formatting."
    ],
    "usage": "Provide the complete joke text in the joke_text parameter. Optionally enable subtext analysis for deeper structural insights.",
    "output_details": {
      "setup_length": {
        "type": "integer",
        "description": "Number of words in the setup portion"
      },
      "punchline_length": {
        "type": "integer",
        "description": "Number of words in the punchline portion"
      },
      "structure_type": {
        "type": "string",
        "description": "Identified joke structure pattern"
      },
      "comedic_devices": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of comedic devices identified in the joke"
      },
      "complexity_score": {
        "type": "number",
        "description": "Structural complexity rating from 1-10"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Setup Builder",
    "tool_description": "Creates structured joke setups based on provided topics, context, and comedic style preferences.",
    "parameters": {
      "topic": {
        "type": "string",
        "required": true,
        "description": "Main subject or theme for the joke setup"
      },
      "context_keywords": {
        "type": "array",
        "required": false,
        "description": "Contextual keywords to incorporate",
        "items": {
          "type": "string"
        },
        "default": []
      },
      "setup_length": {
        "type": "string",
        "required": false,
        "description": "Preferred setup length: short, medium, or long",
        "default": "medium"
      },
      "comedic_style": {
        "type": "string",
        "required": false,
        "description": "Comedy style: observational, absurdist, wordplay, situational, or deadpan",
        "default": "observational"
      },
      "target_audience": {
        "type": "string",
        "required": false,
        "description": "Target audience type: general, adult, family, professional, or niche",
        "default": "general"
      }
    },
    "error_messages": [
      "Invalid topic: Topic must be a non-empty string with meaningful content.",
      "Unsupported setup length: Use short, medium, or long.",
      "Invalid comedic style: Choose from observational, absurdist, wordplay, situational, or deadpan.",
      "Invalid audience type: Choose from general, adult, family, professional, or niche.",
      "Context keywords too long: Each keyword must be under 50 characters."
    ],
    "usage": "Specify the main topic and optionally customize the setup with context keywords, length preference, comedic style, and target audience.",
    "output_details": {
      "setup_text": {
        "type": "string",
        "description": "Generated joke setup text"
      },
      "premise_strength": {
        "type": "number",
        "description": "Premise strength rating from 1-10"
      },
      "setup_type": {
        "type": "string",
        "description": "Categorization of the setup structure"
      },
      "expectation_set": {
        "type": "string",
        "description": "Description of audience expectation established"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Punchline Generator",
    "tool_description": "Generates multiple punchline options for given setups using various comedic techniques and surprise mechanisms.",
    "parameters": {
      "setup_text": {
        "type": "string",
        "required": true,
        "description": "The joke setup text to create punchlines for"
      },
      "num_options": {
        "type": "integer",
        "required": false,
        "description": "Number of punchline variations to generate (1-10)",
        "default": 3
      },
      "comedic_techniques": {
        "type": "array",
        "required": false,
        "description": "Preferred comedic techniques to use",
        "items": {
          "type": "string"
        },
        "default": ["surprise", "wordplay", "exaggeration"]
      },
      "surprise_level": {
        "type": "string",
        "required": false,
        "description": "Desired surprise intensity: subtle, moderate, or shocking",
        "default": "moderate"
      }
    },
    "error_messages": [
      "Empty setup text: Provide a non-empty setup text to generate punchlines.",
      "Invalid num_options: Number of options must be between 1 and 10.",
      "Unknown comedic technique: Use recognized techniques like surprise, wordplay, exaggeration, irony, or misdirection.",
      "Invalid surprise level: Choose from subtle, moderate, or shocking."
    ],
    "usage": "Provide the setup text and specify how many punchline options you want, along with preferred comedic techniques and surprise level.",
    "output_details": {
      "punchlines": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Array of generated punchline options"
      },
      "technique_used": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Comedic techniques used for each punchline"
      },
      "surprise_scores": {
        "type": "array",
        "items": {
          "type": "number"
        },
        "description": "Surprise rating for each punchline (1-10)"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Timing Optimizer",
    "tool_description": "Analyzes joke text and adds timing markers, pause indicators, and delivery cues for optimal comedic timing.",
    "parameters": {
      "joke_text": {
        "type": "string",
        "required": true,
        "description": "Complete joke text to optimize for timing"
      },
      "delivery_style": {
        "type": "string",
        "required": false,
        "description": "Performance style: standup, conversational, theatrical, or deadpan",
        "default": "standup"
      },
      "pace_preference": {
        "type": "string",
        "required": false,
        "description": "Overall pacing: slow, medium, or fast",
        "default": "medium"
      },
      "audience_size": {
        "type": "string",
        "required": false,
        "description": "Expected audience size: intimate, medium, or large",
        "default": "medium"
      },
      "include_gestures": {
        "type": "boolean",
        "required": false,
        "description": "Whether to include gesture timing cues",
        "default": false
      }
    },
    "error_messages": [
      "Empty joke text: Provide joke text to optimize timing for.",
      "Invalid delivery style: Choose from standup, conversational, theatrical, or deadpan.",
      "Invalid pace preference: Choose from slow, medium, or fast.",
      "Invalid audience size: Choose from intimate, medium, or large.",
      "Joke too short: Joke must be at least 15 characters for timing analysis."
    ],
    "usage": "Input your complete joke text and specify delivery style, pacing, and audience context to get optimized timing markers.",
    "output_details": {
      "timed_text": {
        "type": "string",
        "description": "Joke text with timing markers and pause indicators"
      },
      "pause_locations": {
        "type": "array",
        "items": {
          "type": "integer"
        },
        "description": "Character positions where pauses should occur"
      },
      "emphasis_points": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Words or phrases that should be emphasized"
      },
      "total_duration": {
        "type": "number",
        "description": "Estimated delivery time in seconds"
      },
      "rhythm_pattern": {
        "type": "string",
        "description": "Description of the recommended rhythm pattern"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Comedy Style Classifier",
    "tool_description": "Analyzes joke samples to identify and categorize comedic styles, providing detailed characteristics and style profiles.",
    "parameters": {
      "joke_samples": {
        "type": "array",
        "required": true,
        "description": "Array of joke texts to analyze for style",
        "items": {
          "type": "string"
        },
        "minItems": 1,
        "maxItems": 20
      },
      "include_subgenres": {
        "type": "boolean",
        "required": false,
        "description": "Whether to identify comedy subgenres",
        "default": true
      },
      "confidence_threshold": {
        "type": "number",
        "required": false,
        "description": "Minimum confidence score for style classification (0.1-1.0)",
        "default": 0.7
      }
    },
    "error_messages": [
      "No joke samples provided: Include at least one joke sample for analysis.",
      "Too many samples: Maximum 20 joke samples allowed per analysis.",
      "Invalid confidence threshold: Threshold must be between 0.1 and 1.0.",
      "Sample too short: Each joke sample must be at least 10 characters long."
    ],
    "usage": "Provide an array of joke samples to analyze. Optionally adjust confidence threshold and enable subgenre detection.",
    "output_details": {
      "primary_style": {
        "type": "string",
        "description": "Main identified comedy style"
      },
      "secondary_styles": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Additional detected comedy styles"
      },
      "style_confidence": {
        "type": "number",
        "description": "Confidence score for primary style classification"
      },
      "characteristics": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Key characteristics of the identified style"
      },
      "subgenres": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Identified comedy subgenres if enabled"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Audience Matcher",
    "tool_description": "Evaluates joke content against target audience demographics and preferences to provide suitability scores and recommendations.",
    "parameters": {
      "joke_text": {
        "type": "string",
        "required": true,
        "description": "Joke text to evaluate for audience suitability"
      },
      "target_age_group": {
        "type": "string",
        "required": true,
        "description": "Target age demographic: children, teens, young_adults, adults, seniors, or all_ages"
      },
      "cultural_context": {
        "type": "string",
        "required": false,
        "description": "Cultural context: western, global, regional, or specific",
        "default": "global"
      },
      "content_sensitivity": {
        "type": "string",
        "required": false,
        "description": "Content sensitivity level: family_friendly, moderate, or adult",
        "default": "moderate"
      },
      "venue_type": {
        "type": "string",
        "required": false,
        "description": "Performance venue: corporate, club, family_event, or online",
        "default": "club"
      }
    },
    "error_messages": [
      "Empty joke text: Provide joke text to evaluate audience suitability.",
      "Invalid age group: Choose from children, teens, young_adults, adults, seniors, or all_ages.",
      "Invalid cultural context: Choose from western, global, regional, or specific.",
      "Invalid content sensitivity: Choose from family_friendly, moderate, or adult.",
      "Invalid venue type: Choose from corporate, club, family_event, or online."
    ],
    "usage": "Provide joke text and target age group, then optionally specify cultural context, content sensitivity, and venue type for detailed audience matching.",
    "output_details": {
      "suitability_score": {
        "type": "number",
        "description": "Overall audience suitability score from 1-10"
      },
      "age_appropriateness": {
        "type": "string",
        "description": "Assessment of age appropriateness"
      },
      "cultural_sensitivity": {
        "type": "string",
        "description": "Cultural sensitivity assessment"
      },
      "potential_issues": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Potential audience concerns or issues"
      },
      "recommendations": {
        "type": "string",
        "description": "Suggestions for improving audience suitability"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Callback Reference Tracker",
    "tool_description": "Identifies opportunities for callbacks and references across multiple jokes in a comedy routine or set.",
    "parameters": {
      "joke_list": {
        "type": "array",
        "required": true,
        "description": "Array of jokes to analyze for callback opportunities",
        "items": {
          "type": "string"
        },
        "minItems": 2,
        "maxItems": 50
      },
      "callback_strength": {
        "type": "string",
        "required": false,
        "description": "Desired callback connection strength: subtle, moderate, or obvious",
        "default": "moderate"
      },
      "max_distance": {
        "type": "integer",
        "required": false,
        "description": "Maximum joke distance for callback references (1-20)",
        "default": 10
      },
      "include_themes": {
        "type": "boolean",
        "required": false,
        "description": "Whether to include thematic callbacks",
        "default": true
      }
    },
    "error_messages": [
      "Insufficient jokes: Provide at least 2 jokes to identify callback opportunities.",
      "Too many jokes: Maximum 50 jokes allowed for callback analysis.",
      "Invalid callback strength: Choose from subtle, moderate, or obvious.",
      "Invalid max distance: Distance must be between 1 and 20.",
      "Empty joke in list: All jokes in the list must contain text."
    ],
    "usage": "Provide an array of jokes and specify callback preferences to identify connection opportunities and reference points.",
    "output_details": {
      "callback_opportunities": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Identified callback opportunities between jokes"
      },
      "reference_pairs": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Joke pairs with potential reference connections"
      },
      "recurring_themes": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Themes that appear across multiple jokes"
      },
      "suggested_callbacks": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Specific callback suggestions to implement"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Comedic Device Detector",
    "tool_description": "Identifies and categorizes comedic devices, techniques, and mechanisms used within joke text.",
    "parameters": {
      "joke_text": {
        "type": "string",
        "required": true,
        "description": "Joke text to analyze for comedic devices"
      },
      "detection_depth": {
        "type": "string",
        "required": false,
        "description": "Analysis depth level: basic, detailed, or comprehensive",
        "default": "detailed"
      },
      "include_linguistics": {
        "type": "boolean",
        "required": false,
        "description": "Whether to include linguistic comedy analysis",
        "default": false
      }
    },
    "error_messages": [
      "Empty joke text: Provide joke text to analyze for comedic devices.",
      "Invalid detection depth: Choose from basic, detailed, or comprehensive.",
      "Text too short: Joke must be at least 5 words to detect comedic devices."
    ],
    "usage": "Provide joke text and select analysis depth to identify comedic devices and techniques used.",
    "output_details": {
      "primary_devices": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Main comedic devices identified"
      },
      "secondary_devices": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Additional comedic techniques found"
      },
      "device_effectiveness": {
        "type": "array",
        "items": {
          "type": "number"
        },
        "description": "Effectiveness ratings for each device (1-10)"
      },
      "linguistic_elements": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Linguistic comedy elements if analysis enabled"
      },
      "surprise_mechanisms": {
        "type": "string",
        "description": "How the joke creates surprise or subverts expectation"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Rhythm Pattern Analyzer",
    "tool_description": "Analyzes the rhythmic and syllabic patterns in joke text to optimize flow, cadence, and verbal delivery.",
    "parameters": {
      "joke_text": {
        "type": "string",
        "required": true,
        "description": "Joke text to analyze for rhythm patterns"
      },
      "language": {
        "type": "string",
        "required": false,
        "description": "Language for syllable analysis (english, spanish, french)",
        "default": "english"
      },
      "include_stress_patterns": {
        "type": "boolean",
        "required": false,
        "description": "Whether to analyze word stress patterns",
        "default": true
      },
      "flow_optimization": {
        "type": "boolean",
        "required": false,
        "description": "Whether to suggest flow improvements",
        "default": true
      }
    },
    "error_messages": [
      "Empty joke text: Provide joke text for rhythm analysis.",
      "Unsupported language: Currently supports english, spanish, or french.",
      "Text too short: Need at least 5 words for meaningful rhythm analysis."
    ],
    "usage": "Input joke text and specify language for rhythm and flow analysis, with optional stress pattern and optimization features.",
    "output_details": {
      "syllable_count": {
        "type": "integer",
        "description": "Total syllable count in the joke"
      },
      "rhythm_score": {
        "type": "number",
        "description": "Overall rhythm quality score (1-10)"
      },
      "stress_pattern": {
        "type": "string",
        "description": "Word stress pattern description"
      },
      "flow_breaks": {
        "type": "array",
        "items": {
          "type": "integer"
        },
        "description": "Character positions where flow breaks occur"
      },
      "optimization_suggestions": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Suggestions for improving rhythm and flow"
      },
      "cadence_type": {
        "type": "string",
        "description": "Identified cadence pattern type"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Punchline Impact Scorer",
    "tool_description": "Evaluates the impact potential of setup-punchline combinations by analyzing surprise factor, logical connection, and comedic strength.",
    "parameters": {
      "setup_text": {
        "type": "string",
        "required": true,
        "description": "The joke setup text"
      },
      "punchline_text": {
        "type": "string",
        "required": true,
        "description": "The punchline text to evaluate"
      },
      "scoring_criteria": {
        "type": "array",
        "required": false,
        "description": "Specific criteria to emphasize in scoring",
        "items": {
          "type": "string"
        },
        "default": ["surprise", "logic", "timing", "wordplay"]
      },
      "reference_style": {
        "type": "string",
        "required": false,
        "description": "Comedy style for comparison scoring",
        "default": "general"
      }
    },
    "error_messages": [
      "Empty setup or punchline: Both setup and punchline text must be provided.",
      "Invalid scoring criteria: Use recognized criteria like surprise, logic, timing, wordplay, absurdity, or cleverness.",
      "Text too short: Setup and punchline must each be at least 3 words long."
    ],
    "usage": "Provide both setup and punchline text, optionally specify scoring criteria and reference style for targeted impact evaluation.",
    "output_details": {
      "overall_impact": {
        "type": "number",
        "description": "Overall punchline impact score (1-10)"
      },
      "surprise_factor": {
        "type": "number",
        "description": "Surprise element rating (1-10)"
      },
      "logical_connection": {
        "type": "number",
        "description": "Setup-punchline logic connection score (1-10)"
      },
      "timing_effectiveness": {
        "type": "number",
        "description": "Timing and delivery effectiveness score (1-10)"
      },
      "improvement_areas": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Areas where the punchline could be strengthened"
      },
      "strength_summary": {
        "type": "string",
        "description": "Summary of the punchline's main strengths"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Joke Sequence Organizer",
    "tool_description": "Optimizes the ordering and flow of multiple jokes for performance routines, considering energy levels, topic transitions, and audience engagement.",
    "parameters": {
      "joke_collection": {
        "type": "array",
        "required": true,
        "description": "Array of jokes to organize into a sequence",
        "items": {
          "type": "string"
        },
        "minItems": 3,
        "maxItems": 100
      },
      "performance_duration": {
        "type": "integer",
        "required": true,
        "description": "Target performance duration in minutes"
      },
      "energy_flow": {
        "type": "string",
        "required": true,
        "description": "Desired energy pattern: building, wave, consistent, or custom"
      },
      "opening_strength": {
        "type": "string",
        "required": false,
        "description": "Opening joke strength preference: strong, moderate, or warm_up",
        "default": "strong"
      },
      "closing_strength": {
        "type": "string",
        "required": false,
        "description": "Closing joke strength preference: strong, memorable, or callback",
        "default": "strong"
      },
      "topic_clustering": {
        "type": "boolean",
        "required": false,
        "description": "Whether to group jokes by similar topics",
        "default": true
      },
      "transition_priority": {
        "type": "string",
        "required": false,
        "description": "Transition smoothness priority: high, medium, or low",
        "default": "medium"
      },
      "audience_context": {
        "type": "string",
        "required": false,
        "description": "Performance context: intimate, club, theater, or festival",
        "default": "club"
      },
      "allow_reordering": {
        "type": "boolean",
        "required": false,
        "description": "Whether jokes can be reordered for optimization",
        "default": true
      },
      "include_timing_gaps": {
        "type": "boolean",
        "required": false,
        "description": "Whether to include suggested timing gaps between jokes",
        "default": false
      }
    },
    "error_messages": [
      "Insufficient jokes: Provide at least 3 jokes for sequence organization.",
      "Too many jokes: Maximum 100 jokes allowed for organization.",
      "Invalid performance duration: Duration must be a positive integer in minutes.",
      "Invalid energy flow: Choose from building, wave, consistent, or custom.",
      "Invalid opening strength: Choose from strong, moderate, or warm_up.",
      "Invalid closing strength: Choose from strong, memorable, or callback.",
      "Invalid transition priority: Choose from high, medium, or low.",
      "Invalid audience context: Choose from intimate, club, theater, or festival.",
      "Duration mismatch: Estimated joke duration exceeds target performance duration by more than 50%."
    ],
    "usage": "Provide joke collection, performance duration, and energy flow pattern, then customize with opening/closing preferences, topic clustering, and audience context for optimal sequencing.",
    "output_details": {
      "optimized_sequence": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Jokes arranged in optimized performance order"
      },
      "sequence_flow": {
        "type": "string",
        "description": "Description of the overall flow and energy pattern"
      },
      "topic_transitions": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Identified topic transition points"
      },
      "estimated_duration": {
        "type": "number",
        "description": "Estimated total performance duration in minutes"
      },
      "energy_curve": {
        "type": "array",
        "items": {
          "type": "number"
        },
        "description": "Energy level ratings for each position (1-10)"
      },
      "optimization_notes": {
        "type": "string",
        "description": "Notes on sequencing decisions and improvements made"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Comedy Feedback Integrator",
    "tool_description": "Processes audience feedback, performance data, and testing results to generate specific revision suggestions for joke improvement.",
    "parameters": {
      "original_joke": {
        "type": "string",
        "required": true,
        "description": "Original joke text to be improved"
      },
      "feedback_scores": {
        "type": "array",
        "required": true,
        "description": "Numerical feedback scores from audience or testing",
        "items": {
          "type": "number"
        },
        "minItems": 1,
        "maxItems": 100
      },
      "feedback_comments": {
        "type": "array",
        "required": false,
        "description": "Qualitative feedback comments",
        "items": {
          "type": "string"
        },
        "default": []
      },
      "performance_context": {
        "type": "string",
        "required": false,
        "description": "Context where feedback was collected",
        "default": "general"
      },
      "focus_areas": {
        "type": "array",
        "required": false,
        "description": "Specific areas to focus revision on",
        "items": {
          "type": "string"
        },
        "default": ["timing", "punchline", "clarity"]
      },
      "revision_intensity": {
        "type": "string
