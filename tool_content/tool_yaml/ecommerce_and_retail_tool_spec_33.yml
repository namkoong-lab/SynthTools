field_name: ecommerce_and_retail
subfield: Inventory Management and Tracking
task: Multi-channel inventory synchronization across sales platforms
tool_description: |-
  **STEP 1 — Rate task difficulty**
  Multi-channel inventory synchronization is a **hard** task due to its broad scope involving multiple sales platforms, complex real-time coordination requirements, high risk of overselling or stockouts, and the need for robust data integration across disparate systems with varying APIs and data formats.

  **STEP 2 — Set a tool budget**
  Given the hard difficulty rating, I'm targeting **17 tools** to handle the comprehensive requirements of multi-channel inventory synchronization, including data retrieval, transformation, validation, conflict resolution, and monitoring across platforms.

  **STEP 3 — List all tool names with dependencies and affordances**
  1. **Platform Connector** - Consumes: API credentials → Produces: Connection status
  2. **Inventory Fetcher** - Consumes: Platform connections → Produces: Raw inventory data
  3. **Data Normalizer** - Consumes: Raw inventory data → Produces: Standardized inventory records
  4. **SKU Mapper** - Consumes: Product identifiers → Produces: Unified SKU mappings
  5. **Stock Level Validator** - Consumes: Inventory records → Produces: Validation results
  6. **Conflict Detector** - Consumes: Multi-platform inventory data → Produces: Discrepancy reports
  7. **Priority Rule Engine** - Consumes: Conflict data, business rules → Produces: Resolution decisions
  8. **Batch Updater** - Consumes: Inventory updates → Produces: Update results
  9. **Real-time Sync Monitor** - Consumes: Platform data streams → Produces: Sync status alerts
  10. **Allocation Calculator** - Consumes: Available stock, channel priorities → Produces: Channel allocations
  11. **Reserve Manager** - Consumes: Pending orders → Produces: Reserved quantities
  12. **Threshold Monitor** - Consumes: Stock levels, thresholds → Produces: Reorder alerts
  13. **Sync Scheduler** - Consumes: Sync frequency rules → Produces: Scheduled sync jobs
  14. **Error Handler** - Consumes: Failed operations → Produces: Error reports and retry actions
  15. **Audit Logger** - Consumes: All inventory changes → Produces: Audit trails
  16. **Performance Tracker** - Consumes: Sync metrics → Produces: Performance reports
  17. **Dashboard Generator** - Consumes: All system data → Produces: Visual dashboards

  **STEP 4 — Multi-tool plans**

  **Simple Plans:**
  1. **Basic Stock Check**: Platform Connector → Inventory Fetcher → Data Normalizer (3 tools)
  2. **Simple Validation**: Stock Level Validator → Error Handler → Audit Logger (3 tools)

  **Medium Plans:**
  1. **Standard Sync Process**: Platform Connector → Inventory Fetcher → Data Normalizer → SKU Mapper → Conflict Detector → Priority Rule Engine → Batch Updater (7 tools)
  2. **Allocation Management**: Inventory Fetcher → Data Normalizer → Allocation Calculator → Reserve Manager → Batch Updater → Audit Logger (6 tools)

  **Complex Plans:**
  1. **Full Synchronization Pipeline**: All 17 tools working together for complete multi-channel inventory synchronization
  2. **Advanced Monitoring & Resolution**: Real-time Sync Monitor → Conflict Detector → Priority Rule Engine → Error Handler → Performance Tracker → Dashboard Generator → Audit Logger (7 tools with complex interdependencies)

  **STEP 5 — Produce tools**

  ```json
  {
    "tool_name": "Platform Connector",
    "tool_description": "Establishes and tests connections to various e-commerce platforms using their APIs, validating credentials and checking connectivity status.",
    "parameters": {
      "platform_name": {
        "type": "string",
        "required": true,
        "description": "Name of the e-commerce platform (shopify, amazon, ebay, woocommerce, magento, etc.)"
      },
      "api_endpoint": {
        "type": "string",
        "required": true,
        "description": "Base URL for the platform's API endpoint"
      },
      "api_key": {
        "type": "string",
        "required": true,
        "description": "API key or access token for authentication"
      },
      "api_secret": {
        "type": "string",
        "required": false,
        "description": "API secret key if required by the platform",
        "default": null
      },
      "timeout_seconds": {
        "type": "integer",
        "required": false,
        "description": "Connection timeout in seconds (5-60)",
        "default": 30
      }
    },
    "error_messages": [
      "Invalid platform name: Platform must be one of the supported platforms (shopify, amazon, ebay, woocommerce, magento).",
      "Connection timeout: API endpoint is unreachable within the specified timeout. Check network connectivity and endpoint URL.",
      "Authentication failed: Invalid API credentials. Verify api_key and api_secret are correct and active.",
      "Rate limit exceeded: Too many connection attempts. Wait before retrying.",
      "Invalid timeout value: timeout_seconds must be between 5 and 60."
    ],
    "usage": "Provide platform_name, api_endpoint, and api_key. Include api_secret if the platform requires it. Adjust timeout_seconds if needed for slower networks.",
    "output_details": {
      "connection_id": {
        "type": "string",
        "description": "Unique identifier for the established connection"
      },
      "status": {
        "type": "string",
        "description": "Connection status: connected, failed, or timeout"
      },
      "platform_name": {
        "type": "string",
        "description": "Name of the connected platform"
      },
      "last_tested": {
        "type": "string",
        "description": "Timestamp when connection was last tested"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Inventory Fetcher",
    "tool_description": "Retrieves inventory data from connected e-commerce platforms, supporting various data formats and filtering options.",
    "parameters": {
      "connection_id": {
        "type": "string",
        "required": true,
        "description": "Connection ID from Platform Connector"
      },
      "product_ids": {
        "type": "array",
        "required": false,
        "description": "Specific product IDs to fetch (if empty, fetches all)",
        "items": {"type": "string"},
        "default": null
      },
      "include_variants": {
        "type": "boolean",
        "required": false,
        "description": "Whether to include product variants",
        "default": true
      },
      "date_modified_since": {
        "type": "string",
        "required": false,
        "description": "Only fetch products modified since this date",
        "format": "date-time",
        "default": null
      },
      "batch_size": {
        "type": "integer",
        "required": false,
        "description": "Number of products to fetch per API call (10-1000)",
        "default": 100
      }
    },
    "error_messages": [
      "Invalid connection ID: Connection not found or expired. Establish connection first using Platform Connector.",
      "API rate limit exceeded: Too many requests to the platform API. Reduce batch_size or add delays between calls.",
      "Platform API error: The platform returned an error. Check platform status and API permissions.",
      "Invalid batch size: batch_size must be between 10 and 1000.",
      "Invalid date format: date_modified_since must be in ISO 8601 format."
    ],
    "usage": "Provide a valid connection_id from Platform Connector. Optionally filter by product_ids or date_modified_since. Adjust batch_size based on platform limits.",
    "output_details": {
      "total_products": {
        "type": "integer",
        "description": "Total number of products retrieved"
      },
      "products": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Array of raw product data in JSON string format"
      },
      "fetch_timestamp": {
        "type": "string",
        "description": "When the data was fetched"
      },
      "platform_name": {
        "type": "string",
        "description": "Source platform name"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Data Normalizer",
    "tool_description": "Converts raw inventory data from different platforms into a standardized format for consistent processing across all channels.",
    "parameters": {
      "raw_data": {
        "type": "array",
        "required": true,
        "description": "Array of raw product data strings from Inventory Fetcher",
        "items": {"type": "string"}
      },
      "source_platform": {
        "type": "string",
        "required": true,
        "description": "Name of the source platform"
      },
      "mapping_rules": {
        "type": "array",
        "required": false,
        "description": "Custom field mapping rules in 'source_field:target_field' format",
        "items": {"type": "string"},
        "default": null
      }
    },
    "error_messages": [
      "Empty raw data: raw_data array cannot be empty.",
      "Invalid JSON format: One or more items in raw_data contains invalid JSON.",
      "Unsupported platform: source_platform is not supported for normalization.",
      "Invalid mapping rule format: mapping_rules must be in 'source_field:target_field' format.",
      "Missing required fields: Raw data is missing required fields for normalization."
    ],
    "usage": "Provide raw_data from Inventory Fetcher and specify source_platform. Use mapping_rules to customize field mapping if default mappings are insufficient.",
    "output_details": {
      "normalized_products": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Array of normalized product data in standard JSON format"
      },
      "processed_count": {
        "type": "integer",
        "description": "Number of successfully processed products"
      },
      "failed_count": {
        "type": "integer",
        "description": "Number of products that failed normalization"
      },
      "normalization_timestamp": {
        "type": "string",
        "description": "When normalization was completed"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "SKU Mapper",
    "tool_description": "Creates and maintains unified SKU mappings across multiple platforms to handle different product identifiers and ensure consistent inventory tracking.",
    "parameters": {
      "normalized_products": {
        "type": "array",
        "required": true,
        "description": "Array of normalized product data from Data Normalizer",
        "items": {"type": "string"}
      },
      "master_catalog": {
        "type": "array",
        "required": false,
        "description": "Existing master catalog SKUs for mapping reference",
        "items": {"type": "string"},
        "default": null
      },
      "auto_create_master": {
        "type": "boolean",
        "required": false,
        "description": "Whether to automatically create new master SKUs for unmapped products",
        "default": true
      },
      "mapping_strategy": {
        "type": "string",
        "required": false,
        "description": "Strategy for SKU mapping: exact_match, fuzzy_match, or barcode_match",
        "default": "exact_match"
      }
    },
    "error_messages": [
      "Empty product data: normalized_products array cannot be empty.",
      "Invalid product format: One or more normalized products have invalid format.",
      "Invalid mapping strategy: mapping_strategy must be exact_match, fuzzy_match, or barcode_match.",
      "Master catalog conflict: Conflicting SKU mappings found in master catalog.",
      "Missing product identifiers: Products missing required identifiers for mapping."
    ],
    "usage": "Provide normalized_products from Data Normalizer. Include master_catalog for existing SKU references. Choose appropriate mapping_strategy based on product data quality.",
    "output_details": {
      "sku_mappings": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Array of SKU mapping entries in 'platform_sku:master_sku' format"
      },
      "new_master_skus": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Newly created master SKUs"
      },
      "unmapped_products": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Products that could not be mapped"
      },
      "mapping_confidence": {
        "type": "number",
        "description": "Overall confidence score of mappings (0-1)"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Stock Level Validator",
    "tool_description": "Validates inventory stock levels for accuracy, consistency, and business rule compliance across all mapped products.",
    "parameters": {
      "inventory_data": {
        "type": "array",
        "required": true,
        "description": "Array of inventory records with stock levels",
        "items": {"type": "string"}
      },
      "validation_rules": {
        "type": "array",
        "required": false,
        "description": "Custom validation rules to apply",
        "items": {"type": "string"},
        "default": null
      },
      "min_stock_threshold": {
        "type": "integer",
        "required": false,
        "description": "Minimum acceptable stock level",
        "default": 0
      },
      "max_stock_threshold": {
        "type": "integer",
        "required": false,
        "description": "Maximum acceptable stock level",
        "default": 999999
      },
      "check_negative_stock": {
        "type": "boolean",
        "required": false,
        "description": "Whether to flag negative stock as error",
        "default": true
      },
      "tolerance_percentage": {
        "type": "number",
        "required": false,
        "description": "Acceptable variance percentage for cross-platform stock differences",
        "default": 5.0
      }
    },
    "error_messages": [
      "Empty inventory data: inventory_data array cannot be empty.",
      "Invalid stock values: Stock levels must be numeric values.",
      "Threshold conflict: min_stock_threshold cannot be greater than max_stock_threshold.",
      "Invalid tolerance percentage: tolerance_percentage must be between 0 and 100.",
      "Invalid validation rule format: Custom validation rules must follow the specified format."
    ],
    "usage": "Provide inventory_data with stock levels. Set appropriate thresholds and tolerance_percentage based on business requirements. Use validation_rules for custom checks.",
    "output_details": {
      "validation_summary": {
        "type": "string",
        "description": "Overall validation results summary"
      },
      "valid_records": {
        "type": "integer",
        "description": "Number of records that passed validation"
      },
      "invalid_records": {
        "type": "integer",
        "description": "Number of records that failed validation"
      },
      "validation_errors": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Detailed validation error messages"
      },
      "validation_timestamp": {
        "type": "string",
        "description": "When validation was performed"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Conflict Detector",
    "tool_description": "Identifies and analyzes inventory discrepancies and conflicts across multiple sales platforms by comparing stock levels, prices, and product information.",
    "parameters": {
      "platform_inventories": {
        "type": "array",
        "required": true,
        "description": "Array of inventory data from different platforms",
        "items": {"type": "string"}
      },
      "conflict_types": {
        "type": "array",
        "required": false,
        "description": "Types of conflicts to detect: stock_level, price, availability, product_info",
        "items": {"type": "string"},
        "default": ["stock_level", "price", "availability"]
      },
      "variance_threshold": {
        "type": "number",
        "required": false,
        "description": "Percentage threshold for considering differences as conflicts",
        "default": 10.0
      },
      "priority_platform": {
        "type": "string",
        "required": false,
        "description": "Platform to use as reference for conflict detection",
        "default": null
      },
      "ignore_minor_differences": {
        "type": "boolean",
        "required": false,
        "description": "Whether to ignore differences below variance_threshold",
        "default": true
      },
      "include_resolved": {
        "type": "boolean",
        "required": false,
        "description": "Whether to include previously resolved conflicts in results",
        "default": false
      },
      "sku_mappings": {
        "type": "array",
        "required": true,
        "description": "SKU mappings from SKU Mapper to match products across platforms",
        "items": {"type": "string"}
      }
    },
    "error_messages": [
      "Insufficient data: Need inventory data from at least 2 platforms to detect conflicts.",
      "Invalid conflict types: conflict_types must include valid options: stock_level, price, availability, product_info.",
      "Invalid variance threshold: variance_threshold must be between 0 and 100.",
      "Missing SKU mappings: sku_mappings are required to match products across platforms.",
      "Platform data mismatch: Cannot find matching products across platforms using provided SKU mappings."
    ],
    "usage": "Provide platform_inventories from multiple sources and sku_mappings from SKU Mapper. Configure conflict_types and variance_threshold based on business requirements.",
    "output_details": {
      "total_conflicts": {
        "type": "integer",
        "description": "Total number of conflicts detected"
      },
      "conflict_details": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Detailed conflict information in JSON format"
      },
      "severity_levels": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Conflict severity classifications: critical, high, medium, low"
      },
      "affected_platforms": {
        "type": "array",
        "items": {"type": "string"},
        "description": "List of platforms with conflicts"
      },
      "detection_timestamp": {
        "type": "string",
        "description": "When conflict detection was performed"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Priority Rule Engine",
    "tool_description": "Applies business rules and priority logic to resolve inventory conflicts by determining which platform or data source should take precedence based on configurable criteria.",
    "parameters": {
      "conflict_data": {
        "type": "array",
        "required": true,
        "description": "Conflict details from Conflict Detector",
        "items": {"type": "string"}
      },
      "platform_priorities": {
        "type": "array",
        "required": true,
        "description": "Platform priority rankings from highest to lowest",
        "items": {"type": "string"}
      },
      "resolution_rules": {
        "type": "array",
        "required": false,
        "description": "Custom resolution rules in priority order",
        "items": {"type": "string"},
        "default": ["newest_timestamp", "highest_stock", "priority_platform"]
      },
      "conflict_types_to_resolve": {
        "type": "array",
        "required": false,
        "description": "Specific conflict types to resolve",
        "items": {"type": "string"},
        "default": ["stock_level", "price", "availability"]
      },
      "auto_apply_resolutions": {
        "type": "boolean",
        "required": false,
        "description": "Whether to automatically apply resolutions or just recommend them",
        "default": false
      },
      "min_confidence_threshold": {
        "type": "number",
        "required": false,
        "description": "Minimum confidence level required to apply automatic resolutions",
        "default": 0.8
      },
      "preserve_manual_overrides": {
        "type": "boolean",
        "required": false,
        "description": "Whether to preserve manually set values from previous resolutions",
        "default": true
      }
    },
    "error_messages": [
      "Empty conflict data: conflict_data array cannot be empty.",
      "Invalid platform priorities: platform_priorities must contain at least one platform name.",
      "Unknown resolution rule: resolution_rules contains unsupported rule types.",
      "Invalid confidence threshold: min_confidence_threshold must be between 0 and 1.",
      "Circular priority conflict: Platform priorities contain circular dependencies."
    ],
    "usage": "Provide conflict_data from Conflict Detector and define platform_priorities. Configure resolution_rules based on business logic. Set auto_apply_resolutions carefully.",
    "output_details": {
      "resolution_decisions": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Detailed resolution decisions in JSON format"
      },
      "auto_applied_count": {
        "type": "integer",
        "description": "Number of resolutions automatically applied"
      },
      "manual_review_required": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Conflicts requiring manual review"
      },
      "confidence_scores": {
        "type": "array",
        "items": {"type": "number"},
        "description": "Confidence scores for each resolution decision"
      },
      "processing_timestamp": {
        "type": "string",
        "description": "When rule processing was completed"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Batch Updater",
    "tool_description": "Executes bulk inventory updates across multiple platforms simultaneously, handling API rate limits, retries, and transaction rollbacks for failed operations.",
    "parameters": {
      "update_instructions": {
        "type": "array",
        "required": true,
        "description": "Array of update instructions from Priority Rule Engine",
        "items": {"type": "string"}
      },
      "target_platforms": {
        "type": "array",
        "required": true,
        "description": "Platforms to update",
        "items": {"type": "string"}
      },
      "connection_ids": {
        "type": "array",
        "required": true,
        "description": "Platform connection IDs from Platform Connector",
        "items": {"type": "string"}
      },
      "batch_size": {
        "type": "integer",
        "required": false,
        "description": "Number of updates per batch",
        "default": 50
      },
      "retry_attempts": {
        "type": "integer",
        "required": false,
        "description": "Maximum retry attempts for failed updates",
        "default": 3
      },
      "retry_delay_seconds": {
        "type": "integer",
        "required": false,
        "description": "Delay between retry attempts",
        "default": 5
      },
      "rollback_on_failure": {
        "type": "boolean",
        "required": false,
        "description": "Whether to rollback batch if any update fails",
        "default": false
      },
      "validate_before_update": {
        "type": "boolean",
        "required": false,
        "description": "Whether to validate data before sending updates",
        "default": true
      },
      "parallel_execution": {
        "type": "boolean",
        "required": false,
        "description": "Whether to execute updates in parallel across platforms",
        "default": true
      },
      "dry_run": {
        "type": "boolean",
        "required": false,
        "description": "Whether to simulate updates without actually applying them",
        "default": false
      }
    },
    "error_messages": [
      "Empty update instructions: update_instructions array cannot be empty.",
      "Platform connection mismatch: Number of target_platforms must match connection_ids.",
      "Invalid connection ID: One or more connection_ids are invalid or expired.",
      "Batch size too large: batch_size exceeds platform API limits.",
      "Invalid retry configuration: retry_attempts must be 0-10, retry_delay_seconds must be 1-60.",
      "Update validation failed: One or more updates failed pre-execution validation."
    ],
    "usage": "Provide update_instructions from Priority Rule Engine, matching target_platforms with connection_ids. Configure batch_size and retry settings based on platform limits. Use dry_run for testing.",
    "output_details": {
      "total_updates_attempted": {
        "type": "integer",
        "description": "Total number of update operations attempted"
      },
      "successful_updates": {
        "type": "integer",
        "description": "Number of successful updates"
      },
      "failed_updates": {
        "type": "integer",
        "description": "Number of failed updates"
      },
      "platform_results": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Detailed results per platform in JSON format"
      },
      "execution_time_seconds": {
        "type": "number",
        "description": "Total execution time"
      },
      "update_timestamp": {
        "type": "string",
        "description": "When batch update was completed"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Real-time Sync Monitor",
    "tool_description": "Monitors real-time inventory changes across platforms using webhooks and polling, detecting sync delays and triggering alerts for immediate attention.",
    "parameters": {
      "monitored_platforms": {
        "type": "array",
        "required": true,
        "description": "Platforms to monitor for real-time changes",
        "items": {"type": "string"}
      },
      "connection_ids": {
        "type": "array",
        "required": true,
        "description": "Connection IDs for monitored platforms",
        "items": {"type": "string"}
      },
      "sync_tolerance_minutes": {
        "type": "integer",
        "required": false,
        "description": "Maximum acceptable delay for sync operations",
        "default": 15
      },
      "alert_threshold_count": {
        "type": "integer",
        "required": false,
        "description": "Number of sync failures before triggering alert",
        "default": 3
      },
      "monitoring_frequency_seconds": {
        "type": "integer",
        "required": false,
        "description": "How often to check for changes when webhooks unavailable",
        "default": 60
      }
    },
    "error_messages": [
      "Invalid platform configuration: monitored_platforms and connection_ids arrays must have same length.",
      "Connection unavailable: One or more connection_ids are not active.",
      "Invalid sync tolerance: sync_tolerance_minutes must be between 1 and 1440 (24 hours).",
      "Invalid monitoring frequency: monitoring_frequency_seconds must be between 10 and 3600.",
      "Alert threshold too low: alert_threshold_count must be at least 1."
    ],
    "usage": "Provide monitored_platforms with corresponding connection_ids. Set sync_tolerance_minutes and alert_threshold_count based on business requirements for sync responsiveness.",
    "output_details": {
      "monitoring_status": {
        "type": "string",
        "description": "Current monitoring status: active, paused, or error"
      },
      "sync_delays_detected": {
        "type": "integer",
        "description": "Number of sync delays detected in current session"
      },
      "alerts_triggered": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Active alerts requiring attention"
      },
      "last_sync_times": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Last successful sync timestamp for each platform"
      },
      "monitoring_start_time": {
        "type": "string",
        "description": "When monitoring session started"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Allocation Calculator",
    "tool_description": "Calculates optimal inventory allocation across sales channels based on available stock, channel priorities, historical performance, and business rules.",
    "parameters": {
      "available_stock": {
        "type": "array",
        "required": true,
        "description": "Current available stock levels by SKU",
        "items": {"type": "string"}
      },
      "channel_priorities": {
        "type": "array",
        "required": true,
        "description": "Sales channel priority rankings",
        "items": {"type": "string"}
      },
      "historical_sales_data": {
        "type": "array",
        "required": false,
        "description": "Historical sales performance by channel",
        "items": {"type": "string"},
        "default": null
      },
      "minimum_allocations": {
        "type": "array",
        "required": false,
        "description": "Minimum stock requirements per channel",
        "items": {"type": "string"},
        "default": null
      },
      "allocation_strategy": {
        "type": "string",
        "required": false,
        "description": "Strategy: proportional, priority_based, performance_based, or balanced",
        "default": "balanced"
      },
      "safety_stock_percentage": {
        "type": "number",
        "required": false,
        "description": "Percentage of stock to reserve as safety buffer",
        "default": 10.0
      },
      "rebalance_frequency_hours": {
        "type": "integer",
        "required": false,
        "description": "How often to recalculate allocations",
        "default": 24
      }
    },
    "error_messages": [
      "Empty stock data: available_stock array cannot be empty.",
      "Invalid channel priorities: channel_priorities must contain at least one channel.",
      "Invalid allocation strategy: allocation_strategy must be proportional, priority_based, performance_based, or balanced.",
      "Invalid safety stock percentage: safety_stock_percentage must be between 0 and 50.",
      "Insufficient stock: Available stock is insufficient to meet minimum allocations."
    ],
    "usage": "Provide available_stock and channel_priorities. Include historical_sales_data for performance-based strategies. Set minimum_allocations for critical channels.",
    "output_details": {
      "allocation_plan": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Detailed allocation plan by SKU and channel"
      },
      "total_allocated_units": {
        "type": "integer",
        "description": "Total units allocated across all channels"
      },
      "safety_stock_reserved": {
        "type": "integer",
        "description": "Units reserved as safety stock"
      },
      "unallocated_stock": {
        "type": "integer",
        "description": "Remaining unallocated stock"
      },
      "calculation_timestamp": {
        "type": "string",
        "description": "When allocation calculation was performed"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Reserve Manager",
    "tool_description": "Manages inventory reservations for pending orders, holds, and pre-orders to prevent overselling while maintaining accurate available-to-sell quantities.",
    "parameters": {
      "reservation_requests": {
        "type": "array",
        "required": true,
        "description": "Array of reservation requests with SKU, quantity, and duration",
        "items": {"
