field_name: digital_signature_and_certificates
subfield: Digital Document Signing
task: Certificate verification and chain validation
tool_description: "## STEP 1 — Rate task difficulty\n\nThis task is **hard** due to the complexity of cryptographic protocols, multiple interdependent validation steps (certificate chains, revocation status, trust anchors), strict security requirements where errors could compromise system integrity, and the need to handle various certificate formats and validation algorithms.\n\n## STEP 2 — Set a tool budget\n\nGiven the hard difficulty rating, I'm targeting **17 tools** to cover certificate parsing, chain building, cryptographic validation, revocation checking, trust store management, and comprehensive validation workflows.\n\n## STEP 3 — List all tool names and dependencies\n\n**Tools and their data flow:**\n1. **Certificate Parser** - Consumes: raw certificate data → Produces: parsed certificate fields\n2. **Certificate Chain Builder** - Consumes: target certificate, certificate store → Produces: ordered certificate chain\n3. **Cryptographic Signature Verifier** - Consumes: certificate, public key, signature → Produces: signature validity\n4. **Certificate Validity Checker** - Consumes: certificate, current time → Produces: validity status\n5. **CRL Fetcher** - Consumes: CRL URL → Produces: certificate revocation list\n6. **OCSP Client** - Consumes: certificate, issuer info → Produces: revocation status\n7. **Trust Anchor Manager** - Consumes: root certificates → Produces: trusted root store\n8. **Certificate Extension Analyzer** - Consumes: certificate extensions → Produces: extension validation results\n9. **Key Usage Validator** - Consumes: certificate, intended usage → Produces: usage compatibility\n10. **Certificate Path Validator** - Consumes: certificate chain, constraints → Produces: path validation result\n11. **Name Constraint Checker** - Consumes: certificate chain, name constraints → Produces: constraint compliance\n12. **Policy Validator** - Consumes: certificate policies, policy mappings → Produces: policy validation result\n13. **Revocation Status Aggregator** - Consumes: multiple revocation responses → Produces: consolidated status\n14. **Certificate Store Manager** - Consumes: certificates, store operations → Produces: managed certificate store\n15. **Chain Validation Orchestrator** - Consumes: all validation results → Produces: final validation decision\n16. **Certificate Fingerprint Generator** - Consumes: certificate data → Produces: cryptographic fingerprints\n17. **Trust Path Analyzer** - Consumes: certificate chain, trust anchors → Produces: trust path analysis\n\n## STEP 4 — Multi-tool plans\n\n**Simple Plans:**\n- **Basic Certificate Validation:** Certificate Parser → Certificate Validity Checker → Cryptographic Signature Verifier\n- **Fingerprint Verification:** Certificate Parser → Certificate Fingerprint Generator\n\n**Medium Plans:**\n- **Revocation Check Workflow:** Certificate Parser → CRL Fetcher → OCSP Client → Revocation Status Aggregator\n- **Trust Store Setup:** Trust Anchor Manager → Certificate Store Manager → Certificate Fingerprint Generator\n- **Extension Analysis:** Certificate Parser → Certificate Extension Analyzer → Key Usage Validator\n\n**Complex Plans:**\n- **Full Chain Validation:** Certificate Parser → Certificate Chain Builder → Trust Anchor Manager → Certificate Path Validator → Name Constraint Checker → Policy Validator → Chain Validation Orchestrator\n- **Complete Certificate Verification:** All tools orchestrated for comprehensive validation including chain building, cryptographic verification, revocation checking, policy validation, and trust path analysis\n\n## STEP 5 — Produce tools\n\n```json\n{\n  \"tool_name\": \"Certificate Parser\",\n  \"tool_description\": \"Parses X.509 certificates from various formats (PEM, DER, PKCS#7) and extracts key certificate fields including subject, issuer, validity dates, extensions, and public key information.\",\n  \"parameters\": {\n    \"certificate_data\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Raw certificate data in PEM, DER (base64), or PKCS#7 format\"\n    },\n    \"format\"\
  : {\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"Certificate format: PEM, DER, or PKCS7\",\n      \"default\": \"PEM\"\n    }\n  },\n  \"error_messages\": [\n    \"Invalid certificate format: Ensure certificate_data is properly formatted PEM, DER, or PKCS#7.\",\n    \"Unsupported format: Format must be one of [PEM, DER, PKCS7].\",\n    \"Malformed certificate data: Certificate data appears to be corrupted or incomplete.\"\n  ],\n  \"usage\": \"Provide certificate_data as a string and optionally specify format. Returns parsed certificate information including all standard X.509 fields.\",\n  \"output_details\": {\n    \"subject\": {\n      \"type\": \"string\",\n      \"description\": \"Certificate subject distinguished name\"\n    },\n    \"issuer\": {\n      \"type\": \"string\", \n      \"description\": \"Certificate issuer distinguished name\"\n    },\n    \"serial_number\": {\n      \"type\": \"string\",\n      \"description\": \"Certificate serial number in hexadecimal\"\n    },\n    \"not_before\": {\n      \"type\": \"string\",\n      \"description\": \"Certificate validity start date\",\n      \"format\": \"date-time\"\n    },\n    \"not_after\": {\n      \"type\": \"string\",\n      \"description\": \"Certificate validity end date\",\n      \"format\": \"date-time\"\n    },\n    \"public_key_algorithm\": {\n      \"type\": \"string\",\n      \"description\": \"Public key algorithm name\"\n    },\n    \"signature_algorithm\": {\n      \"type\": \"string\",\n      \"description\": \"Certificate signature algorithm\"\n    },\n    \"extensions\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"string\"\n      },\n      \"description\": \"List of certificate extension OIDs\"\n    }\n  }\n}\n```\n\n```json\n{\n  \"tool_name\": \"Certificate Chain Builder\",\n  \"tool_description\": \"Constructs a complete certificate chain from a target certificate up to a trusted root by searching through provided certificate stores and attempting to fetch missing intermediate certificates.\",\n  \"parameters\": {\n    \"target_certificate\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"The end-entity certificate for which to build a chain\"\n    },\n    \"intermediate_certificates\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Array of intermediate certificates to consider for chain building\",\n      \"default\": \"None\"\n    },\n    \"trusted_roots\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Array of trusted root certificates\"\n    },\n    \"fetch_missing\": {\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Whether to attempt fetching missing intermediate certificates via AIA extension\",\n      \"default\": true\n    },\n    \"max_chain_length\": {\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"Maximum allowed certificate chain length (1-20)\",\n      \"default\": 10\n    }\n  },\n  \"error_messages\": [\n    \"Invalid target certificate: Target certificate is malformed or cannot be parsed.\",\n    \"Chain building failed: Unable to construct a valid chain to any trusted root.\",\n    \"Maximum chain length exceeded: Chain length exceeds max_chain_length parameter.\",\n    \"Invalid trusted roots: One or more trusted root certificates are invalid.\",\n    \"Network error during fetch: Failed to retrieve intermediate certificates from AIA URLs.\"\n  ],\n  \"usage\": \"Provide target_certificate and trusted_roots array. Optionally include intermediate_certificates and configure fetch_missing and max_chain_length. Returns ordered certificate chain from target to root.\",\n  \"output_details\": {\n    \"chain\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"string\"\n      },\n      \"description\": \"Ordered certificate chain from end-entity\
  \ to root\"\n    },\n    \"chain_length\": {\n      \"type\": \"integer\",\n      \"description\": \"Number of certificates in the chain\"\n    },\n    \"root_found\": {\n      \"type\": \"boolean\",\n      \"description\": \"Whether a trusted root was found\"\n    },\n    \"missing_certificates\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"string\"\n      },\n      \"description\": \"List of certificate subjects that could not be found\"\n    }\n  }\n}\n```\n\n```json\n{\n  \"tool_name\": \"Cryptographic Signature Verifier\",\n  \"tool_description\": \"Verifies cryptographic signatures on certificates using the appropriate algorithm and public key, supporting RSA, ECDSA, and DSA signature schemes with various hash functions.\",\n  \"parameters\": {\n    \"certificate\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Certificate whose signature needs verification\"\n    },\n    \"issuer_public_key\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Public key of the certificate issuer in PEM format\"\n    },\n    \"signature_algorithm\": {\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"Signature algorithm to use if not auto-detected from certificate\",\n      \"default\": \"None\"\n    }\n  },\n  \"error_messages\": [\n    \"Invalid certificate: Certificate data is malformed or cannot be parsed.\",\n    \"Invalid public key: Issuer public key is malformed or unsupported format.\",\n    \"Signature verification failed: Cryptographic signature does not match certificate data.\",\n    \"Unsupported algorithm: Signature algorithm is not supported.\",\n    \"Key algorithm mismatch: Public key algorithm does not match signature algorithm.\"\n  ],\n  \"usage\": \"Provide certificate and issuer_public_key. Optionally specify signature_algorithm to override auto-detection. Returns signature verification result and details.\",\n  \"output_details\": {\n    \"signature_valid\": {\n      \"type\": \"boolean\",\n      \"description\": \"Whether the cryptographic signature is valid\"\n    },\n    \"algorithm_used\": {\n      \"type\": \"string\",\n      \"description\": \"Signature algorithm that was used for verification\"\n    },\n    \"hash_algorithm\": {\n      \"type\": \"string\",\n      \"description\": \"Hash algorithm used in the signature\"\n    },\n    \"key_size\": {\n      \"type\": \"integer\",\n      \"description\": \"Size of the public key in bits\"\n    }\n  }\n}\n```\n\n```json\n{\n  \"tool_name\": \"Certificate Validity Checker\",\n  \"tool_description\": \"Validates certificate time-based validity by checking if the current time or specified time falls within the certificate's validity period (not before and not after dates).\",\n  \"parameters\": {\n    \"certificate\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Certificate to check for time validity\"\n    },\n    \"validation_time\": {\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"Specific time to validate against (ISO 8601 format)\",\n      \"format\": \"date-time\",\n      \"default\": \"None\"\n    },\n    \"clock_skew_tolerance\": {\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"Clock skew tolerance in seconds (0-3600)\",\n      \"default\": 300\n    }\n  },\n  \"error_messages\": [\n    \"Invalid certificate: Certificate data cannot be parsed or is malformed.\",\n    \"Invalid validation time: Validation time must be in valid ISO 8601 format.\",\n    \"Clock skew tolerance out of range: Must be between 0 and 3600 seconds.\",\n    \"Certificate validity dates malformed: Certificate contains invalid not_before or not_after dates.\"\n  ],\n  \"usage\": \"Provide certificate to validate. Optionally specify validation_time (defaults to current time) and clock_skew_tolerance. Returns validity status and timing information.\",\n  \"output_details\": {\n    \"is_valid\": {\n      \"type\": \"boolean\",\n      \"description\"\
  : \"Whether certificate is valid at the specified time\"\n    },\n    \"not_before\": {\n      \"type\": \"string\",\n      \"description\": \"Certificate validity start time\",\n      \"format\": \"date-time\"\n    },\n    \"not_after\": {\n      \"type\": \"string\",\n      \"description\": \"Certificate validity end time\",\n      \"format\": \"date-time\"\n    },\n    \"days_until_expiry\": {\n      \"type\": \"integer\",\n      \"description\": \"Number of days until certificate expires (negative if expired)\"\n    },\n    \"validation_time_used\": {\n      \"type\": \"string\",\n      \"description\": \"The actual time used for validation\",\n      \"format\": \"date-time\"\n    }\n  }\n}\n```\n\n```json\n{\n  \"tool_name\": \"CRL Fetcher\",\n  \"tool_description\": \"Retrieves and parses Certificate Revocation Lists (CRLs) from specified URLs or from certificate CRL distribution points, with caching and validation capabilities.\",\n  \"parameters\": {\n    \"crl_url\": {\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"Direct URL to fetch CRL from\",\n      \"default\": \"None\"\n    },\n    \"certificate\": {\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"Certificate containing CRL distribution points to fetch from\",\n      \"default\": \"None\"\n    },\n    \"timeout_seconds\": {\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"HTTP request timeout in seconds (1-300)\",\n      \"default\": 30\n    },\n    \"use_cache\": {\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Whether to use cached CRL if available and not expired\",\n      \"default\": true\n    },\n    \"validate_crl\": {\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Whether to validate CRL signature and dates\",\n      \"default\": true\n    }\n  },\n  \"error_messages\": [\n    \"No CRL source specified: Must provide either crl_url or certificate with CRL distribution points.\",\n    \"CRL fetch failed: Unable to retrieve CRL from specified URL(s) within timeout period.\",\n    \"Invalid CRL format: Retrieved data is not a valid CRL format.\",\n    \"CRL validation failed: CRL signature or validity dates are invalid.\",\n    \"Timeout out of range: Timeout must be between 1 and 300 seconds.\",\n    \"Network error: Unable to establish connection to CRL endpoint.\"\n  ],\n  \"usage\": \"Provide either crl_url for direct fetch or certificate with CRL distribution points. Configure timeout, caching, and validation options as needed. Returns CRL data and metadata.\",\n  \"output_details\": {\n    \"crl_data\": {\n      \"type\": \"string\",\n      \"description\": \"The retrieved CRL in PEM format\"\n    },\n    \"issuer\": {\n      \"type\": \"string\",\n      \"description\": \"CRL issuer distinguished name\"\n    },\n    \"this_update\": {\n      \"type\": \"string\",\n      \"description\": \"CRL issue date\",\n      \"format\": \"date-time\"\n    },\n    \"next_update\": {\n      \"type\": \"string\",\n      \"description\": \"Next scheduled CRL update\",\n      \"format\": \"date-time\"\n    },\n    \"revoked_certificates\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"string\"\n      },\n      \"description\": \"List of revoked certificate serial numbers\"\n    },\n    \"crl_number\": {\n      \"type\": \"integer\",\n      \"description\": \"CRL sequence number\"\n    },\n    \"from_cache\": {\n      \"type\": \"boolean\",\n      \"description\": \"Whether CRL was retrieved from cache\"\n    }\n  }\n}\n```\n\n```json\n{\n  \"tool_name\": \"OCSP Client\",\n  \"tool_description\": \"Performs Online Certificate Status Protocol (OCSP) requests to check real-time certificate revocation status, with support for OCSP responder discovery and request signing.\",\n  \"parameters\": {\n    \"certificate\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Certificate to check revocation status for\"\n    },\n    \"issuer_certificate\"\
  : {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Issuer certificate needed for OCSP request\"\n    },\n    \"ocsp_url\": {\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"OCSP responder URL (auto-discovered from certificate if not provided)\",\n      \"default\": \"None\"\n    },\n    \"timeout_seconds\": {\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"OCSP request timeout in seconds (1-120)\",\n      \"default\": 10\n    },\n    \"nonce\": {\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Whether to include nonce in OCSP request for replay protection\",\n      \"default\": true\n    },\n    \"validate_response_signature\": {\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Whether to validate OCSP response signature\",\n      \"default\": true\n    }\n  },\n  \"error_messages\": [\n    \"Invalid certificate: Certificate data is malformed or cannot be parsed.\",\n    \"Invalid issuer certificate: Issuer certificate is malformed or cannot be parsed.\",\n    \"OCSP URL not found: No OCSP responder URL in certificate and none provided.\",\n    \"OCSP request failed: Unable to reach OCSP responder or request timed out.\",\n    \"Invalid OCSP response: Response is malformed or cannot be parsed.\",\n    \"OCSP response signature invalid: Response signature verification failed.\",\n    \"Timeout out of range: Timeout must be between 1 and 120 seconds.\"\n  ],\n  \"usage\": \"Provide certificate and issuer_certificate. Optionally specify ocsp_url, timeout, and validation options. Returns OCSP response with certificate status.\",\n  \"output_details\": {\n    \"cert_status\": {\n      \"type\": \"string\",\n      \"description\": \"Certificate status: good, revoked, or unknown\"\n    },\n    \"response_time\": {\n      \"type\": \"string\",\n      \"description\": \"OCSP response production time\",\n      \"format\": \"date-time\"\n    },\n    \"next_update\": {\n      \"type\": \"string\",\n      \"description\": \"Time when response information will be updated\",\n      \"format\": \"date-time\"\n    },\n    \"revocation_time\": {\n      \"type\": \"string\",\n      \"description\": \"Time of revocation if certificate is revoked\",\n      \"format\": \"date-time\"\n    },\n    \"revocation_reason\": {\n      \"type\": \"string\",\n      \"description\": \"Reason for revocation if applicable\"\n    },\n    \"responder_id\": {\n      \"type\": \"string\",\n      \"description\": \"OCSP responder identifier\"\n    },\n    \"signature_valid\": {\n      \"type\": \"boolean\",\n      \"description\": \"Whether OCSP response signature is valid\"\n    }\n  }\n}\n```\n\n```json\n{\n  \"tool_name\": \"Trust Anchor Manager\",\n  \"tool_description\": \"Manages trusted root certificate stores by loading, validating, and organizing root certificates with support for multiple trust store formats and trust policy configuration.\",\n  \"parameters\": {\n    \"root_certificates\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Array of root certificates to add to trust store\"\n    },\n    \"store_format\": {\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"Trust store format: PEM, PKCS12, or JKS\",\n      \"default\": \"PEM\"\n    },\n    \"validate_roots\": {\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Whether to validate root certificate self-signatures\",\n      \"default\": true\n    },\n    \"allow_duplicates\": {\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Whether to allow duplicate certificates in trust store\",\n      \"default\": false\n    },\n    \"trust_policy\": {\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"Trust policy: strict, standard, or permissive\",\n      \"default\": \"standard\"\n    }\n  },\n  \"error_messages\"\
  : [\n    \"Empty root certificate list: Must provide at least one root certificate.\",\n    \"Invalid root certificate: One or more root certificates are malformed or invalid.\",\n    \"Unsupported store format: Format must be one of [PEM, PKCS12, JKS].\",\n    \"Root validation failed: One or more root certificates failed self-signature validation.\",\n    \"Invalid trust policy: Policy must be one of [strict, standard, permissive].\",\n    \"Duplicate certificate detected: Duplicate root certificate found when allow_duplicates is false.\"\n  ],\n  \"usage\": \"Provide array of root_certificates to establish trust store. Configure store_format, validation options, and trust_policy as needed. Returns organized trust store information.\",\n  \"output_details\": {\n    \"trust_store_id\": {\n      \"type\": \"string\",\n      \"description\": \"Unique identifier for the created trust store\"\n    },\n    \"root_count\": {\n      \"type\": \"integer\",\n      \"description\": \"Number of root certificates in trust store\"\n    },\n    \"valid_roots\": {\n      \"type\": \"integer\",\n      \"description\": \"Number of roots that passed validation\"\n    },\n    \"invalid_roots\": {\n      \"type\": \"integer\",\n      \"description\": \"Number of roots that failed validation\"\n    },\n    \"root_subjects\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"string\"\n      },\n      \"description\": \"Subject names of all root certificates\"\n    },\n    \"trust_policy_applied\": {\n      \"type\": \"string\",\n      \"description\": \"The trust policy that was applied\"\n    },\n    \"creation_time\": {\n      \"type\": \"string\",\n      \"description\": \"Trust store creation timestamp\",\n      \"format\": \"date-time\"\n    }\n  }\n}\n```\n\n```json\n{\n  \"tool_name\": \"Certificate Extension Analyzer\",\n  \"tool_description\": \"Analyzes and validates X.509 certificate extensions including key usage, extended key usage, basic constraints, subject alternative names, and custom extensions with criticality checking.\",\n  \"parameters\": {\n    \"certificate\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Certificate containing extensions to analyze\"\n    },\n    \"required_extensions\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"List of extension OIDs that must be present\",\n      \"default\": \"None\"\n    },\n    \"forbidden_extensions\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"List of extension OIDs that must not be present\",\n      \"default\": \"None\"\n    },\n    \"check_criticality\": {\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Whether to validate critical extension handling\",\n      \"default\": true\n    },\n    \"validate_constraints\": {\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Whether to validate basic constraints for CA certificates\",\n      \"default\": true\n    },\n    \"analyze_key_usage\": {\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Whether to analyze key usage and extended key usage\",\n      \"default\": true\n    }\n  },\n  \"error_messages\": [\n    \"Invalid certificate: Certificate data cannot be parsed or is malformed.\",\n    \"Required extension missing: One or more required extensions are not present in certificate.\",\n    \"Forbidden extension present: Certificate contains extensions that are not allowed.\",\n    \"Critical extension unrecognized: Certificate contains critical extensions that cannot be processed.\",\n    \"Invalid extension format: One or more extensions have malformed data.\",\n    \"Constraint violation: Certificate violates basic constraints or other extension constraints.\"\n  ],\n  \"usage\": \"Provide certificate to analyze. Optionally specify required_extensions, forbidden_extensions,\
  \ and validation options. Returns detailed extension analysis results.\",\n  \"output_details\": {\n    \"extensions_present\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"string\"\n      },\n      \"description\": \"List of extension OIDs found in certificate\"\n    },\n    \"critical_extensions\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"string\"\n      },\n      \"description\": \"List of extensions marked as critical\"\n    },\n    \"key_usage\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"string\"\n      },\n      \"description\": \"Key usage flags present in certificate\"\n    },\n    \"extended_key_usage\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"string\"\n      },\n      \"description\": \"Extended key usage purposes\"\n    },\n    \"is_ca\": {\n      \"type\": \"boolean\",\n      \"description\": \"Whether certificate is marked as a CA certificate\"\n    },\n    \"path_length\": {\n      \"type\": \"integer\",\n      \"description\": \"Maximum certification path length for CA certificates\"\n    },\n    \"subject_alt_names\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"string\"\n      },\n      \"description\": \"Subject alternative names present\"\n    },\n    \"validation_errors\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"string\"\n      },\n      \"description\": \"List of extension validation errors found\"\n    }\n  }\n}\n```\n\n```json\n{\n  \"tool_name\": \"Key Usage Validator\",\n  \"tool_description\": \"Validates that certificate key usage and extended key usage extensions are appropriate for the intended cryptographic operations and certificate purposes.\",\n  \"parameters\": {\n    \"certificate\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Certificate to validate key usage for\"\n    },\n    \"intended_usage\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"List of intended key usages to validate against\"\n    },\n    \"strict_validation\": {\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Whether to apply strict key usage validation rules\",\n      \"default\": true\n    }\n  },\n  \"error_messages\": [\n    \"Invalid certificate: Certificate data cannot be parsed or contains no key usage extensions.\",\n    \"Key usage mismatch: Certificate key usage does not permit intended operations.\",\n    \"Invalid intended usage: One or more intended usage values are not recognized.\",\n    \"Missing key usage extension: Certificate lacks required key usage extension for validation.\",\n    \"Extended key usage conflict: Extended key usage conflicts with basic key usage.\"\n  ],\n  \"usage\": \"Provide certificate and intended_usage array with operations you want to validate. Set strict_validation for enforcement level. Returns usage compatibility results.\",\n  \"output_details\": {\n    \"usage_valid\": {\n      \"type\": \"boolean\",\n      \"description\": \"Whether certificate supports all intended usages\"\n    },\n    \"supported_usages\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"string\"\n      },\n      \"description\": \"Key usages supported by the certificate\"\n    },\n    \"unsupported_usages\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"string\"\n      },\n      \"description\": \"Requested usages not supported by certificate\"\n    },\n    \"key_usage_flags\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"string\"\n      },\n      \"description\": \"Key usage flags present in certificate\"\n    },\n    \"extended_key_usage\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"string\"\n      },\n      \"description\": \"Extended key usage OIDs present in certificate\"\n    }\n  }\n}\n```\n\n```json\n{\n  \"tool_name\": \"Certificate Path Validator\",\n\
  \  \"tool_description\": \"Performs comprehensive certificate path validation according to RFC 5280, including signature verification, validity periods, name chaining, and constraint processing for complete certificate chains.\",\n  \"parameters\": {\n    \"certificate_chain\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Certificate chain from end-entity to root certificate\",\n      \"minItems\": 1,\n      \"maxItems\": 20\n    },\n    \"trusted_roots\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Array of trusted root certificates\"\n    },\n    \"validation_time\": {\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"Time for path validation (ISO 8601 format)\",\n      \"format\": \"date-time\",\n      \"default\": \"None\"\n    },\n    \"check_revocation\": {\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Whether to perform revocation checking during path validation\",\n      \"default\": true\n    },\n    \"max_path_length\": {\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"Maximum allowed certificate path length (1-20)\",\n      \"default\": 10\n    },\n    \"policy_checking\": {\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Whether to perform certificate policy validation\",\n      \"default\": false\n    },\n    \"explicit_policy\": {\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Whether to require explicit policy in end certificate\",\n      \"default\": false\n    },\n    \"inhibit_policy_mapping\": {\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Whether to inhibit policy mapping\",\n      \"default\": false\n    },\n    \"inhibit_any_policy\": {\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Whether to inhibit any-policy\",\n      \"default\": false\n    },\n    \"user_initial_policy_set\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Set of certificate policy OIDs acceptable to user\",\n      \"default\": \"None\"\n    }\n  },\n  \"error_messages\": [\n    \"Invalid certificate chain: One or more certificates in chain are malformed.\",\n    \"Path validation failed: Certificate chain does not form a valid trust path.\",\n    \"No trusted root found: Chain does not terminate at any provided trusted root.\",\n    \"Signature verification failed: One or more certificate signatures are invalid.\",\n    \"Certificate expired: One or more certificates in chain are outside validity period.\",\n    \"Path length exceeded: Certificate chain exceeds maximum allowed path length.\",\n    \"Name chaining error: Certificate issuer/subject names do not chain properly.\",\n    \"Constraint violation: Certificate violates name constraints or other path constraints.\",\n    \"Policy validation failed: Certificate chain fails policy validation requirements.\"\n  ],\n  \"usage\": \"Provide certificate_chain and trusted_roots arrays. Configure validation parameters including timing, revocation checking, and policy requirements. Returns comprehensive path validation results.\",\n  \"output_details\": {\n    \"path_valid\": {\n      \"type\": \"boolean\",\n      \"description\": \"Whether the certificate path is valid\"\n    },\n    \"validation_errors\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"string\"\n      },\n      \"description\": \"List of validation errors encountered\"\n    },\n    \"trusted_root\": {\n      \"type\": \"string\",\n      \"description\": \"Subject name of the trusted root certificate used\"\n    },\n    \"effective_policy_set\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"string\"\n      },\n      \"description\"\
  : \"Set of policies valid for the end certificate\"\n    },\n    \"path_length\": {\n      \"type\": \"integer\","
