field_name: metrology_and_calibration
subfield: electrical_instrument_calibration
task: Oscilloscope calibration and performance validation
tool_description: |-
  ## STEP 1 — Rate task difficulty

  This task is **hard** due to the high precision requirements, complex multi-parameter interdependencies across frequency/amplitude/time domains, stringent compliance standards, specialized equipment needs, and critical impact of measurement errors on downstream applications.

  ## STEP 2 — Set a tool budget

  Given the hard difficulty rating, I'm targeting **17 tools** to cover the comprehensive workflow from initial setup through final certification.

  ## STEP 3 — List all tool names and dependencies

  **Tools and their data flow:**
  1. **Signal Generator Controller** → produces calibrated test signals
  2. **Oscilloscope Connection Validator** → consumes connection configs, produces validation status
  3. **Frequency Response Analyzer** → consumes test signals, produces frequency characteristics
  4. **Amplitude Accuracy Tester** → consumes reference signals, produces amplitude measurements
  5. **Time Base Calibrator** → consumes timing references, produces time base corrections
  6. **Bandwidth Measurement Tool** → consumes swept signals, produces bandwidth specs
  7. **Rise Time Analyzer** → consumes step signals, produces rise time metrics
  8. **Trigger Performance Validator** → consumes trigger configs, produces trigger accuracy data
  9. **Channel Isolation Tester** → consumes multi-channel signals, produces crosstalk measurements
  10. **Noise Floor Analyzer** → consumes baseline signals, produces noise characteristics
  11. **Linearity Assessment Tool** → consumes varied amplitude signals, produces linearity metrics
  12. **Temperature Drift Monitor** → consumes environmental data, produces drift measurements
  13. **Measurement Uncertainty Calculator** → consumes all measurement data, produces uncertainty estimates
  14. **Calibration Data Logger** → consumes all test results, produces structured calibration records
  15. **Compliance Report Generator** → consumes calibration records, produces certification reports
  16. **Calibration Certificate Creator** → consumes validated results, produces official certificates
  17. **Performance Trend Analyzer** → consumes historical data, produces trend analysis

  ## STEP 4 — Multi-tool plans

  **Simple Plans:**
  - Basic amplitude check: Signal Generator Controller + Amplitude Accuracy Tester + Calibration Data Logger
  - Quick connection verification: Oscilloscope Connection Validator + Calibration Data Logger

  **Medium Plans:**
  - Frequency domain validation: Signal Generator Controller + Frequency Response Analyzer + Bandwidth Measurement Tool + Measurement Uncertainty Calculator + Calibration Data Logger
  - Time domain assessment: Time Base Calibrator + Rise Time Analyzer + Trigger Performance Validator + Measurement Uncertainty Calculator + Calibration Data Logger

  **Complex Plans:**
  - Full calibration workflow: All 17 tools in sequence for complete oscilloscope certification
  - Performance validation suite: Signal Generator Controller + Frequency Response Analyzer + Amplitude Accuracy Tester + Time Base Calibrator + Bandwidth Measurement Tool + Rise Time Analyzer + Channel Isolation Tester + Noise Floor Analyzer + Linearity Assessment Tool + Measurement Uncertainty Calculator + Calibration Data Logger + Compliance Report Generator

  ## STEP 5 — Produce tools

  ```json
  {
    "tool_name": "Signal Generator Controller",
    "tool_description": "Controls precision signal generators to produce calibrated test signals with specified frequency, amplitude, and waveform characteristics for oscilloscope calibration procedures.",
    "parameters": {
      "generator_model": {
        "type": "string",
        "required": true,
        "description": "Model identifier of the signal generator being used"
      },
      "frequency_hz": {
        "type": "number",
        "required": true,
        "description": "Output frequency in Hz (0.1 to 1000000000)"
      },
      "amplitude_volts": {
        "type": "number",
        "required": true,
        "description": "Peak-to-peak amplitude in volts (0.001 to 50)"
      },
      "waveform_type": {
        "type": "string",
        "required": true,
        "description": "Waveform shape: sine, square, triangle, pulse, ramp"
      },
      "output_impedance": {
        "type": "number",
        "required": false,
        "default": 50,
        "description": "Output impedance in ohms (50 or 75 typical)"
      }
    },
    "error_messages": [
      "Invalid frequency range: Frequency must be between 0.1 Hz and 1 GHz for the specified generator model.",
      "Amplitude out of bounds: Amplitude must be between 1 mV and 50 V peak-to-peak.",
      "Unsupported waveform: Waveform type must be one of [sine, square, triangle, pulse, ramp].",
      "Generator communication failed: Check physical connections and power status of signal generator.",
      "Impedance mismatch: Output impedance must match connected load (typically 50Ω or 75Ω)."
    ],
    "usage": "Set generator_model, frequency_hz, amplitude_volts, and waveform_type. Optionally specify output_impedance. Ensures signal generator produces stable, calibrated output for oscilloscope testing.",
    "output_details": {
      "signal_stable": {
        "type": "boolean",
        "description": "Indicates if the generated signal has stabilized"
      },
      "actual_frequency": {
        "type": "number",
        "description": "Measured output frequency in Hz"
      },
      "actual_amplitude": {
        "type": "number",
        "description": "Measured output amplitude in volts peak-to-peak"
      },
      "phase_noise_dbc": {
        "type": "number",
        "description": "Phase noise measurement in dBc/Hz at 10kHz offset"
      },
      "harmonic_distortion_percent": {
        "type": "number",
        "description": "Total harmonic distortion as percentage"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Oscilloscope Connection Validator",
    "tool_description": "Validates physical and electrical connections between calibration equipment and oscilloscope channels, ensuring proper impedance matching and signal integrity.",
    "parameters": {
      "oscilloscope_model": {
        "type": "string",
        "required": true,
        "description": "Model identifier of oscilloscope under calibration"
      },
      "channel_number": {
        "type": "integer",
        "required": true,
        "description": "Channel number to validate (1 to 8 typical)"
      },
      "probe_type": {
        "type": "string",
        "required": true,
        "description": "Type of probe connected: passive_10x, passive_1x, active_single, active_differential"
      }
    },
    "error_messages": [
      "Invalid channel number: Channel must be within the supported range for the oscilloscope model.",
      "Probe type mismatch: Probe type must be one of [passive_10x, passive_1x, active_single, active_differential].",
      "Connection not detected: No signal detected on specified channel, check cable connections.",
      "Impedance mismatch detected: Probe impedance does not match oscilloscope input specifications.",
      "Oscilloscope communication error: Cannot establish communication with oscilloscope, check USB/Ethernet connection."
    ],
    "usage": "Specify oscilloscope_model, channel_number, and probe_type. The tool performs connection integrity checks and validates proper electrical interface setup.",
    "output_details": {
      "connection_valid": {
        "type": "boolean",
        "description": "Overall connection validation status"
      },
      "impedance_match": {
        "type": "boolean",
        "description": "Whether impedance matching is correct"
      },
      "signal_detected": {
        "type": "boolean",
        "description": "Whether test signal is detected on the channel"
      },
      "probe_compensation": {
        "type": "string",
        "description": "Probe compensation status: optimal, needs_adjustment, failed"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Frequency Response Analyzer",
    "tool_description": "Measures oscilloscope frequency response characteristics by sweeping input frequencies and analyzing amplitude and phase response across the specified bandwidth.",
    "parameters": {
      "start_frequency_hz": {
        "type": "number",
        "required": true,
        "description": "Starting frequency for sweep in Hz (minimum 0.1)"
      },
      "stop_frequency_hz": {
        "type": "number",
        "required": true,
        "description": "Ending frequency for sweep in Hz"
      },
      "frequency_points": {
        "type": "integer",
        "required": true,
        "description": "Number of frequency points in sweep (10 to 10000)"
      },
      "input_amplitude_volts": {
        "type": "number",
        "required": true,
        "description": "Constant input amplitude in volts (0.01 to 10)"
      },
      "channel_under_test": {
        "type": "integer",
        "required": true,
        "description": "Oscilloscope channel number being tested (1 to 8)"
      },
      "sweep_type": {
        "type": "string",
        "required": false,
        "default": "logarithmic",
        "description": "Frequency sweep type: linear or logarithmic"
      },
      "averaging_factor": {
        "type": "integer",
        "required": false,
        "default": 4,
        "description": "Number of measurements to average per frequency point (1 to 100)"
      },
      "settling_time_ms": {
        "type": "number",
        "required": false,
        "default": 100,
        "description": "Wait time between frequency changes in milliseconds (10 to 5000)"
      }
    },
    "error_messages": [
      "Invalid frequency range: Start frequency must be less than stop frequency and both must be positive.",
      "Too many frequency points: Frequency points must be between 10 and 10000 for reasonable test duration.",
      "Input amplitude out of range: Input amplitude must be between 0.01V and 10V.",
      "Invalid channel selection: Channel number must be within oscilloscope capabilities (typically 1-8).",
      "Sweep type error: Sweep type must be either 'linear' or 'logarithmic'.",
      "Averaging factor invalid: Averaging factor must be between 1 and 100.",
      "Excessive settling time: Settling time must be between 10ms and 5000ms.",
      "Signal generator not responding: Check signal generator connection and status."
    ],
    "usage": "Define frequency sweep range with start_frequency_hz and stop_frequency_hz, specify frequency_points for resolution, set input_amplitude_volts and channel_under_test. Optionally adjust sweep_type, averaging_factor, and settling_time_ms for measurement precision.",
    "output_details": {
      "test_frequencies": {
        "type": "array",
        "items": {"type": "number"},
        "description": "Array of frequencies tested in Hz"
      },
      "amplitude_response_db": {
        "type": "array",
        "items": {"type": "number"},
        "description": "Amplitude response in dB relative to 1kHz reference"
      },
      "phase_response_degrees": {
        "type": "array",
        "items": {"type": "number"},
        "description": "Phase response in degrees"
      },
      "bandwidth_3db_hz": {
        "type": "number",
        "description": "Measured -3dB bandwidth in Hz"
      },
      "flatness_db": {
        "type": "number",
        "description": "Amplitude flatness within specified passband in dB"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Amplitude Accuracy Tester",
    "tool_description": "Tests oscilloscope amplitude measurement accuracy by comparing measured values against precision reference signals with known amplitudes.",
    "parameters": {
      "reference_amplitudes": {
        "type": "array",
        "items": {"type": "number"},
        "required": true,
        "description": "Array of reference amplitude values in volts to test (0.001 to 100)",
        "minItems": 3,
        "maxItems": 50
      },
      "test_frequency_hz": {
        "type": "number",
        "required": true,
        "description": "Frequency for amplitude testing in Hz (1 to 1000000)"
      },
      "channel_number": {
        "type": "integer",
        "required": true,
        "description": "Oscilloscope channel to test (1 to 8)"
      },
      "waveform_type": {
        "type": "string",
        "required": false,
        "default": "sine",
        "description": "Test waveform: sine, square, triangle"
      },
      "measurement_method": {
        "type": "string",
        "required": false,
        "default": "peak_to_peak",
        "description": "Amplitude measurement method: peak_to_peak, rms, peak"
      }
    },
    "error_messages": [
      "Invalid reference amplitudes: All amplitudes must be between 0.001V and 100V and array must contain 3-50 values.",
      "Frequency out of range: Test frequency must be between 1 Hz and 1 MHz.",
      "Invalid channel: Channel number must be within oscilloscope range (typically 1-8).",
      "Unsupported waveform: Waveform type must be sine, square, or triangle.",
      "Invalid measurement method: Method must be peak_to_peak, rms, or peak.",
      "Signal unstable: Reference signal amplitude is not stable, check signal generator.",
      "Measurement timeout: Oscilloscope measurement did not complete within expected time."
    ],
    "usage": "Provide array of reference_amplitudes to test, set test_frequency_hz and channel_number. Optionally specify waveform_type and measurement_method. Tool compares oscilloscope readings against known reference values.",
    "output_details": {
      "measured_amplitudes": {
        "type": "array",
        "items": {"type": "number"},
        "description": "Oscilloscope-measured amplitude values in volts"
      },
      "amplitude_errors_percent": {
        "type": "array",
        "items": {"type": "number"},
        "description": "Percentage error for each amplitude measurement"
      },
      "maximum_error_percent": {
        "type": "number",
        "description": "Maximum amplitude error found across all test points"
      },
      "linearity_error_percent": {
        "type": "number",
        "description": "Overall amplitude linearity error"
      },
      "calibration_status": {
        "type": "string",
        "description": "Pass/fail status: pass, marginal, fail"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Time Base Calibrator",
    "tool_description": "Calibrates oscilloscope time base accuracy by comparing internal timebase against precision time references and measuring timing errors across all time scales.",
    "parameters": {
      "reference_clock_frequency": {
        "type": "number",
        "required": true,
        "description": "Reference clock frequency in Hz (1000000 to 100000000)"
      },
      "time_scales_to_test": {
        "type": "array",
        "items": {"type": "string"},
        "required": true,
        "description": "Time scale settings to calibrate (e.g., 1ns, 10ns, 100ns, 1us, 10us, etc.)",
        "minItems": 5,
        "maxItems": 20
      },
      "measurement_duration_seconds": {
        "type": "number",
        "required": false,
        "default": 10,
        "description": "Duration for each time scale measurement (1 to 300)"
      },
      "temperature_celsius": {
        "type": "number",
        "required": false,
        "default": 23,
        "description": "Ambient temperature during calibration (-10 to 70)"
      }
    },
    "error_messages": [
      "Invalid reference frequency: Reference clock must be between 1 MHz and 100 MHz for accurate calibration.",
      "Time scales format error: Time scales must be specified as strings like '1ns', '10us', '1ms', etc.",
      "Measurement duration invalid: Duration must be between 1 and 300 seconds.",
      "Temperature out of range: Temperature must be between -10°C and 70°C.",
      "Reference clock not detected: Cannot detect reference clock signal, check connections.",
      "Time scale not supported: One or more specified time scales are not available on this oscilloscope model."
    ],
    "usage": "Specify reference_clock_frequency and array of time_scales_to_test. Optionally set measurement_duration_seconds and temperature_celsius. Tool measures time base accuracy against precision reference.",
    "output_details": {
      "tested_time_scales": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Time scales that were successfully tested"
      },
      "timing_errors_ppm": {
        "type": "array",
        "items": {"type": "number"},
        "description": "Timing error in parts per million for each time scale"
      },
      "maximum_error_ppm": {
        "type": "number",
        "description": "Maximum timing error found across all scales"
      },
      "temperature_coefficient": {
        "type": "number",
        "description": "Temperature coefficient in ppm per degree Celsius"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Bandwidth Measurement Tool",
    "tool_description": "Measures oscilloscope analog bandwidth by determining the -3dB frequency point and validates bandwidth specifications against manufacturer ratings.",
    "parameters": {
      "channel_number": {
        "type": "integer",
        "required": true,
        "description": "Oscilloscope channel to measure (1 to 8)"
      },
      "expected_bandwidth_hz": {
        "type": "number",
        "required": true,
        "description": "Expected bandwidth specification in Hz"
      },
      "probe_attenuation": {
        "type": "integer",
        "required": true,
        "description": "Probe attenuation ratio (1, 10, 100, 1000)"
      }
    },
    "error_messages": [
      "Invalid channel number: Channel must be within supported range for oscilloscope model.",
      "Expected bandwidth invalid: Bandwidth must be a positive number in Hz.",
      "Unsupported probe attenuation: Attenuation must be 1, 10, 100, or 1000.",
      "Insufficient signal generator bandwidth: Signal generator cannot reach frequencies needed for bandwidth test.",
      "Measurement unstable: Cannot achieve stable bandwidth measurement, check connections and probe compensation."
    ],
    "usage": "Set channel_number to test, provide expected_bandwidth_hz for comparison, and specify probe_attenuation. Tool automatically sweeps frequency to find -3dB point and validates against specification.",
    "output_details": {
      "measured_bandwidth_hz": {
        "type": "number",
        "description": "Measured -3dB bandwidth in Hz"
      },
      "bandwidth_error_percent": {
        "type": "number",
        "description": "Error between measured and expected bandwidth"
      },
      "rise_time_calculated_ns": {
        "type": "number",
        "description": "Rise time calculated from bandwidth (0.35/BW)"
      },
      "frequency_response_flatness": {
        "type": "number",
        "description": "Amplitude flatness in passband (dB)"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Rise Time Analyzer",
    "tool_description": "Measures oscilloscope rise time performance using fast edge signals and compares against specifications, accounting for probe and system contributions.",
    "parameters": {
      "channel_number": {
        "type": "integer",
        "required": true,
        "description": "Channel to test rise time (1 to 8)"
      },
      "edge_generator_rise_time_ps": {
        "type": "number",
        "required": true,
        "description": "Rise time of edge generator in picoseconds (1 to 10000)"
      },
      "probe_rise_time_ps": {
        "type": "number",
        "required": true,
        "description": "Probe rise time specification in picoseconds"
      },
      "amplitude_volts": {
        "type": "number",
        "required": true,
        "description": "Step amplitude for rise time test in volts (0.1 to 5)"
      },
      "measurement_points": {
        "type": "array",
        "items": {"type": "integer"},
        "required": false,
        "default": [10, 90],
        "description": "Percentage points for rise time measurement (e.g., [10,90] or [20,80])"
      }
    },
    "error_messages": [
      "Invalid channel selection: Channel number must be supported by oscilloscope.",
      "Edge generator rise time invalid: Rise time must be between 1ps and 10000ps.",
      "Probe rise time invalid: Probe rise time must be positive and realistic for probe type.",
      "Step amplitude out of range: Amplitude must be between 0.1V and 5V for accurate measurement.",
      "Invalid measurement points: Points must be two integers between 1 and 99, with first < second.",
      "Rise time measurement failed: Cannot detect clean edge transition, check signal quality."
    ],
    "usage": "Specify channel_number, edge_generator_rise_time_ps, probe_rise_time_ps, and amplitude_volts. Optionally customize measurement_points. Tool measures system rise time and deconvolves instrument contribution.",
    "output_details": {
      "measured_rise_time_ps": {
        "type": "number",
        "description": "Measured system rise time in picoseconds"
      },
      "oscilloscope_rise_time_ps": {
        "type": "number",
        "description": "Calculated oscilloscope-only rise time after deconvolution"
      },
      "bandwidth_from_rise_time_hz": {
        "type": "number",
        "description": "Bandwidth calculated from rise time measurement"
      },
      "measurement_uncertainty_ps": {
        "type": "number",
        "description": "Estimated measurement uncertainty in picoseconds"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Trigger Performance Validator",
    "tool_description": "Validates oscilloscope trigger system performance including sensitivity, timing accuracy, and jitter measurements across different trigger modes.",
    "parameters": {
      "channel_number": {
        "type": "integer",
        "required": true,
        "description": "Channel to use for trigger testing (1 to 8)"
      },
      "trigger_types": {
        "type": "array",
        "items": {"type": "string"},
        "required": true,
        "description": "Trigger types to test: edge, pulse_width, runt, setup_hold, pattern",
        "minItems": 1,
        "maxItems": 10
      },
      "signal_amplitudes_mv": {
        "type": "array",
        "items": {"type": "number"},
        "required": true,
        "description": "Signal amplitudes for sensitivity testing in millivolts (1 to 10000)",
        "minItems": 3,
        "maxItems": 20
      },
      "signal_frequency_hz": {
        "type": "number",
        "required": true,
        "description": "Frequency of trigger test signal in Hz (1 to 1000000000)"
      },
      "jitter_measurement_samples": {
        "type": "integer",
        "required": false,
        "default": 1000,
        "description": "Number of samples for jitter measurement (100 to 10000)"
      },
      "timeout_seconds": {
        "type": "number",
        "required": false,
        "default": 30,
        "description": "Timeout for each trigger test in seconds (1 to 300)"
      }
    },
    "error_messages": [
      "Invalid channel number: Channel must be within oscilloscope supported range.",
      "Unsupported trigger type: Trigger types must be from [edge, pulse_width, runt, setup_hold, pattern].",
      "Signal amplitude invalid: Amplitudes must be between 1mV and 10V.",
      "Frequency out of range: Signal frequency must be between 1 Hz and 1 GHz.",
      "Invalid sample count: Jitter samples must be between 100 and 10000.",
      "Timeout too long: Timeout must be between 1 and 300 seconds.",
      "Trigger test failed: Cannot achieve stable triggering at specified conditions."
    ],
    "usage": "Set channel_number and specify trigger_types array to test. Provide signal_amplitudes_mv for sensitivity testing and signal_frequency_hz. Optionally adjust jitter_measurement_samples and timeout_seconds.",
    "output_details": {
      "trigger_sensitivity_mv": {
        "type": "array",
        "items": {"type": "number"},
        "description": "Minimum trigger sensitivity for each trigger type in mV"
      },
      "trigger_jitter_rms_ps": {
        "type": "array",
        "items": {"type": "number"},
        "description": "RMS trigger jitter for each type in picoseconds"
      },
      "trigger_timing_accuracy_ps": {
        "type": "array",
        "items": {"type": "number"},
        "description": "Trigger timing accuracy for each type in picoseconds"
      },
      "successful_trigger_types": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Trigger types that passed validation"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Channel Isolation Tester",
    "tool_description": "Measures crosstalk and isolation between oscilloscope channels by applying signals to one channel and measuring coupling to adjacent channels.",
    "parameters": {
      "source_channel": {
        "type": "integer",
        "required": true,
        "description": "Channel receiving the test signal (1 to 8)"
      },
      "victim_channels": {
        "type": "array",
        "items": {"type": "integer"},
        "required": true,
        "description": "Channels to measure for crosstalk (different from source)",
        "minItems": 1,
        "maxItems": 7
      },
      "test_signal_amplitude_volts": {
        "type": "number",
        "required": true,
        "description": "Amplitude of signal applied to source channel (0.1 to 10)"
      },
      "test_frequencies_hz": {
        "type": "array",
        "items": {"type": "number"},
        "required": true,
        "description": "Frequencies to test for crosstalk in Hz (1000 to 1000000000)",
        "minItems": 5,
        "maxItems": 50
      },
      "measurement_bandwidth_hz": {
        "type": "number",
        "required": false,
        "default": 1000000,
        "description": "Measurement bandwidth for crosstalk detection (1000 to 1000000000)"
      }
    },
    "error_messages": [
      "Invalid source channel: Source channel must be within oscilloscope range.",
      "Victim channel conflict: Victim channels cannot include the source channel.",
      "Signal amplitude invalid: Test signal amplitude must be between 0.1V and 10V.",
      "Test frequencies invalid: All frequencies must be between 1 kHz and 1 GHz.",
      "Measurement bandwidth invalid: Bandwidth must be between 1 kHz and 1 GHz.",
      "Channel configuration error: Cannot configure channels for isolation test.",
      "Crosstalk measurement failed: Unable to measure crosstalk at specified conditions."
    ],
    "usage": "Specify source_channel for signal injection and victim_channels array for crosstalk measurement. Set test_signal_amplitude_volts and test_frequencies_hz array. Optionally adjust measurement_bandwidth_hz.",
    "output_details": {
      "crosstalk_levels_db": {
        "type": "array",
        "items": {"type": "number"},
        "description": "Crosstalk levels in dB for each victim channel at each frequency"
      },
      "isolation_frequencies_hz": {
        "type": "array",
        "items": {"type": "number"},
        "description": "Test frequencies used for isolation measurement"
      },
      "worst_case_crosstalk_db": {
        "type": "number",
        "description": "Maximum crosstalk level found across all channels and frequencies"
      },
      "isolation_specification_met": {
        "type": "boolean",
        "description": "Whether isolation meets typical oscilloscope specifications"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Noise Floor Analyzer",
    "tool_description": "Measures oscilloscope noise floor characteristics including RMS noise, peak-to-peak noise, and noise spectral density across different gain settings and bandwidths.",
    "parameters": {
      "channel_number": {
        "type": "integer",
        "required": true,
        "description": "Channel to measure noise floor (1 to 8)"
      },
      "vertical_scales_volts": {
        "type": "array",
        "items": {"type": "number"},
        "required": true,
        "description": "Vertical scale settings to test in volts per division (0.001 to 10)",
        "minItems": 3,
        "maxItems": 15
      },
      "bandwidth_limit_hz": {
        "type": "number",
        "required": false,
        "default": null,
        "description": "Bandwidth limiting filter frequency, null for full bandwidth"
      },
      "measurement_time_seconds": {
        "type": "number",
        "required": false,
        "default": 60,
        "description": "Duration of noise measurement in seconds (10 to 600)"
      },
      "input_termination": {
        "type": "string",
        "required": false,
        "default": "50_ohm",
        "description": "Input termination: 50_ohm, 1_megohm"
      }
    },
    "error_messages": [
      "Invalid channel selection: Channel number must be supported by oscilloscope.",
      "Vertical scale invalid: All scales must be between 1mV/div and 10V/div.",
      "Bandwidth limit invalid: If specified, bandwidth limit must be positive and within oscilloscope range.",
      "Measurement time invalid: Time must be between 10 and 600 seconds.",
      "Invalid termination: Input termination must be 50_ohm or 1_megohm.",
      "Noise measurement unstable: Cannot achieve stable noise measurement, check input connections."
    ],
    "usage": "Set channel_number and provide vertical_scales_volts array to test. Optionally specify bandwidth_limit_hz, measurement_time_seconds, and input_termination. Tool measures noise characteristics at each gain setting.",
    "output_details": {
      "rms_noise_values_mv": {
        "type": "array",
        "items": {"type": "number"},
        "description": "RMS noise in millivolts for each vertical scale"
      },
      "peak_to_peak_noise_mv": {
        "type": "array",
        "items": {"type": "number"},
        "description": "Peak-to-peak noise in millivolts for each scale"
      },
      "noise_density_nv_sqrt_hz": {
        "type": "array",
        "items": {"type": "number"},
        "description": "Noise spectral density in nV/
