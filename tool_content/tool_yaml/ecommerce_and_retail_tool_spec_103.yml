field_name: ecommerce_and_retail
subfield: Customer Reviews and Ratings
task: Integrate review widgets and display systems into ecommerce platforms
tool_description: |-
  **STEP 1 — Rate task difficulty**

  This task involves medium complexity due to multiple technical integration points, cross-platform compatibility requirements, UI/UX considerations, and the need to handle real-time data synchronization between review systems and ecommerce platforms.

  **STEP 2 — Set a tool budget**

  Given the medium difficulty, I'll target 12 tools to cover the various aspects of widget integration, display customization, data management, and platform-specific deployment requirements.

  **STEP 3 — List all tool names and dependencies**

  Tools and their data flow:
  1. **Platform Compatibility Checker** → produces compatibility reports
  2. **Widget Configuration Builder** → consumes platform specs, produces widget configs
  3. **Review Data Fetcher** → produces review datasets
  4. **Display Template Generator** → consumes review data, produces HTML/CSS templates
  5. **Widget Renderer** → consumes templates and configs, produces rendered widgets
  6. **CSS Style Customizer** → produces custom stylesheets
  7. **JavaScript Event Handler** → consumes widget events, produces interaction scripts
  8. **API Integration Manager** → consumes platform APIs, produces integration endpoints
  9. **Performance Monitor** → consumes widget metrics, produces performance reports
  10. **A/B Testing Controller** → consumes test configurations, produces variant widgets
  11. **Mobile Responsiveness Optimizer** → consumes widget designs, produces mobile-optimized versions
  12. **Widget Deployment Manager** → consumes all widget assets, produces deployed widgets

  **STEP 4 — Multi-tool plans**

  **Simple Plans:**
  1. Basic widget display: Platform Compatibility Checker → Review Data Fetcher → Display Template Generator → Widget Renderer
  2. Style customization: CSS Style Customizer → Widget Renderer → Mobile Responsiveness Optimizer

  **Medium Plans:**
  1. Interactive widget setup: Widget Configuration Builder → JavaScript Event Handler → API Integration Manager → Widget Renderer → Performance Monitor
  2. Mobile-optimized deployment: Platform Compatibility Checker → Widget Configuration Builder → Mobile Responsiveness Optimizer → Widget Deployment Manager

  **Complex Plans:**
  1. Full A/B tested deployment: Platform Compatibility Checker → Review Data Fetcher → Widget Configuration Builder → Display Template Generator → A/B Testing Controller → CSS Style Customizer → JavaScript Event Handler → Mobile Responsiveness Optimizer → Widget Deployment Manager → Performance Monitor
  2. Multi-platform integration: Platform Compatibility Checker → API Integration Manager → Widget Configuration Builder → Display Template Generator → CSS Style Customizer → JavaScript Event Handler → Widget Renderer → Performance Monitor → Widget Deployment Manager

  **STEP 5 — Produce tools**

  ```json
  {
    "tool_name": "Platform Compatibility Checker",
    "tool_description": "Analyzes target ecommerce platforms to determine compatibility requirements and constraints for review widget integration.",
    "parameters": {
      "platform_name": {
        "type": "string",
        "required": true,
        "description": "Name of the ecommerce platform (e.g., Shopify, WooCommerce, Magento, BigCommerce)"
      },
      "platform_version": {
        "type": "string",
        "required": true,
        "description": "Version number of the platform"
      },
      "theme_name": {
        "type": "string",
        "required": false,
        "description": "Name of the active theme",
        "default": "default"
      }
    },
    "error_messages": [
      "Unsupported platform: The specified platform is not supported for review widget integration.",
      "Invalid platform version: The platform version format is incorrect or not supported.",
      "Theme compatibility issue: The specified theme may have conflicts with widget integration."
    ],
    "usage": "Provide the platform_name and platform_version to check compatibility. Optionally specify theme_name for theme-specific compatibility analysis.",
    "output_details": {
      "compatibility_status": {
        "type": "string",
        "description": "Overall compatibility status: compatible, partially_compatible, or incompatible"
      },
      "supported_features": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of widget features supported by this platform"
      },
      "integration_method": {
        "type": "string",
        "description": "Recommended integration method: plugin, embed_code, or api"
      },
      "constraints": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of platform-specific constraints or limitations"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Widget Configuration Builder",
    "tool_description": "Creates customizable configuration settings for review widgets based on business requirements and platform constraints.",
    "parameters": {
      "widget_type": {
        "type": "string",
        "required": true,
        "description": "Type of review widget: summary_widget, detailed_list, carousel, grid, or inline"
      },
      "max_reviews_displayed": {
        "type": "integer",
        "required": false,
        "description": "Maximum number of reviews to display (1-50)",
        "default": 5
      },
      "show_ratings": {
        "type": "boolean",
        "required": false,
        "description": "Whether to display star ratings",
        "default": true
      },
      "show_photos": {
        "type": "boolean",
        "required": false,
        "description": "Whether to display review photos",
        "default": false
      },
      "enable_sorting": {
        "type": "boolean",
        "required": false,
        "description": "Enable sorting options for reviews",
        "default": true
      },
      "enable_filtering": {
        "type": "boolean",
        "required": false,
        "description": "Enable filtering options by rating or date",
        "default": false
      },
      "auto_refresh_minutes": {
        "type": "integer",
        "required": false,
        "description": "Auto-refresh interval in minutes (0 for disabled, 1-1440)",
        "default": 0
      },
      "color_scheme": {
        "type": "string",
        "required": false,
        "description": "Color scheme: light, dark, or custom",
        "default": "light"
      },
      "animation_enabled": {
        "type": "boolean",
        "required": false,
        "description": "Enable transition animations",
        "default": true
      }
    },
    "error_messages": [
      "Invalid widget type: Use one of [summary_widget, detailed_list, carousel, grid, inline].",
      "Invalid max_reviews_displayed: Must be between 1 and 50.",
      "Invalid auto_refresh_minutes: Must be between 0 and 1440 (24 hours).",
      "Invalid color_scheme: Use light, dark, or custom."
    ],
    "usage": "Specify the widget_type and customize display options using the boolean and numeric parameters. The tool generates a complete configuration object.",
    "output_details": {
      "config_id": {
        "type": "string",
        "description": "Unique identifier for this configuration"
      },
      "widget_settings": {
        "type": "string",
        "description": "JSON string containing all widget configuration parameters"
      },
      "estimated_load_time": {
        "type": "number",
        "description": "Estimated widget load time in milliseconds"
      },
      "memory_usage_kb": {
        "type": "integer",
        "description": "Estimated memory usage in kilobytes"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Review Data Fetcher",
    "tool_description": "Retrieves and processes review data from various sources including internal databases, third-party review platforms, and APIs.",
    "parameters": {
      "product_id": {
        "type": "string",
        "required": true,
        "description": "Unique identifier for the product"
      },
      "data_source": {
        "type": "string",
        "required": true,
        "description": "Source of review data: internal, google_reviews, trustpilot, amazon, or multiple"
      },
      "date_range_days": {
        "type": "integer",
        "required": false,
        "description": "Number of days to fetch reviews from (1-365)",
        "default": 30
      },
      "min_rating": {
        "type": "integer",
        "required": false,
        "description": "Minimum rating filter (1-5)",
        "default": 1
      },
      "include_images": {
        "type": "boolean",
        "required": false,
        "description": "Include review images in the fetch",
        "default": false
      }
    },
    "error_messages": [
      "Invalid product_id: Product not found in the system.",
      "Unsupported data_source: Use one of [internal, google_reviews, trustpilot, amazon, multiple].",
      "Invalid date_range_days: Must be between 1 and 365.",
      "Invalid min_rating: Must be between 1 and 5.",
      "API rate limit exceeded: Too many requests to external review sources."
    ],
    "usage": "Provide product_id and data_source to fetch reviews. Use optional filters to customize the data retrieval scope.",
    "output_details": {
      "total_reviews": {
        "type": "integer",
        "description": "Total number of reviews fetched"
      },
      "average_rating": {
        "type": "number",
        "description": "Average rating across all fetched reviews"
      },
      "review_texts": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Array of review text content"
      },
      "ratings": {
        "type": "array",
        "items": {
          "type": "integer"
        },
        "description": "Array of numerical ratings"
      },
      "review_dates": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Array of review dates in date-time format"
      },
      "has_images": {
        "type": "array",
        "items": {
          "type": "boolean"
        },
        "description": "Array indicating which reviews have associated images"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Display Template Generator",
    "tool_description": "Generates HTML and CSS templates for review widgets based on configuration settings and review data structure.",
    "parameters": {
      "template_style": {
        "type": "string",
        "required": true,
        "description": "Template style: modern, classic, minimal, or card_based"
      },
      "layout_direction": {
        "type": "string",
        "required": true,
        "description": "Layout direction: horizontal, vertical, or grid"
      },
      "include_reviewer_info": {
        "type": "boolean",
        "required": false,
        "description": "Include reviewer name and verification status",
        "default": true
      },
      "star_style": {
        "type": "string",
        "required": false,
        "description": "Star rating style: filled, outlined, or custom",
        "default": "filled"
      }
    },
    "error_messages": [
      "Invalid template_style: Use one of [modern, classic, minimal, card_based].",
      "Invalid layout_direction: Use one of [horizontal, vertical, grid].",
      "Invalid star_style: Use one of [filled, outlined, custom].",
      "Template generation failed: Unable to create template with current parameters."
    ],
    "usage": "Specify template_style and layout_direction to generate appropriate HTML/CSS templates. Customize appearance with optional styling parameters.",
    "output_details": {
      "html_template": {
        "type": "string",
        "description": "Generated HTML template code"
      },
      "css_styles": {
        "type": "string",
        "description": "Generated CSS stylesheet code"
      },
      "template_id": {
        "type": "string",
        "description": "Unique identifier for the generated template"
      },
      "responsive_breakpoints": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "CSS breakpoints for responsive design"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Widget Renderer",
    "tool_description": "Combines templates, configuration, and review data to render complete, interactive review widgets ready for deployment.",
    "parameters": {
      "template_id": {
        "type": "string",
        "required": true,
        "description": "Identifier of the template to use for rendering"
      },
      "config_id": {
        "type": "string",
        "required": true,
        "description": "Identifier of the widget configuration"
      },
      "review_data": {
        "type": "array",
        "required": true,
        "description": "Array of review data strings in JSON format",
        "items": {
          "type": "string"
        }
      },
      "container_width": {
        "type": "integer",
        "required": false,
        "description": "Container width in pixels (200-2000)",
        "default": 400
      },
      "enable_interactions": {
        "type": "boolean",
        "required": false,
        "description": "Enable user interactions like clicking and hovering",
        "default": true
      }
    },
    "error_messages": [
      "Template not found: The specified template_id does not exist.",
      "Configuration not found: The specified config_id does not exist.",
      "Invalid review_data: Review data format is incorrect or empty.",
      "Invalid container_width: Must be between 200 and 2000 pixels.",
      "Rendering failed: Unable to combine template and data successfully."
    ],
    "usage": "Provide template_id, config_id, and review_data array to render a complete widget. Optionally set container dimensions and interaction preferences.",
    "output_details": {
      "rendered_html": {
        "type": "string",
        "description": "Complete rendered HTML for the widget"
      },
      "widget_css": {
        "type": "string",
        "description": "Complete CSS styles for the rendered widget"
      },
      "widget_js": {
        "type": "string",
        "description": "JavaScript code for widget functionality"
      },
      "render_time_ms": {
        "type": "integer",
        "description": "Time taken to render the widget in milliseconds"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "CSS Style Customizer",
    "tool_description": "Customizes and optimizes CSS styles for review widgets to match brand guidelines and platform aesthetics.",
    "parameters": {
      "primary_color": {
        "type": "string",
        "required": true,
        "description": "Primary brand color in hex format (e.g., #FF5733)"
      },
      "secondary_color": {
        "type": "string",
        "required": true,
        "description": "Secondary brand color in hex format"
      },
      "font_family": {
        "type": "string",
        "required": false,
        "description": "Font family name or web font URL",
        "default": "Arial, sans-serif"
      },
      "border_radius": {
        "type": "integer",
        "required": false,
        "description": "Border radius in pixels (0-20)",
        "default": 4
      },
      "shadow_intensity": {
        "type": "string",
        "required": false,
        "description": "Box shadow intensity: none, light, medium, or strong",
        "default": "light"
      }
    },
    "error_messages": [
      "Invalid color format: Colors must be in valid hex format (#RRGGBB).",
      "Invalid border_radius: Must be between 0 and 20 pixels.",
      "Invalid shadow_intensity: Use one of [none, light, medium, strong].",
      "Font loading failed: Unable to load the specified font family."
    ],
    "usage": "Provide primary_color and secondary_color in hex format. Customize typography and visual elements using optional parameters.",
    "output_details": {
      "custom_css": {
        "type": "string",
        "description": "Generated custom CSS code"
      },
      "css_variables": {
        "type": "string",
        "description": "CSS custom properties for easy theme switching"
      },
      "color_contrast_score": {
        "type": "number",
        "description": "Accessibility contrast ratio score"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "JavaScript Event Handler",
    "tool_description": "Creates interactive JavaScript functionality for review widgets including click handlers, animations, and user interactions.",
    "parameters": {
      "enable_click_events": {
        "type": "boolean",
        "required": false,
        "description": "Enable click event handling",
        "default": true
      },
      "enable_hover_effects": {
        "type": "boolean",
        "required": false,
        "description": "Enable hover animations and effects",
        "default": true
      },
      "enable_keyboard_navigation": {
        "type": "boolean",
        "required": false,
        "description": "Enable keyboard accessibility navigation",
        "default": true
      },
      "animation_duration_ms": {
        "type": "integer",
        "required": false,
        "description": "Animation duration in milliseconds (100-2000)",
        "default": 300
      },
      "lazy_loading": {
        "type": "boolean",
        "required": false,
        "description": "Enable lazy loading for performance",
        "default": false
      },
      "analytics_tracking": {
        "type": "boolean",
        "required": false,
        "description": "Enable interaction analytics tracking",
        "default": false
      }
    },
    "error_messages": [
      "Invalid animation_duration_ms: Must be between 100 and 2000 milliseconds.",
      "JavaScript conflicts detected: Potential conflicts with existing page scripts.",
      "Event binding failed: Unable to attach event listeners to widget elements."
    ],
    "usage": "Configure interaction features using boolean parameters. Set animation timing and performance options as needed.",
    "output_details": {
      "javascript_code": {
        "type": "string",
        "description": "Generated JavaScript code for widget interactions"
      },
      "event_listeners": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of event types being handled"
      },
      "performance_impact": {
        "type": "string",
        "description": "Estimated performance impact: low, medium, or high"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "API Integration Manager",
    "tool_description": "Manages API connections and data synchronization between review widgets and ecommerce platform backends, handling authentication and data flow.",
    "parameters": {
      "platform_api_endpoint": {
        "type": "string",
        "required": true,
        "description": "Base URL of the platform's API endpoint"
      },
      "authentication_method": {
        "type": "string",
        "required": true,
        "description": "Authentication method: api_key, oauth2, or basic_auth"
      },
      "api_key": {
        "type": "string",
        "required": false,
        "description": "API key for authentication (required if auth method is api_key)",
        "default": "None"
      },
      "webhook_url": {
        "type": "string",
        "required": false,
        "description": "Webhook URL for real-time updates",
        "default": "None"
      },
      "sync_frequency_minutes": {
        "type": "integer",
        "required": false,
        "description": "Data synchronization frequency in minutes (5-1440)",
        "default": 60
      },
      "retry_attempts": {
        "type": "integer",
        "required": false,
        "description": "Number of retry attempts for failed API calls (1-10)",
        "default": 3
      },
      "timeout_seconds": {
        "type": "integer",
        "required": false,
        "description": "API request timeout in seconds (5-120)",
        "default": 30
      },
      "rate_limit_per_hour": {
        "type": "integer",
        "required": false,
        "description": "Maximum API calls per hour (10-10000)",
        "default": 1000
      },
      "enable_caching": {
        "type": "boolean",
        "required": false,
        "description": "Enable response caching for performance",
        "default": true
      },
      "cache_ttl_minutes": {
        "type": "integer",
        "required": false,
        "description": "Cache time-to-live in minutes (1-1440)",
        "default": 30
      },
      "error_notification_email": {
        "type": "string",
        "required": false,
        "description": "Email address for error notifications",
        "default": "None"
      }
    },
    "error_messages": [
      "Invalid API endpoint: The provided endpoint URL is malformed or unreachable.",
      "Authentication failed: Invalid credentials or unsupported authentication method.",
      "Invalid sync_frequency_minutes: Must be between 5 and 1440 minutes.",
      "Invalid retry_attempts: Must be between 1 and 10.",
      "Invalid timeout_seconds: Must be between 5 and 120 seconds.",
      "Invalid rate_limit_per_hour: Must be between 10 and 10000.",
      "Invalid cache_ttl_minutes: Must be between 1 and 1440 minutes.",
      "API rate limit exceeded: Too many requests made within the allowed time window."
    ],
    "usage": "Provide platform_api_endpoint and authentication_method with corresponding credentials. Configure sync frequency, retry behavior, and caching options for optimal performance.",
    "output_details": {
      "integration_status": {
        "type": "string",
        "description": "Current integration status: connected, connecting, failed, or disconnected"
      },
      "last_sync_time": {
        "type": "string",
        "description": "Timestamp of last successful data synchronization"
      },
      "api_health_score": {
        "type": "integer",
        "description": "API health score from 0-100 based on response times and success rates"
      },
      "active_connections": {
        "type": "integer",
        "description": "Number of active API connections"
      },
      "error_count_24h": {
        "type": "integer",
        "description": "Number of API errors in the last 24 hours"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Performance Monitor",
    "tool_description": "Monitors and analyzes review widget performance metrics including load times, user interactions, and system resource usage.",
    "parameters": {
      "widget_id": {
        "type": "string",
        "required": true,
        "description": "Unique identifier of the widget to monitor"
      },
      "monitoring_duration_hours": {
        "type": "integer",
        "required": false,
        "description": "Duration to monitor in hours (1-168)",
        "default": 24
      },
      "track_user_interactions": {
        "type": "boolean",
        "required": false,
        "description": "Track user clicks and interactions",
        "default": true
      },
      "performance_threshold_ms": {
        "type": "integer",
        "required": false,
        "description": "Performance threshold in milliseconds for alerts (100-5000)",
        "default": 2000
      }
    },
    "error_messages": [
      "Widget not found: The specified widget_id does not exist or is not active.",
      "Invalid monitoring_duration_hours: Must be between 1 and 168 hours (1 week).",
      "Invalid performance_threshold_ms: Must be between 100 and 5000 milliseconds.",
      "Monitoring service unavailable: Performance monitoring service is temporarily unavailable."
    ],
    "usage": "Provide widget_id to start monitoring. Configure monitoring duration and performance thresholds using optional parameters.",
    "output_details": {
      "average_load_time_ms": {
        "type": "number",
        "description": "Average widget load time in milliseconds"
      },
      "total_interactions": {
        "type": "integer",
        "description": "Total number of user interactions recorded"
      },
      "error_rate_percent": {
        "type": "number",
        "description": "Percentage of failed widget loads or interactions"
      },
      "performance_score": {
        "type": "integer",
        "description": "Overall performance score from 0-100"
      },
      "alerts_triggered": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of performance alerts triggered during monitoring"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "A/B Testing Controller",
    "tool_description": "Creates and manages A/B tests for review widgets to optimize conversion rates and user engagement through variant testing.",
    "parameters": {
      "test_name": {
        "type": "string",
        "required": true,
        "description": "Name identifier for the A/B test"
      },
      "variant_a_config": {
        "type": "string",
        "required": true,
        "description": "Configuration JSON string for variant A"
      },
      "variant_b_config": {
        "type": "string",
        "required": true,
        "description": "Configuration JSON string for variant B"
      },
      "traffic_split_percent": {
        "type": "integer",
        "required": false,
        "description": "Percentage of traffic for variant B (10-90)",
        "default": 50
      },
      "test_duration_days": {
        "type": "integer",
        "required": false,
        "description": "Test duration in days (1-90)",
        "default": 14
      },
      "success_metric": {
        "type": "string",
        "required": false,
        "description": "Primary success metric: click_rate, conversion_rate, or engagement_time",
        "default": "click_rate"
      }
    },
    "error_messages": [
      "Invalid variant configuration: Variant config JSON is malformed or contains invalid parameters.",
      "Invalid traffic_split_percent: Must be between 10 and 90 percent.",
      "Invalid test_duration_days: Must be between 1 and 90 days.",
      "Invalid success_metric: Use one of [click_rate, conversion_rate, engagement_time].",
      "Test name already exists: Choose a unique test name."
    ],
    "usage": "Provide test_name and configuration JSON for both variants. Set traffic distribution and test duration parameters to run the A/B test.",
    "output_details": {
      "test_id": {
        "type": "string",
        "description": "Unique identifier for the created A/B test"
      },
      "test_status": {
        "type": "string",
        "description": "Current test status: active, paused, completed, or failed"
      },
      "variant_a_performance": {
        "type": "number",
        "description": "Performance metric value for variant A"
      },
      "variant_b_performance": {
        "type": "number",
        "description": "Performance metric value for variant B"
      },
      "statistical_significance": {
        "type": "boolean",
        "description": "Whether the test results are statistically significant"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Mobile Responsiveness Optimizer",
    "tool_description": "Optimizes review widgets for mobile devices by adjusting layouts, touch interactions, and performance for various screen sizes.",
    "parameters": {
      "target_devices": {
        "type": "array",
        "required": true,
        "description": "Target device types to optimize for",
        "items": {
          "type": "string"
        },
        "minItems": 1,
        "maxItems": 5
      },
      "min_screen_width": {
        "type": "integer",
        "required": false,
        "description": "Minimum screen width to support in pixels (240-768)",
        "default": 320
      },
      "touch_target_size": {
        "type": "integer",
        "required": false,
        "description": "Minimum touch target size in pixels (24-64)",
        "default": 44
      },
      "enable_swipe_gestures": {
        "type": "boolean",
        "required": false,
        "description": "Enable swipe gestures for navigation",
        "default": true
      }
    },
    "error_messages": [
      "Invalid target_devices: Must include at least one device type from [smartphone, tablet, desktop].",
      "Invalid min_screen_width: Must be between 240 and 768 pixels.",
      "Invalid touch_target_size: Must be between 24 and 64 pixels for accessibility.",
      "Optimization failed: Unable to create mobile-optimized version with current parameters."
    ],
    "usage": "Specify target_devices array and mobile-specific parameters to optimize widget layouts and interactions for mobile platforms.",
    "output_details": {
      "mobile_css": {
        "type": "string",
        "description": "Mobile-optimized CSS code"
      },
      "responsive_breakpoints": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "CSS media query breakpoints for responsive design"
      },
      "touch_optimization_score": {
        "type": "integer",
        "description": "Touch interaction optimization score from 0-100"
      },
      "estimated_mobile_load_time": {
        "type": "number",
        "description": "Estimated load time on mobile devices in milliseconds"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Widget Deployment Manager",
    "tool_description": "Manages the deployment process of review widgets to ecommerce platforms, handling file uploads, configuration updates, and rollback procedures.",
    "parameters": {
      "deployment_target": {
        "type": "string",
        "required": true,
        "description": "Deployment target environment: staging, production, or development"
      },
      "widget_files": {
        "type": "array",
        "required": true,
        "description": "Array of widget file paths to deploy",
        "items": {
          "type": "string"
        },
        "minItems": 1,
        "maxItems": 20
      },
      "deployment_method": {
        "type": "string",
        "required": true,
        "description": "Deployment method: ftp, sftp, api, or plugin_upload"
      },
      "backup_existing": {
        "type": "boolean",
        "required": false,
        "description": "Create backup of existing widget before deployment",
        "default": true
      },
      "auto_activate": {
        "type": "boolean",
        "required": false,
        "description": "Automatically activate widget after successful deployment",
        "default": false
      },
      "rollback_on_failure": {
        "type": "boolean",
        "required": false,
        "description": "Automatically rollback on deployment failure",
        "default": true
      }
    },
    "error_messages": [
      "Invalid deployment_target: Use one of [staging, production, development].",
      "Invalid widget_files: At least one valid file path must be provided.",
