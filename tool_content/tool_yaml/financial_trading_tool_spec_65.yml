field_name: financial_trading
subfield: algorithmic_trading_strategy_development
task: Technical indicator calculation and signal generation
tool_description: |-
  **STEP 1 — Rate task difficulty**

  This task involves medium complexity due to the breadth of technical indicators, mathematical computations, signal interpretation, and the need for precise coordination between data processing and signal generation components. Error impact is moderate as incorrect signals can lead to trading losses.

  **STEP 2 — Set a tool budget**

  Given the medium difficulty, I'll target 12 tools to cover data preprocessing, various indicator families, signal generation, validation, and performance analysis.

  **STEP 3 — List all tool names with dependencies and affordances**

  1. **Market Data Validator** - Consumes: raw market data → Produces: validated/cleaned data
  2. **Price Data Preprocessor** - Consumes: validated data → Produces: normalized/adjusted prices
  3. **Moving Average Calculator** - Consumes: price data → Produces: MA values/crossover signals
  4. **Momentum Indicator Generator** - Consumes: price data → Produces: RSI, MACD, Stochastic values
  5. **Volume Indicator Calculator** - Consumes: price/volume data → Produces: volume-based indicators
  6. **Volatility Indicator Generator** - Consumes: price data → Produces: Bollinger Bands, ATR values
  7. **Pattern Recognition Engine** - Consumes: price data → Produces: chart pattern signals
  8. **Support Resistance Detector** - Consumes: price data → Produces: key levels
  9. **Signal Aggregator** - Consumes: multiple indicator outputs → Produces: combined signals
  10. **Signal Filter** - Consumes: raw signals → Produces: filtered/refined signals
  11. **Backtest Signal Validator** - Consumes: signals + historical data → Produces: performance metrics
  12. **Signal Confidence Scorer** - Consumes: signals + market context → Produces: confidence scores

  **STEP 4 — Multi-tool plans**

  **Simple Plans:**
  1. Market Data Validator → Moving Average Calculator → Signal Filter (basic MA crossover strategy)
  2. Price Data Preprocessor → Momentum Indicator Generator → Signal Confidence Scorer (RSI-based signals)

  **Medium Plans:**
  1. Market Data Validator → Price Data Preprocessor → Volatility Indicator Generator → Support Resistance Detector → Signal Aggregator (multi-indicator approach)
  2. Market Data Validator → Volume Indicator Calculator → Pattern Recognition Engine → Signal Filter → Backtest Signal Validator (pattern-based strategy validation)

  **Complex Plans:**
  1. Market Data Validator → Price Data Preprocessor → Moving Average Calculator + Momentum Indicator Generator + Volatility Indicator Generator → Signal Aggregator → Signal Filter → Signal Confidence Scorer → Backtest Signal Validator (comprehensive multi-indicator system)
  2. Market Data Validator → Price Data Preprocessor → Pattern Recognition Engine + Support Resistance Detector + Volume Indicator Calculator → Signal Aggregator → Signal Filter → Backtest Signal Validator → Signal Confidence Scorer (advanced pattern and level-based strategy)

  **STEP 5 — Produce tools**

  ```json
  {
    "tool_name": "Market Data Validator",
    "tool_description": "Validates and cleans market data by checking for missing values, outliers, and data consistency issues to ensure reliable input for technical analysis.",
    "parameters": {
      "data_source": {
        "type": "string",
        "required": true,
        "description": "Source identifier or path to market data"
      },
      "ticker_symbol": {
        "type": "string",
        "required": true,
        "description": "Stock ticker symbol to validate"
      },
      "validation_level": {
        "type": "string",
        "required": false,
        "default": "standard",
        "description": "Validation strictness: basic, standard, or strict"
      }
    },
    "error_messages": [
      "Invalid data source: The specified data source path or identifier cannot be accessed.",
      "Missing ticker symbol: Provide a valid ticker symbol for validation.",
      "Insufficient data: Dataset contains fewer than 20 data points required for validation.",
      "Invalid validation level: Use one of [basic, standard, strict]."
    ],
    "usage": "Provide data_source and ticker_symbol, optionally set validation_level. Returns cleaned data status and any issues found.",
    "output_details": {
      "validation_status": {
        "type": "string",
        "description": "Overall validation result: passed, warning, or failed"
      },
      "issues_found": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of data quality issues identified"
      },
      "records_processed": {
        "type": "integer",
        "description": "Number of data records processed"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Price Data Preprocessor",
    "tool_description": "Preprocesses price data by applying adjustments for splits, dividends, and normalization to prepare data for technical indicator calculations.",
    "parameters": {
      "ticker_symbol": {
        "type": "string",
        "required": true,
        "description": "Stock ticker symbol for preprocessing"
      },
      "start_date": {
        "type": "string",
        "required": true,
        "format": "date-time",
        "description": "Start date for data preprocessing"
      },
      "end_date": {
        "type": "string",
        "required": true,
        "format": "date-time",
        "description": "End date for data preprocessing"
      },
      "adjust_splits": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Whether to adjust prices for stock splits"
      },
      "adjust_dividends": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Whether to adjust prices for dividend payments"
      },
      "fill_gaps": {
        "type": "boolean",
        "required": false,
        "default": false,
        "description": "Whether to fill data gaps using interpolation"
      },
      "normalize_prices": {
        "type": "boolean",
        "required": false,
        "default": false,
        "description": "Whether to normalize prices to percentage changes"
      }
    },
    "error_messages": [
      "Invalid date range: End date must be after start date and both must be valid ISO 8601 dates.",
      "Ticker not found: The specified ticker symbol is not available in the data source.",
      "Insufficient data: Less than 10 trading days of data available for the specified period.",
      "Data gap too large: Cannot fill gaps larger than 5 consecutive trading days when fill_gaps is enabled."
    ],
    "usage": "Specify ticker_symbol, start_date, and end_date. Optionally configure adjustment and normalization settings. Returns preprocessed price data ready for indicator calculations.",
    "output_details": {
      "preprocessing_summary": {
        "type": "string",
        "description": "Summary of preprocessing operations performed"
      },
      "adjusted_records": {
        "type": "integer",
        "description": "Number of price records that were adjusted"
      },
      "gaps_filled": {
        "type": "integer",
        "description": "Number of data gaps that were filled"
      },
      "final_record_count": {
        "type": "integer",
        "description": "Total number of records after preprocessing"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Moving Average Calculator",
    "tool_description": "Calculates various types of moving averages and generates crossover signals for trend analysis and trading decisions.",
    "parameters": {
      "ticker_symbol": {
        "type": "string",
        "required": true,
        "description": "Stock ticker symbol for analysis"
      },
      "ma_type": {
        "type": "string",
        "required": true,
        "description": "Moving average type: SMA, EMA, or WMA"
      },
      "short_period": {
        "type": "integer",
        "required": true,
        "description": "Period for short-term moving average (5-50)"
      },
      "long_period": {
        "type": "integer",
        "required": true,
        "description": "Period for long-term moving average (20-200)"
      },
      "price_field": {
        "type": "string",
        "required": false,
        "default": "close",
        "description": "Price field to use: open, high, low, close, or typical"
      }
    },
    "error_messages": [
      "Invalid MA type: Use one of [SMA, EMA, WMA] for moving average type.",
      "Invalid periods: Short period must be between 5-50, long period between 20-200, and short_period < long_period.",
      "Invalid price field: Use one of [open, high, low, close, typical].",
      "Insufficient data: Need at least long_period + 10 data points for reliable calculations.",
      "Missing ticker data: No price data available for the specified ticker symbol."
    ],
    "usage": "Provide ticker_symbol, ma_type, short_period, and long_period. Optionally specify price_field. Returns moving average values and crossover signals.",
    "output_details": {
      "crossover_signals": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Array of crossover signals with timestamps and direction"
      },
      "current_trend": {
        "type": "string",
        "description": "Current trend based on MA relationship: bullish, bearish, or neutral"
      },
      "signal_count": {
        "type": "integer",
        "description": "Total number of crossover signals generated"
      },
      "latest_short_ma": {
        "type": "number",
        "description": "Most recent short-term moving average value"
      },
      "latest_long_ma": {
        "type": "number",
        "description": "Most recent long-term moving average value"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Momentum Indicator Generator",
    "tool_description": "Calculates momentum-based technical indicators including RSI, MACD, Stochastic, and generates buy/sell signals based on momentum conditions.",
    "parameters": {
      "ticker_symbol": {
        "type": "string",
        "required": true,
        "description": "Stock ticker symbol for momentum analysis"
      },
      "indicators": {
        "type": "array",
        "required": true,
        "items": {
          "type": "string"
        },
        "description": "List of momentum indicators to calculate: RSI, MACD, Stochastic, Williams_R, CCI"
      },
      "rsi_period": {
        "type": "integer",
        "required": false,
        "default": 14,
        "description": "RSI calculation period (5-50)"
      },
      "rsi_overbought": {
        "type": "number",
        "required": false,
        "default": 70,
        "description": "RSI overbought threshold (70-90)"
      },
      "rsi_oversold": {
        "type": "number",
        "required": false,
        "default": 30,
        "description": "RSI oversold threshold (10-30)"
      },
      "macd_fast": {
        "type": "integer",
        "required": false,
        "default": 12,
        "description": "MACD fast EMA period (8-15)"
      },
      "macd_slow": {
        "type": "integer",
        "required": false,
        "default": 26,
        "description": "MACD slow EMA period (20-35)"
      },
      "macd_signal": {
        "type": "integer",
        "required": false,
        "default": 9,
        "description": "MACD signal line period (5-15)"
      },
      "stoch_k_period": {
        "type": "integer",
        "required": false,
        "default": 14,
        "description": "Stochastic %K period (10-25)"
      },
      "stoch_d_period": {
        "type": "integer",
        "required": false,
        "default": 3,
        "description": "Stochastic %D smoothing period (1-5)"
      }
    },
    "error_messages": [
      "Invalid indicators: Use combinations of [RSI, MACD, Stochastic, Williams_R, CCI].",
      "Invalid RSI parameters: rsi_period must be 5-50, overbought 70-90, oversold 10-30.",
      "Invalid MACD parameters: fast period 8-15, slow period 20-35, signal period 5-15, with fast < slow.",
      "Invalid Stochastic parameters: %K period 10-25, %D period 1-5.",
      "Insufficient data: Need at least 50 data points for reliable momentum calculations.",
      "Empty indicators array: At least one indicator must be specified."
    ],
    "usage": "Specify ticker_symbol and indicators array. Adjust period and threshold parameters as needed. Returns calculated indicator values and momentum-based trading signals.",
    "output_details": {
      "momentum_signals": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Array of momentum-based buy/sell signals with timestamps"
      },
      "indicator_values": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Current values of all calculated indicators"
      },
      "momentum_strength": {
        "type": "string",
        "description": "Overall momentum assessment: strong_bullish, weak_bullish, neutral, weak_bearish, strong_bearish"
      },
      "signals_generated": {
        "type": "integer",
        "description": "Total number of momentum signals generated"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Volume Indicator Calculator",
    "tool_description": "Calculates volume-based indicators such as OBV, Volume Rate of Change, and Accumulation/Distribution Line to analyze price-volume relationships.",
    "parameters": {
      "ticker_symbol": {
        "type": "string",
        "required": true,
        "description": "Stock ticker symbol for volume analysis"
      },
      "volume_indicators": {
        "type": "array",
        "required": true,
        "items": {
          "type": "string"
        },
        "description": "Volume indicators to calculate: OBV, VROC, AD_LINE, CMF, VWAP"
      },
      "vroc_period": {
        "type": "integer",
        "required": false,
        "default": 14,
        "description": "Volume Rate of Change period (5-30)"
      },
      "cmf_period": {
        "type": "integer",
        "required": false,
        "default": 20,
        "description": "Chaikin Money Flow period (10-30)"
      },
      "vwap_period": {
        "type": "integer",
        "required": false,
        "default": 20,
        "description": "Volume Weighted Average Price period (10-50)"
      }
    },
    "error_messages": [
      "Invalid volume indicators: Use combinations of [OBV, VROC, AD_LINE, CMF, VWAP].",
      "Invalid periods: vroc_period 5-30, cmf_period 10-30, vwap_period 10-50.",
      "Missing volume data: Volume data is required but not available for the specified ticker.",
      "Insufficient data: Need at least 30 data points for reliable volume indicator calculations.",
      "Zero volume detected: Cannot calculate volume indicators with zero or negative volume values."
    ],
    "usage": "Provide ticker_symbol and volume_indicators array. Adjust period parameters as needed. Returns volume indicator values and volume-based signals.",
    "output_details": {
      "volume_signals": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Volume-based trading signals with timestamps"
      },
      "volume_trend": {
        "type": "string",
        "description": "Current volume trend: increasing, decreasing, or stable"
      },
      "price_volume_divergence": {
        "type": "boolean",
        "description": "Whether price and volume show divergence patterns"
      },
      "volume_confirmation": {
        "type": "string",
        "description": "Volume confirmation of price moves: confirmed, weak, or conflicting"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Volatility Indicator Generator",
    "tool_description": "Calculates volatility-based indicators including Bollinger Bands, Average True Range, and volatility-based trading signals for risk assessment.",
    "parameters": {
      "ticker_symbol": {
        "type": "string",
        "required": true,
        "description": "Stock ticker symbol for volatility analysis"
      },
      "bb_period": {
        "type": "integer",
        "required": false,
        "default": 20,
        "description": "Bollinger Bands period (10-50)"
      },
      "bb_std_dev": {
        "type": "number",
        "required": false,
        "default": 2.0,
        "description": "Bollinger Bands standard deviation multiplier (1.5-3.0)"
      },
      "atr_period": {
        "type": "integer",
        "required": false,
        "default": 14,
        "description": "Average True Range period (5-30)"
      },
      "volatility_threshold": {
        "type": "number",
        "required": false,
        "default": 0.02,
        "description": "Volatility threshold for signal generation (0.01-0.10)"
      }
    },
    "error_messages": [
      "Invalid Bollinger parameters: bb_period 10-50, bb_std_dev 1.5-3.0.",
      "Invalid ATR period: atr_period must be between 5-30.",
      "Invalid volatility threshold: Must be between 0.01-0.10.",
      "Insufficient data: Need at least bb_period + 10 data points for calculations.",
      "Missing OHLC data: High, low, and close prices required for volatility calculations."
    ],
    "usage": "Specify ticker_symbol and adjust volatility indicator parameters. Returns volatility indicators and signals based on volatility breakouts and mean reversion.",
    "output_details": {
      "volatility_signals": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Volatility-based trading signals with timestamps"
      },
      "current_volatility": {
        "type": "string",
        "description": "Current volatility level: low, normal, high, or extreme"
      },
      "bb_position": {
        "type": "string",
        "description": "Current price position relative to Bollinger Bands: below_lower, middle, above_upper"
      },
      "volatility_trend": {
        "type": "string",
        "description": "Volatility trend direction: expanding, contracting, or stable"
      },
      "atr_value": {
        "type": "number",
        "description": "Current Average True Range value"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Pattern Recognition Engine",
    "tool_description": "Identifies chart patterns and candlestick formations in price data, generating pattern-based trading signals with confidence levels.",
    "parameters": {
      "ticker_symbol": {
        "type": "string",
        "required": true,
        "description": "Stock ticker symbol for pattern analysis"
      },
      "pattern_types": {
        "type": "array",
        "required": true,
        "items": {
          "type": "string"
        },
        "description": "Pattern types to detect: candlestick, chart_patterns, or both"
      },
      "candlestick_patterns": {
        "type": "array",
        "required": false,
        "default": ["doji", "hammer", "engulfing", "harami"],
        "items": {
          "type": "string"
        },
        "description": "Specific candlestick patterns to identify"
      },
      "chart_patterns": {
        "type": "array",
        "required": false,
        "default": ["head_shoulders", "triangle", "flag", "wedge"],
        "items": {
          "type": "string"
        },
        "description": "Chart patterns to identify"
      },
      "lookback_period": {
        "type": "integer",
        "required": false,
        "default": 50,
        "description": "Number of periods to analyze for pattern detection (20-200)"
      },
      "min_pattern_confidence": {
        "type": "number",
        "required": false,
        "default": 0.7,
        "description": "Minimum confidence level for pattern recognition (0.5-1.0)"
      }
    },
    "error_messages": [
      "Invalid pattern types: Use [candlestick, chart_patterns] or both.",
      "Invalid lookback period: Must be between 20-200 periods.",
      "Invalid confidence threshold: Must be between 0.5-1.0.",
      "Insufficient data: Need at least lookback_period + 20 data points for pattern detection.",
      "Unknown pattern specified: Check candlestick_patterns and chart_patterns arrays for valid pattern names."
    ],
    "usage": "Specify ticker_symbol and pattern_types. Configure specific patterns to detect and adjust confidence thresholds. Returns identified patterns with confidence scores and trading implications.",
    "output_details": {
      "patterns_detected": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of detected patterns with timestamps and confidence scores"
      },
      "pattern_signals": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Trading signals derived from detected patterns"
      },
      "pattern_count": {
        "type": "integer",
        "description": "Total number of patterns identified"
      },
      "highest_confidence_pattern": {
        "type": "string",
        "description": "Pattern with the highest confidence score"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Support Resistance Detector",
    "tool_description": "Identifies key support and resistance levels using multiple methods including pivot points, volume profile, and psychological levels.",
    "parameters": {
      "ticker_symbol": {
        "type": "string",
        "required": true,
        "description": "Stock ticker symbol for level detection"
      },
      "detection_methods": {
        "type": "array",
        "required": true,
        "items": {
          "type": "string"
        },
        "description": "Methods to use: pivot_points, volume_profile, psychological, fractal"
      },
      "lookback_days": {
        "type": "integer",
        "required": false,
        "default": 30,
        "description": "Number of trading days to analyze (10-100)"
      },
      "min_touches": {
        "type": "integer",
        "required": false,
        "default": 2,
        "description": "Minimum number of price touches to confirm a level (2-5)"
      },
      "level_strength_threshold": {
        "type": "number",
        "required": false,
        "default": 0.6,
        "description": "Minimum strength score for level confirmation (0.3-1.0)"
      }
    },
    "error_messages": [
      "Invalid detection methods: Use combinations of [pivot_points, volume_profile, psychological, fractal].",
      "Invalid lookback period: Must be between 10-100 trading days.",
      "Invalid min_touches: Must be between 2-5 touches for level confirmation.",
      "Invalid strength threshold: Must be between 0.3-1.0.",
      "Insufficient data: Need at least lookback_days + 10 data points for level detection.",
      "No volume data: volume_profile method requires volume data."
    ],
    "usage": "Provide ticker_symbol and detection_methods. Configure lookback period and confirmation parameters. Returns identified support/resistance levels with strength ratings.",
    "output_details": {
      "support_levels": {
        "type": "array",
        "items": {
          "type": "number"
        },
        "description": "Identified support price levels"
      },
      "resistance_levels": {
        "type": "array",
        "items": {
          "type": "number"
        },
        "description": "Identified resistance price levels"
      },
      "level_signals": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Trading signals based on level interactions"
      },
      "nearest_support": {
        "type": "number",
        "description": "Closest support level below current price"
      },
      "nearest_resistance": {
        "type": "number",
        "description": "Closest resistance level above current price"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Signal Aggregator",
    "tool_description": "Combines multiple technical indicator signals using weighted scoring and consensus methods to generate unified trading recommendations.",
    "parameters": {
      "signal_sources": {
        "type": "array",
        "required": true,
        "items": {
          "type": "string"
        },
        "description": "Types of signals to aggregate: trend, momentum, volume, volatility, pattern, level"
      },
      "aggregation_method": {
        "type": "string",
        "required": true,
        "description": "Method for combining signals: weighted_average, consensus, majority_vote"
      },
      "trend_weight": {
        "type": "number",
        "required": false,
        "default": 0.25,
        "description": "Weight for trend signals (0.0-1.0)"
      },
      "momentum_weight": {
        "type": "number",
        "required": false,
        "default": 0.25,
        "description": "Weight for momentum signals (0.0-1.0)"
      },
      "volume_weight": {
        "type": "number",
        "required": false,
        "default": 0.15,
        "description": "Weight for volume signals (0.0-1.0)"
      },
      "volatility_weight": {
        "type": "number",
        "required": false,
        "default": 0.15,
        "description": "Weight for volatility signals (0.0-1.0)"
      },
      "pattern_weight": {
        "type": "number",
        "required": false,
        "default": 0.10,
        "description": "Weight for pattern signals (0.0-1.0)"
      },
      "level_weight": {
        "type": "number",
        "required": false,
        "default": 0.10,
        "description": "Weight for support/resistance level signals (0.0-1.0)"
      },
      "min_signal_strength": {
        "type": "number",
        "required": false,
        "default": 0.6,
        "description": "Minimum aggregated signal strength for output (0.3-1.0)"
      }
    },
    "error_messages": [
      "Invalid signal sources: Use combinations of [trend, momentum, volume, volatility, pattern, level].",
      "Invalid aggregation method: Use one of [weighted_average, consensus, majority_vote].",
      "Invalid weights: All weight parameters must be between 0.0-1.0 and sum to approximately 1.0.",
      "Invalid signal strength: min_signal_strength must be between 0.3-1.0.",
      "No input signals: At least one signal source must be provided.",
      "Missing signal data: Required signal data not available for specified sources."
    ],
    "usage": "Specify signal_sources and aggregation_method. Adjust weights for different signal types based on strategy preferences. Returns aggregated signals with overall strength scores.",
    "output_details": {
      "aggregated_signals": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Final aggregated trading signals with timestamps and strength"
      },
      "signal_consensus": {
        "type": "string",
        "description": "Overall signal consensus: strong_buy, buy, hold, sell, strong_sell"
      },
      "signal_strength": {
        "type": "number",
        "description": "Aggregated signal strength score (0.0-1.0)"
      },
      "contributing_signals": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Individual signals that contributed to the final recommendation"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Signal Filter",
    "tool_description": "Filters and refines trading signals by applying noise reduction, time-based filtering, and market condition checks to improve signal quality.",
    "parameters": {
      "filter_methods": {
        "type": "array",
        "required": true,
        "items": {
          "type": "string"
        },
        "description": "Filtering methods to apply: noise_reduction, time_filter, market_hours, volatility_filter"
      },
      "noise_threshold": {
        "type": "number",
        "required": false,
        "default": 0.02,
        "description": "Price movement threshold for noise filtering (0.005-0.05)"
      },
      "min_signal_gap": {
        "type": "integer",
        "required": false,
        "default": 5,
        "description": "Minimum periods between signals to avoid over-trading (1-20)"
      },
      "market_session": {
        "type": "string",
        "required": false,
        "default": "regular",
        "description": "Market session filter: regular, extended, or all"
      }
    },
    "error_messages": [
      "Invalid filter methods: Use combinations of [noise_reduction, time_filter, market_hours, volatility_filter].",
      "Invalid noise threshold: Must be between 0.005-0.05.",
      "Invalid signal gap: min_signal_gap must be between 1-20 periods.",
      "Invalid market session: Use one of [regular, extended, all].",
      "No signals to filter: Input signal array is empty or missing."
    ],
    "usage": "Specify filter_methods to apply and configure filtering parameters. Input raw signals will be processed and refined based on selected criteria.",
    "output_details": {
      "filtered_signals": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Filtered trading signals after applying specified filters"
      },
      "signals_removed": {
        "type": "integer",
        "description": "Number of signals filtered out"
      },
      "filter_effectiveness": {
        "type": "number",
        "description": "Percentage of original signals retained after filtering"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Backtest Signal Validator",
    "tool_description": "Validates trading signals by backtesting against historical data and calculating performance metrics including returns, drawdown, and win rates.",
    "parameters": {
      "ticker_symbol": {
        "type": "string",
        "required": true
