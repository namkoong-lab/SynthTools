field_name: negotiation_and_mediation
subfield: Contract Negotiation
task: Contract term analysis and comparison across multiple draft versions
tool_description: |-
  **STEP 1 — Rate task difficulty**

  This task is **hard** due to the complex legal interpretation required, multiple interdependent contract clauses, high risk of errors that could have significant legal and financial consequences, and the need to track nuanced changes across multiple document versions while maintaining legal accuracy.

  **STEP 2 — Set a tool budget**

  Given the hard difficulty rating, I'll target **17 tools** to handle the complex workflows of contract analysis, version comparison, term extraction, risk assessment, and negotiation support.

  **STEP 3 — List all tool names with dependencies and affordances**

  1. **Document Parser** - Consumes: raw contract files → Produces: structured text and metadata
  2. **Term Extractor** - Consumes: structured text → Produces: identified contract terms and clauses
  3. **Clause Classifier** - Consumes: extracted terms → Produces: categorized clause types
  4. **Version Comparator** - Consumes: multiple document versions → Produces: change analysis
  5. **Risk Analyzer** - Consumes: contract terms → Produces: risk assessments
  6. **Compliance Checker** - Consumes: contract terms + regulations → Produces: compliance status
  7. **Financial Calculator** - Consumes: financial terms → Produces: calculated obligations
  8. **Timeline Extractor** - Consumes: contract text → Produces: dates and deadlines
  9. **Party Identifier** - Consumes: contract text → Produces: party information and roles
  10. **Obligation Mapper** - Consumes: contract terms → Produces: mapped responsibilities
  11. **Precedent Matcher** - Consumes: contract terms → Produces: similar clause examples
  12. **Amendment Tracker** - Consumes: version changes → Produces: amendment history
  13. **Negotiation Analyzer** - Consumes: multiple versions → Produces: negotiation patterns
  14. **Term Validator** - Consumes: contract terms → Produces: validity assessments
  15. **Summary Generator** - Consumes: analyzed contract data → Produces: executive summaries
  16. **Recommendation Engine** - Consumes: analysis results → Produces: strategic recommendations
  17. **Report Compiler** - Consumes: all analysis outputs → Produces: comprehensive reports

  **STEP 4 — Multi-tool plans**

  **Simple plans:**
  1. **Basic Term Review**: Document Parser → Term Extractor → Summary Generator (analyze single contract version)
  2. **Quick Compliance Check**: Document Parser → Term Extractor → Compliance Checker (verify regulatory alignment)

  **Medium plans:**
  1. **Risk Assessment Workflow**: Document Parser → Term Extractor → Clause Classifier → Risk Analyzer → Financial Calculator → Report Compiler
  2. **Version Change Analysis**: Document Parser → Version Comparator → Amendment Tracker → Negotiation Analyzer → Summary Generator

  **Complex plans:**
  1. **Comprehensive Contract Analysis**: Document Parser → Term Extractor → Clause Classifier → Party Identifier → Timeline Extractor → Obligation Mapper → Risk Analyzer → Compliance Checker → Financial Calculator → Term Validator → Summary Generator → Report Compiler
  2. **Full Negotiation Intelligence**: Document Parser → Version Comparator → Term Extractor → Clause Classifier → Amendment Tracker → Negotiation Analyzer → Precedent Matcher → Risk Analyzer → Recommendation Engine → Report Compiler

  **STEP 5 — Produce tools**

  ```json
  {
    "tool_name": "Document Parser",
    "tool_description": "Parses contract documents in various formats and extracts structured text content with metadata for further analysis.",
    "parameters": {
      "file_path": {
        "type": "string",
        "required": true,
        "description": "Path to the contract document file"
      },
      "file_format": {
        "type": "string",
        "required": true,
        "description": "Document format: pdf, docx, txt, html"
      }
    },
    "error_messages": [
      "File not found: Ensure the file path is correct and the file exists",
      "Unsupported format: Use one of [pdf, docx, txt, html]",
      "Corrupted file: The document appears to be damaged or unreadable",
      "Access denied: Check file permissions and ensure read access"
    ],
    "usage": "Provide the file path and format of the contract document. The tool will extract and structure the text content for downstream analysis.",
    "output_details": {
      "text_content": {
        "type": "string",
        "description": "Full extracted text content from the document"
      },
      "page_count": {
        "type": "integer",
        "description": "Number of pages in the document"
      },
      "word_count": {
        "type": "integer",
        "description": "Total word count in the document"
      },
      "extraction_success": {
        "type": "boolean",
        "description": "Whether text extraction was successful"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Term Extractor",
    "tool_description": "Identifies and extracts specific contract terms, clauses, and legal provisions from structured contract text.",
    "parameters": {
      "contract_text": {
        "type": "string",
        "required": true,
        "description": "Full contract text content to analyze"
      },
      "term_types": {
        "type": "array",
        "required": false,
        "default": ["payment", "termination", "liability", "confidentiality", "intellectual_property"],
        "items": {"type": "string"},
        "description": "Types of terms to extract"
      },
      "extraction_depth": {
        "type": "string",
        "required": false,
        "default": "standard",
        "description": "Extraction thoroughness: basic, standard, comprehensive"
      }
    },
    "error_messages": [
      "Empty contract text: Provide valid contract text content",
      "Invalid term types: Use recognized term type categories",
      "Invalid extraction depth: Use one of [basic, standard, comprehensive]",
      "Text too long: Contract text exceeds maximum processing length"
    ],
    "usage": "Input the contract text and specify which term types to extract. The tool will identify relevant clauses and provisions.",
    "output_details": {
      "extracted_terms": {
        "type": "array",
        "items": {"type": "string"},
        "description": "List of identified contract terms and clauses"
      },
      "term_locations": {
        "type": "array",
        "items": {"type": "integer"},
        "description": "Character positions where terms were found"
      },
      "confidence_scores": {
        "type": "array",
        "items": {"type": "number"},
        "description": "Confidence scores for each extracted term"
      },
      "total_terms_found": {
        "type": "integer",
        "description": "Number of terms successfully extracted"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Clause Classifier",
    "tool_description": "Categorizes extracted contract clauses into standard legal categories and identifies their primary functions.",
    "parameters": {
      "clauses": {
        "type": "array",
        "required": true,
        "items": {"type": "string"},
        "description": "List of contract clauses to classify"
      },
      "classification_scheme": {
        "type": "string",
        "required": false,
        "default": "standard",
        "description": "Classification framework: standard, commercial, employment, real_estate"
      }
    },
    "error_messages": [
      "Empty clauses array: Provide at least one clause to classify",
      "Invalid classification scheme: Use one of [standard, commercial, employment, real_estate]",
      "Clause too short: Individual clauses must contain sufficient text for classification",
      "Too many clauses: Maximum 100 clauses per request"
    ],
    "usage": "Provide extracted clauses and select a classification scheme. The tool will categorize each clause by type and function.",
    "output_details": {
      "clause_categories": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Category assigned to each clause"
      },
      "clause_functions": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Primary function of each clause"
      },
      "classification_confidence": {
        "type": "array",
        "items": {"type": "number"},
        "description": "Confidence scores for classifications"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Version Comparator",
    "tool_description": "Compares multiple versions of contract documents and identifies changes, additions, deletions, and modifications between versions.",
    "parameters": {
      "base_version_text": {
        "type": "string",
        "required": true,
        "description": "Text content of the base contract version"
      },
      "comparison_versions": {
        "type": "array",
        "required": true,
        "items": {"type": "string"},
        "minItems": 1,
        "maxItems": 10,
        "description": "Array of contract version texts to compare against base"
      },
      "version_labels": {
        "type": "array",
        "required": false,
        "default": null,
        "items": {"type": "string"},
        "description": "Labels for each version for easier identification"
      },
      "comparison_granularity": {
        "type": "string",
        "required": false,
        "default": "clause",
        "description": "Level of comparison detail: word, sentence, clause, section"
      },
      "highlight_changes": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Whether to highlight specific changes in output"
      }
    },
    "error_messages": [
      "Missing base version: Base version text is required for comparison",
      "No comparison versions: Provide at least one version to compare",
      "Version mismatch: Number of version labels must match number of versions",
      "Invalid granularity: Use one of [word, sentence, clause, section]",
      "Version too large: Individual version texts exceed maximum size limit"
    ],
    "usage": "Provide base version text and array of comparison versions. Optionally set labels and granularity level. The tool will identify all changes between versions.",
    "output_details": {
      "change_summary": {
        "type": "string",
        "description": "Overall summary of changes found across versions"
      },
      "additions": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Text additions in newer versions"
      },
      "deletions": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Text deletions from base version"
      },
      "modifications": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Modified text segments"
      },
      "change_count": {
        "type": "integer",
        "description": "Total number of changes detected"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Risk Analyzer",
    "tool_description": "Analyzes contract terms and clauses to identify potential legal, financial, and operational risks with severity assessments.",
    "parameters": {
      "contract_terms": {
        "type": "array",
        "required": true,
        "items": {"type": "string"},
        "description": "Contract terms and clauses to analyze for risks"
      },
      "risk_categories": {
        "type": "array",
        "required": false,
        "default": ["legal", "financial", "operational", "reputational"],
        "items": {"type": "string"},
        "description": "Types of risks to assess"
      },
      "party_perspective": {
        "type": "string",
        "required": false,
        "default": "neutral",
        "description": "Perspective for risk analysis: buyer, seller, vendor, client, neutral"
      },
      "industry_context": {
        "type": "string",
        "required": false,
        "default": "general",
        "description": "Industry context for risk assessment"
      }
    },
    "error_messages": [
      "No terms provided: Contract terms array cannot be empty",
      "Invalid risk categories: Use recognized risk category names",
      "Invalid party perspective: Use one of [buyer, seller, vendor, client, neutral]",
      "Terms too complex: Individual terms exceed analysis complexity limit"
    ],
    "usage": "Provide contract terms to analyze, specify risk categories of interest, and set the perspective. The tool will identify and assess various risks.",
    "output_details": {
      "identified_risks": {
        "type": "array",
        "items": {"type": "string"},
        "description": "List of specific risks identified in the contract"
      },
      "risk_severity": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Severity level for each identified risk"
      },
      "risk_categories_found": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Categories of risks present in the contract"
      },
      "mitigation_suggestions": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Suggested approaches to mitigate identified risks"
      },
      "overall_risk_score": {
        "type": "number",
        "description": "Overall risk assessment score from 0-100"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Compliance Checker",
    "tool_description": "Verifies contract terms against relevant regulations, legal requirements, and industry standards to ensure compliance.",
    "parameters": {
      "contract_terms": {
        "type": "array",
        "required": true,
        "items": {"type": "string"},
        "description": "Contract terms to check for compliance"
      },
      "jurisdiction": {
        "type": "string",
        "required": true,
        "description": "Legal jurisdiction for compliance checking"
      },
      "regulations": {
        "type": "array",
        "required": false,
        "default": null,
        "items": {"type": "string"},
        "description": "Specific regulations to check against"
      },
      "industry_standards": {
        "type": "array",
        "required": false,
        "default": null,
        "items": {"type": "string"},
        "description": "Industry standards to verify compliance with"
      },
      "contract_type": {
        "type": "string",
        "required": false,
        "default": "general",
        "description": "Type of contract for context-specific compliance"
      }
    },
    "error_messages": [
      "No terms provided: Contract terms array cannot be empty",
      "Invalid jurisdiction: Provide a recognized legal jurisdiction",
      "Unknown regulations: Specified regulations are not in compliance database",
      "Unsupported contract type: Use a recognized contract type category"
    ],
    "usage": "Provide contract terms and jurisdiction, optionally specify regulations and standards to check. The tool will verify compliance requirements.",
    "output_details": {
      "compliance_status": {
        "type": "string",
        "description": "Overall compliance status: compliant, non_compliant, needs_review"
      },
      "violations_found": {
        "type": "array",
        "items": {"type": "string"},
        "description": "List of compliance violations identified"
      },
      "requirements_met": {
        "type": "array",
        "items": {"type": "string"},
        "description": "List of requirements successfully met"
      },
      "recommendations": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Recommendations to achieve full compliance"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Financial Calculator",
    "tool_description": "Calculates financial obligations, payments, penalties, and monetary impacts from contract financial terms and clauses.",
    "parameters": {
      "financial_terms": {
        "type": "array",
        "required": true,
        "items": {"type": "string"},
        "description": "Financial clauses and terms to calculate"
      },
      "contract_value": {
        "type": "number",
        "required": false,
        "default": null,
        "description": "Total contract value for percentage calculations"
      },
      "currency": {
        "type": "string",
        "required": false,
        "default": "USD",
        "description": "Currency for financial calculations"
      },
      "calculation_date": {
        "type": "string",
        "required": false,
        "default": null,
        "format": "date-time",
        "description": "Date for time-sensitive calculations"
      },
      "interest_rate": {
        "type": "number",
        "required": false,
        "default": null,
        "description": "Interest rate for financial calculations if applicable"
      },
      "payment_schedule": {
        "type": "array",
        "required": false,
        "default": null,
        "items": {"type": "string"},
        "description": "Payment dates for schedule-based calculations"
      },
      "discount_rate": {
        "type": "number",
        "required": false,
        "default": 0.0,
        "description": "Discount rate for present value calculations"
      },
      "penalty_triggers": {
        "type": "array",
        "required": false,
        "default": null,
        "items": {"type": "string"},
        "description": "Conditions that trigger financial penalties"
      }
    },
    "error_messages": [
      "No financial terms: Financial terms array cannot be empty",
      "Invalid currency: Use a recognized currency code",
      "Invalid date format: Use ISO 8601 date-time format",
      "Negative values: Interest and discount rates cannot be negative",
      "Calculation error: Unable to parse financial terms for calculation"
    ],
    "usage": "Provide financial terms and relevant parameters like contract value and currency. The tool will calculate monetary obligations and impacts.",
    "output_details": {
      "total_obligations": {
        "type": "number",
        "description": "Total calculated financial obligations"
      },
      "payment_amounts": {
        "type": "array",
        "items": {"type": "number"},
        "description": "Individual payment amounts calculated"
      },
      "penalty_amounts": {
        "type": "array",
        "items": {"type": "number"},
        "description": "Calculated penalty amounts for various scenarios"
      },
      "present_value": {
        "type": "number",
        "description": "Present value of future payments"
      },
      "calculation_summary": {
        "type": "string",
        "description": "Summary explanation of financial calculations"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Timeline Extractor",
    "tool_description": "Extracts dates, deadlines, milestones, and time-based obligations from contract text and creates a chronological timeline.",
    "parameters": {
      "contract_text": {
        "type": "string",
        "required": true,
        "description": "Contract text to extract timeline information from"
      },
      "reference_date": {
        "type": "string",
        "required": false,
        "default": null,
        "format": "date-time",
        "description": "Reference date for relative date calculations"
      }
    },
    "error_messages": [
      "Empty contract text: Contract text cannot be empty",
      "Invalid reference date: Use ISO 8601 date-time format for reference date",
      "No dates found: Contract text contains no extractable date information",
      "Ambiguous dates: Some dates in contract are ambiguous and require clarification"
    ],
    "usage": "Provide contract text and optionally a reference date for relative date calculations. The tool will extract all time-related information.",
    "output_details": {
      "extracted_dates": {
        "type": "array",
        "items": {"type": "string"},
        "description": "All dates found in the contract in ISO format"
      },
      "deadline_descriptions": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Descriptions of what each deadline represents"
      },
      "milestone_events": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Key milestone events with dates"
      },
      "time_periods": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Duration periods mentioned in the contract"
      },
      "critical_dates": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Most critical dates that require attention"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Party Identifier",
    "tool_description": "Identifies all parties mentioned in the contract, their roles, responsibilities, and relationships to each other.",
    "parameters": {
      "contract_text": {
        "type": "string",
        "required": true,
        "description": "Contract text to analyze for party information"
      }
    },
    "error_messages": [
      "Empty contract text: Contract text cannot be empty",
      "No parties identified: Unable to identify any parties in the contract text",
      "Ambiguous party references: Some party references are unclear and need manual review"
    ],
    "usage": "Provide the complete contract text. The tool will identify all parties, their roles, and relationships mentioned in the contract.",
    "output_details": {
      "primary_parties": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Main contracting parties"
      },
      "secondary_parties": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Additional parties mentioned in the contract"
      },
      "party_roles": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Roles assigned to each identified party"
      },
      "party_relationships": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Relationships between different parties"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Obligation Mapper",
    "tool_description": "Maps and categorizes all obligations, responsibilities, and duties assigned to each party in the contract.",
    "parameters": {
      "contract_terms": {
        "type": "array",
        "required": true,
        "items": {"type": "string"},
        "description": "Contract terms containing obligations to map"
      },
      "parties": {
        "type": "array",
        "required": true,
        "items": {"type": "string"},
        "description": "List of parties whose obligations to map"
      },
      "obligation_types": {
        "type": "array",
        "required": false,
        "default": ["performance", "payment", "delivery", "compliance", "reporting"],
        "items": {"type": "string"},
        "description": "Types of obligations to identify"
      }
    },
    "error_messages": [
      "No contract terms: Contract terms array cannot be empty",
      "No parties specified: Parties array cannot be empty",
      "Invalid obligation types: Use recognized obligation type categories",
      "Mapping conflict: Conflicting obligations detected that require resolution"
    ],
    "usage": "Provide contract terms and list of parties, optionally specify obligation types. The tool will map all obligations to responsible parties.",
    "output_details": {
      "obligation_map": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Mapped obligations showing party assignments"
      },
      "mutual_obligations": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Obligations that apply to multiple parties"
      },
      "conditional_obligations": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Obligations that depend on specific conditions"
      },
      "obligation_priorities": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Priority levels assigned to different obligations"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Precedent Matcher",
    "tool_description": "Matches contract clauses with similar precedent clauses from legal databases and suggests alternative formulations.",
    "parameters": {
      "target_clauses": {
        "type": "array",
        "required": true,
        "items": {"type": "string"},
        "description": "Contract clauses to find precedents for"
      },
      "jurisdiction": {
        "type": "string",
        "required": true,
        "description": "Legal jurisdiction for precedent matching"
      },
      "contract_type": {
        "type": "string",
        "required": false,
        "default": "general",
        "description": "Type of contract for context-specific matching"
      }
    },
    "error_messages": [
      "No clauses provided: Target clauses array cannot be empty",
      "Invalid jurisdiction: Provide a recognized legal jurisdiction",
      "No precedents found: No similar clauses found in precedent database",
      "Clause too short: Clauses must contain sufficient text for meaningful matching"
    ],
    "usage": "Provide clauses to match and specify jurisdiction and contract type. The tool will find similar precedent clauses and suggest alternatives.",
    "output_details": {
      "matched_precedents": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Similar precedent clauses found"
      },
      "similarity_scores": {
        "type": "array",
        "items": {"type": "number"},
        "description": "Similarity scores for each matched precedent"
      },
      "alternative_formulations": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Suggested alternative clause formulations"
      },
      "precedent_sources": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Sources of the matched precedent clauses"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Amendment Tracker",
    "tool_description": "Tracks and analyzes the history of amendments and changes across multiple contract versions with change categorization.",
    "parameters": {
      "version_changes": {
        "type": "array",
        "required": true,
        "items": {"type": "string"},
        "description": "Changes identified between contract versions"
      },
      "version_dates": {
        "type": "array",
        "required": true,
        "items": {"type": "string"},
        "description": "Dates when each version was created",
        "format": "date-time"
      },
      "change_categories": {
        "type": "array",
        "required": false,
        "default": ["financial", "scope", "timeline", "terms", "parties"],
        "items": {"type": "string"},
        "description": "Categories to classify changes into"
      }
    },
    "error_messages": [
      "No changes provided: Version changes array cannot be empty",
      "Date mismatch: Number of dates must match number of changes",
      "Invalid date format: Use ISO 8601 date-time format for version dates",
      "Invalid categories: Use recognized change category names"
    ],
    "usage": "Provide version changes with corresponding dates and optionally specify change categories. The tool will track amendment patterns.",
    "output_details": {
      "amendment_timeline": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Chronological timeline of all amendments"
      },
      "change_patterns": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Patterns identified in the amendment history"
      },
      "major_revisions": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Significant revisions that substantially changed the contract"
      },
      "amendment_frequency": {
        "type": "number",
        "description": "Average frequency of amendments over time"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Negotiation Analyzer",
    "tool_description": "Analyzes negotiation patterns and strategies based on changes between contract versions and provides insights for future negotiations.",
    "parameters": {
      "version_comparison_data": {
        "type": "array",
        "required": true,
        "items": {"type": "string"},
        "description": "Comparison data from multiple contract versions"
      },
      "negotiation_phases": {
        "type": "array",
        "required": false,
        "default": null,
        "items": {"type": "string"},
        "description": "Identified phases of the negotiation process"
      },
      "party_positions": {
        "type": "array",
        "required": false,
        "default": null,
        "items": {"type": "string"},
        "description": "Known positions of negotiating parties"
      }
    },
    "error_messages": [
      "No comparison data: Version comparison data array cannot be empty",
      "Insufficient data: Need data from at least two versions for analysis",
      "Invalid phase data: Negotiation phases must correspond to version data",
      "Analysis incomplete: Unable to determine clear negotiation patterns"
    ],
    "usage": "Provide version comparison data and optionally negotiation phases and party positions. The tool will analyze negotiation dynamics and strategies.",
    "output_details": {
      "negotiation_patterns": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Identified patterns in the negotiation process"
      },
      "concession_analysis": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Analysis of concessions made by each party"
      },
      "strategic_insights": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Strategic insights for future negotiations"
      },
      "negotiation_effectiveness": {
        "type": "number",
        "description": "Overall effectiveness score of the negotiation process"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Term Validator",
    "tool_description": "Validates contract terms for legal enforceability, clarity, and completeness with suggestions for improvement.",
    "parameters": {
      "terms_to_validate": {
        "type": "array",
        "required": true,
        "items": {"type": "string"},
        "description": "Contract terms to validate"
      },
      "validation_criteria": {
        "type": "array",
        "required": false,
        "default": ["enforceability", "clarity", "completeness", "consistency"],
        "items": {"type": "string"},
        "description": "Criteria to validate terms against"
      },
      "jurisdiction": {
        "type": "string",
        "required": true,
        "description": "Legal jurisdiction for validation context"
      }
    },
    "error_messages": [
      "No terms provided: Terms to validate array cannot be empty",
      "Invalid jurisdiction: Provide a recognized legal jurisdiction",
      "Invalid criteria: Use recognized validation criteria",
      "Validation failed: Unable to complete validation for some terms"
    ],
    "usage": "Provide terms to validate with jurisdiction and optionally specify validation criteria. The tool will assess term validity and suggest improvements.",
    "output_details": {
      "validation_results": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Validation results for each term"
      },
      "validity_scores": {
        "type":
