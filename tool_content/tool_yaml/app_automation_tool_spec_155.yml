field_name: app_automation
subfield: web_application_testing
task: Performance and load testing of web applications under various traffic conditions
tool_description: |-
  **STEP 1 — Rate task difficulty**

  This task is **hard**. Performance and load testing involves complex coordination of multiple testing phases, managing diverse traffic patterns, monitoring numerous system metrics simultaneously, analyzing performance bottlenecks across different infrastructure layers, and handling potential cascade failures. The scope includes network simulation, database performance, server resources, and user experience metrics with high risk if errors lead to production issues.

  **STEP 2 — Set a tool budget**

  Given the hard difficulty rating, I'm targeting **17 tools** to cover the comprehensive workflow of performance testing, from test configuration and traffic simulation to monitoring, analysis, and reporting.

  **STEP 3 — List all tool names with dependencies and affordances**

  1. **Test Configuration Builder** - Consumes: test requirements → Produces: test configuration
  2. **Traffic Pattern Generator** - Consumes: user behavior specs → Produces: traffic simulation rules
  3. **Load Test Executor** - Consumes: test config, traffic patterns → Produces: test execution status
  4. **Resource Monitor** - Consumes: system endpoints → Produces: resource utilization metrics
  5. **Response Time Tracker** - Consumes: HTTP endpoints → Produces: latency measurements
  6. **Database Performance Analyzer** - Consumes: DB connection details → Produces: DB performance metrics
  7. **Network Latency Simulator** - Consumes: network conditions → Produces: simulated network environment
  8. **Concurrent User Simulator** - Consumes: user session specs → Produces: concurrent user load
  9. **Stress Test Controller** - Consumes: stress parameters → Produces: stress test execution
  10. **Memory Usage Monitor** - Consumes: system processes → Produces: memory utilization data
  11. **Error Rate Analyzer** - Consumes: test results → Produces: error analysis
  12. **Throughput Measurer** - Consumes: request/response data → Produces: throughput metrics
  13. **Bottleneck Detector** - Consumes: performance metrics → Produces: bottleneck identification
  14. **Test Results Aggregator** - Consumes: multiple metric sources → Produces: consolidated results
  15. **Performance Report Generator** - Consumes: aggregated results → Produces: formatted reports
  16. **Baseline Comparator** - Consumes: current and historical metrics → Produces: performance comparison
  17. **Alert Configuration Manager** - Consumes: threshold specs → Produces: monitoring alerts

  **STEP 4 — Multi-tool plans**

  **Simple Plans:**
  1. Basic Load Test: Test Configuration Builder → Load Test Executor → Response Time Tracker → Performance Report Generator
  2. Resource Monitoring: Resource Monitor → Memory Usage Monitor → Test Results Aggregator → Performance Report Generator

  **Medium Plans:**
  1. Standard Performance Test: Test Configuration Builder → Traffic Pattern Generator → Load Test Executor → Response Time Tracker → Resource Monitor → Error Rate Analyzer → Performance Report Generator
  2. Database-focused Testing: Test Configuration Builder → Concurrent User Simulator → Database Performance Analyzer → Throughput Measurer → Bottleneck Detector → Performance Report Generator

  **Complex Plans:**
  1. Comprehensive Load Testing: Test Configuration Builder → Traffic Pattern Generator → Network Latency Simulator → Load Test Executor → Concurrent User Simulator → Resource Monitor → Response Time Tracker → Database Performance Analyzer → Memory Usage Monitor → Error Rate Analyzer → Throughput Measurer → Bottleneck Detector → Test Results Aggregator → Baseline Comparator → Performance Report Generator → Alert Configuration Manager
  2. Stress Testing with Analysis: Test Configuration Builder → Stress Test Controller → Network Latency Simulator → Resource Monitor → Response Time Tracker → Memory Usage Monitor → Error Rate Analyzer → Bottleneck Detector → Test Results Aggregator → Performance Report Generator

  **STEP 5 — Produce tools**

  ```json
  {
    "tool_name": "Test Configuration Builder",
    "tool_description": "Creates comprehensive test configurations for load and performance testing scenarios, defining test parameters, duration, and success criteria.",
    "parameters": {
      "test_name": {
        "type": "string",
        "required": true,
        "description": "Unique identifier for the test configuration"
      },
      "target_url": {
        "type": "string",
        "required": true,
        "description": "Base URL of the web application to test"
      },
      "test_duration_minutes": {
        "type": "integer",
        "required": true,
        "description": "Duration of the test in minutes (1-1440)"
      },
      "max_response_time_ms": {
        "type": "integer",
        "required": false,
        "default": 5000,
        "description": "Maximum acceptable response time in milliseconds"
      },
      "success_rate_threshold": {
        "type": "number",
        "required": false,
        "default": 95.0,
        "description": "Minimum success rate percentage (0-100)"
      }
    },
    "error_messages": [
      "Invalid test duration: Duration must be between 1 and 1440 minutes",
      "Invalid URL format: Provide a valid HTTP/HTTPS URL",
      "Invalid response time threshold: Must be between 100 and 60000 milliseconds",
      "Invalid success rate: Must be between 0 and 100 percent"
    ],
    "usage": "Specify test_name, target_url, and test_duration_minutes. Optionally configure max_response_time_ms and success_rate_threshold to customize pass/fail criteria.",
    "output_details": {
      "config_id": {
        "type": "string",
        "description": "Unique identifier for the created configuration"
      },
      "validation_status": {
        "type": "string",
        "description": "Configuration validation result (valid/invalid)"
      },
      "estimated_resources": {
        "type": "string",
        "description": "Estimated resource requirements for the test"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Traffic Pattern Generator",
    "tool_description": "Generates realistic traffic patterns for load testing, simulating various user behaviors and traffic distributions over time.",
    "parameters": {
      "pattern_type": {
        "type": "string",
        "required": true,
        "description": "Type of traffic pattern: constant, ramp_up, spike, wave, step"
      },
      "base_users": {
        "type": "integer",
        "required": true,
        "description": "Base number of concurrent users (1-10000)"
      },
      "peak_users": {
        "type": "integer",
        "required": true,
        "description": "Peak number of concurrent users (1-50000)"
      },
      "ramp_duration_minutes": {
        "type": "integer",
        "required": false,
        "default": 5,
        "description": "Duration to reach peak users in minutes"
      },
      "user_session_duration": {
        "type": "integer",
        "required": false,
        "default": 300,
        "description": "Average user session duration in seconds"
      },
      "think_time_seconds": {
        "type": "integer",
        "required": false,
        "default": 5,
        "description": "Average think time between requests in seconds"
      }
    },
    "error_messages": [
      "Invalid pattern type: Use one of [constant, ramp_up, spike, wave, step]",
      "Invalid user count: base_users must be less than peak_users and within valid ranges",
      "Invalid duration: ramp_duration_minutes must be between 1 and 60 minutes",
      "Invalid session parameters: user_session_duration must be 30-7200 seconds, think_time_seconds must be 1-300 seconds"
    ],
    "usage": "Define pattern_type, base_users, and peak_users. Optionally adjust ramp_duration_minutes, user_session_duration, and think_time_seconds for realistic user simulation.",
    "output_details": {
      "pattern_id": {
        "type": "string",
        "description": "Unique identifier for the traffic pattern"
      },
      "timeline": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Timeline of user load changes over test duration"
      },
      "estimated_requests_per_second": {
        "type": "number",
        "description": "Estimated peak requests per second"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Load Test Executor",
    "tool_description": "Executes load tests based on configuration and traffic patterns, managing test lifecycle and collecting basic execution metrics.",
    "parameters": {
      "config_id": {
        "type": "string",
        "required": true,
        "description": "Test configuration identifier"
      },
      "pattern_id": {
        "type": "string",
        "required": true,
        "description": "Traffic pattern identifier"
      },
      "execution_mode": {
        "type": "string",
        "required": false,
        "default": "normal",
        "description": "Execution mode: normal, debug, dry_run"
      }
    },
    "error_messages": [
      "Configuration not found: The specified config_id does not exist",
      "Pattern not found: The specified pattern_id does not exist",
      "Invalid execution mode: Use one of [normal, debug, dry_run]",
      "Test already running: Another test is currently executing"
    ],
    "usage": "Provide valid config_id and pattern_id from previously created configurations. Set execution_mode to debug for verbose logging or dry_run for validation without execution.",
    "output_details": {
      "execution_id": {
        "type": "string",
        "description": "Unique identifier for this test execution"
      },
      "status": {
        "type": "string",
        "description": "Current execution status (starting, running, completed, failed)"
      },
      "start_time": {
        "type": "string",
        "description": "Test start timestamp in ISO 8601 format"
      },
      "progress_percentage": {
        "type": "number",
        "description": "Test completion percentage (0-100)"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Resource Monitor",
    "tool_description": "Monitors system resources including CPU, memory, disk I/O, and network usage during load testing to identify resource constraints.",
    "parameters": {
      "target_servers": {
        "type": "array",
        "required": true,
        "items": {"type": "string"},
        "description": "List of server hostnames or IP addresses to monitor",
        "minItems": 1,
        "maxItems": 50
      },
      "monitoring_interval_seconds": {
        "type": "integer",
        "required": false,
        "default": 10,
        "description": "Frequency of resource sampling in seconds (1-300)"
      },
      "cpu_threshold_percent": {
        "type": "number",
        "required": false,
        "default": 80.0,
        "description": "CPU usage alert threshold percentage"
      },
      "memory_threshold_percent": {
        "type": "number",
        "required": false,
        "default": 85.0,
        "description": "Memory usage alert threshold percentage"
      },
      "disk_threshold_percent": {
        "type": "number",
        "required": false,
        "default": 90.0,
        "description": "Disk usage alert threshold percentage"
      },
      "network_threshold_mbps": {
        "type": "number",
        "required": false,
        "default": 1000.0,
        "description": "Network throughput alert threshold in Mbps"
      },
      "collect_process_details": {
        "type": "boolean",
        "required": false,
        "default": false,
        "description": "Whether to collect detailed process-level metrics"
      },
      "authentication_token": {
        "type": "string",
        "required": false,
        "default": "None",
        "description": "Authentication token for accessing server metrics"
      },
      "port": {
        "type": "integer",
        "required": false,
        "default": 22,
        "description": "Port for server connection (1-65535)"
      },
      "timeout_seconds": {
        "type": "integer",
        "required": false,
        "default": 30,
        "description": "Connection timeout in seconds (5-300)"
      },
      "retry_count": {
        "type": "integer",
        "required": false,
        "default": 3,
        "description": "Number of retry attempts for failed connections (0-10)"
      },
      "ssl_verify": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Whether to verify SSL certificates"
      }
    },
    "error_messages": [
      "Server connection failed: Unable to connect to one or more target servers. Verify hostnames, network connectivity, and authentication credentials",
      "Invalid monitoring interval: Interval must be between 1 and 300 seconds",
      "Invalid threshold values: All threshold percentages must be between 1 and 100",
      "Authentication failed: Invalid or expired authentication token",
      "Permission denied: Insufficient privileges to access system metrics on target servers"
    ],
    "usage": "Specify target_servers array with hostnames/IPs to monitor. Configure monitoring_interval_seconds and threshold values for alerts. Use authentication_token if servers require authentication.",
    "output_details": {
      "monitoring_session_id": {
        "type": "string",
        "description": "Unique identifier for this monitoring session"
      },
      "servers_monitored": {
        "type": "array",
        "items": {"type": "string"},
        "description": "List of successfully connected servers"
      },
      "avg_cpu_usage": {
        "type": "number",
        "description": "Average CPU usage percentage across all servers"
      },
      "avg_memory_usage": {
        "type": "number",
        "description": "Average memory usage percentage across all servers"
      },
      "peak_network_utilization": {
        "type": "number",
        "description": "Peak network utilization in Mbps"
      },
      "alerts_triggered": {
        "type": "array",
        "items": {"type": "string"},
        "description": "List of threshold alerts that were triggered"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Response Time Tracker",
    "tool_description": "Tracks and analyzes HTTP response times for web application endpoints during load testing, providing latency statistics and percentile analysis.",
    "parameters": {
      "endpoints": {
        "type": "array",
        "required": true,
        "items": {"type": "string"},
        "description": "List of HTTP endpoints to monitor for response times",
        "minItems": 1,
        "maxItems": 100
      },
      "request_method": {
        "type": "string",
        "required": false,
        "default": "GET",
        "description": "HTTP method to use for requests (GET, POST, PUT, DELETE)"
      },
      "sampling_rate": {
        "type": "number",
        "required": false,
        "default": 1.0,
        "description": "Percentage of requests to sample (0.1-100)"
      }
    },
    "error_messages": [
      "Invalid endpoints: Provide valid HTTP/HTTPS URLs for all endpoints",
      "Invalid HTTP method: Use one of [GET, POST, PUT, DELETE, PATCH, HEAD]",
      "Invalid sampling rate: Must be between 0.1 and 100 percent",
      "Endpoint unreachable: One or more endpoints are not responding"
    ],
    "usage": "Provide array of endpoints to track. Set request_method for the HTTP method to use and sampling_rate to control measurement frequency.",
    "output_details": {
      "tracking_session_id": {
        "type": "string",
        "description": "Unique identifier for this tracking session"
      },
      "avg_response_time_ms": {
        "type": "number",
        "description": "Average response time across all endpoints in milliseconds"
      },
      "p95_response_time_ms": {
        "type": "number",
        "description": "95th percentile response time in milliseconds"
      },
      "p99_response_time_ms": {
        "type": "number",
        "description": "99th percentile response time in milliseconds"
      },
      "slowest_endpoint": {
        "type": "string",
        "description": "Endpoint with the highest average response time"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Database Performance Analyzer",
    "tool_description": "Analyzes database performance during load testing by monitoring query execution times, connection pools, and database resource utilization.",
    "parameters": {
      "database_host": {
        "type": "string",
        "required": true,
        "description": "Database server hostname or IP address"
      },
      "database_type": {
        "type": "string",
        "required": true,
        "description": "Database type: mysql, postgresql, mongodb, redis, oracle"
      },
      "connection_string": {
        "type": "string",
        "required": true,
        "description": "Database connection string with credentials"
      },
      "monitoring_queries": {
        "type": "array",
        "required": false,
        "default": "None",
        "items": {"type": "string"},
        "description": "Specific queries to monitor for performance"
      }
    },
    "error_messages": [
      "Database connection failed: Unable to connect using provided connection string",
      "Unsupported database type: Use one of [mysql, postgresql, mongodb, redis, oracle, sqlserver]",
      "Invalid connection string format: Provide valid connection string with proper credentials",
      "Query execution failed: One or more monitoring queries failed to execute"
    ],
    "usage": "Provide database_host, database_type, and connection_string for database access. Optionally specify monitoring_queries array to track specific query performance.",
    "output_details": {
      "analysis_session_id": {
        "type": "string",
        "description": "Unique identifier for this analysis session"
      },
      "avg_query_time_ms": {
        "type": "number",
        "description": "Average query execution time in milliseconds"
      },
      "active_connections": {
        "type": "integer",
        "description": "Number of active database connections"
      },
      "connection_pool_utilization": {
        "type": "number",
        "description": "Connection pool utilization percentage"
      },
      "slow_queries_count": {
        "type": "integer",
        "description": "Number of queries exceeding performance thresholds"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Network Latency Simulator",
    "tool_description": "Simulates various network conditions including latency, packet loss, and bandwidth limitations to test application performance under different network scenarios.",
    "parameters": {
      "latency_ms": {
        "type": "integer",
        "required": false,
        "default": 0,
        "description": "Additional network latency in milliseconds (0-5000)"
      },
      "packet_loss_percent": {
        "type": "number",
        "required": false,
        "default": 0.0,
        "description": "Packet loss percentage (0-50)"
      },
      "bandwidth_limit_mbps": {
        "type": "number",
        "required": false,
        "default": "None",
        "description": "Bandwidth limitation in Mbps (0.1-10000)"
      },
      "jitter_ms": {
        "type": "integer",
        "required": false,
        "default": 0,
        "description": "Network jitter variance in milliseconds (0-1000)"
      }
    },
    "error_messages": [
      "Invalid latency value: Latency must be between 0 and 5000 milliseconds",
      "Invalid packet loss: Packet loss must be between 0 and 50 percent",
      "Invalid bandwidth limit: Bandwidth must be between 0.1 and 10000 Mbps",
      "Invalid jitter value: Jitter must be between 0 and 1000 milliseconds"
    ],
    "usage": "Configure network conditions by setting latency_ms, packet_loss_percent, bandwidth_limit_mbps, and jitter_ms. Use default values for normal network conditions.",
    "output_details": {
      "simulation_id": {
        "type": "string",
        "description": "Unique identifier for this network simulation"
      },
      "conditions_applied": {
        "type": "string",
        "description": "Summary of applied network conditions"
      },
      "impact_assessment": {
        "type": "string",
        "description": "Assessment of expected performance impact"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Concurrent User Simulator",
    "tool_description": "Simulates concurrent user sessions with realistic behavior patterns including login, navigation, and transaction flows for comprehensive load testing.",
    "parameters": {
      "user_count": {
        "type": "integer",
        "required": true,
        "description": "Number of concurrent users to simulate (1-10000)"
      },
      "session_duration_minutes": {
        "type": "integer",
        "required": true,
        "description": "Average session duration in minutes (1-480)"
      },
      "user_behavior_pattern": {
        "type": "string",
        "required": true,
        "description": "User behavior type: browsing, shopping, searching, streaming, api_calls"
      },
      "ramp_up_time_minutes": {
        "type": "integer",
        "required": false,
        "default": 2,
        "description": "Time to ramp up all users in minutes (1-60)"
      },
      "think_time_range": {
        "type": "array",
        "required": false,
        "default": "[3, 7]",
        "items": {"type": "integer"},
        "description": "Min and max think time between actions in seconds"
      }
    },
    "error_messages": [
      "Invalid user count: Must be between 1 and 10000 users",
      "Invalid session duration: Must be between 1 and 480 minutes",
      "Invalid behavior pattern: Use one of [browsing, shopping, searching, streaming, api_calls]",
      "Invalid ramp up time: Must be between 1 and 60 minutes",
      "Invalid think time range: Provide array with exactly 2 integers [min, max] where min < max"
    ],
    "usage": "Specify user_count, session_duration_minutes, and user_behavior_pattern. Optionally configure ramp_up_time_minutes and think_time_range for realistic user simulation.",
    "output_details": {
      "simulation_id": {
        "type": "string",
        "description": "Unique identifier for this user simulation"
      },
      "active_users": {
        "type": "integer",
        "description": "Number of currently active simulated users"
      },
      "total_sessions": {
        "type": "integer",
        "description": "Total number of user sessions created"
      },
      "avg_session_duration": {
        "type": "number",
        "description": "Average actual session duration in minutes"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Stress Test Controller",
    "tool_description": "Controls stress testing scenarios by gradually increasing load beyond normal capacity to identify breaking points and system limits.",
    "parameters": {
      "initial_load": {
        "type": "integer",
        "required": true,
        "description": "Starting load level in requests per second (1-1000)"
      },
      "max_load": {
        "type": "integer",
        "required": true,
        "description": "Maximum load level in requests per second (100-50000)"
      },
      "increment_step": {
        "type": "integer",
        "required": true,
        "description": "Load increment per step in requests per second (1-1000)"
      },
      "step_duration_minutes": {
        "type": "integer",
        "required": false,
        "default": 3,
        "description": "Duration of each load step in minutes (1-30)"
      },
      "failure_threshold_percent": {
        "type": "number",
        "required": false,
        "default": 5.0,
        "description": "Error rate threshold to stop test (1-50)"
      }
    },
    "error_messages": [
      "Invalid load parameters: initial_load must be less than max_load and within valid ranges",
      "Invalid increment step: Must be between 1 and 1000, and should not exceed max_load difference",
      "Invalid step duration: Must be between 1 and 30 minutes",
      "Invalid failure threshold: Must be between 1 and 50 percent"
    ],
    "usage": "Define initial_load, max_load, and increment_step for progressive load increase. Configure step_duration_minutes and failure_threshold_percent to control test progression and stopping criteria.",
    "output_details": {
      "stress_test_id": {
        "type": "string",
        "description": "Unique identifier for this stress test"
      },
      "current_load": {
        "type": "integer",
        "description": "Current load level in requests per second"
      },
      "breaking_point": {
        "type": "integer",
        "description": "Load level where system performance degraded significantly"
      },
      "test_status": {
        "type": "string",
        "description": "Current test status (running, completed, failed, stopped)"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Memory Usage Monitor",
    "tool_description": "Monitors application and system memory usage patterns during load testing to identify memory leaks and optimization opportunities.",
    "parameters": {
      "process_names": {
        "type": "array",
        "required": true,
        "items": {"type": "string"},
        "description": "Names of processes to monitor for memory usage",
        "minItems": 1,
        "maxItems": 20
      },
      "sampling_interval_seconds": {
        "type": "integer",
        "required": false,
        "default": 15,
        "description": "Memory sampling frequency in seconds (5-300)"
      }
    },
    "error_messages": [
      "Process not found: One or more specified process names could not be found",
      "Invalid sampling interval: Must be between 5 and 300 seconds",
      "Insufficient permissions: Unable to access memory information for specified processes"
    ],
    "usage": "Provide array of process_names to monitor. Set sampling_interval_seconds to control how frequently memory usage is measured.",
    "output_details": {
      "monitor_session_id": {
        "type": "string",
        "description": "Unique identifier for this monitoring session"
      },
      "avg_memory_usage_mb": {
        "type": "number",
        "description": "Average memory usage across all processes in MB"
      },
      "peak_memory_usage_mb": {
        "type": "number",
        "description": "Peak memory usage observed in MB"
      },
      "memory_leak_detected": {
        "type": "boolean",
        "description": "Whether potential memory leaks were detected"
      },
      "gc_frequency": {
        "type": "number",
        "description": "Garbage collection frequency per minute"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Error Rate Analyzer",
    "tool_description": "Analyzes error patterns, HTTP status codes, and failure rates during load testing to identify system reliability issues.",
    "parameters": {
      "log_sources": {
        "type": "array",
        "required": true,
        "items": {"type": "string"},
        "description": "List of log file paths or endpoints to analyze for errors",
        "minItems": 1,
        "maxItems": 10
      },
      "error_categories": {
        "type": "array",
        "required": false,
        "default": "[\"4xx\", \"5xx\", \"timeout\", \"connection\"]",
        "items": {"type": "string"},
        "description": "Types of errors to track and categorize"
      },
      "time_window_minutes": {
        "type": "integer",
        "required": false,
        "default": 60,
        "description": "Time window for error analysis in minutes (1-1440)"
      }
    },
    "error_messages": [
      "Log source inaccessible: Unable to access one or more specified log sources",
      "Invalid error categories: Use valid error category names",
      "Invalid time window: Must be between 1 and 1440 minutes"
    ],
    "usage": "Specify log_sources array with paths to log files or monitoring endpoints. Configure error_categories and time_window_minutes to customize error analysis scope.",
    "output_details": {
      "analysis_id": {
        "type": "string",
        "description": "Unique identifier for this error analysis"
      },
      "total_errors": {
        "type": "integer",
        "description": "Total number of errors detected"
      },
      "error_rate_percent": {
        "type": "number",
        "description": "Overall error rate as percentage of total requests"
      },
      "most_common_error": {
        "type": "string",
        "description": "Most frequently occurring error type or message"
      },
      "error_trend": {
        "type": "string",
        "description": "Error rate trend (increasing, decreasing, stable)"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Throughput Measurer",
    "tool_description": "Measures and analyzes system throughput including requests per second, data transfer rates, and transaction processing capacity.",
    "parameters": {
      "measurement_endpoints": {
        "type": "array",
        "required": true,
        "items": {"type": "string"},
        "description": "List of endpoints or services to measure throughput",
        "minItems": 1,
        "maxItems": 50
      },
      "measurement_duration_minutes": {
        "type": "integer",
        "required": true,
        "description": "Duration of throughput measurement in minutes (1-240)"
      }
    },
    "error_messages": [
      "Invalid endpoints: Provide valid URLs or service identifiers",
      "Invalid measurement duration: Must be between 1 and 240 minutes",
      "Endpoint unreachable: One or more endpoints are not accessible for measurement"
    ],
    "usage": "Provide measurement_endpoints array with URLs or service identifiers to measure. Set measurement_duration_minutes to define how long to collect throughput data.",
    "output_details": {
      "measurement_id": {
        "type": "string",
        "description": "Unique identifier for this throughput measurement"
      },
      "avg_requests_per_second": {
        "type": "number",
        "description": "Average requests per second across all endpoints"
      },
      "peak_requests_per_second": {
        "type": "number",
        "description": "Peak requests per second observed"
      },
      "data_transfer_rate_mbps": {
        "type": "number",
        "description": "Average data transfer rate in megabits per second"
      },
      "transaction_success_rate": {
        "type": "number",
        "description": "Percentage of successful transactions processed"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Bottleneck Detector",
    "tool_description": "Analyzes performance metrics to identify system bottlenecks and resource constraints that limit application performance.",
    "parameters": {
