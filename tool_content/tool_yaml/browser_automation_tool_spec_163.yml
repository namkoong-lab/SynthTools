field_name: browser_automation
subfield: automated_testing_and_qa
task: Automated functional testing of user workflows and application features
tool_description: |-
  **STEP 1 — Rate task difficulty**

  This task is **hard** due to the complex coordination required across multiple browser actions, handling dynamic web elements, managing test data dependencies, validating diverse UI states, and the high impact of errors in production testing scenarios.

  **STEP 2 — Set a tool budget**

  Given the hard difficulty rating, I'm targeting **17 tools** to cover the comprehensive workflow of automated functional testing including navigation, interaction, validation, data management, and reporting.

  **STEP 3 — List all tool names with dependencies and affordances**

  1. **Browser Session Manager** - Consumes: browser config → Produces: session handle
  2. **Page Navigator** - Consumes: session handle, URL → Produces: navigation status
  3. **Element Locator** - Consumes: session handle, selectors → Produces: element references
  4. **Form Field Populator** - Consumes: session handle, field mappings → Produces: input status
  5. **Click Action Executor** - Consumes: session handle, element info → Produces: click status
  6. **Dropdown Selector** - Consumes: session handle, dropdown info → Produces: selection status
  7. **File Upload Handler** - Consumes: session handle, file info → Produces: upload status
  8. **Wait Condition Manager** - Consumes: session handle, wait conditions → Produces: readiness status
  9. **Screenshot Capturer** - Consumes: session handle, capture settings → Produces: image data
  10. **Text Content Validator** - Consumes: session handle, expected content → Produces: validation results
  11. **URL State Validator** - Consumes: session handle, expected URLs → Produces: URL validation
  12. **Element Visibility Checker** - Consumes: session handle, element selectors → Produces: visibility status
  13. **Test Data Generator** - Consumes: data schemas → Produces: test datasets
  14. **Cookie Manager** - Consumes: session handle, cookie data → Produces: cookie status
  15. **Network Request Monitor** - Consumes: session handle, request patterns → Produces: network logs
  16. **Performance Metrics Collector** - Consumes: session handle, metric types → Produces: performance data
  17. **Test Result Aggregator** - Consumes: test outputs → Produces: consolidated reports

  **STEP 4 — Multi-tool plans**

  **Simple Plans:**
  1. **Basic Login Test**: Browser Session Manager → Page Navigator → Element Locator → Form Field Populator → Click Action Executor → URL State Validator
  2. **Content Verification**: Browser Session Manager → Page Navigator → Wait Condition Manager → Text Content Validator → Screenshot Capturer

  **Medium Plans:**
  1. **E-commerce Checkout Flow**: Browser Session Manager → Page Navigator → Element Locator → Click Action Executor → Wait Condition Manager → Form Field Populator → Dropdown Selector → Click Action Executor → URL State Validator → Text Content Validator
  2. **User Registration with File Upload**: Test Data Generator → Browser Session Manager → Page Navigator → Form Field Populator → File Upload Handler → Wait Condition Manager → Element Visibility Checker → Screenshot Capturer

  **Complex Plans:**
  1. **Complete User Journey with Performance Monitoring**: Test Data Generator → Browser Session Manager → Performance Metrics Collector → Network Request Monitor → Page Navigator → Cookie Manager → Element Locator → Form Field Populator → Click Action Executor → Wait Condition Manager → Dropdown Selector → Text Content Validator → URL State Validator → Screenshot Capturer → Test Result Aggregator
  2. **Multi-Page Workflow with Dynamic Content**: Browser Session Manager → Page Navigator → Wait Condition Manager → Element Locator → Click Action Executor → Page Navigator → Element Visibility Checker → Form Field Populator → Wait Condition Manager → Text Content Validator → Screenshot Capturer → Network Request Monitor → Test Result Aggregator

  **STEP 5 — Produce tools**

  ```json
  {
    "tool_name": "Browser Session Manager",
    "tool_description": "Initializes and manages browser sessions with specified configurations including browser type, window size, and timeout settings.",
    "parameters": {
      "browser_type": {
        "type": "string",
        "required": true,
        "description": "Browser to launch: chrome, firefox, safari, edge"
      },
      "headless": {
        "type": "boolean",
        "required": false,
        "default": false,
        "description": "Run browser in headless mode"
      },
      "window_width": {
        "type": "integer",
        "required": false,
        "default": 1920,
        "description": "Browser window width in pixels"
      },
      "window_height": {
        "type": "integer",
        "required": false,
        "default": 1080,
        "description": "Browser window height in pixels"
      },
      "page_timeout": {
        "type": "integer",
        "required": false,
        "default": 30,
        "description": "Page load timeout in seconds"
      }
    },
    "error_messages": [
      "Unsupported browser type: Use one of [chrome, firefox, safari, edge]",
      "Invalid window dimensions: Width and height must be positive integers between 100 and 4000",
      "Invalid timeout: Page timeout must be between 1 and 300 seconds",
      "Browser initialization failed: Check if the specified browser is installed and accessible"
    ],
    "usage": "Specify browser_type and optionally configure headless mode, window dimensions, and timeout. Returns a session handle for use with other browser tools.",
    "output_details": {
      "session_id": {
        "type": "string",
        "description": "Unique identifier for the browser session"
      },
      "browser_version": {
        "type": "string",
        "description": "Version of the launched browser"
      },
      "status": {
        "type": "string",
        "description": "Session initialization status"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Page Navigator",
    "tool_description": "Navigates to specified URLs and handles page loading with configurable wait conditions and retry logic.",
    "parameters": {
      "session_id": {
        "type": "string",
        "required": true,
        "description": "Browser session identifier"
      },
      "url": {
        "type": "string",
        "required": true,
        "description": "Target URL to navigate to"
      },
      "wait_for_load": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Wait for page to fully load"
      },
      "retry_attempts": {
        "type": "integer",
        "required": false,
        "default": 3,
        "description": "Number of retry attempts on failure"
      }
    },
    "error_messages": [
      "Invalid session: Session ID does not exist or has expired",
      "Invalid URL format: Provide a valid HTTP or HTTPS URL",
      "Page load timeout: Page failed to load within the specified timeout period",
      "Navigation failed: Unable to navigate to the specified URL after all retry attempts"
    ],
    "usage": "Provide session_id and url, optionally configure wait_for_load and retry_attempts. The tool navigates to the URL and returns navigation status.",
    "output_details": {
      "navigation_success": {
        "type": "boolean",
        "description": "Whether navigation was successful"
      },
      "final_url": {
        "type": "string",
        "description": "Final URL after navigation (may differ due to redirects)"
      },
      "load_time": {
        "type": "number",
        "description": "Page load time in seconds"
      },
      "status_code": {
        "type": "integer",
        "description": "HTTP status code of the response"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Element Locator",
    "tool_description": "Locates web elements using various selector strategies including CSS selectors, XPath, and element attributes with timeout handling.",
    "parameters": {
      "session_id": {
        "type": "string",
        "required": true,
        "description": "Browser session identifier"
      },
      "selector_type": {
        "type": "string",
        "required": true,
        "description": "Selector strategy: css, xpath, id, class, name, tag"
      },
      "selector_value": {
        "type": "string",
        "required": true,
        "description": "Selector value based on the chosen strategy"
      },
      "wait_timeout": {
        "type": "integer",
        "required": false,
        "default": 10,
        "description": "Maximum wait time in seconds for element to appear"
      },
      "find_multiple": {
        "type": "boolean",
        "required": false,
        "default": false,
        "description": "Find all matching elements instead of just the first"
      },
      "required_visibility": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Require element to be visible"
      }
    },
    "error_messages": [
      "Invalid session: Session ID does not exist or has expired",
      "Unsupported selector type: Use one of [css, xpath, id, class, name, tag]",
      "Invalid selector value: Provide a valid selector expression for the chosen strategy",
      "Element not found: No elements matching the selector were found within the timeout period",
      "Element not visible: Element found but not visible and required_visibility is true"
    ],
    "usage": "Provide session_id, selector_type, and selector_value. Optionally configure timeout, multiple element finding, and visibility requirements. Returns element information for interaction.",
    "output_details": {
      "elements_found": {
        "type": "integer",
        "description": "Number of elements found matching the selector"
      },
      "element_ids": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Internal element identifiers for found elements"
      },
      "element_types": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "HTML tag types of found elements"
      },
      "visibility_status": {
        "type": "array",
        "items": {
          "type": "boolean"
        },
        "description": "Visibility status for each found element"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Form Field Populator",
    "tool_description": "Populates form fields with specified data, supporting text inputs, textareas, checkboxes, radio buttons, and hidden fields with validation.",
    "parameters": {
      "session_id": {
        "type": "string",
        "required": true,
        "description": "Browser session identifier"
      },
      "field_mappings": {
        "type": "array",
        "required": true,
        "description": "Array of field selector and value pairs in format 'selector:value'",
        "items": {
          "type": "string"
        },
        "minItems": 1,
        "maxItems": 50
      },
      "clear_before_input": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Clear existing field content before entering new data"
      },
      "validate_input": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Validate that input was successfully entered"
      },
      "input_delay": {
        "type": "number",
        "required": false,
        "default": 0.1,
        "description": "Delay between keystrokes in seconds"
      },
      "tab_navigation": {
        "type": "boolean",
        "required": false,
        "default": false,
        "description": "Use tab key to navigate between fields"
      },
      "trigger_events": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Trigger change and blur events after input"
      }
    },
    "error_messages": [
      "Invalid session: Session ID does not exist or has expired",
      "Invalid field mappings format: Use 'selector:value' format for each mapping",
      "Field not found: One or more field selectors could not locate elements",
      "Field not interactable: Field exists but is disabled or not interactable",
      "Input validation failed: Entered value does not match expected value in field",
      "Invalid delay: Input delay must be between 0 and 5 seconds"
    ],
    "usage": "Provide session_id and field_mappings array with selector:value pairs. Configure input behavior with optional parameters. Returns status of field population operations.",
    "output_details": {
      "fields_processed": {
        "type": "integer",
        "description": "Number of fields successfully processed"
      },
      "successful_fields": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Selectors of fields that were successfully populated"
      },
      "failed_fields": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Selectors of fields that failed to populate"
      },
      "validation_results": {
        "type": "array",
        "items": {
          "type": "boolean"
        },
        "description": "Validation status for each processed field"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Click Action Executor",
    "tool_description": "Executes click actions on web elements with support for different click types, coordinates, and modifier keys.",
    "parameters": {
      "session_id": {
        "type": "string",
        "required": true,
        "description": "Browser session identifier"
      },
      "element_selector": {
        "type": "string",
        "required": true,
        "description": "CSS selector or XPath for target element"
      },
      "click_type": {
        "type": "string",
        "required": false,
        "default": "left",
        "description": "Type of click: left, right, double, middle"
      },
      "wait_before_click": {
        "type": "number",
        "required": false,
        "default": 0.5,
        "description": "Wait time in seconds before executing click"
      },
      "scroll_into_view": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Scroll element into view before clicking"
      }
    },
    "error_messages": [
      "Invalid session: Session ID does not exist or has expired",
      "Element not found: Could not locate element using the provided selector",
      "Element not clickable: Element is not in an interactable state",
      "Invalid click type: Use one of [left, right, double, middle]",
      "Click execution failed: Unable to execute click action on the element"
    ],
    "usage": "Provide session_id and element_selector, optionally specify click_type and timing parameters. The tool executes the click and returns action status.",
    "output_details": {
      "click_successful": {
        "type": "boolean",
        "description": "Whether the click action was executed successfully"
      },
      "element_found": {
        "type": "boolean",
        "description": "Whether the target element was found"
      },
      "execution_time": {
        "type": "number",
        "description": "Time taken to execute the click action in seconds"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Dropdown Selector",
    "tool_description": "Selects options from dropdown menus and select elements using various selection methods including value, text, and index.",
    "parameters": {
      "session_id": {
        "type": "string",
        "required": true,
        "description": "Browser session identifier"
      },
      "dropdown_selector": {
        "type": "string",
        "required": true,
        "description": "CSS selector or XPath for dropdown element"
      },
      "selection_method": {
        "type": "string",
        "required": true,
        "description": "Selection method: value, text, index"
      },
      "selection_value": {
        "type": "string",
        "required": true,
        "description": "Value to select based on the chosen method"
      },
      "multiple_selection": {
        "type": "boolean",
        "required": false,
        "default": false,
        "description": "Allow multiple option selection"
      },
      "verify_selection": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Verify that selection was successful"
      }
    },
    "error_messages": [
      "Invalid session: Session ID does not exist or has expired",
      "Dropdown not found: Could not locate dropdown using the provided selector",
      "Invalid selection method: Use one of [value, text, index]",
      "Option not found: No option matching the selection criteria was found",
      "Selection failed: Unable to select the specified option",
      "Multiple selection not supported: Dropdown does not support multiple selections"
    ],
    "usage": "Provide session_id, dropdown_selector, selection_method, and selection_value. Configure multiple selection and verification options. Returns selection status and results.",
    "output_details": {
      "selection_successful": {
        "type": "boolean",
        "description": "Whether the selection was successful"
      },
      "selected_options": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Text of options that were selected"
      },
      "total_options": {
        "type": "integer",
        "description": "Total number of options available in dropdown"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "File Upload Handler",
    "tool_description": "Handles file upload operations through file input elements with support for multiple files and upload validation.",
    "parameters": {
      "session_id": {
        "type": "string",
        "required": true,
        "description": "Browser session identifier"
      },
      "file_input_selector": {
        "type": "string",
        "required": true,
        "description": "CSS selector for file input element"
      },
      "file_paths": {
        "type": "array",
        "required": true,
        "description": "Paths to files to upload",
        "items": {
          "type": "string"
        },
        "minItems": 1,
        "maxItems": 10
      },
      "wait_for_upload": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Wait for upload completion"
      },
      "upload_timeout": {
        "type": "integer",
        "required": false,
        "default": 60,
        "description": "Upload timeout in seconds"
      }
    },
    "error_messages": [
      "Invalid session: Session ID does not exist or has expired",
      "File input not found: Could not locate file input using the provided selector",
      "File not found: One or more specified files do not exist",
      "Upload failed: File upload operation was unsuccessful",
      "Upload timeout: File upload did not complete within the specified timeout",
      "Invalid file path: Provided file paths must be valid file system paths"
    ],
    "usage": "Provide session_id, file_input_selector, and array of file_paths. Configure upload timeout and wait behavior. Returns upload status and file information.",
    "output_details": {
      "upload_successful": {
        "type": "boolean",
        "description": "Whether all files were uploaded successfully"
      },
      "uploaded_files": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Names of files that were uploaded successfully"
      },
      "upload_duration": {
        "type": "number",
        "description": "Total time taken for upload in seconds"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Wait Condition Manager",
    "tool_description": "Manages various wait conditions including element presence, visibility, text content, and custom JavaScript conditions with configurable timeouts.",
    "parameters": {
      "session_id": {
        "type": "string",
        "required": true,
        "description": "Browser session identifier"
      },
      "wait_type": {
        "type": "string",
        "required": true,
        "description": "Type of wait condition: element_present, element_visible, element_clickable, text_present, url_contains, custom_js"
      },
      "target_selector": {
        "type": "string",
        "required": false,
        "default": "None",
        "description": "Element selector for element-based wait conditions"
      },
      "expected_text": {
        "type": "string",
        "required": false,
        "default": "None",
        "description": "Expected text content for text-based conditions"
      },
      "expected_url": {
        "type": "string",
        "required": false,
        "default": "None",
        "description": "Expected URL or URL fragment for URL-based conditions"
      },
      "custom_javascript": {
        "type": "string",
        "required": false,
        "default": "None",
        "description": "JavaScript code for custom wait conditions"
      },
      "timeout_seconds": {
        "type": "integer",
        "required": false,
        "default": 30,
        "description": "Maximum wait time in seconds"
      },
      "poll_frequency": {
        "type": "number",
        "required": false,
        "default": 0.5,
        "description": "Frequency of condition checks in seconds"
      },
      "negate_condition": {
        "type": "boolean",
        "required": false,
        "default": false,
        "description": "Wait for condition to become false instead of true"
      }
    },
    "error_messages": [
      "Invalid session: Session ID does not exist or has expired",
      "Invalid wait type: Use one of [element_present, element_visible, element_clickable, text_present, url_contains, custom_js]",
      "Missing required parameter: Provide target_selector for element-based conditions",
      "Missing required parameter: Provide expected_text for text-based conditions",
      "Missing required parameter: Provide expected_url for URL-based conditions",
      "Missing required parameter: Provide custom_javascript for custom JS conditions",
      "Wait timeout: Condition was not met within the specified timeout period",
      "Invalid timeout: Timeout must be between 1 and 300 seconds",
      "Invalid poll frequency: Poll frequency must be between 0.1 and 10 seconds"
    ],
    "usage": "Specify session_id, wait_type, and relevant condition parameters. Configure timeout and polling behavior. The tool waits for the specified condition and returns the result.",
    "output_details": {
      "condition_met": {
        "type": "boolean",
        "description": "Whether the wait condition was satisfied"
      },
      "wait_duration": {
        "type": "number",
        "description": "Actual time waited in seconds"
      },
      "final_state": {
        "type": "string",
        "description": "Description of the final state when wait completed"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Screenshot Capturer",
    "tool_description": "Captures screenshots of web pages or specific elements with customizable options for format, quality, and capture area.",
    "parameters": {
      "session_id": {
        "type": "string",
        "required": true,
        "description": "Browser session identifier"
      },
      "capture_type": {
        "type": "string",
        "required": false,
        "default": "full_page",
        "description": "Screenshot type: full_page, viewport, element"
      },
      "element_selector": {
        "type": "string",
        "required": false,
        "default": "None",
        "description": "Element selector for element-specific screenshots"
      },
      "output_format": {
        "type": "string",
        "required": false,
        "default": "png",
        "description": "Image format: png, jpeg, webp"
      },
      "quality": {
        "type": "integer",
        "required": false,
        "default": 90,
        "description": "Image quality percentage (1-100)"
      }
    },
    "error_messages": [
      "Invalid session: Session ID does not exist or has expired",
      "Invalid capture type: Use one of [full_page, viewport, element]",
      "Element not found: Could not locate element for element-specific screenshot",
      "Invalid output format: Use one of [png, jpeg, webp]",
      "Invalid quality: Quality must be between 1 and 100",
      "Screenshot capture failed: Unable to capture screenshot due to browser error"
    ],
    "usage": "Provide session_id and optionally specify capture_type, element_selector, output_format, and quality. Returns screenshot data and metadata.",
    "output_details": {
      "capture_successful": {
        "type": "boolean",
        "description": "Whether screenshot was captured successfully"
      },
      "image_data": {
        "type": "string",
        "description": "Base64 encoded image data"
      },
      "image_width": {
        "type": "integer",
        "description": "Width of captured image in pixels"
      },
      "image_height": {
        "type": "integer",
        "description": "Height of captured image in pixels"
      },
      "file_size": {
        "type": "integer",
        "description": "Size of image data in bytes"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Text Content Validator",
    "tool_description": "Validates text content on web pages using various matching strategies including exact match, contains, regex, and element-specific validation.",
    "parameters": {
      "session_id": {
        "type": "string",
        "required": true,
        "description": "Browser session identifier"
      },
      "validation_rules": {
        "type": "array",
        "required": true,
        "description": "Array of validation rules in format 'selector:expected_text:match_type'",
        "items": {
          "type": "string"
        },
        "minItems": 1,
        "maxItems": 20
      },
      "case_sensitive": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Perform case-sensitive text matching"
      },
      "trim_whitespace": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Trim leading and trailing whitespace before comparison"
      },
      "wait_for_text": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Wait for text to appear before validation"
      },
      "wait_timeout": {
        "type": "integer",
        "required": false,
        "default": 10,
        "description": "Wait timeout in seconds"
      }
    },
    "error_messages": [
      "Invalid session: Session ID does not exist or has expired",
      "Invalid validation rules format: Use 'selector:expected_text:match_type' format",
      "Invalid match type: Use one of [exact, contains, starts_with, ends_with, regex]",
      "Element not found: Could not locate element for text validation",
      "Text validation timeout: Expected text did not appear within timeout period",
      "Invalid regex pattern: Provided regex pattern is malformed"
    ],
    "usage": "Provide session_id and validation_rules array with selector:text:match_type format. Configure text matching behavior and wait options. Returns validation results for each rule.",
    "output_details": {
      "overall_success": {
        "type": "boolean",
        "description": "Whether all validation rules passed"
      },
      "passed_validations": {
        "type": "integer",
        "description": "Number of validation rules that passed"
      },
      "failed_validations": {
        "type": "integer",
        "description": "Number of validation rules that failed"
      },
      "validation_details": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Detailed results for each validation rule"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "URL State Validator",
    "tool_description": "Validates current URL state including exact URL matching, URL patterns, query parameters, and hash fragments.",
    "parameters": {
      "session_id": {
        "type": "string",
        "required": true,
        "description": "Browser session identifier"
      },
      "expected_url": {
        "type": "string",
        "required": false,
        "default": "None",
        "description": "Expected exact URL"
      },
      "url_pattern": {
        "type": "string",
        "required": false,
        "default": "None",
        "description": "URL pattern with wildcards (*)"
      },
      "required_params": {
        "type": "array",
        "required": false,
        "default": "None",
        "description": "Required query parameter names",
        "items": {
          "type": "string"
        }
      },
      "forbidden_params": {
        "type": "array",
        "required": false,
        "default": "None",
        "description": "Forbidden query parameter names",
        "items": {
          "type": "string"
        }
      }
    },
    "error_messages": [
      "Invalid session: Session ID does not exist or has expired",
      "No validation criteria: Provide at least one of expected_url, url_pattern, required_params, or forbidden_params",
      "Invalid URL pattern: URL pattern contains invalid wildcard syntax",
      "URL validation failed: Current URL does not match expected criteria",
      "Required parameters missing: One or more required query parameters are missing",
      "Forbidden parameters present: One or more forbidden query parameters are present"
    ],
    "usage": "Provide session_id and at least one validation criteria (expected_url, url_pattern, required_params, forbidden_params). Returns URL validation results.",
    "output_details": {
      "url_valid": {
        "type": "boolean",
        "description": "Whether URL validation passed"
      },
      "current_url": {
        "type": "string",
        "description": "Current page URL"
      },
      "validation_results": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Detailed validation results for each criteria"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Element Visibility Checker",
    "tool_description": "Checks visibility status of web elements including display state, opacity, positioning, and viewport visibility.",
    "parameters": {
      "session_id": {
        "type": "string",
        "required": true,
        "description": "Browser session identifier"
      },
      "element_selectors": {
        "type": "array",
        "required": true,
        "description": "Array of CSS selectors or XPaths for elements to check",
        "items": {
          "type": "string"
        },
        "minItems": 1,
        "maxItems": 25
      },
      "check_viewport_visibility": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description":
