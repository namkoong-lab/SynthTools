field_name: health_and_wellness
subfield: Medical Imaging and Diagnostics
task: Automated detection and segmentation of anatomical structures in medical images
tool_description: |-
  ## STEP 1 — Rate task difficulty

  This task is **hard** due to the high complexity of medical image analysis, requiring sophisticated preprocessing, multiple detection/segmentation algorithms, validation against clinical standards, and integration of various imaging modalities with strict accuracy requirements for patient safety.

  ## STEP 2 — Set a tool budget

  Given the hard difficulty rating, I'm targeting **17 tools** within the 15-20 range to cover the comprehensive workflow from image preprocessing through final clinical reporting.

  ## STEP 3 — List all tool names and dependencies

  **Tools and their data flow:**
  - **Image Format Converter** → converts raw medical images → standardized formats
  - **DICOM Metadata Extractor** → extracts imaging parameters → metadata for other tools
  - **Image Quality Assessor** → evaluates image suitability → quality metrics
  - **Noise Reduction Filter** → removes image artifacts → cleaned images
  - **Image Intensity Normalizer** → standardizes pixel values → normalized images
  - **Region of Interest Detector** → identifies target areas → ROI coordinates
  - **Anatomical Structure Classifier** → categorizes structures → classification results
  - **Segmentation Mask Generator** → creates pixel-level masks → segmentation maps
  - **3D Volume Reconstructor** → builds 3D models → volumetric data
  - **Structure Measurement Tool** → quantifies dimensions → measurement data
  - **Multi-Modal Image Fusion** → combines different scans → fused images
  - **Segmentation Quality Validator** → checks accuracy → validation scores
  - **Clinical Reference Matcher** → compares to standards → comparison results
  - **Automated Report Generator** → creates clinical summaries → diagnostic reports
  - **Visualization Renderer** → creates visual outputs → rendered images
  - **Batch Processing Manager** → handles multiple images → processing status
  - **Results Export Handler** → formats final outputs → exported files

  ## STEP 4 — Multi-tool plans

  **Simple plans:**
  1. **Basic structure detection:** Image Format Converter → Image Quality Assessor → Region of Interest Detector → Anatomical Structure Classifier
  2. **Quick segmentation:** Noise Reduction Filter → Image Intensity Normalizer → Segmentation Mask Generator → Visualization Renderer

  **Medium plans:**
  1. **Standard diagnostic workflow:** DICOM Metadata Extractor → Image Quality Assessor → Noise Reduction Filter → Region of Interest Detector → Segmentation Mask Generator → Structure Measurement Tool → Automated Report Generator
  2. **Multi-modal analysis:** Multi-Modal Image Fusion → Anatomical Structure Classifier → Segmentation Mask Generator → Segmentation Quality Validator → Clinical Reference Matcher → Results Export Handler

  **Complex plans:**
  1. **Complete clinical pipeline:** Image Format Converter → DICOM Metadata Extractor → Image Quality Assessor → Noise Reduction Filter → Image Intensity Normalizer → Region of Interest Detector → Anatomical Structure Classifier → Segmentation Mask Generator → 3D Volume Reconstructor → Structure Measurement Tool → Segmentation Quality Validator → Clinical Reference Matcher → Automated Report Generator → Visualization Renderer → Results Export Handler
  2. **High-throughput batch processing:** Batch Processing Manager → (parallel execution of) Image Format Converter + Noise Reduction Filter + Image Intensity Normalizer → Region of Interest Detector → Segmentation Mask Generator → Structure Measurement Tool → Segmentation Quality Validator → Results Export Handler

  ## STEP 5 — Produce tools

  ```json
  {
    "tool_name": "Image Format Converter",
    "tool_description": "Converts medical images between different formats (DICOM, NIfTI, PNG, TIFF) while preserving metadata and image quality for downstream processing.",
    "parameters": {
      "input_image_path": {
        "type": "string",
        "required": true,
        "description": "File path to the input medical image"
      },
      "output_format": {
        "type": "string",
        "required": true,
        "description": "Target format: dicom, nifti, png, tiff"
      },
      "preserve_metadata": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Whether to preserve original metadata in conversion"
      }
    },
    "error_messages": [
      "File not found: The specified input image path does not exist. Verify the file path and ensure the image file is accessible.",
      "Unsupported format: Use one of [dicom, nifti, png, tiff]. Check the output_format parameter.",
      "Corrupted image file: The input image appears to be corrupted or unreadable. Try with a different image file.",
      "Conversion failed: Unable to convert between specified formats. Some format combinations may not be supported."
    ],
    "usage": "Provide the input_image_path and desired output_format. Optionally set preserve_metadata to false if metadata preservation is not needed.",
    "output_details": {
      "success": {
        "type": "boolean",
        "description": "Whether the conversion was successful"
      },
      "output_path": {
        "type": "string",
        "description": "Path to the converted image file"
      },
      "original_format": {
        "type": "string",
        "description": "Format of the original image"
      },
      "metadata_preserved": {
        "type": "boolean",
        "description": "Whether metadata was successfully preserved"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "DICOM Metadata Extractor",
    "tool_description": "Extracts and parses metadata from DICOM medical images including patient information, imaging parameters, and acquisition details.",
    "parameters": {
      "dicom_file_path": {
        "type": "string",
        "required": true,
        "description": "Path to the DICOM file"
      },
      "include_patient_info": {
        "type": "boolean",
        "required": false,
        "default": false,
        "description": "Whether to include patient identifying information"
      },
      "metadata_fields": {
        "type": "array",
        "required": false,
        "default": "None",
        "items": {"type": "string"},
        "description": "Specific metadata fields to extract (if empty, extracts all)"
      },
      "anonymize": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Whether to anonymize patient-identifying fields"
      }
    },
    "error_messages": [
      "Invalid DICOM file: The specified file is not a valid DICOM format. Ensure the file has proper DICOM headers.",
      "File access denied: Cannot read the DICOM file due to permissions. Check file access rights.",
      "Metadata field not found: One or more requested metadata fields do not exist in this DICOM file.",
      "Parsing error: Unable to parse DICOM metadata due to file corruption or non-standard format."
    ],
    "usage": "Provide dicom_file_path and optionally specify metadata_fields for targeted extraction. Set include_patient_info to true only when patient data is needed and authorized.",
    "output_details": {
      "patient_id": {
        "type": "string",
        "description": "Anonymized patient identifier"
      },
      "study_date": {
        "type": "string",
        "description": "Date when the study was performed"
      },
      "modality": {
        "type": "string",
        "description": "Imaging modality (CT, MRI, X-ray, etc.)"
      },
      "body_part": {
        "type": "string",
        "description": "Body part examined"
      },
      "image_dimensions": {
        "type": "array",
        "items": {"type": "integer"},
        "description": "Image width, height, and depth dimensions"
      },
      "pixel_spacing": {
        "type": "array",
        "items": {"type": "number"},
        "description": "Physical spacing between pixels in millimeters"
      },
      "slice_thickness": {
        "type": "number",
        "description": "Thickness of image slice in millimeters"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Image Quality Assessor",
    "tool_description": "Evaluates medical image quality by analyzing noise levels, contrast, sharpness, and artifacts to determine suitability for diagnostic analysis.",
    "parameters": {
      "image_path": {
        "type": "string",
        "required": true,
        "description": "Path to the medical image file"
      },
      "quality_threshold": {
        "type": "number",
        "required": false,
        "default": 0.7,
        "description": "Minimum quality score (0.0-1.0) for acceptable images"
      },
      "check_artifacts": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Whether to detect common imaging artifacts"
      }
    },
    "error_messages": [
      "Image file not readable: Cannot open or read the specified image file. Check file path and format.",
      "Invalid quality threshold: Threshold must be between 0.0 and 1.0.",
      "Analysis failed: Unable to complete quality assessment due to unsupported image characteristics.",
      "Insufficient image data: Image appears to be empty or contains insufficient data for quality analysis."
    ],
    "usage": "Provide image_path and optionally set quality_threshold to define acceptable quality levels. Enable check_artifacts to identify common imaging problems.",
    "output_details": {
      "overall_quality_score": {
        "type": "number",
        "description": "Overall quality score from 0.0 to 1.0"
      },
      "noise_level": {
        "type": "number",
        "description": "Detected noise level from 0.0 (clean) to 1.0 (very noisy)"
      },
      "contrast_score": {
        "type": "number",
        "description": "Image contrast quality from 0.0 to 1.0"
      },
      "sharpness_score": {
        "type": "number",
        "description": "Image sharpness measurement from 0.0 to 1.0"
      },
      "artifacts_detected": {
        "type": "array",
        "items": {"type": "string"},
        "description": "List of detected artifacts (motion blur, ring artifacts, etc.)"
      },
      "suitable_for_analysis": {
        "type": "boolean",
        "description": "Whether image meets quality threshold for diagnostic use"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Noise Reduction Filter",
    "tool_description": "Applies advanced noise reduction algorithms to medical images while preserving important anatomical details and edge information.",
    "parameters": {
      "input_image_path": {
        "type": "string",
        "required": true,
        "description": "Path to the input medical image"
      },
      "filter_type": {
        "type": "string",
        "required": true,
        "description": "Filter algorithm: gaussian, median, bilateral, anisotropic_diffusion, non_local_means"
      },
      "strength": {
        "type": "number",
        "required": false,
        "default": 0.5,
        "description": "Filter strength from 0.1 (light) to 1.0 (strong)"
      },
      "preserve_edges": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Whether to preserve anatomical structure edges"
      },
      "iterations": {
        "type": "integer",
        "required": false,
        "default": 1,
        "description": "Number of filter iterations (1-5)"
      }
    },
    "error_messages": [
      "Invalid filter type: Use one of [gaussian, median, bilateral, anisotropic_diffusion, non_local_means].",
      "Invalid strength parameter: Strength must be between 0.1 and 1.0.",
      "Invalid iterations: Number of iterations must be between 1 and 5.",
      "Image processing failed: Unable to apply noise reduction filter. Check image format and integrity.",
      "Memory insufficient: Image too large for current filter settings. Try reducing filter strength or image size."
    ],
    "usage": "Specify input_image_path and filter_type. Adjust strength for noise reduction intensity and set iterations for multiple passes. Use preserve_edges=true for anatomical images.",
    "output_details": {
      "output_image_path": {
        "type": "string",
        "description": "Path to the filtered image file"
      },
      "noise_reduction_percentage": {
        "type": "number",
        "description": "Estimated percentage of noise removed"
      },
      "edge_preservation_score": {
        "type": "number",
        "description": "Score from 0.0 to 1.0 indicating edge preservation quality"
      },
      "processing_time": {
        "type": "number",
        "description": "Processing time in seconds"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Image Intensity Normalizer",
    "tool_description": "Standardizes pixel intensity values across medical images to ensure consistent processing and comparison between different scans and modalities.",
    "parameters": {
      "image_path": {
        "type": "string",
        "required": true,
        "description": "Path to the input medical image"
      },
      "normalization_method": {
        "type": "string",
        "required": true,
        "description": "Normalization approach: min_max, z_score, percentile, histogram_matching"
      },
      "target_range_min": {
        "type": "number",
        "required": false,
        "default": 0.0,
        "description": "Minimum value for normalized intensity range"
      },
      "target_range_max": {
        "type": "number",
        "required": false,
        "default": 1.0,
        "description": "Maximum value for normalized intensity range"
      },
      "reference_image_path": {
        "type": "string",
        "required": false,
        "default": "None",
        "description": "Reference image for histogram matching normalization"
      }
    },
    "error_messages": [
      "Invalid normalization method: Use one of [min_max, z_score, percentile, histogram_matching].",
      "Invalid target range: target_range_max must be greater than target_range_min.",
      "Reference image required: histogram_matching method requires reference_image_path parameter.",
      "Reference image not found: Cannot locate the specified reference image file.",
      "Normalization failed: Unable to normalize image intensities. Check image data validity."
    ],
    "usage": "Provide image_path and normalization_method. For min_max normalization, set target_range_min and target_range_max. For histogram_matching, provide reference_image_path.",
    "output_details": {
      "normalized_image_path": {
        "type": "string",
        "description": "Path to the normalized image file"
      },
      "original_intensity_range": {
        "type": "array",
        "items": {"type": "number"},
        "description": "Original minimum and maximum intensity values"
      },
      "normalized_intensity_range": {
        "type": "array",
        "items": {"type": "number"},
        "description": "Final minimum and maximum intensity values after normalization"
      },
      "intensity_statistics": {
        "type": "array",
        "items": {"type": "number"},
        "description": "Mean, standard deviation, median of normalized intensities"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Region of Interest Detector",
    "tool_description": "Automatically detects and localizes regions of interest containing relevant anatomical structures in medical images using deep learning algorithms.",
    "parameters": {
      "image_path": {
        "type": "string",
        "required": true,
        "description": "Path to the input medical image"
      },
      "target_structure": {
        "type": "string",
        "required": true,
        "description": "Anatomical structure to detect: heart, lung, brain, liver, kidney, spine, bone, tumor"
      },
      "confidence_threshold": {
        "type": "number",
        "required": false,
        "default": 0.8,
        "description": "Minimum confidence score (0.1-1.0) for detection"
      },
      "max_detections": {
        "type": "integer",
        "required": false,
        "default": 5,
        "description": "Maximum number of ROI detections to return (1-20)"
      },
      "image_modality": {
        "type": "string",
        "required": false,
        "default": "auto",
        "description": "Imaging modality: auto, ct, mri, xray, ultrasound"
      },
      "bounding_box_expansion": {
        "type": "number",
        "required": false,
        "default": 0.1,
        "description": "Percentage to expand bounding boxes (0.0-0.5)"
      }
    },
    "error_messages": [
      "Invalid target structure: Use one of [heart, lung, brain, liver, kidney, spine, bone, tumor].",
      "Invalid confidence threshold: Threshold must be between 0.1 and 1.0.",
      "Invalid max detections: Must be between 1 and 20.",
      "Invalid modality: Use one of [auto, ct, mri, xray, ultrasound].",
      "Invalid expansion factor: Bounding box expansion must be between 0.0 and 0.5.",
      "No structures detected: No regions meeting confidence threshold found. Try lowering confidence_threshold.",
      "Detection model failed: Unable to load or run detection model for specified structure and modality."
    ],
    "usage": "Specify image_path and target_structure. Adjust confidence_threshold to control detection sensitivity. Set image_modality if automatic detection is unreliable.",
    "output_details": {
      "detections_found": {
        "type": "integer",
        "description": "Number of regions of interest detected"
      },
      "bounding_boxes": {
        "type": "array",
        "items": {"type": "number"},
        "description": "Flattened array of bounding box coordinates [x1,y1,x2,y2,x1,y1,x2,y2,...]"
      },
      "confidence_scores": {
        "type": "array",
        "items": {"type": "number"},
        "description": "Confidence scores for each detection"
      },
      "roi_centers": {
        "type": "array",
        "items": {"type": "number"},
        "description": "Center coordinates of each ROI [x1,y1,x2,y2,...]"
      },
      "detected_modality": {
        "type": "string",
        "description": "Automatically detected or specified image modality"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Anatomical Structure Classifier",
    "tool_description": "Classifies anatomical structures within medical images using deep learning models trained on medical imaging datasets.",
    "parameters": {
      "image_path": {
        "type": "string",
        "required": true,
        "description": "Path to the input medical image or ROI"
      },
      "classification_task": {
        "type": "string",
        "required": true,
        "description": "Classification type: organ_identification, pathology_detection, tissue_type, anatomical_plane"
      },
      "roi_coordinates": {
        "type": "array",
        "required": false,
        "default": "None",
        "items": {"type": "number"},
        "description": "Bounding box coordinates [x1,y1,x2,y2] to analyze specific region"
      },
      "top_k_results": {
        "type": "integer",
        "required": false,
        "default": 3,
        "description": "Number of top classification results to return (1-10)"
      }
    },
    "error_messages": [
      "Invalid classification task: Use one of [organ_identification, pathology_detection, tissue_type, anatomical_plane].",
      "Invalid ROI coordinates: Provide exactly 4 coordinates [x1,y1,x2,y2] or leave empty for full image.",
      "Invalid top_k_results: Must be between 1 and 10.",
      "Classification model not available: Model for specified task not found or failed to load.",
      "ROI outside image bounds: Specified ROI coordinates exceed image dimensions."
    ],
    "usage": "Provide image_path and classification_task. Optionally specify roi_coordinates to classify a specific region, or leave empty for full image classification.",
    "output_details": {
      "predicted_classes": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Top predicted anatomical structure classes"
      },
      "confidence_scores": {
        "type": "array",
        "items": {"type": "number"},
        "description": "Confidence scores for each predicted class"
      },
      "top_prediction": {
        "type": "string",
        "description": "Highest confidence anatomical structure classification"
      },
      "classification_certainty": {
        "type": "number",
        "description": "Overall certainty of classification from 0.0 to 1.0"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Segmentation Mask Generator",
    "tool_description": "Creates pixel-level segmentation masks for anatomical structures in medical images using advanced deep learning segmentation algorithms.",
    "parameters": {
      "image_path": {
        "type": "string",
        "required": true,
        "description": "Path to the input medical image"
      },
      "structure_type": {
        "type": "string",
        "required": true,
        "description": "Structure to segment: heart, lung, brain, liver, kidney, spine, bone, tumor, vessel, organ_boundary"
      },
      "segmentation_model": {
        "type": "string",
        "required": false,
        "default": "unet",
        "description": "Segmentation algorithm: unet, deeplab, mask_rcnn, attention_unet"
      },
      "post_processing": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Whether to apply morphological post-processing"
      },
      "output_format": {
        "type": "string",
        "required": false,
        "default": "binary_mask",
        "description": "Output type: binary_mask, probabilistic_mask, multi_class_mask"
      },
      "roi_coordinates": {
        "type": "array",
        "required": false,
        "default": "None",
        "items": {"type": "number"},
        "description": "Optional ROI coordinates [x1,y1,x2,y2] to limit segmentation area"
      },
      "confidence_threshold": {
        "type": "number",
        "required": false,
        "default": 0.5,
        "description": "Threshold for probabilistic mask conversion (0.1-0.9)"
      },
      "minimum_area": {
        "type": "integer",
        "required": false,
        "default": 100,
        "description": "Minimum area in pixels for segmented regions"
      },
      "smooth_boundaries": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Whether to smooth segmentation boundaries"
      },
      "fill_holes": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Whether to fill holes in segmented regions"
      }
    },
    "error_messages": [
      "Invalid structure type: Use one of [heart, lung, brain, liver, kidney, spine, bone, tumor, vessel, organ_boundary].",
      "Invalid segmentation model: Use one of [unet, deeplab, mask_rcnn, attention_unet].",
      "Invalid output format: Use one of [binary_mask, probabilistic_mask, multi_class_mask].",
      "Invalid confidence threshold: Threshold must be between 0.1 and 0.9.",
      "Invalid minimum area: Minimum area must be a positive integer.",
      "ROI coordinates invalid: Provide exactly 4 coordinates [x1,y1,x2,y2] within image bounds.",
      "Segmentation failed: Unable to generate segmentation mask. Check image quality and model compatibility.",
      "No structures found: No regions meeting minimum area threshold detected in image."
    ],
    "usage": "Specify image_path and structure_type. Choose segmentation_model based on accuracy needs. Enable post_processing for cleaner results. Adjust confidence_threshold for probabilistic outputs.",
    "output_details": {
      "mask_path": {
        "type": "string",
        "description": "Path to the generated segmentation mask file"
      },
      "segmented_regions": {
        "type": "integer",
        "description": "Number of distinct segmented regions found"
      },
      "total_segmented_pixels": {
        "type": "integer",
        "description": "Total number of pixels classified as target structure"
      },
      "segmentation_confidence": {
        "type": "number",
        "description": "Average confidence score of the segmentation"
      },
      "mask_statistics": {
        "type": "array",
        "items": {"type": "number"},
        "description": "Area, perimeter, and compactness statistics of segmented regions"
      },
      "processing_time": {
        "type": "number",
        "description": "Time taken for segmentation in seconds"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "3D Volume Reconstructor",
    "tool_description": "Reconstructs 3D volumetric models from medical image slices or series, enabling spatial analysis and visualization of anatomical structures.",
    "parameters": {
      "image_series_paths": {
        "type": "array",
        "required": true,
        "items": {"type": "string"},
        "description": "Array of paths to image slices in order"
      },
      "slice_spacing": {
        "type": "number",
        "required": true,
        "description": "Physical spacing between slices in millimeters"
      },
      "interpolation_method": {
        "type": "string",
        "required": false,
        "default": "linear",
        "description": "Volume interpolation: linear, cubic, nearest_neighbor"
      },
      "output_resolution": {
        "type": "array",
        "required": false,
        "default": "None",
        "items": {"type": "number"},
        "description": "Target voxel resolution [x,y,z] in millimeters"
      },
      "smoothing_sigma": {
        "type": "number",
        "required": false,
        "default": 0.5,
        "description": "Gaussian smoothing parameter (0.0-2.0)"
      }
    },
    "error_messages": [
      "Insufficient slices: Need at least 3 image slices for 3D reconstruction.",
      "Inconsistent image dimensions: All slices must have the same width and height.",
      "Invalid slice spacing: Slice spacing must be a positive number.",
      "Invalid interpolation method: Use one of [linear, cubic, nearest_neighbor].",
      "Invalid smoothing sigma: Smoothing parameter must be between 0.0 and 2.0.",
      "File access error: Cannot read one or more image slice files.",
      "Memory insufficient: Not enough memory to reconstruct volume with current settings."
    ],
    "usage": "Provide image_series_paths in anatomical order and specify slice_spacing from DICOM metadata. Optionally set output_resolution for resampling and smoothing_sigma for noise reduction.",
    "output_details": {
      "volume_path": {
        "type": "string",
        "description": "Path to the reconstructed 3D volume file"
      },
      "volume_dimensions": {
        "type": "array",
        "items": {"type": "integer"},
        "description": "3D volume dimensions [width, height, depth]"
      },
      "voxel_spacing": {
        "type": "array",
        "items": {"type": "number"},
        "description": "Physical voxel spacing [x, y, z] in millimeters"
      },
      "total_volume": {
        "type": "number",
        "description": "Total reconstructed volume in cubic millimeters"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Structure Measurement Tool",
    "tool_description": "Performs quantitative measurements of anatomical structures from segmentation masks including area, volume, perimeter, and clinical metrics.",
    "parameters": {
      "mask_path": {
        "type": "string",
        "required": true,
        "description": "Path to the segmentation mask file"
      },
      "pixel_spacing": {
        "type": "array",
        "required": true,
        "items": {"type": "number"},
        "description": "Physical pixel spacing [x,y] or voxel spacing [x,y,z] in millimeters"
      },
      "measurement_type": {
        "type": "string",
        "required": true,
        "description": "Type of measurement: area, volume, perimeter, diameter, centroid, moments"
      },
      "structure_label": {
        "type": "integer",
        "required": false,
        "default": 1,
        "description": "Label value in mask to measure (for multi-label masks)"
      }
    },
    "error_messages": [
      "Mask file not found: Cannot locate the specified segmentation mask file.",
      "Invalid pixel spacing: Provide 2 values for 2D or 3 values for 3D measurements.",
      "Invalid measurement type: Use one of [area, volume, perimeter, diameter, centroid, moments].",
      "Structure label not found: Specified label value does not exist in the mask.",
      "Empty mask: No pixels found with the specified label value.",
      "Measurement calculation failed: Unable to compute measurements from the provided mask."
    ],
    "usage": "Provide mask_path from segmentation output and pixel_spacing from image metadata. Specify measurement_type based on clinical needs and structure_label for multi-class masks.",
    "output_details": {
      "measured_value": {
        "type": "number",
        "description": "Primary measurement result in appropriate units (mm², mm³, mm)"
      },
      "measurement_unit": {
        "type": "string",
        "description": "Unit of measurement (square_mm, cubic_mm, mm, etc.)"
      },
      "centroid_coordinates": {
        "type": "array",
        "items": {"type": "number"},
        "description": "Center of mass coordinates in millimeters"
      },
      "bounding_box_dimensions": {
        "type": "array",
        "items": {"type": "number"},
        "description": "Width, height, (depth) of structure bounding box in mm"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Multi-Modal Image Fusion",
    "tool_description": "Fuses multiple medical imaging modalities (CT, MRI, PET, etc.) into a single composite image for enhanced diagnostic analysis.",
    "parameters": {
      "primary_image_path": {
        "type": "string",
        "required": true,
        "description": "Path to the primary/reference medical image"
      },
      "secondary_image_path": {
        "type": "string",
        "required": true,
        "description": "Path to the secondary medical image to fuse"
      },
      "fusion_method": {
