field_name: games_and_gamification
subfield: Game Development and Design
task: Game Logic and Mechanics Implementation
tool_description: |-
  **STEP 1 — Rate task difficulty**

  This task involves medium complexity due to the need to handle diverse game mechanics (physics, AI, state management, scoring), coordinate multiple interdependent systems, and ensure robust error handling for gameplay edge cases. The scope requires both technical implementation and creative design consideration.

  **STEP 2 — Set a tool budget**

  Given the medium complexity, I'll target 12 tools to cover the various aspects of game logic implementation, from basic mechanics to advanced AI and balancing systems.

  **STEP 3 — List all tool names and dependencies**

  Tools and their flow:
  - Game State Manager → manages core game state
  - Physics Engine → handles collision detection and movement
  - AI Behavior System → creates NPC behaviors
  - Event Trigger System → manages game events
  - Scoring System → tracks player progress
  - Level Generator → creates game levels
  - Animation Controller → manages sprite/object animations
  - Sound Effect Trigger → handles audio feedback
  - Game Balance Analyzer → tests gameplay balance
  - Rule Engine → implements game rules
  - Player Input Handler → processes user inputs
  - Debug Console → provides development debugging

  **STEP 4 — Multi-tool plans**

  Simple plans:
  1. Basic gameplay loop: Player Input Handler → Game State Manager → Scoring System
  2. Simple level creation: Level Generator → Game State Manager → Physics Engine

  Medium plans:
  1. Interactive gameplay: Player Input Handler → Rule Engine → Physics Engine → Event Trigger System → Sound Effect Trigger
  2. AI-driven gameplay: AI Behavior System → Physics Engine → Game State Manager → Animation Controller

  Complex plans:
  1. Full game development: Level Generator → Game State Manager → Player Input Handler → Rule Engine → Physics Engine → AI Behavior System → Animation Controller → Event Trigger System → Scoring System → Sound Effect Trigger → Game Balance Analyzer
  2. Advanced game testing: Game State Manager → AI Behavior System → Physics Engine → Rule Engine → Game Balance Analyzer → Debug Console

  **STEP 5 — Produce tools**

  ```json
  {
    "tool_name": "Game State Manager",
    "tool_description": "Manages the core game state including player status, game phase, world state, and persistent data across game sessions.",
    "parameters": {
      "game_id": {
        "type": "string",
        "required": true,
        "description": "Unique identifier for the game session"
      },
      "action": {
        "type": "string",
        "required": true,
        "description": "Action to perform: create, update, load, save, reset"
      },
      "state_data": {
        "type": "array",
        "required": false,
        "description": "Key-value pairs for state updates (format: key1,value1,key2,value2)",
        "items": {
          "type": "string"
        },
        "default": "None"
      },
      "player_count": {
        "type": "integer",
        "required": false,
        "description": "Number of players in the game (1-8)",
        "default": 1
      }
    },
    "error_messages": [
      "Invalid action: Use one of [create, update, load, save, reset].",
      "Game ID not found: Ensure the game_id exists before performing load/update operations.",
      "Invalid state_data format: Provide state_data as alternating key-value pairs in array format.",
      "Player count out of range: player_count must be between 1 and 8."
    ],
    "usage": "Specify game_id and action. For updates, provide state_data array with alternating keys and values. Set player_count when creating new games.",
    "output_details": {
      "status": {
        "type": "string",
        "description": "Operation result status"
      },
      "game_phase": {
        "type": "string",
        "description": "Current phase of the game"
      },
      "player_states": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Array of player state descriptions"
      },
      "world_state": {
        "type": "string",
        "description": "Current world/environment state"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Physics Engine",
    "tool_description": "Handles collision detection, movement calculations, gravity simulation, and physics-based interactions between game objects.",
    "parameters": {
      "objects": {
        "type": "array",
        "required": true,
        "description": "Array of object IDs to process physics for",
        "items": {
          "type": "string"
        },
        "minItems": 1,
        "maxItems": 100
      },
      "positions": {
        "type": "array",
        "required": true,
        "description": "Array of position coordinates (x1,y1,x2,y2,...)",
        "items": {
          "type": "number"
        },
        "minItems": 2,
        "maxItems": 200
      },
      "velocities": {
        "type": "array",
        "required": true,
        "description": "Array of velocity vectors (vx1,vy1,vx2,vy2,...)",
        "items": {
          "type": "number"
        },
        "minItems": 2,
        "maxItems": 200
      },
      "gravity": {
        "type": "number",
        "required": false,
        "description": "Gravity strength (-50 to 50)",
        "default": -9.8
      },
      "time_step": {
        "type": "number",
        "required": false,
        "description": "Physics simulation time step (0.001 to 1.0)",
        "default": 0.016
      },
      "collision_enabled": {
        "type": "boolean",
        "required": false,
        "description": "Whether to detect and resolve collisions",
        "default": true
      }
    },
    "error_messages": [
      "Mismatched array lengths: objects, positions, and velocities arrays must have compatible lengths.",
      "Invalid gravity value: gravity must be between -50 and 50.",
      "Invalid time_step: time_step must be between 0.001 and 1.0.",
      "Too many objects: Maximum 100 objects supported per physics update."
    ],
    "usage": "Provide arrays of objects, positions, and velocities with matching element counts. Optionally adjust gravity, time_step, and collision_enabled settings.",
    "output_details": {
      "updated_positions": {
        "type": "array",
        "items": {
          "type": "number"
        },
        "description": "Array of updated position coordinates"
      },
      "updated_velocities": {
        "type": "array",
        "items": {
          "type": "number"
        },
        "description": "Array of updated velocity vectors"
      },
      "collisions": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Array of collision event descriptions"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "AI Behavior System",
    "tool_description": "Creates and manages AI behaviors for NPCs, enemies, and game entities using state machines, pathfinding, and decision trees.",
    "parameters": {
      "entity_id": {
        "type": "string",
        "required": true,
        "description": "Unique identifier for the AI entity"
      },
      "behavior_type": {
        "type": "string",
        "required": true,
        "description": "AI behavior pattern: aggressive, defensive, patrol, follow, flee, idle, custom"
      },
      "target_position": {
        "type": "array",
        "required": false,
        "description": "Target coordinates [x, y] for movement-based behaviors",
        "items": {
          "type": "number"
        },
        "minItems": 2,
        "maxItems": 2,
        "default": "None"
      },
      "current_position": {
        "type": "array",
        "required": true,
        "description": "Current entity coordinates [x, y]",
        "items": {
          "type": "number"
        },
        "minItems": 2,
        "maxItems": 2
      },
      "detection_range": {
        "type": "number",
        "required": false,
        "description": "Range for detecting players or targets (1-100)",
        "default": 10
      },
      "difficulty_level": {
        "type": "integer",
        "required": false,
        "description": "AI difficulty from 1 (easy) to 5 (expert)",
        "default": 3
      },
      "state_variables": {
        "type": "array",
        "required": false,
        "description": "Custom state variables for behavior logic",
        "items": {
          "type": "string"
        },
        "default": "None"
      }
    },
    "error_messages": [
      "Invalid behavior_type: Use one of [aggressive, defensive, patrol, follow, flee, idle, custom].",
      "Invalid position format: Positions must be arrays of exactly 2 numbers [x, y].",
      "Detection range out of bounds: detection_range must be between 1 and 100.",
      "Invalid difficulty level: difficulty_level must be an integer between 1 and 5.",
      "Missing target for behavior: Some behaviors require target_position to be specified."
    ],
    "usage": "Provide entity_id, behavior_type, and current_position. Set target_position for movement behaviors, adjust detection_range and difficulty_level as needed.",
    "output_details": {
      "next_action": {
        "type": "string",
        "description": "The AI's next planned action"
      },
      "movement_direction": {
        "type": "array",
        "items": {
          "type": "number"
        },
        "description": "Movement vector [dx, dy]"
      },
      "state_change": {
        "type": "boolean",
        "description": "Whether the AI changed behavioral state"
      },
      "decision_reasoning": {
        "type": "string",
        "description": "Explanation of the AI's decision process"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Event Trigger System",
    "tool_description": "Manages game events, triggers, and conditional logic for interactive gameplay elements like cutscenes, rewards, and story progression.",
    "parameters": {
      "trigger_conditions": {
        "type": "array",
        "required": true,
        "description": "Array of condition strings to evaluate",
        "items": {
          "type": "string"
        },
        "minItems": 1,
        "maxItems": 20
      },
      "event_actions": {
        "type": "array",
        "required": true,
        "description": "Array of actions to execute when triggered",
        "items": {
          "type": "string"
        },
        "minItems": 1,
        "maxItems": 20
      }
    },
    "error_messages": [
      "Mismatched arrays: trigger_conditions and event_actions must have the same length.",
      "Invalid condition syntax: Condition strings must follow proper evaluation format.",
      "Unknown action type: Event actions must be recognized game actions.",
      "Too many triggers: Maximum 20 trigger-action pairs supported per call."
    ],
    "usage": "Provide arrays of trigger_conditions and corresponding event_actions. Conditions are evaluated and matching actions are executed.",
    "output_details": {
      "triggered_events": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of events that were triggered"
      },
      "executed_actions": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of actions that were executed"
      },
      "pending_triggers": {
        "type": "integer",
        "description": "Number of triggers still waiting for conditions"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Scoring System",
    "tool_description": "Tracks player scores, achievements, statistics, and implements various scoring mechanisms for game progression and rewards.",
    "parameters": {
      "player_id": {
        "type": "string",
        "required": true,
        "description": "Unique identifier for the player"
      },
      "score_type": {
        "type": "string",
        "required": true,
        "description": "Type of score update: points, achievement, milestone, combo, penalty"
      },
      "value": {
        "type": "number",
        "required": true,
        "description": "Score value to add/subtract"
      },
      "multiplier": {
        "type": "number",
        "required": false,
        "description": "Score multiplier (0.1 to 10.0)",
        "default": 1.0
      },
      "category": {
        "type": "string",
        "required": false,
        "description": "Score category for organization",
        "default": "general"
      }
    },
    "error_messages": [
      "Invalid score_type: Use one of [points, achievement, milestone, combo, penalty].",
      "Invalid multiplier range: multiplier must be between 0.1 and 10.0.",
      "Player not found: Ensure player_id exists in the system.",
      "Invalid score value: Score value must be a valid number."
    ],
    "usage": "Specify player_id, score_type, and value. Optionally set multiplier for bonus scoring and category for organization.",
    "output_details": {
      "total_score": {
        "type": "number",
        "description": "Player's updated total score"
      },
      "category_score": {
        "type": "number",
        "description": "Score in the specified category"
      },
      "achievements_unlocked": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Any achievements unlocked by this score update"
      },
      "rank_change": {
        "type": "boolean",
        "description": "Whether the player's rank changed"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Level Generator",
    "tool_description": "Procedurally generates or loads game levels with specified layouts, obstacles, items, spawn points, and environmental settings.",
    "parameters": {
      "generation_type": {
        "type": "string",
        "required": true,
        "description": "Generation method: procedural, template, custom, random"
      },
      "level_size": {
        "type": "array",
        "required": true,
        "description": "Level dimensions [width, height]",
        "items": {
          "type": "integer"
        },
        "minItems": 2,
        "maxItems": 2
      },
      "difficulty": {
        "type": "integer",
        "required": false,
        "description": "Level difficulty from 1 (easy) to 10 (extreme)",
        "default": 5
      },
      "theme": {
        "type": "string",
        "required": false,
        "description": "Visual theme for the level",
        "default": "default"
      },
      "obstacle_density": {
        "type": "number",
        "required": false,
        "description": "Density of obstacles (0.0 to 1.0)",
        "default": 0.3
      },
      "item_spawn_rate": {
        "type": "number",
        "required": false,
        "description": "Rate of item spawning (0.0 to 1.0)",
        "default": 0.2
      },
      "enemy_spawn_points": {
        "type": "integer",
        "required": false,
        "description": "Number of enemy spawn points (0-50)",
        "default": 5
      },
      "special_features": {
        "type": "array",
        "required": false,
        "description": "Special level features to include",
        "items": {
          "type": "string"
        },
        "default": "None"
      }
    },
    "error_messages": [
      "Invalid generation_type: Use one of [procedural, template, custom, random].",
      "Invalid level_size: Level dimensions must be positive integers, maximum 1000x1000.",
      "Difficulty out of range: difficulty must be between 1 and 10.",
      "Invalid density values: obstacle_density and item_spawn_rate must be between 0.0 and 1.0.",
      "Too many spawn points: enemy_spawn_points must be between 0 and 50."
    ],
    "usage": "Specify generation_type and level_size. Adjust difficulty, theme, densities, and spawn settings to customize the generated level.",
    "output_details": {
      "level_id": {
        "type": "string",
        "description": "Unique identifier for the generated level"
      },
      "layout_data": {
        "type": "string",
        "description": "Encoded level layout information"
      },
      "spawn_points": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Coordinates of player and enemy spawn points"
      },
      "item_locations": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Coordinates and types of items placed in level"
      },
      "completion_criteria": {
        "type": "string",
        "description": "Requirements to complete the level"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Animation Controller",
    "tool_description": "Manages sprite animations, transitions, and visual effects for game objects including timing, looping, and state-based animations.",
    "parameters": {
      "object_id": {
        "type": "string",
        "required": true,
        "description": "Identifier for the object to animate"
      },
      "animation_name": {
        "type": "string",
        "required": true,
        "description": "Name of the animation to play"
      },
      "duration": {
        "type": "number",
        "required": false,
        "description": "Animation duration in seconds (0.1 to 10.0)",
        "default": 1.0
      },
      "loop": {
        "type": "boolean",
        "required": false,
        "description": "Whether the animation should loop",
        "default": false
      },
      "speed_multiplier": {
        "type": "number",
        "required": false,
        "description": "Animation speed multiplier (0.1 to 5.0)",
        "default": 1.0
      }
    },
    "error_messages": [
      "Animation not found: The specified animation_name does not exist for this object.",
      "Invalid duration: duration must be between 0.1 and 10.0 seconds.",
      "Invalid speed_multiplier: speed_multiplier must be between 0.1 and 5.0.",
      "Object not found: The specified object_id does not exist."
    ],
    "usage": "Provide object_id and animation_name. Optionally set duration, loop behavior, and speed_multiplier for customized animation playback.",
    "output_details": {
      "animation_status": {
        "type": "string",
        "description": "Current status of the animation"
      },
      "frame_count": {
        "type": "integer",
        "description": "Total number of frames in animation"
      },
      "current_frame": {
        "type": "integer",
        "description": "Currently displaying frame number"
      },
      "completion_percentage": {
        "type": "number",
        "description": "Animation completion percentage (0.0 to 100.0)"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Sound Effect Trigger",
    "tool_description": "Triggers audio effects, background music, and sound cues based on game events with volume control and spatial audio support.",
    "parameters": {
      "sound_name": {
        "type": "string",
        "required": true,
        "description": "Name or identifier of the sound effect"
      },
      "trigger_event": {
        "type": "string",
        "required": true,
        "description": "Game event that triggers the sound"
      },
      "volume": {
        "type": "number",
        "required": false,
        "description": "Volume level (0.0 to 1.0)",
        "default": 0.8
      },
      "pitch": {
        "type": "number",
        "required": false,
        "description": "Pitch modification (-2.0 to 2.0)",
        "default": 1.0
      },
      "spatial_position": {
        "type": "array",
        "required": false,
        "description": "3D position for spatial audio [x, y, z]",
        "items": {
          "type": "number"
        },
        "minItems": 3,
        "maxItems": 3,
        "default": "None"
      }
    },
    "error_messages": [
      "Sound not found: The specified sound_name does not exist in the audio library.",
      "Invalid volume: volume must be between 0.0 and 1.0.",
      "Invalid pitch: pitch must be between -2.0 and 2.0.",
      "Invalid spatial position: spatial_position must be an array of exactly 3 numbers.",
      "Trigger event not recognized: The trigger_event is not a valid game event."
    ],
    "usage": "Specify sound_name and trigger_event. Optionally adjust volume, pitch, and spatial_position for enhanced audio experience.",
    "output_details": {
      "sound_triggered": {
        "type": "boolean",
        "description": "Whether the sound was successfully triggered"
      },
      "playback_duration": {
        "type": "number",
        "description": "Expected duration of sound playback in seconds"
      },
      "audio_channel": {
        "type": "string",
        "description": "Audio channel used for playback"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Game Balance Analyzer",
    "tool_description": "Analyzes game balance by testing difficulty curves, resource distribution, player progression rates, and identifying potential exploits or balance issues.",
    "parameters": {
      "test_scenarios": {
        "type": "array",
        "required": true,
        "description": "Array of test scenario names to analyze",
        "items": {
          "type": "string"
        },
        "minItems": 1,
        "maxItems": 10
      },
      "simulation_runs": {
        "type": "integer",
        "required": false,
        "description": "Number of simulation runs per scenario (10-1000)",
        "default": 100
      },
      "player_skill_levels": {
        "type": "array",
        "required": false,
        "description": "Skill levels to test: beginner, intermediate, advanced, expert",
        "items": {
          "type": "string"
        },
        "default": ["intermediate"]
      },
      "balance_metrics": {
        "type": "array",
        "required": false,
        "description": "Metrics to analyze for balance assessment",
        "items": {
          "type": "string"
        },
        "default": ["difficulty", "progression", "resources"]
      },
      "time_limit": {
        "type": "integer",
        "required": false,
        "description": "Maximum analysis time in minutes (1-60)",
        "default": 10
      }
    },
    "error_messages": [
      "Invalid simulation_runs: Must be between 10 and 1000.",
      "Invalid skill levels: Use combinations of [beginner, intermediate, advanced, expert].",
      "Time limit exceeded: time_limit must be between 1 and 60 minutes.",
      "Too many scenarios: Maximum 10 test scenarios supported.",
      "Scenario not found: One or more test scenarios are not recognized."
    ],
    "usage": "Provide test_scenarios array and optionally configure simulation_runs, player_skill_levels, balance_metrics, and time_limit for comprehensive balance analysis.",
    "output_details": {
      "balance_score": {
        "type": "number",
        "description": "Overall balance score (0.0 to 100.0)"
      },
      "difficulty_analysis": {
        "type": "string",
        "description": "Summary of difficulty curve analysis"
      },
      "identified_issues": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of potential balance issues found"
      },
      "recommendations": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Suggested improvements for game balance"
      },
      "statistical_summary": {
        "type": "string",
        "description": "Statistical summary of simulation results"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Rule Engine",
    "tool_description": "Implements and enforces game rules, win conditions, turn management, and legal move validation for various game types and mechanics.",
    "parameters": {
      "game_type": {
        "type": "string",
        "required": true,
        "description": "Type of game rules to apply: turn_based, real_time, puzzle, strategy, action, rpg"
      },
      "rule_set": {
        "type": "array",
        "required": true,
        "description": "Array of rule definitions to enforce",
        "items": {
          "type": "string"
        },
        "minItems": 1,
        "maxItems": 50
      },
      "current_state": {
        "type": "string",
        "required": true,
        "description": "Current game state to validate against rules"
      },
      "proposed_action": {
        "type": "string",
        "required": false,
        "description": "Action to validate for legality",
        "default": "None"
      },
      "player_id": {
        "type": "string",
        "required": false,
        "description": "ID of player attempting the action",
        "default": "None"
      }
    },
    "error_messages": [
      "Invalid game_type: Use one of [turn_based, real_time, puzzle, strategy, action, rpg].",
      "Rule parsing error: One or more rules in rule_set have invalid syntax.",
      "Too many rules: Maximum 50 rules supported per validation.",
      "State validation failed: current_state does not match expected format.",
      "Action validation required: Some game types require proposed_action to be specified."
    ],
    "usage": "Specify game_type, rule_set array, and current_state. Optionally provide proposed_action and player_id for move validation.",
    "output_details": {
      "action_valid": {
        "type": "boolean",
        "description": "Whether the proposed action is legal"
      },
      "violated_rules": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of rules that would be violated"
      },
      "win_condition_met": {
        "type": "boolean",
        "description": "Whether any win conditions have been satisfied"
      },
      "game_over": {
        "type": "boolean",
        "description": "Whether the game has ended"
      },
      "next_valid_actions": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of valid actions available"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Player Input Handler",
    "tool_description": "Processes and interprets player inputs from various sources (keyboard, mouse, gamepad) and converts them into game actions with customizable controls and input buffering.",
    "parameters": {
      "input_type": {
        "type": "string",
        "required": true,
        "description": "Type of input device: keyboard, mouse, gamepad, touch"
      },
      "raw_input": {
        "type": "string",
        "required": true,
        "description": "Raw input data received from the input device"
      },
      "input_mapping": {
        "type": "array",
        "required": true,
        "description": "Array of input-to-action mappings (input1,action1,input2,action2,...)",
        "items": {
          "type": "string"
        },
        "minItems": 2,
        "maxItems": 100
      },
      "sensitivity": {
        "type": "number",
        "required": false,
        "description": "Input sensitivity multiplier (0.1 to 5.0)",
        "default": 1.0
      },
      "deadzone": {
        "type": "number",
        "required": false,
        "description": "Deadzone threshold for analog inputs (0.0 to 0.5)",
        "default": 0.1
      },
      "buffer_time": {
        "type": "number",
        "required": false,
        "description": "Input buffer time in seconds (0.0 to 1.0)",
        "default": 0.1
      },
      "combo_detection": {
        "type": "boolean",
        "required": false,
        "description": "Whether to detect input combinations and sequences",
        "default": false
      }
    },
    "error_messages": [
      "Invalid input_type: Use one of [keyboard, mouse, gamepad, touch].",
      "Invalid input_mapping: Array must contain even number of elements (input-action pairs).",
      "Sensitivity out of range: sensitivity must be between 0.1 and 5.0.",
      "Invalid deadzone: deadzone must be between 0.0 and 0.5.",
      "Buffer time out of range: buffer_time must be between 0.0 and 1.0.",
      "Raw input format error: raw_input format does not match specified input_type."
    ],
    "usage": "Specify input_type, raw_input, and input_mapping array. Optionally configure sensitivity, deadzone, buffer_time, and combo_detection for advanced input handling.",
    "output_details": {
      "interpreted_actions": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Array of game actions derived from input"
      },
      "input_strength": {
        "type": "number",
        "description": "Strength or magnitude of the input (0.0 to 1.0)"
      },
      "combo_detected": {
        "type": "boolean",
        "description": "Whether a input combo was detected"
      },
      "buffered_inputs": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Inputs currently stored in buffer"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Debug Console",
    "tool_description": "Provides debugging capabilities for game development including variable inspection, command execution, performance monitoring, and error logging.",
    "parameters": {
      "debug_command": {
        "type": "string",
        "required": true,
        "description": "Debug command to execute: inspect, execute, monitor, log, trace"
      },
      "target": {
        "type": "string",
        "required": false,
        "description": "Target object or system
