field_name: space_and_aerospace
subfield: Satellite Design and Manufacturing
task: Satellite subsystem integration and configuration management
tool_description: |-
  ## STEP 1 — Rate task difficulty

  This is a **hard** task due to the extensive scope of subsystems requiring integration (power, thermal, communication, attitude control, payload, etc.), complex interdependencies between components, high coordination requirements across engineering teams, critical safety and mission requirements where errors can result in total mission failure, and substantial data management needs for tracking configurations, versions, and compliance requirements.

  ## STEP 2 — Set a tool budget

  Given the hard difficulty rating, I will target **17 tools** within the 15–20 range to handle the complexity of satellite subsystem integration and configuration management.

  ## STEP 3 — List all tool names and dependencies

  **Tools and their data flow:**
  1. **Subsystem Registry Manager** - Creates subsystem inventory → feeds component data to other tools
  2. **Interface Compatibility Checker** - Consumes subsystem specs → produces compatibility reports
  3. **Power Budget Analyzer** - Consumes power requirements → produces power allocation plans
  4. **Thermal Analysis Tool** - Consumes thermal specs → produces thermal management recommendations
  5. **Mass Properties Calculator** - Consumes component masses → produces center of gravity and moment calculations
  6. **Configuration Version Tracker** - Consumes change requests → produces version histories
  7. **Requirements Compliance Validator** - Consumes requirements and designs → produces compliance status
  8. **Integration Sequence Planner** - Consumes subsystem dependencies → produces assembly sequences
  9. **Test Plan Generator** - Consumes integration plans → produces test procedures
  10. **Cable Harness Designer** - Consumes interface requirements → produces wiring specifications
  11. **Component Lifecycle Monitor** - Consumes component data → produces lifecycle status reports
  12. **Risk Assessment Tool** - Consumes system configurations → produces risk matrices
  13. **Documentation Generator** - Consumes configuration data → produces technical documentation
  14. **Change Impact Analyzer** - Consumes change requests → produces impact assessments
  15. **Quality Control Checker** - Consumes test results → produces quality reports
  16. **Resource Allocation Optimizer** - Consumes resource requirements → produces allocation plans
  17. **Integration Timeline Manager** - Consumes task dependencies → produces project schedules

  ## STEP 4 — Multi-tool plans

  **Simple Plans:**
  1. **Component Registration**: Subsystem Registry Manager → Requirements Compliance Validator → Documentation Generator
  2. **Basic Compatibility Check**: Interface Compatibility Checker → Cable Harness Designer → Documentation Generator

  **Medium Plans:**
  1. **Power System Integration**: Subsystem Registry Manager → Power Budget Analyzer → Mass Properties Calculator → Risk Assessment Tool → Documentation Generator
  2. **Change Management**: Configuration Version Tracker → Change Impact Analyzer → Requirements Compliance Validator → Integration Timeline Manager → Quality Control Checker

  **Complex Plans:**
  1. **Full System Integration**: Subsystem Registry Manager → Interface Compatibility Checker → Power Budget Analyzer → Thermal Analysis Tool → Mass Properties Calculator → Integration Sequence Planner → Test Plan Generator → Resource Allocation Optimizer → Integration Timeline Manager
  2. **Complete Validation Cycle**: Requirements Compliance Validator → Risk Assessment Tool → Test Plan Generator → Quality Control Checker → Component Lifecycle Monitor → Change Impact Analyzer → Documentation Generator → Configuration Version Tracker

  ## STEP 5 — Produce tools

  ```json
  {
    "tool_name": "Subsystem Registry Manager",
    "tool_description": "Manages a comprehensive registry of satellite subsystems, tracking their specifications, interfaces, and current status for integration planning.",
    "parameters": {
      "subsystem_name": {
        "type": "string",
        "required": true,
        "description": "Name of the subsystem to register or update"
      },
      "subsystem_type": {
        "type": "string",
        "required": true,
        "description": "Type of subsystem: power, thermal, communication, attitude_control, payload, structure, propulsion"
      },
      "manufacturer": {
        "type": "string",
        "required": true,
        "description": "Name of the subsystem manufacturer"
      },
      "part_number": {
        "type": "string",
        "required": true,
        "description": "Manufacturer part number"
      },
      "mass_kg": {
        "type": "number",
        "required": true,
        "description": "Mass of the subsystem in kilograms"
      },
      "power_consumption_w": {
        "type": "number",
        "required": false,
        "description": "Power consumption in watts during operation",
        "default": 0
      },
      "operating_temp_min_c": {
        "type": "number",
        "required": false,
        "description": "Minimum operating temperature in Celsius",
        "default": -40
      },
      "operating_temp_max_c": {
        "type": "number",
        "required": false,
        "description": "Maximum operating temperature in Celsius",
        "default": 85
      },
      "interface_types": {
        "type": "array",
        "items": {"type": "string"},
        "required": true,
        "description": "List of interface types: electrical, mechanical, thermal, data, optical"
      },
      "status": {
        "type": "string",
        "required": false,
        "description": "Current status: design, procurement, received, tested, integrated",
        "default": "design"
      }
    },
    "error_messages": [
      "Invalid subsystem type: Must be one of [power, thermal, communication, attitude_control, payload, structure, propulsion]",
      "Invalid mass value: Mass must be a positive number greater than 0",
      "Invalid power consumption: Power consumption must be a non-negative number",
      "Invalid temperature range: Minimum temperature must be less than maximum temperature",
      "Invalid interface types: Must contain at least one of [electrical, mechanical, thermal, data, optical]",
      "Invalid status: Must be one of [design, procurement, received, tested, integrated]",
      "Duplicate subsystem: Subsystem with this name already exists, use update operation"
    ],
    "usage": "Register or update subsystem information by providing all required specifications. Use this tool first before other integration tools to establish the subsystem inventory.",
    "output_details": {
      "registry_id": {
        "type": "string",
        "description": "Unique identifier assigned to the subsystem"
      },
      "registration_status": {
        "type": "string",
        "description": "Status of registration: success, updated, or failed"
      },
      "validation_warnings": {
        "type": "array",
        "items": {"type": "string"},
        "description": "List of validation warnings or recommendations"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Interface Compatibility Checker",
    "tool_description": "Analyzes interface compatibility between satellite subsystems to identify potential integration issues before physical assembly.",
    "parameters": {
      "primary_subsystem_id": {
        "type": "string",
        "required": true,
        "description": "Registry ID of the primary subsystem"
      },
      "secondary_subsystem_id": {
        "type": "string",
        "required": true,
        "description": "Registry ID of the secondary subsystem"
      },
      "interface_type": {
        "type": "string",
        "required": true,
        "description": "Type of interface to check: electrical, mechanical, thermal, data, optical"
      }
    },
    "error_messages": [
      "Subsystem not found: One or both subsystem IDs do not exist in the registry",
      "Invalid interface type: Must be one of [electrical, mechanical, thermal, data, optical]",
      "Insufficient interface data: Subsystem lacks required interface specifications for compatibility analysis",
      "Same subsystem comparison: Cannot compare a subsystem with itself"
    ],
    "usage": "Provide two subsystem IDs and specify the interface type to check. Ensure both subsystems are registered first using Subsystem Registry Manager.",
    "output_details": {
      "compatibility_status": {
        "type": "string",
        "description": "Overall compatibility: compatible, incompatible, or requires_adapter"
      },
      "compatibility_score": {
        "type": "number",
        "description": "Compatibility score from 0 to 100"
      },
      "issues_found": {
        "type": "array",
        "items": {"type": "string"},
        "description": "List of compatibility issues identified"
      },
      "recommendations": {
        "type": "array",
        "items": {"type": "string"},
        "description": "List of recommendations to resolve issues"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Power Budget Analyzer",
    "tool_description": "Analyzes satellite power requirements across all subsystems and generates power allocation strategies for different mission phases.",
    "parameters": {
      "mission_duration_hours": {
        "type": "number",
        "required": true,
        "description": "Total mission duration in hours"
      },
      "solar_panel_capacity_w": {
        "type": "number",
        "required": true,
        "description": "Solar panel power generation capacity in watts"
      },
      "battery_capacity_wh": {
        "type": "number",
        "required": true,
        "description": "Battery capacity in watt-hours"
      },
      "subsystem_ids": {
        "type": "array",
        "items": {"type": "string"},
        "required": true,
        "description": "List of subsystem registry IDs to include in analysis"
      },
      "eclipse_duration_minutes": {
        "type": "number",
        "required": false,
        "description": "Duration of eclipse period per orbit in minutes",
        "default": 35
      },
      "power_margin_percent": {
        "type": "number",
        "required": false,
        "description": "Required power margin as percentage (10-30)",
        "default": 20
      },
      "mission_phases": {
        "type": "array",
        "items": {"type": "string"},
        "required": false,
        "description": "Mission phases to analyze: launch, deployment, commissioning, operational, safe_mode",
        "default": ["operational"]
      }
    },
    "error_messages": [
      "Invalid mission duration: Must be greater than 0 hours",
      "Invalid solar panel capacity: Must be greater than 0 watts",
      "Invalid battery capacity: Must be greater than 0 watt-hours",
      "Empty subsystem list: Must provide at least one subsystem ID",
      "Invalid eclipse duration: Must be between 0 and 120 minutes",
      "Invalid power margin: Must be between 10 and 30 percent",
      "Invalid mission phases: Must contain valid phase names",
      "Subsystem not found: One or more subsystem IDs do not exist in registry"
    ],
    "usage": "Provide mission parameters and list of subsystem IDs to analyze power requirements. Use after registering all subsystems with their power consumption data.",
    "output_details": {
      "power_budget_status": {
        "type": "string",
        "description": "Overall status: sufficient, marginal, insufficient"
      },
      "total_power_required_w": {
        "type": "number",
        "description": "Total power requirement in watts"
      },
      "available_power_w": {
        "type": "number",
        "description": "Available power generation capacity in watts"
      },
      "power_margin_actual_percent": {
        "type": "number",
        "description": "Actual power margin achieved as percentage"
      },
      "phase_analysis": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Power analysis results for each mission phase"
      },
      "recommendations": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Power optimization recommendations"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Thermal Analysis Tool",
    "tool_description": "Performs thermal analysis of satellite subsystem configurations to ensure temperature requirements are met across different orbital conditions.",
    "parameters": {
      "subsystem_ids": {
        "type": "array",
        "items": {"type": "string"},
        "required": true,
        "description": "List of subsystem registry IDs to include in thermal analysis"
      },
      "orbit_altitude_km": {
        "type": "number",
        "required": true,
        "description": "Orbital altitude in kilometers"
      },
      "orbital_inclination_deg": {
        "type": "number",
        "required": true,
        "description": "Orbital inclination in degrees (0-180)"
      },
      "sun_exposure_percent": {
        "type": "number",
        "required": false,
        "description": "Percentage of orbit in sunlight (50-100)",
        "default": 65
      },
      "thermal_coating_type": {
        "type": "string",
        "required": false,
        "description": "Thermal coating: white_paint, black_paint, multi_layer_insulation, none",
        "default": "white_paint"
      }
    },
    "error_messages": [
      "Empty subsystem list: Must provide at least one subsystem ID",
      "Invalid orbit altitude: Must be between 200 and 36000 km",
      "Invalid orbital inclination: Must be between 0 and 180 degrees",
      "Invalid sun exposure: Must be between 50 and 100 percent",
      "Invalid thermal coating: Must be one of [white_paint, black_paint, multi_layer_insulation, none]",
      "Subsystem not found: One or more subsystem IDs do not exist in registry",
      "Missing thermal data: One or more subsystems lack required temperature specifications"
    ],
    "usage": "Provide orbital parameters and subsystem IDs for thermal analysis. Ensure all subsystems have temperature specifications in the registry.",
    "output_details": {
      "thermal_status": {
        "type": "string",
        "description": "Overall thermal status: acceptable, marginal, critical"
      },
      "max_temperature_c": {
        "type": "number",
        "description": "Maximum predicted temperature in Celsius"
      },
      "min_temperature_c": {
        "type": "number",
        "description": "Minimum predicted temperature in Celsius"
      },
      "thermal_violations": {
        "type": "array",
        "items": {"type": "string"},
        "description": "List of subsystems exceeding temperature limits"
      },
      "thermal_recommendations": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Recommendations for thermal management"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Mass Properties Calculator",
    "tool_description": "Calculates center of gravity, moments of inertia, and mass distribution for satellite subsystem configurations.",
    "parameters": {
      "subsystem_ids": {
        "type": "array",
        "items": {"type": "string"},
        "required": true,
        "description": "List of subsystem registry IDs to include in mass calculations"
      },
      "reference_frame": {
        "type": "string",
        "required": false,
        "description": "Reference coordinate system: satellite_body, launch_vehicle, orbital",
        "default": "satellite_body"
      }
    },
    "error_messages": [
      "Empty subsystem list: Must provide at least one subsystem ID",
      "Invalid reference frame: Must be one of [satellite_body, launch_vehicle, orbital]",
      "Subsystem not found: One or more subsystem IDs do not exist in registry",
      "Missing mass data: One or more subsystems lack mass specifications",
      "Zero total mass: Total system mass cannot be zero"
    ],
    "usage": "Provide list of subsystem IDs to calculate overall mass properties. Ensure all subsystems have mass data in the registry.",
    "output_details": {
      "total_mass_kg": {
        "type": "number",
        "description": "Total system mass in kilograms"
      },
      "center_of_gravity_x": {
        "type": "number",
        "description": "X-coordinate of center of gravity in meters"
      },
      "center_of_gravity_y": {
        "type": "number",
        "description": "Y-coordinate of center of gravity in meters"
      },
      "center_of_gravity_z": {
        "type": "number",
        "description": "Z-coordinate of center of gravity in meters"
      },
      "moment_of_inertia_xx": {
        "type": "number",
        "description": "Moment of inertia about X-axis in kg⋅m²"
      },
      "moment_of_inertia_yy": {
        "type": "number",
        "description": "Moment of inertia about Y-axis in kg⋅m²"
      },
      "moment_of_inertia_zz": {
        "type": "number",
        "description": "Moment of inertia about Z-axis in kg⋅m²"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Configuration Version Tracker",
    "tool_description": "Manages version control and change tracking for satellite subsystem configurations throughout the development lifecycle.",
    "parameters": {
      "configuration_name": {
        "type": "string",
        "required": true,
        "description": "Name of the configuration to track"
      },
      "subsystem_ids": {
        "type": "array",
        "items": {"type": "string"},
        "required": true,
        "description": "List of subsystem registry IDs in this configuration"
      },
      "version_number": {
        "type": "string",
        "required": true,
        "description": "Version number in format X.Y.Z"
      },
      "change_description": {
        "type": "string",
        "required": true,
        "description": "Description of changes in this version"
      },
      "changed_by": {
        "type": "string",
        "required": true,
        "description": "Name of person making the change"
      },
      "approval_required": {
        "type": "boolean",
        "required": false,
        "description": "Whether this change requires formal approval",
        "default": true
      },
      "baseline_version": {
        "type": "boolean",
        "required": false,
        "description": "Whether this version should become the new baseline",
        "default": false
      },
      "release_notes": {
        "type": "string",
        "required": false,
        "description": "Additional release notes for this version",
        "default": ""
      }
    },
    "error_messages": [
      "Invalid configuration name: Configuration name cannot be empty",
      "Empty subsystem list: Must provide at least one subsystem ID",
      "Invalid version format: Version must follow X.Y.Z format with numeric values",
      "Empty change description: Must provide description of changes",
      "Invalid user name: Changed by field cannot be empty",
      "Version already exists: This version number is already in use for this configuration",
      "Subsystem not found: One or more subsystem IDs do not exist in registry"
    ],
    "usage": "Track configuration versions by providing configuration details and change information. Use incremental version numbers and clear change descriptions.",
    "output_details": {
      "version_id": {
        "type": "string",
        "description": "Unique identifier for this version"
      },
      "tracking_status": {
        "type": "string",
        "description": "Version status: draft, pending_approval, approved, baseline"
      },
      "creation_timestamp": {
        "type": "string",
        "description": "Timestamp when version was created"
      },
      "approval_status": {
        "type": "string",
        "description": "Approval status if required: pending, approved, rejected"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Requirements Compliance Validator",
    "tool_description": "Validates satellite subsystem configurations against mission requirements and industry standards to ensure compliance.",
    "parameters": {
      "configuration_version_id": {
        "type": "string",
        "required": true,
        "description": "Version ID of the configuration to validate"
      },
      "mission_requirements": {
        "type": "array",
        "items": {"type": "string"},
        "required": true,
        "description": "List of mission requirement IDs to validate against"
      },
      "industry_standards": {
        "type": "array",
        "items": {"type": "string"},
        "required": false,
        "description": "Industry standards to check: ECSS, NASA-STD, MIL-STD, ISO",
        "default": ["ECSS"]
      },
      "validation_level": {
        "type": "string",
        "required": false,
        "description": "Validation depth: basic, comprehensive, full_traceability",
        "default": "comprehensive"
      },
      "generate_report": {
        "type": "boolean",
        "required": false,
        "description": "Whether to generate detailed compliance report",
        "default": true
      }
    },
    "error_messages": [
      "Invalid configuration version: Version ID does not exist",
      "Empty requirements list: Must provide at least one mission requirement ID",
      "Invalid industry standards: Must contain valid standard names",
      "Invalid validation level: Must be one of [basic, comprehensive, full_traceability]",
      "Requirements not found: One or more requirement IDs are not recognized",
      "Configuration incomplete: Configuration lacks necessary data for validation"
    ],
    "usage": "Validate configurations by providing version ID and requirements. Ensure configuration is complete and requirements are properly defined.",
    "output_details": {
      "compliance_status": {
        "type": "string",
        "description": "Overall compliance: compliant, non_compliant, partially_compliant"
      },
      "compliance_percentage": {
        "type": "number",
        "description": "Percentage of requirements met (0-100)"
      },
      "violations": {
        "type": "array",
        "items": {"type": "string"},
        "description": "List of requirement violations found"
      },
      "warnings": {
        "type": "array",
        "items": {"type": "string"},
        "description": "List of compliance warnings"
      },
      "validation_timestamp": {
        "type": "string",
        "description": "Timestamp when validation was performed"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Integration Sequence Planner",
    "tool_description": "Generates optimal integration sequences for satellite subsystems based on dependencies, access requirements, and testing needs.",
    "parameters": {
      "configuration_version_id": {
        "type": "string",
        "required": true,
        "description": "Version ID of the configuration to plan integration for"
      },
      "integration_constraints": {
        "type": "array",
        "items": {"type": "string"},
        "required": false,
        "description": "Integration constraints: clean_room, vibration_sensitive, thermal_sensitive, access_limited",
        "default": ["clean_room"]
      },
      "parallel_integration": {
        "type": "boolean",
        "required": false,
        "description": "Whether to allow parallel integration activities",
        "default": true
      },
      "test_integration": {
        "type": "boolean",
        "required": false,
        "description": "Whether to include test points in integration sequence",
        "default": true
      }
    },
    "error_messages": [
      "Invalid configuration version: Version ID does not exist",
      "Invalid integration constraints: Must contain valid constraint types",
      "Configuration incomplete: Configuration lacks subsystem dependency data",
      "Circular dependencies: Subsystem dependencies contain circular references",
      "No valid sequence: Cannot generate integration sequence with given constraints"
    ],
    "usage": "Generate integration sequences by providing configuration version and constraints. Ensure subsystem dependencies are properly defined.",
    "output_details": {
      "integration_sequence": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Ordered list of integration steps"
      },
      "estimated_duration_hours": {
        "type": "number",
        "description": "Estimated total integration time in hours"
      },
      "critical_path": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Critical path subsystems affecting timeline"
      },
      "parallel_activities": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Activities that can be performed in parallel"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Test Plan Generator",
    "tool_description": "Generates comprehensive test plans for satellite subsystem integration based on configuration and requirements.",
    "parameters": {
      "configuration_version_id": {
        "type": "string",
        "required": true,
        "description": "Version ID of the configuration to generate test plan for"
      },
      "test_levels": {
        "type": "array",
        "items": {"type": "string"},
        "required": true,
        "description": "Test levels to include: unit, subsystem, system, acceptance"
      },
      "test_types": {
        "type": "array",
        "items": {"type": "string"},
        "required": false,
        "description": "Test types: functional, thermal, vibration, shock, EMC, vacuum",
        "default": ["functional", "thermal"]
      },
      "test_environment": {
        "type": "string",
        "required": false,
        "description": "Test environment: laboratory, clean_room, thermal_vacuum, anechoic_chamber",
        "default": "laboratory"
      },
      "include_procedures": {
        "type": "boolean",
        "required": false,
        "description": "Whether to include detailed test procedures",
        "default": true
      }
    },
    "error_messages": [
      "Invalid configuration version: Version ID does not exist",
      "Empty test levels: Must specify at least one test level",
      "Invalid test levels: Must contain valid test level names",
      "Invalid test types: Must contain valid test type names",
      "Invalid test environment: Must be a recognized test environment type",
      "Configuration not testable: Configuration lacks necessary data for test planning"
    ],
    "usage": "Generate test plans by specifying configuration version and test parameters. Ensure configuration is complete and requirements are defined.",
    "output_details": {
      "test_plan_id": {
        "type": "string",
        "description": "Unique identifier for the generated test plan"
      },
      "total_test_duration_hours": {
        "type": "number",
        "description": "Estimated total test duration in hours"
      },
      "test_sequence": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Ordered sequence of test activities"
      },
      "required_equipment": {
        "type": "array",
        "items": {"type": "string"},
        "description": "List of required test equipment"
      },
      "success_criteria": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Test success criteria for each test"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Cable Harness Designer",
    "tool_description": "Designs cable harnesses and wiring configurations for satellite subsystem interconnections based on interface requirements.",
    "parameters": {
      "source_subsystem_id": {
        "type": "string",
        "required": true,
        "description": "Registry ID of the source subsystem"
      },
      "target_subsystem_id": {
        "type": "string",
        "required": true,
        "description": "Registry ID of the target subsystem"
      },
      "cable_type": {
        "type": "string",
        "required": true,
        "description": "Cable type: power, data, coaxial, fiber_optic, control"
      },
      "signal_requirements": {
        "type": "array",
        "items": {"type": "string"},
        "required": true,
        "description": "Signal requirements: voltage_level, current_rating, data_rate, frequency_range"
      },
      "routing_constraints": {
        "type": "array",
        "items": {"type": "string"},
        "required": false,
        "description": "Routing constraints: EMC_shielding, thermal_protection, mechanical_protection, bend_radius",
        "default": ["EMC_shielding"]
      },
      "redundancy_required": {
        "type": "boolean",
        "required": false,
        "description": "Whether redundant connections are required",
        "default": false
      },
      "harness_length_limit_m": {
        "type": "number",
        "required": false,
        "description": "Maximum allowable harness length in meters",
        "default": 5.0
      }
    },
    "error_messages": [
      "Subsystem not found: One or both subsystem IDs do not exist in registry",
      "Invalid cable type: Must be one of [power, data, coaxial, fiber_optic, control]",
      "Empty signal requirements: Must specify at least one signal requirement",
      "Invalid signal requirements: Must contain valid requirement types",
      "Invalid routing constraints: Must contain valid constraint types",
      "Invalid harness length: Length limit must be greater than 0",
      "Incompatible interfaces: Subsystems do not have compatible interface types"
    ],
    "usage": "Design cable harnesses by specifying source and target subsystems with cable requirements. Ensure subsystems have compatible interfaces.",
    "output_details": {
      "harness_design_id": {
        "type": "string",
        "description": "Unique identifier for the harness design"
      },
      "cable_specifications": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Detailed cable specifications and part numbers"
      },
      "estimated_length_m": {
        "type": "number",
        "description": "Estimated total harness length in meters"
      },
      "connector_types": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Required connector types and specifications"
      },
      "routing_recommendations": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Cable routing recommendations and guidelines"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Component Lifecycle Monitor",
    "tool_description": "Tracks and monitors the lifecycle status of satellite subsystem components from procurement through end of mission.",
    "parameters": {
      "subsystem_id": {
        "type": "string",
        "required": true,
        "description": "Registry ID of the subsystem to monitor"
      },
      "lifecycle_stage": {
        "type": "string",
        "required": true,
        "description": "Current lifecycle stage: design, procurement, manufacturing, testing, integration, launch, operational, decommissioned"
      },
      "update_type": {
        "type": "string",
        "required": true,
        "description": "Type of lifecycle update: status_change, milestone_reached, issue_reported, maintenance_performed"
      },
      "update_description": {
        "type": "string",
        "required": true,
        "description": "Description of the lifecycle update"
      },
      "responsible_person": {
        "type": "string",
        "required": true,
        "description": "Name of person responsible for this update"
      }
    },
    "error_messages": [
      "Subsystem not found: Subsystem ID does not exist in registry",
      "Invalid lifecycle stage: Must be a recognized lifecycle stage",
      "Invalid update type: Must be one of [status_change, milestone_reached, issue_reported,
