field_name: games_and_gamification
subfield: Game Development and Design
task: Asset Creation and Management
tool_description: |-
  **STEP 1 — Rate task difficulty**

  Asset Creation and Management in Game Development is a **medium** difficulty task. It involves multiple interconnected workflows (concept art, 3D modeling, texturing, animation, optimization), requires coordination between different asset types and formats, has moderate technical complexity with various file formats and performance constraints, and involves managing dependencies between assets while maintaining quality standards.

  **STEP 2 — Set a tool budget**

  Given the medium difficulty, I'll target **12 tools** to cover the breadth of asset creation workflows while maintaining focused, composable functionality.

  **STEP 3 — List all tool names and dependencies**

  Tools and their data flow:
  1. **Asset Concept Generator** → produces concept specifications
  2. **3D Model Creator** → consumes concept specs, produces 3D models
  3. **Texture Generator** → produces texture data
  4. **Material Composer** → consumes textures, produces materials
  5. **Asset Optimizer** → consumes 3D models, produces optimized versions
  6. **Animation Creator** → consumes 3D models, produces animations
  7. **Asset Validator** → consumes any asset, produces validation reports
  8. **Asset Metadata Manager** → consumes assets, produces/manages metadata
  9. **Asset Version Controller** → manages asset versions and changes
  10. **Asset Dependencies Tracker** → tracks relationships between assets
  11. **Asset Performance Analyzer** → analyzes asset performance impact
  12. **Asset Package Builder** → packages assets for distribution

  **STEP 4 — Multi-tool plans**

  **Simple plans:**
  - Create basic texture: Texture Generator → Asset Validator → Asset Metadata Manager
  - Optimize single asset: Asset Optimizer → Asset Performance Analyzer → Asset Validator

  **Medium plans:**
  - Create complete 3D asset: Asset Concept Generator → 3D Model Creator → Texture Generator → Material Composer → Asset Validator → Asset Metadata Manager
  - Asset update workflow: Asset Version Controller → Asset Dependencies Tracker → Asset Optimizer → Asset Performance Analyzer → Asset Package Builder

  **Complex plans:**
  - Full animated character pipeline: Asset Concept Generator → 3D Model Creator → Texture Generator → Material Composer → Animation Creator → Asset Optimizer → Asset Validator → Asset Performance Analyzer → Asset Dependencies Tracker → Asset Metadata Manager → Asset Version Controller → Asset Package Builder
  - Asset library management: Asset Dependencies Tracker → Asset Performance Analyzer → Asset Version Controller → Asset Validator → Asset Package Builder → Asset Metadata Manager

  **STEP 5 — Produce tools**

  ```json
  {
    "tool_name": "Asset Concept Generator",
    "tool_description": "Generates detailed concept specifications for game assets including visual style, technical requirements, and design constraints.",
    "parameters": {
      "asset_type": {
        "type": "string",
        "required": true,
        "description": "Type of asset to conceptualize: character, environment, prop, vehicle, weapon, ui_element"
      },
      "art_style": {
        "type": "string",
        "required": true,
        "description": "Visual art style: realistic, stylized, cartoon, pixel_art, low_poly, photorealistic"
      },
      "target_platform": {
        "type": "string",
        "required": false,
        "description": "Target gaming platform: pc, mobile, console, vr, web",
        "default": "pc"
      },
      "poly_budget": {
        "type": "integer",
        "required": false,
        "description": "Maximum polygon count for the asset (100-50000)",
        "default": 5000
      },
      "theme_tags": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "required": false,
        "description": "Thematic tags to guide concept generation",
        "default": "None"
      }
    },
    "error_messages": [
      "Invalid asset type: Use one of [character, environment, prop, vehicle, weapon, ui_element]",
      "Invalid art style: Use one of [realistic, stylized, cartoon, pixel_art, low_poly, photorealistic]",
      "Invalid platform: Use one of [pc, mobile, console, vr, web]",
      "Polygon budget out of range: Must be between 100 and 50000"
    ],
    "usage": "Specify asset_type and art_style as minimum requirements. Add target_platform, poly_budget, and theme_tags to refine the concept. The tool generates comprehensive specifications for asset creation.",
    "output_details": {
      "concept_id": {
        "type": "string",
        "description": "Unique identifier for the generated concept"
      },
      "description": {
        "type": "string",
        "description": "Detailed textual description of the asset concept"
      },
      "technical_specs": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Array of technical requirements and constraints"
      },
      "color_palette": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Recommended color codes in hex format"
      },
      "style_notes": {
        "type": "string",
        "description": "Specific styling guidelines and artistic direction"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "3D Model Creator",
    "tool_description": "Creates 3D models based on concept specifications with proper geometry, UVs, and export formats for game engines.",
    "parameters": {
      "concept_id": {
        "type": "string",
        "required": true,
        "description": "Reference ID from Asset Concept Generator"
      },
      "mesh_quality": {
        "type": "string",
        "required": false,
        "description": "Quality level: draft, standard, high, production",
        "default": "standard"
      },
      "uv_unwrap": {
        "type": "boolean",
        "required": false,
        "description": "Whether to generate UV coordinates for texturing",
        "default": true
      },
      "export_formats": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "required": false,
        "description": "Output file formats: fbx, obj, dae, gltf, blend",
        "default": ["fbx", "obj"]
      },
      "scale_factor": {
        "type": "number",
        "required": false,
        "description": "Scale multiplier for the model (0.1-10.0)",
        "default": 1.0
      },
      "detail_level": {
        "type": "string",
        "required": false,
        "description": "Level of geometric detail: low, medium, high, ultra",
        "default": "medium"
      }
    },
    "error_messages": [
      "Concept ID not found: Provide a valid concept_id from Asset Concept Generator",
      "Invalid mesh quality: Use one of [draft, standard, high, production]",
      "Invalid export format: Supported formats are [fbx, obj, dae, gltf, blend]",
      "Scale factor out of range: Must be between 0.1 and 10.0",
      "Invalid detail level: Use one of [low, medium, high, ultra]"
    ],
    "usage": "Provide a concept_id from Asset Concept Generator. Adjust mesh_quality, detail_level, and export_formats based on project needs. The tool creates 3D geometry ready for texturing and animation.",
    "output_details": {
      "model_id": {
        "type": "string",
        "description": "Unique identifier for the created 3D model"
      },
      "vertex_count": {
        "type": "integer",
        "description": "Total number of vertices in the model"
      },
      "polygon_count": {
        "type": "integer",
        "description": "Total number of polygons/faces in the model"
      },
      "file_paths": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Array of file paths for exported model formats"
      },
      "bounding_box": {
        "type": "array",
        "items": {
          "type": "number"
        },
        "description": "Six values representing min/max X,Y,Z coordinates"
      },
      "uv_islands": {
        "type": "integer",
        "description": "Number of UV mapping islands created"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Texture Generator",
    "tool_description": "Generates various types of textures and texture maps for game assets with specified resolutions and formats.",
    "parameters": {
      "texture_type": {
        "type": "string",
        "required": true,
        "description": "Type of texture: diffuse, normal, specular, roughness, metallic, emission, ambient_occlusion"
      },
      "resolution": {
        "type": "string",
        "required": true,
        "description": "Texture resolution: 256x256, 512x512, 1024x1024, 2048x2048, 4096x4096"
      },
      "material_type": {
        "type": "string",
        "required": true,
        "description": "Surface material: metal, wood, fabric, stone, plastic, organic, glass"
      },
      "tiling": {
        "type": "boolean",
        "required": false,
        "description": "Whether texture should tile seamlessly",
        "default": true
      },
      "color_variation": {
        "type": "number",
        "required": false,
        "description": "Amount of color variation (0.0-1.0)",
        "default": 0.3
      }
    },
    "error_messages": [
      "Invalid texture type: Use one of [diffuse, normal, specular, roughness, metallic, emission, ambient_occlusion]",
      "Invalid resolution: Use one of [256x256, 512x512, 1024x1024, 2048x2048, 4096x4096]",
      "Invalid material type: Use one of [metal, wood, fabric, stone, plastic, organic, glass]",
      "Color variation out of range: Must be between 0.0 and 1.0"
    ],
    "usage": "Specify texture_type, resolution, and material_type. Enable tiling for repeating textures and adjust color_variation for surface diversity. The tool generates texture files ready for material composition.",
    "output_details": {
      "texture_id": {
        "type": "string",
        "description": "Unique identifier for the generated texture"
      },
      "file_path": {
        "type": "string",
        "description": "File path to the generated texture image"
      },
      "file_size_mb": {
        "type": "number",
        "description": "File size in megabytes"
      },
      "format": {
        "type": "string",
        "description": "Image format of the generated texture"
      },
      "is_seamless": {
        "type": "boolean",
        "description": "Whether the texture tiles seamlessly"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Material Composer",
    "tool_description": "Combines multiple textures into complete materials with proper shader parameters and engine compatibility.",
    "parameters": {
      "material_name": {
        "type": "string",
        "required": true,
        "description": "Name for the material being composed"
      },
      "diffuse_texture_id": {
        "type": "string",
        "required": true,
        "description": "Texture ID for diffuse/albedo map"
      },
      "normal_texture_id": {
        "type": "string",
        "required": false,
        "description": "Texture ID for normal map",
        "default": "None"
      },
      "specular_texture_id": {
        "type": "string",
        "required": false,
        "description": "Texture ID for specular map",
        "default": "None"
      },
      "roughness_texture_id": {
        "type": "string",
        "required": false,
        "description": "Texture ID for roughness map",
        "default": "None"
      },
      "metallic_texture_id": {
        "type": "string",
        "required": false,
        "description": "Texture ID for metallic map",
        "default": "None"
      },
      "emission_texture_id": {
        "type": "string",
        "required": false,
        "description": "Texture ID for emission map",
        "default": "None"
      },
      "target_engine": {
        "type": "string",
        "required": false,
        "description": "Target game engine: unity, unreal, godot, custom",
        "default": "unity"
      },
      "shader_type": {
        "type": "string",
        "required": false,
        "description": "Shader model: standard, pbr, toon, unlit",
        "default": "pbr"
      },
      "transparency": {
        "type": "boolean",
        "required": false,
        "description": "Whether material supports transparency",
        "default": false
      },
      "double_sided": {
        "type": "boolean",
        "required": false,
        "description": "Whether material renders on both sides",
        "default": false
      },
      "metallic_factor": {
        "type": "number",
        "required": false,
        "description": "Global metallic multiplier (0.0-1.0)",
        "default": 0.0
      },
      "roughness_factor": {
        "type": "number",
        "required": false,
        "description": "Global roughness multiplier (0.0-1.0)",
        "default": 0.5
      },
      "emission_strength": {
        "type": "number",
        "required": false,
        "description": "Emission intensity (0.0-10.0)",
        "default": 0.0
      }
    },
    "error_messages": [
      "Diffuse texture not found: Provide a valid diffuse_texture_id",
      "Texture ID not found: One or more provided texture IDs are invalid",
      "Invalid target engine: Use one of [unity, unreal, godot, custom]",
      "Invalid shader type: Use one of [standard, pbr, toon, unlit]",
      "Parameter out of range: metallic_factor and roughness_factor must be 0.0-1.0, emission_strength must be 0.0-10.0"
    ],
    "usage": "Provide material_name and diffuse_texture_id as minimum. Add additional texture maps and adjust parameters for advanced materials. Set target_engine for proper compatibility.",
    "output_details": {
      "material_id": {
        "type": "string",
        "description": "Unique identifier for the composed material"
      },
      "material_file_path": {
        "type": "string",
        "description": "Path to the material definition file"
      },
      "texture_count": {
        "type": "integer",
        "description": "Number of textures used in the material"
      },
      "shader_parameters": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of configured shader parameters"
      },
      "engine_compatibility": {
        "type": "string",
        "description": "Target engine for which material was optimized"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Asset Optimizer",
    "tool_description": "Optimizes game assets for performance by reducing polygon count, compressing textures, and adjusting quality settings while maintaining visual fidelity.",
    "parameters": {
      "asset_id": {
        "type": "string",
        "required": true,
        "description": "ID of the asset to optimize (model_id, texture_id, or material_id)"
      },
      "optimization_level": {
        "type": "string",
        "required": true,
        "description": "Optimization intensity: conservative, balanced, aggressive, maximum"
      },
      "target_platform": {
        "type": "string",
        "required": true,
        "description": "Platform to optimize for: mobile, console, pc, vr, web"
      },
      "preserve_quality": {
        "type": "boolean",
        "required": false,
        "description": "Whether to prioritize visual quality over performance",
        "default": true
      }
    },
    "error_messages": [
      "Asset not found: Provide a valid asset_id from a previous tool",
      "Invalid optimization level: Use one of [conservative, balanced, aggressive, maximum]",
      "Invalid target platform: Use one of [mobile, console, pc, vr, web]",
      "Optimization failed: Asset may be corrupted or in unsupported format"
    ],
    "usage": "Provide asset_id, optimization_level, and target_platform. Set preserve_quality to false for maximum performance gains. The tool creates optimized versions while preserving originals.",
    "output_details": {
      "optimized_asset_id": {
        "type": "string",
        "description": "ID of the newly optimized asset"
      },
      "size_reduction_percent": {
        "type": "number",
        "description": "Percentage reduction in file size"
      },
      "polygon_reduction_percent": {
        "type": "number",
        "description": "Percentage reduction in polygon count (for 3D models)"
      },
      "quality_score": {
        "type": "number",
        "description": "Visual quality score from 0.0 to 1.0"
      },
      "optimization_summary": {
        "type": "string",
        "description": "Description of optimizations applied"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Animation Creator",
    "tool_description": "Creates animations for 3D models including keyframe animation, skeletal rigging, and motion data export for game engines.",
    "parameters": {
      "model_id": {
        "type": "string",
        "required": true,
        "description": "ID of the 3D model to animate"
      },
      "animation_type": {
        "type": "string",
        "required": true,
        "description": "Type of animation: idle, walk, run, jump, attack, death, custom"
      },
      "duration_seconds": {
        "type": "number",
        "required": true,
        "description": "Animation length in seconds (0.1-60.0)"
      },
      "frame_rate": {
        "type": "integer",
        "required": false,
        "description": "Animation frame rate (12-60 fps)",
        "default": 30
      },
      "loop": {
        "type": "boolean",
        "required": false,
        "description": "Whether animation should loop seamlessly",
        "default": true
      },
      "bone_count": {
        "type": "integer",
        "required": false,
        "description": "Number of bones for skeletal animation (1-200)",
        "default": 20
      }
    },
    "error_messages": [
      "Model not found: Provide a valid model_id from 3D Model Creator",
      "Invalid animation type: Use one of [idle, walk, run, jump, attack, death, custom]",
      "Duration out of range: Must be between 0.1 and 60.0 seconds",
      "Invalid frame rate: Must be between 12 and 60 fps",
      "Bone count out of range: Must be between 1 and 200 bones"
    ],
    "usage": "Provide model_id, animation_type, and duration_seconds. Adjust frame_rate and bone_count based on complexity needs. Enable loop for cyclical animations like walking or idle states.",
    "output_details": {
      "animation_id": {
        "type": "string",
        "description": "Unique identifier for the created animation"
      },
      "keyframe_count": {
        "type": "integer",
        "description": "Total number of keyframes generated"
      },
      "file_path": {
        "type": "string",
        "description": "Path to the animation data file"
      },
      "rig_bone_names": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Names of bones in the skeletal rig"
      },
      "is_looping": {
        "type": "boolean",
        "description": "Whether the animation loops seamlessly"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Asset Validator",
    "tool_description": "Validates game assets for technical compliance, quality standards, and engine compatibility issues.",
    "parameters": {
      "asset_id": {
        "type": "string",
        "required": true,
        "description": "ID of the asset to validate"
      },
      "validation_type": {
        "type": "string",
        "required": true,
        "description": "Validation scope: technical, quality, performance, compatibility, all"
      },
      "strict_mode": {
        "type": "boolean",
        "required": false,
        "description": "Whether to apply strict validation rules",
        "default": false
      }
    },
    "error_messages": [
      "Asset not found: Provide a valid asset_id from a previous creation tool",
      "Invalid validation type: Use one of [technical, quality, performance, compatibility, all]",
      "Asset corrupted: The asset file appears to be damaged or incomplete"
    ],
    "usage": "Provide asset_id and choose validation_type based on what aspects you want to check. Enable strict_mode for production-ready assets that need to meet higher standards.",
    "output_details": {
      "validation_id": {
        "type": "string",
        "description": "Unique identifier for this validation report"
      },
      "is_valid": {
        "type": "boolean",
        "description": "Overall validation result"
      },
      "error_count": {
        "type": "integer",
        "description": "Number of errors found"
      },
      "warning_count": {
        "type": "integer",
        "description": "Number of warnings found"
      },
      "errors": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of error messages found during validation"
      },
      "warnings": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of warning messages found during validation"
      },
      "recommendations": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Suggested improvements for the asset"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Asset Metadata Manager",
    "tool_description": "Creates, updates, and manages metadata for game assets including tags, categories, usage rights, and technical specifications.",
    "parameters": {
      "asset_id": {
        "type": "string",
        "required": true,
        "description": "ID of the asset to manage metadata for"
      },
      "asset_name": {
        "type": "string",
        "required": true,
        "description": "Human-readable name for the asset"
      },
      "category": {
        "type": "string",
        "required": true,
        "description": "Asset category: character, environment, prop, ui, audio, texture, material, animation"
      },
      "tags": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "required": false,
        "description": "Descriptive tags for asset organization",
        "default": "None"
      },
      "author": {
        "type": "string",
        "required": false,
        "description": "Creator of the asset",
        "default": "Unknown"
      },
      "license": {
        "type": "string",
        "required": false,
        "description": "Usage license: public_domain, cc0, commercial, restricted",
        "default": "commercial"
      },
      "quality_rating": {
        "type": "integer",
        "required": false,
        "description": "Quality rating from 1 to 5 stars",
        "default": 3
      },
      "usage_notes": {
        "type": "string",
        "required": false,
        "description": "Special usage instructions or notes",
        "default": "None"
      }
    },
    "error_messages": [
      "Asset not found: Provide a valid asset_id from a previous creation tool",
      "Invalid category: Use one of [character, environment, prop, ui, audio, texture, material, animation]",
      "Invalid license: Use one of [public_domain, cc0, commercial, restricted]",
      "Quality rating out of range: Must be between 1 and 5"
    ],
    "usage": "Provide asset_id, asset_name, and category as minimum. Add tags, author, license, and other metadata to improve asset organization and searchability.",
    "output_details": {
      "metadata_id": {
        "type": "string",
        "description": "Unique identifier for the metadata record"
      },
      "created_timestamp": {
        "type": "string",
        "description": "When metadata was created (ISO 8601 format)"
      },
      "updated_timestamp": {
        "type": "string",
        "description": "When metadata was last updated (ISO 8601 format)"
      },
      "metadata_file_path": {
        "type": "string",
        "description": "Path to the metadata file"
      },
      "tag_count": {
        "type": "integer",
        "description": "Number of tags assigned to the asset"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Asset Version Controller",
    "tool_description": "Manages versioning of game assets, tracks changes, enables rollbacks, and maintains version history with branching support.",
    "parameters": {
      "asset_id": {
        "type": "string",
        "required": true,
        "description": "ID of the asset to version control"
      },
      "action": {
        "type": "string",
        "required": true,
        "description": "Version control action: commit, rollback, branch, merge, history"
      },
      "version_message": {
        "type": "string",
        "required": false,
        "description": "Description of changes made",
        "default": "Asset update"
      },
      "target_version": {
        "type": "string",
        "required": false,
        "description": "Target version for rollback/merge operations",
        "default": "None"
      },
      "branch_name": {
        "type": "string",
        "required": false,
        "description": "Name for new branch",
        "default": "None"
      }
    },
    "error_messages": [
      "Asset not found: Provide a valid asset_id",
      "Invalid action: Use one of [commit, rollback, branch, merge, history]",
      "Target version not found: Provide a valid existing version for rollback/merge",
      "Branch already exists: Choose a different branch_name",
      "Merge conflict: Cannot automatically merge versions, manual resolution required"
    ],
    "usage": "Provide asset_id and action. For commits, add version_message. For rollbacks and merges, specify target_version. For branching, provide branch_name.",
    "output_details": {
      "operation_id": {
        "type": "string",
        "description": "Unique identifier for this version control operation"
      },
      "current_version": {
        "type": "string",
        "description": "Current version identifier after operation"
      },
      "previous_version": {
        "type": "string",
        "description": "Previous version identifier"
      },
      "version_history": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of all versions for this asset"
      },
      "active_branches": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of active branches for this asset"
      },
      "operation_success": {
        "type": "boolean",
        "description": "Whether the version control operation succeeded"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Asset Dependencies Tracker",
    "tool_description": "Tracks and manages dependencies between game assets, identifies missing references, and helps maintain asset integrity across projects.",
    "parameters": {
      "primary_asset_id": {
        "type": "string",
        "required": true,
        "description": "ID of the main asset to analyze dependencies for"
      },
      "operation": {
        "type": "string",
        "required": true,
        "description": "Operation type: analyze, update, verify, resolve_missing"
      },
      "include_indirect": {
        "type": "boolean",
        "required": false,
        "description": "Whether to include indirect dependencies",
        "default": true
      },
      "dependency_types": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "required": false,
        "description": "Types of dependencies to track: texture, material, model, animation, audio",
        "default": ["texture", "material", "model", "animation"]
      }
    },
    "error_messages": [
      "Asset not found: Provide a valid primary_asset_id",
      "Invalid operation: Use one of [analyze, update, verify, resolve_missing]",
      "Invalid dependency type: Use combinations of [texture, material, model, animation, audio]"
    ],
    "usage": "Provide primary_asset_id and operation. Use analyze to discover dependencies, verify to check integrity, and resolve_missing to fix broken references.",
    "output_details": {
      "analysis_id": {
        "type": "string",
        "description": "Unique identifier for this dependency analysis"
      },
      "direct_dependencies": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of directly referenced asset IDs"
      },
      "indirect_dependencies": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of indirectly referenced asset IDs"
      },
      "missing_dependencies": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of missing or broken dependency references"
      },
      "dependency_count": {
        "type": "integer",
        "description": "Total number of dependencies found"
      },
      "integrity_status": {
        "type": "string",
        "description": "Overall dependency integrity: complete, missing_references, broken_links"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Asset Performance Analyzer",
    "tool_description": "Analyzes the performance impact of game assets including memory usage, rendering cost, and optimization recommendations for different platforms.",
    "parameters": {
      "asset_id": {
        "type": "string",
        "required": true,
        "description": "ID of the asset to analyze performance for"
      },
      "target_platform": {
        "type": "string",
        "required": true,
        "description": "Platform for performance analysis: mobile, console, pc, vr, web"
      },
      "analysis_depth": {
