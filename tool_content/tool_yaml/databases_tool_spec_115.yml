field_name: databases
subfield: Backup and Disaster Recovery
task: Manage backup retention policies and automate cleanup of expired backups
tool_description: "STEP 1 — Rate task difficulty\n\nThis task is **medium** difficulty. It involves coordinating multiple database systems, handling time-based retention logic, managing storage resources, and ensuring data safety with proper validation before deletion. The risk of accidentally deleting critical backups is high, requiring careful verification and rollback capabilities.\n\nSTEP 2 — Set a tool budget\n\nFor medium difficulty, I'll target 12 tools to cover backup discovery, retention policy management, validation, cleanup automation, and monitoring across different storage systems and database types.\n\nSTEP 3 — List all tool names with dependencies and affordances\n\n1. **Backup Discovery Tool** - Consumes: storage locations, filters → Produces: backup inventories\n2. **Retention Policy Manager** - Consumes: policy rules → Produces: policy configurations  \n3. **Backup Age Calculator** - Consumes: backup metadata, current time → Produces: age classifications\n4. **Retention Rule Evaluator** - Consumes: policies, backup metadata → Produces: retention decisions\n5. **Backup Validator** - Consumes: backup paths → Produces: integrity status\n6. **Dependency Checker** - Consumes: backup metadata → Produces: dependency analysis\n7. **Cleanup Plan Generator** - Consumes: retention decisions, dependencies → Produces: deletion plans\n8. **Storage Space Analyzer** - Consumes: storage locations → Produces: space utilization data\n9. **Backup Archiver** - Consumes: backup paths, archive locations → Produces: archived backups\n10. **Cleanup Executor** - Consumes: deletion plans → Produces: cleanup results\n11. **Cleanup Monitor** - Consumes: cleanup operations → Produces: monitoring data\n12. **Rollback Manager** - Consumes: cleanup history → Produces: rollback capabilities\n\nSTEP 4 — Multi-tool plans\n\n**Simple plans:**\n1. Policy validation: Retention Policy Manager → Retention Rule Evaluator (validates policy syntax and logic)\n2. Space monitoring: Backup Discovery Tool → Storage Space Analyzer (monitors current storage usage)\n\n**Medium plans:**  \n1. Manual cleanup: Backup Discovery Tool → Backup Age Calculator → Retention Rule Evaluator → Cleanup Plan Generator → Cleanup Executor (performs one-time cleanup)\n2. Backup archival: Backup Discovery Tool → Dependency Checker → Backup Archiver → Storage Space Analyzer (archives old backups before deletion)\n\n**Complex plans:**\n1. Full automated cleanup: Backup Discovery Tool → Backup Validator → Backup Age Calculator → Retention Rule Evaluator → Dependency Checker → Cleanup Plan Generator → Backup Archiver → Cleanup Executor → Cleanup Monitor (complete automated retention management)\n2. Recovery scenario: Cleanup Monitor → Rollback Manager → Backup Discovery Tool → Backup Validator (handles cleanup failures and rollbacks)\n\nSTEP 5 — Produce tools\n\n```json\n{\n  \"tool_name\": \"Backup Discovery Tool\",\n  \"tool_description\": \"Scans storage locations to discover and catalog backup files with their metadata including size, creation time, database type, and backup type.\",\n  \"parameters\": {\n    \"storage_locations\": {\n      \"type\": \"array\",\n      \"items\": {\"type\": \"string\"},\n      \"required\": true,\n      \"description\": \"List of storage paths or URLs to scan for backups\",\n      \"minItems\": 1,\n      \"maxItems\": 50\n    },\n    \"database_types\": {\n      \"type\": \"array\", \n      \"items\": {\"type\": \"string\"},\n      \"required\": false,\n      \"description\": \"Filter by database types (mysql, postgresql, mongodb, oracle, sqlserver)\",\n      \"default\": \"None\"\n    },\n    \"backup_types\": {\n      \"type\": \"array\",\n      \"items\": {\"type\": \"string\"}, \n      \"required\": false,\n      \"description\": \"Filter by backup types (full, incremental, differential, log)\",\n      \"default\": \"None\"\n    },\n    \"max_depth\": {\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"Maximum directory depth to scan (1-10)\",\n      \"default\": 5\n    }\n  },\n  \"error_messages\": [\n\
  \    \"Storage location not accessible: Ensure all paths in storage_locations are valid and accessible with proper permissions.\",\n    \"Invalid database type filter: Use only supported database types [mysql, postgresql, mongodb, oracle, sqlserver].\",\n    \"Invalid backup type filter: Use only supported backup types [full, incremental, differential, log].\",\n    \"Max depth out of range: Set max_depth between 1 and 10 to prevent excessive recursion.\"\n  ],\n  \"usage\": \"Provide storage_locations array to scan for backups. Optionally filter by database_types and backup_types, and set max_depth for directory traversal limits.\",\n  \"output_details\": {\n    \"total_backups_found\": {\n      \"type\": \"integer\",\n      \"description\": \"Total number of backup files discovered\"\n    },\n    \"backup_files\": {\n      \"type\": \"array\",\n      \"items\": {\"type\": \"string\"},\n      \"description\": \"List of backup file paths found during scan\"\n    },\n    \"backup_metadata\": {\n      \"type\": \"array\", \n      \"items\": {\"type\": \"string\"},\n      \"description\": \"Metadata strings for each backup (path|size|created|db_type|backup_type)\"\n    },\n    \"scan_summary\": {\n      \"type\": \"string\",\n      \"description\": \"Summary of scan results including any warnings or issues\"\n    }\n  }\n}\n```\n\n```json\n{\n  \"tool_name\": \"Retention Policy Manager\",\n  \"tool_description\": \"Creates, validates, and manages backup retention policies with rules for different backup types, database systems, and retention periods.\",\n  \"parameters\": {\n    \"policy_name\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Unique name for the retention policy\"\n    },\n    \"database_type\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Target database type (mysql, postgresql, mongodb, oracle, sqlserver, all)\"\n    },\n    \"full_backup_retention_days\": {\n      \"type\": \"integer\",\n      \"required\": true,\n      \"description\": \"Retention period for full backups in days (1-3650)\"\n    },\n    \"incremental_backup_retention_days\": {\n      \"type\": \"integer\", \n      \"required\": true,\n      \"description\": \"Retention period for incremental backups in days (1-365)\"\n    },\n    \"log_backup_retention_days\": {\n      \"type\": \"integer\",\n      \"required\": true,\n      \"description\": \"Retention period for log backups in days (1-90)\"\n    },\n    \"min_backups_to_keep\": {\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"Minimum number of backups to always retain (1-100)\",\n      \"default\": 3\n    },\n    \"archive_before_delete\": {\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Whether to archive backups before deletion\",\n      \"default\": false\n    },\n    \"policy_priority\": {\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"Policy priority level (1-10, higher = more priority)\",\n      \"default\": 5\n    },\n    \"exclude_patterns\": {\n      \"type\": \"array\",\n      \"items\": {\"type\": \"string\"},\n      \"required\": false,\n      \"description\": \"File patterns to exclude from this policy\",\n      \"maxItems\": 20,\n      \"default\": \"None\"\n    },\n    \"business_hours_only\": {\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Only apply cleanup during business hours (9AM-5PM)\",\n      \"default\": false\n    },\n    \"dry_run_mode\": {\n      \"type\": \"boolean\",\n      \"required\": false, \n      \"description\": \"Enable dry run mode for testing without actual changes\",\n      \"default\": true\n    }\n  },\n  \"error_messages\": [\n    \"Invalid retention period: full_backup_retention_days must be 1-3650, incremental_backup_retention_days must be 1-365, log_backup_retention_days must be 1-90.\",\n    \"Policy name conflict: A policy with this name already exists. Choose a unique policy_name.\",\n    \"Invalid database type: Use\
  \ one of [mysql, postgresql, mongodb, oracle, sqlserver, all].\",\n    \"Invalid parameter ranges: min_backups_to_keep must be 1-100, policy_priority must be 1-10.\",\n    \"Exclude patterns limit exceeded: Maximum 20 exclude patterns allowed.\"\n  ],\n  \"usage\": \"Create retention policies by specifying policy_name, database_type, and retention periods for different backup types. Configure additional options like minimum backups to keep and archival settings.\",\n  \"output_details\": {\n    \"policy_id\": {\n      \"type\": \"string\",\n      \"description\": \"Unique identifier assigned to the created policy\"\n    },\n    \"policy_status\": {\n      \"type\": \"string\", \n      \"description\": \"Current status of the policy (active, inactive, draft)\"\n    },\n    \"validation_result\": {\n      \"type\": \"string\",\n      \"description\": \"Results of policy validation checks\"\n    },\n    \"estimated_impact\": {\n      \"type\": \"string\",\n      \"description\": \"Estimated impact summary if policy were applied\"\n    }\n  }\n}\n```\n\n```json\n{\n  \"tool_name\": \"Backup Age Calculator\",\n  \"tool_description\": \"Calculates the age of backups and classifies them into retention categories based on current time and backup creation timestamps.\",\n  \"parameters\": {\n    \"backup_metadata\": {\n      \"type\": \"array\",\n      \"items\": {\"type\": \"string\"},\n      \"required\": true,\n      \"description\": \"Backup metadata strings in format: path|size|created_time|db_type|backup_type\",\n      \"minItems\": 1,\n      \"maxItems\": 10000\n    },\n    \"reference_time\": {\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"Reference time for age calculations (ISO 8601 format)\",\n      \"format\": \"date-time\",\n      \"default\": \"None\"\n    },\n    \"timezone\": {\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"Timezone for time calculations (e.g., UTC, America/New_York)\",\n      \"default\": \"UTC\"\n    }\n  },\n  \"error_messages\": [\n    \"Invalid backup metadata format: Each metadata string must follow format 'path|size|created_time|db_type|backup_type'.\",\n    \"Invalid reference time: Provide reference_time in ISO 8601 format (YYYY-MM-DDTHH:MM:SSZ).\",\n    \"Invalid timezone: Use a valid timezone identifier (e.g., UTC, America/New_York).\",\n    \"Backup metadata limit exceeded: Maximum 10000 backup entries allowed per calculation.\"\n  ],\n  \"usage\": \"Provide backup_metadata array with backup information. Optionally specify reference_time for calculations and timezone for proper time handling.\",\n  \"output_details\": {\n    \"backup_ages\": {\n      \"type\": \"array\",\n      \"items\": {\"type\": \"string\"},\n      \"description\": \"Age information for each backup in format: path|age_days|age_category\"\n    },\n    \"age_distribution\": {\n      \"type\": \"array\",\n      \"items\": {\"type\": \"string\"},\n      \"description\": \"Distribution summary showing count of backups in each age category\"\n    },\n    \"calculation_summary\": {\n      \"type\": \"string\",\n      \"description\": \"Summary of age calculation results and statistics\"\n    }\n  }\n}\n```\n\n```json\n{\n  \"tool_name\": \"Retention Rule Evaluator\", \n  \"tool_description\": \"Evaluates backup retention rules against backup metadata to determine which backups should be kept, archived, or deleted based on configured policies.\",\n  \"parameters\": {\n    \"policy_id\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"ID of the retention policy to apply\"\n    },\n    \"backup_ages\": {\n      \"type\": \"array\",\n      \"items\": {\"type\": \"string\"},\n      \"required\": true,\n      \"description\": \"Backup age data in format: path|age_days|age_category\",\n      \"minItems\": 1,\n      \"maxItems\": 10000\n    },\n    \"force_evaluation\": {\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Force evaluation even if policy is inactive\",\n      \"default\": false\n\
  \    }\n  },\n  \"error_messages\": [\n    \"Policy not found: The specified policy_id does not exist or has been deleted.\",\n    \"Invalid backup age format: Each entry must follow format 'path|age_days|age_category'.\",\n    \"Policy inactive: The specified policy is inactive. Use force_evaluation=true to override.\",\n    \"Backup ages limit exceeded: Maximum 10000 backup entries allowed per evaluation.\"\n  ],\n  \"usage\": \"Provide policy_id and backup_ages array to evaluate retention decisions. Set force_evaluation=true to apply inactive policies.\",\n  \"output_details\": {\n    \"retention_decisions\": {\n      \"type\": \"array\",\n      \"items\": {\"type\": \"string\"},\n      \"description\": \"Decisions for each backup in format: path|action|reason where action is keep/archive/delete\"\n    },\n    \"action_summary\": {\n      \"type\": \"array\",\n      \"items\": {\"type\": \"string\"},\n      \"description\": \"Summary counts for each action type (keep/archive/delete)\"\n    },\n    \"policy_compliance\": {\n      \"type\": \"string\",\n      \"description\": \"Overall compliance status and any policy violations found\"\n    }\n  }\n}\n```\n\n```json\n{\n  \"tool_name\": \"Backup Validator\",\n  \"tool_description\": \"Validates backup file integrity, accessibility, and completeness to ensure backups are valid before making retention decisions.\",\n  \"parameters\": {\n    \"backup_paths\": {\n      \"type\": \"array\",\n      \"items\": {\"type\": \"string\"},\n      \"required\": true,\n      \"description\": \"List of backup file paths to validate\",\n      \"minItems\": 1,\n      \"maxItems\": 1000\n    },\n    \"validation_level\": {\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"Validation depth: basic, standard, or thorough\",\n      \"default\": \"standard\"\n    },\n    \"skip_large_files\": {\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Skip integrity checks for files larger than 10GB\",\n      \"default\": true\n    },\n    \"timeout_seconds\": {\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"Maximum time to spend validating each backup (30-3600 seconds)\",\n      \"default\": 300\n    }\n  },\n  \"error_messages\": [\n    \"Invalid validation level: Use one of [basic, standard, thorough].\",\n    \"Backup paths limit exceeded: Maximum 1000 backup files can be validated in a single operation.\",\n    \"Invalid timeout value: timeout_seconds must be between 30 and 3600.\",\n    \"File access denied: Some backup files are not accessible due to permission issues.\"\n  ],\n  \"usage\": \"Provide backup_paths array to validate backup integrity. Set validation_level and timeout_seconds based on your requirements. Use skip_large_files=false for complete validation of large backups.\",\n  \"output_details\": {\n    \"validation_results\": {\n      \"type\": \"array\",\n      \"items\": {\"type\": \"string\"},\n      \"description\": \"Validation results for each backup in format: path|status|details\"\n    },\n    \"valid_backups\": {\n      \"type\": \"array\",\n      \"items\": {\"type\": \"string\"},\n      \"description\": \"List of backup paths that passed validation\"\n    },\n    \"invalid_backups\": {\n      \"type\": \"array\",\n      \"items\": {\"type\": \"string\"},\n      \"description\": \"List of backup paths that failed validation\"\n    },\n    \"validation_summary\": {\n      \"type\": \"string\",\n      \"description\": \"Overall validation summary with success/failure counts and recommendations\"\n    }\n  }\n}\n```\n\n```json\n{\n  \"tool_name\": \"Dependency Checker\",\n  \"tool_description\": \"Analyzes backup dependencies to identify backup chains and prevent deletion of backups that are required for restore operations.\",\n  \"parameters\": {\n    \"backup_metadata\": {\n      \"type\": \"array\",\n      \"items\": {\"type\": \"string\"},\n      \"required\": true,\n      \"description\": \"Backup metadata in format: path|size|created_time|db_type|backup_type\",\n \
  \     \"minItems\": 1,\n      \"maxItems\": 5000\n    },\n    \"retention_decisions\": {\n      \"type\": \"array\",\n      \"items\": {\"type\": \"string\"},\n      \"required\": true,\n      \"description\": \"Initial retention decisions in format: path|action|reason\",\n      \"minItems\": 1,\n      \"maxItems\": 5000\n    },\n    \"check_restore_chains\": {\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Verify complete restore chains are preserved\",\n      \"default\": true\n    }\n  },\n  \"error_messages\": [\n    \"Metadata format error: Each backup_metadata entry must follow format 'path|size|created_time|db_type|backup_type'.\",\n    \"Decision format error: Each retention_decisions entry must follow format 'path|action|reason'.\",\n    \"Array size mismatch: backup_metadata and retention_decisions arrays must contain entries for the same backup paths.\",\n    \"Data limit exceeded: Maximum 5000 entries allowed for dependency analysis.\"\n  ],\n  \"usage\": \"Provide backup_metadata and initial retention_decisions to analyze dependencies. Set check_restore_chains=true to ensure complete restore paths are maintained.\",\n  \"output_details\": {\n    \"dependency_analysis\": {\n      \"type\": \"array\",\n      \"items\": {\"type\": \"string\"},\n      \"description\": \"Dependency relationships in format: backup_path|depends_on|dependency_type\"\n    },\n    \"updated_decisions\": {\n      \"type\": \"array\",\n      \"items\": {\"type\": \"string\"},\n      \"description\": \"Modified retention decisions preserving dependencies\"\n    },\n    \"broken_chains\": {\n      \"type\": \"array\",\n      \"items\": {\"type\": \"string\"},\n      \"description\": \"List of restore chains that would be broken by original decisions\"\n    },\n    \"dependency_summary\": {\n      \"type\": \"string\",\n      \"description\": \"Summary of dependency analysis and any decision modifications made\"\n    }\n  }\n}\n```\n\n```json\n{\n  \"tool_name\": \"Cleanup Plan Generator\",\n  \"tool_description\": \"Generates detailed cleanup execution plans with scheduling, ordering, and safety checks based on retention decisions and dependencies.\",\n  \"parameters\": {\n    \"updated_decisions\": {\n      \"type\": \"array\",\n      \"items\": {\"type\": \"string\"},\n      \"required\": true,\n      \"description\": \"Final retention decisions in format: path|action|reason\",\n      \"minItems\": 1,\n      \"maxItems\": 10000\n    },\n    \"execution_schedule\": {\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"When to execute: immediate, tonight, weekend, or specific datetime\",\n      \"default\": \"tonight\"\n    },\n    \"batch_size\": {\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"Number of files to process in each batch (1-1000)\",\n      \"default\": 100\n    },\n    \"parallel_threads\": {\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"Number of parallel processing threads (1-10)\",\n      \"default\": 2\n    },\n    \"safety_checks\": {\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Enable additional safety validations before deletion\",\n      \"default\": true\n    },\n    \"notification_email\": {\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"Email address for completion notifications\",\n      \"default\": \"None\"\n    },\n    \"max_deletion_size_gb\": {\n      \"type\": \"number\",\n      \"required\": false,\n      \"description\": \"Maximum total size to delete in single execution (0.1-1000 GB)\",\n      \"default\": 100.0\n    }\n  },\n  \"error_messages\": [\n    \"Invalid decisions format: Each entry in updated_decisions must follow format 'path|action|reason'.\",\n    \"Invalid execution schedule: Use 'immediate', 'tonight', 'weekend', or ISO 8601 datetime format.\",\n    \"Parameter out of range: batch_size must be 1-1000, parallel_threads must be 1-10, max_deletion_size_gb must be 0.1-1000.\",\n\
  \    \"Decisions limit exceeded: Maximum 10000 retention decisions can be processed in a single plan.\",\n    \"Invalid email format: Provide a valid email address for notifications or leave as default None.\"\n  ],\n  \"usage\": \"Provide updated_decisions array to generate cleanup plans. Configure execution timing, batch processing, and safety parameters. Set notification_email to receive completion updates.\",\n  \"output_details\": {\n    \"plan_id\": {\n      \"type\": \"string\",\n      \"description\": \"Unique identifier for the generated cleanup plan\"\n    },\n    \"execution_batches\": {\n      \"type\": \"array\",\n      \"items\": {\"type\": \"string\"},\n      \"description\": \"Ordered batches of operations in format: batch_id|operation_count|estimated_duration\"\n    },\n    \"safety_warnings\": {\n      \"type\": \"array\",\n      \"items\": {\"type\": \"string\"},\n      \"description\": \"Safety warnings and recommendations for the cleanup plan\"\n    },\n    \"plan_summary\": {\n      \"type\": \"string\",\n      \"description\": \"Executive summary of the cleanup plan including total files, size, and estimated duration\"\n    }\n  }\n}\n```\n\n```json\n{\n  \"tool_name\": \"Storage Space Analyzer\",\n  \"tool_description\": \"Analyzes storage utilization, calculates space savings from cleanup operations, and provides storage capacity planning insights.\",\n  \"parameters\": {\n    \"storage_locations\": {\n      \"type\": \"array\",\n      \"items\": {\"type\": \"string\"},\n      \"required\": true,\n      \"description\": \"Storage paths to analyze for space utilization\",\n      \"minItems\": 1,\n      \"maxItems\": 100\n    },\n    \"cleanup_plan_id\": {\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"Optional cleanup plan ID to calculate space savings\",\n      \"default\": \"None\"\n    }\n  },\n  \"error_messages\": [\n    \"Storage location not accessible: Ensure all paths in storage_locations are valid and accessible.\",\n    \"Cleanup plan not found: The specified cleanup_plan_id does not exist.\",\n    \"Storage locations limit exceeded: Maximum 100 storage locations can be analyzed simultaneously.\"\n  ],\n  \"usage\": \"Provide storage_locations array to analyze current space usage. Optionally specify cleanup_plan_id to calculate potential space savings from planned cleanup operations.\",\n  \"output_details\": {\n    \"current_usage\": {\n      \"type\": \"array\",\n      \"items\": {\"type\": \"string\"},\n      \"description\": \"Current space usage for each location in format: path|total_gb|used_gb|free_gb|usage_percent\"\n    },\n    \"projected_savings\": {\n      \"type\": \"string\", \n      \"description\": \"Projected space savings if cleanup plan is executed\"\n    },\n    \"capacity_warnings\": {\n      \"type\": \"array\",\n      \"items\": {\"type\": \"string\"},\n      \"description\": \"Warnings about storage locations approaching capacity limits\"\n    },\n    \"analysis_summary\": {\n      \"type\": \"string\",\n      \"description\": \"Overall storage analysis summary with recommendations\"\n    }\n  }\n}\n```\n\n```json\n{\n  \"tool_name\": \"Backup Archiver\",\n  \"tool_description\": \"Archives backup files to long-term storage locations before deletion, maintaining metadata and enabling future retrieval if needed.\",\n  \"parameters\": {\n    \"source_paths\": {\n      \"type\": \"array\",\n      \"items\": {\"type\": \"string\"},\n      \"required\": true,\n      \"description\": \"Backup file paths to archive\",\n      \"minItems\": 1,\n      \"maxItems\": 1000\n    },\n    \"archive_location\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Destination path for archived backups\"\n    },\n    \"compression_level\": {\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"Compression level 0-9 (0=no compression, 9=maximum)\",\n      \"default\": 6\n    },\n    \"preserve_metadata\": {\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\"\
  : \"Preserve original file metadata (timestamps, permissions)\",\n      \"default\": true\n    },\n    \"verify_after_archive\": {\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Verify archive integrity after creation\",\n      \"default\": true\n    }\n  },\n  \"error_messages\": [\n    \"Source files not accessible: Some files in source_paths cannot be read due to permissions or missing files.\",\n    \"Archive location invalid: The archive_location path is not writable or does not exist.\",\n    \"Compression level invalid: compression_level must be an integer between 0 and 9.\",\n    \"Archive limit exceeded: Maximum 1000 files can be archived in a single operation.\"\n  ],\n  \"usage\": \"Provide source_paths of backups to archive and archive_location for storage. Configure compression_level and verification options based on your requirements.\",\n  \"output_details\": {\n    \"archive_results\": {\n      \"type\": \"array\",\n      \"items\": {\"type\": \"string\"},\n      \"description\": \"Archive results for each file in format: source_path|archive_path|status|compression_ratio\"\n    },\n    \"failed_archives\": {\n      \"type\": \"array\",\n      \"items\": {\"type\": \"string\"},\n      \"description\": \"List of files that failed to archive with error reasons\"\n    },\n    \"archive_summary\": {\n      \"type\": \"string\",\n      \"description\": \"Summary of archival operation including total size saved and success rate\"\n    }\n  }\n}\n```\n\n```json\n{\n  \"tool_name\": \"Cleanup Executor\",\n  \"tool_description\": \"Executes cleanup plans by performing actual deletion and archival operations with progress tracking, rollback capabilities, and comprehensive logging.\",\n  \"parameters\": {\n    \"plan_id\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"ID of the cleanup plan to execute\"\n    },\n    \"confirm_execution\": {\n      \"type\": \"boolean\",\n      \"required\": true,\n      \"description\": \"Explicit confirmation required to proceed with deletion operations\"\n    },\n    \"dry_run\": {\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Perform dry run without actual deletions\",\n      \"default\": false\n    }\n  },\n  \"error_messages\": [\n    \"Plan not found: The specified plan_id does not exist or has been deleted.\",\n    \"Execution not confirmed: Set confirm_execution=true to proceed with actual cleanup operations.\",\n    \"Plan already executing: This cleanup plan is currently being executed by another process.\",\n    \"Insufficient permissions: Some operations cannot be completed due to file system permissions.\"\n  ],\n  \"usage\": \"Provide plan_id and set confirm_execution=true to execute cleanup operations. Use dry_run=true to test execution without making actual changes.\",\n  \"output_details\": {\n    \"execution_id\": {\n      \"type\": \"string\",\n      \"description\": \"Unique identifier for this execution instance\"\n    },\n    \"operations_completed\": {\n      \"type\": \"integer\",\n      \"description\": \"Number of cleanup operations successfully completed\"\n    },\n    \"operations_failed\": {\n      \"type\": \"integer\", \n      \"description\": \"Number of operations that failed during execution\"\n    },\n    \"space_freed_gb\": {\n      \"type\": \"number\",\n      \"description\": \"Total storage space freed in gigabytes\"\n    },\n    \"execution_log\": {\n      \"type\": \"array\",\n      \"items\": {\"type\": \"string\"},\n      \"description\": \"Detailed log entries from the execution process\"\n    },\n    \"execution_summary\": {\n      \"type\": \"string\",\n      \"description\": \"Executive summary of cleanup execution results and any issues encountered\"\n    }\n  }\n}\n```\n\n```json\n{\n  \"tool_name\": \"Cleanup Monitor\",\n  \"tool_description\": \"Monitors ongoing and completed cleanup operations, tracks performance metrics, and provides real-time status updates and alerts.\",\n  \"parameters\": {\n    \"execution_ids\": {\n\
  \      \"type\": \"array\", \n      \"items\": {\"type\": \"string\"},\n      \"required\": false,\n      \"description\": \"Specific execution IDs to monitor, or empty for all active executions\",\n      \"maxItems\": 50,\n      \"default\": \"None\"\n    },\n    \"include_completed\": {\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Include completed executions in monitoring results\",\n      \"default\": false\n    }\n  },\n  \"error_messages\": [\n    \"Execution ID not found: One or more specified execution_ids do not exist.\",\n    \"Monitoring limit exceeded: Maximum 50 execution IDs can be monitored simultaneously.\"\n  ],\n  \"usage\": \"Monitor cleanup operations by providing execution_ids array, or leave empty to monitor all active operations. Set include_completed=true to see historical execution data.\",\n  \"output_details\": {\n    \"active_executions\": {\n      \"type\": \"array\",\n      \"items\": {\"type\": \"string\"},\n      \"description\": \"Status of active executions in format: execution_id|progress_percent|estimated_remaining\"\n    },\n    \"completed_executions\": {\n      \"type\": \"array\",\n      \"items\": {\"type\": \"string\"},\n      \"description\": \"Summary of completed executions in format: execution_id|status|completion_time|space_freed\"\n    },\n    \"performance_metrics\": {\n      \"type\": \"array\",\n      \"items\": {\"type\": \"string\"},\n      \"description\": \"Performance statistics including throughput and error rates\"\n    },\n    \"monitoring_summary\": {\n      \"type\": \"string\",\n      \"description\": \"Overall monitoring summary with system health and recommendations\"\n    }\n  }\n}\n```\n\n```json\n{\n  \"tool_name\": \"Rollback Manager\", \n  \"tool_description\": \"Manages rollback operations for cleanup activities, restores accidentally deleted backups from archive, and maintains cleanup history for audit purposes.\",\n  \"parameters\": {\n    \"execution_id\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Execution ID to rollback or analyze for rollback options\"\n    },\n    \"rollback_type\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Type of rollback: partial, complete, or analyze_only\"\n    },\n    \"specific_files\": {\n      \"type\": \"array\",\n      \"items\": {\"type\": \"string\"},\n      \"required\": false,\n      \"description\": \"Specific file paths to restore (for partial rollback)\",\n      \"maxItems\": 500,\n      \"default\": \"None\"\n    },\n    \"restore_location\": {\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"Alternative location to restore files (default uses original paths)\",\n      \"default\": \"None\"\n    }\n  },\n  \"error_messages\": [\n    \"Execution not found: The specified execution_id does not exist in cleanup history.\",\n    \"Invalid rollback type: Use one of [partial, complete, analyze_only].\",\n    \"Rollback not possible: Some deleted files cannot be restored due to missing archives.\",\n    \"Files limit exceeded: Maximum 500 specific files can be restored in a single rollback operation.\",\n    \"Restore location invalid: The specified restore_location is not accessible or writable.\"\n  ],\n  \"usage\": \"Provide execution_id and rollback_type to manage rollback operations. For partial rollbacks, specify specific_files array. Use analyze_only to assess rollback feasibility without making changes.\",\n  \"output_details\": {\n    \"rollback_feas"
