field_name: ecommerce_and_retail
subfield: Product Search and Discovery
task: Price tracking and competitive analysis with alerts for price changes and deals
tool_description: |-
  **STEP 1 — Rate task difficulty**

  This task has medium difficulty due to multiple interconnected components: real-time price monitoring across diverse platforms, competitive analysis requiring data normalization, alert system management, and deal detection algorithms. The scope involves handling various data formats and sources, with moderate coordination between tracking, analysis, and notification systems.

  **STEP 2 — Set a tool budget**

  Given the medium difficulty, I'll target 12 tools to cover price data collection, competitive analysis, alert management, deal detection, and reporting workflows.

  **STEP 3 — List all tool names and dependencies**

  Tools and their data flow:
  1. **Product Search Tool** → produces: product identifiers, basic info
  2. **Price Data Collector** → consumes: product identifiers; produces: historical price data
  3. **Competitor Identifier** → consumes: product info; produces: competitor product mappings
  4. **Price History Analyzer** → consumes: price data; produces: trend analysis
  5. **Deal Detection Engine** → consumes: price data, trends; produces: deal alerts
  6. **Alert Rule Manager** → produces: alert configurations
  7. **Price Change Monitor** → consumes: price data, alert rules; produces: change notifications
  8. **Competitive Analysis Generator** → consumes: competitor data, price trends; produces: market insights
  9. **Price Forecast Tool** → consumes: historical data; produces: price predictions
  10. **Alert Delivery System** → consumes: alerts, notifications; produces: delivered messages
  11. **Performance Tracker** → consumes: tracking data; produces: system metrics
  12. **Report Generator** → consumes: all analysis data; produces: comprehensive reports

  **STEP 4 — Multi-tool plans**

  **Simple plans:**
  - Basic price tracking: Product Search Tool → Price Data Collector → Price Change Monitor → Alert Delivery System
  - Deal hunting: Product Search Tool → Price Data Collector → Deal Detection Engine → Alert Delivery System

  **Medium plans:**
  - Competitive monitoring: Product Search Tool → Competitor Identifier → Price Data Collector → Competitive Analysis Generator → Report Generator
  - Smart alerting: Product Search Tool → Price Data Collector → Price History Analyzer → Alert Rule Manager → Price Change Monitor → Alert Delivery System

  **Complex plans:**
  - Full competitive intelligence: Product Search Tool → Competitor Identifier → Price Data Collector → Price History Analyzer → Price Forecast Tool → Competitive Analysis Generator → Deal Detection Engine → Report Generator
  - Enterprise monitoring system: All tools integrated for comprehensive price tracking, competitive analysis, predictive insights, and automated reporting with performance monitoring

  **STEP 5 — Produce tools**

  ```json
  {
    "tool_name": "Product Search Tool",
    "tool_description": "Searches for products across multiple e-commerce platforms and retrieves basic product information including identifiers, names, and categories.",
    "parameters": {
      "search_query": {
        "type": "string",
        "required": true,
        "description": "Product search term or keyword phrase"
      },
      "platforms": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "required": false,
        "default": ["amazon", "walmart", "target"],
        "description": "List of e-commerce platforms to search"
      },
      "category_filter": {
        "type": "string",
        "required": false,
        "default": "None",
        "description": "Product category to filter results"
      },
      "max_results": {
        "type": "integer",
        "required": false,
        "default": 20,
        "description": "Maximum number of products to return per platform"
      }
    },
    "error_messages": [
      "Invalid search query: Search query cannot be empty or contain only whitespace",
      "Unsupported platform: One or more platforms in the list are not supported. Use supported platforms like amazon, walmart, target, bestbuy",
      "Invalid max_results: Value must be between 1 and 100",
      "Search timeout: Request timed out. Try with fewer platforms or a more specific search query"
    ],
    "usage": "Provide a search_query to find products. Optionally specify platforms, category_filter, and max_results to refine the search. Returns product identifiers and basic information for price tracking setup.",
    "output_details": {
      "total_products_found": {
        "type": "integer",
        "description": "Total number of products found across all platforms"
      },
      "product_ids": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Array of unique product identifiers"
      },
      "product_names": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Array of product names corresponding to product_ids"
      },
      "platforms": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Array of platform names where each product was found"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Price Data Collector",
    "tool_description": "Collects current and historical price data for specified products from multiple e-commerce platforms with configurable collection frequency.",
    "parameters": {
      "product_ids": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "required": true,
        "description": "Array of product identifiers to collect price data for"
      },
      "platforms": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "required": true,
        "description": "Array of platform names to collect from"
      },
      "collection_frequency": {
        "type": "string",
        "required": false,
        "default": "daily",
        "description": "How often to collect data: hourly, daily, weekly"
      },
      "include_historical": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Whether to include historical price data"
      },
      "historical_days": {
        "type": "integer",
        "required": false,
        "default": 30,
        "description": "Number of days of historical data to collect"
      },
      "include_shipping": {
        "type": "boolean",
        "required": false,
        "default": false,
        "description": "Whether to include shipping costs in price calculation"
      },
      "include_tax": {
        "type": "boolean",
        "required": false,
        "default": false,
        "description": "Whether to include estimated tax in price calculation"
      }
    },
    "error_messages": [
      "Invalid product_ids: Array cannot be empty and must contain valid product identifiers",
      "Invalid platforms: Array cannot be empty and must contain supported platform names",
      "Invalid collection_frequency: Must be one of hourly, daily, weekly",
      "Invalid historical_days: Must be between 1 and 365 days",
      "Product not found: One or more product IDs could not be found on specified platforms",
      "Rate limit exceeded: Too many requests. Reduce collection frequency or number of products"
    ],
    "usage": "Provide product_ids and platforms arrays to collect price data. Configure collection_frequency and historical data options as needed. The tool returns current prices and historical data for analysis.",
    "output_details": {
      "collection_timestamp": {
        "type": "string",
        "description": "ISO 8601 timestamp when data was collected"
      },
      "product_count": {
        "type": "integer",
        "description": "Number of products successfully processed"
      },
      "current_prices": {
        "type": "array",
        "items": {
          "type": "number"
        },
        "description": "Array of current prices corresponding to product_ids"
      },
      "historical_prices": {
        "type": "array",
        "items": {
          "type": "number"
        },
        "description": "Array of historical price averages for each product"
      },
      "price_timestamps": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Array of ISO 8601 timestamps for historical data points"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Competitor Identifier",
    "tool_description": "Identifies competitor products and similar items across platforms based on product attributes, specifications, and market positioning.",
    "parameters": {
      "base_product_id": {
        "type": "string",
        "required": true,
        "description": "Primary product identifier to find competitors for"
      },
      "search_criteria": {
        "type": "string",
        "required": true,
        "description": "Criteria for finding competitors: similar_features, same_category, price_range, or brand_competitors"
      },
      "price_variance_threshold": {
        "type": "number",
        "required": false,
        "default": 0.3,
        "description": "Maximum price difference ratio to consider as competitor (0.1 to 1.0)"
      }
    },
    "error_messages": [
      "Invalid base_product_id: Product identifier cannot be empty or invalid format",
      "Invalid search_criteria: Must be one of similar_features, same_category, price_range, brand_competitors",
      "Invalid price_variance_threshold: Must be between 0.1 and 1.0",
      "Product not found: Base product ID could not be found in any platform",
      "No competitors found: Unable to identify any competitor products matching the criteria"
    ],
    "usage": "Provide base_product_id and search_criteria to identify competitor products. Adjust price_variance_threshold to control how strict the price similarity matching should be. Returns list of competitor products for price comparison.",
    "output_details": {
      "base_product_name": {
        "type": "string",
        "description": "Name of the base product being analyzed"
      },
      "competitors_found": {
        "type": "integer",
        "description": "Number of competitor products identified"
      },
      "competitor_ids": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Array of competitor product identifiers"
      },
      "competitor_names": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Array of competitor product names"
      },
      "similarity_scores": {
        "type": "array",
        "items": {
          "type": "number"
        },
        "description": "Array of similarity scores (0-1) for each competitor"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Price History Analyzer",
    "tool_description": "Analyzes historical price data to identify trends, patterns, seasonality, and price volatility for strategic pricing insights.",
    "parameters": {
      "price_data": {
        "type": "array",
        "items": {
          "type": "number"
        },
        "required": true,
        "description": "Array of historical price values"
      },
      "timestamps": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "required": true,
        "description": "Array of ISO 8601 timestamps corresponding to price data"
      },
      "analysis_type": {
        "type": "string",
        "required": true,
        "description": "Type of analysis: trend, seasonality, volatility, or comprehensive"
      },
      "trend_window": {
        "type": "integer",
        "required": false,
        "default": 7,
        "description": "Number of days for trend calculation window"
      },
      "volatility_metric": {
        "type": "string",
        "required": false,
        "default": "standard_deviation",
        "description": "Volatility calculation method: standard_deviation, coefficient_variation, or price_range"
      }
    },
    "error_messages": [
      "Invalid price_data: Array cannot be empty and must contain numeric values greater than 0",
      "Invalid timestamps: Array cannot be empty and must contain valid ISO 8601 timestamps",
      "Mismatched arrays: price_data and timestamps arrays must have the same length",
      "Invalid analysis_type: Must be one of trend, seasonality, volatility, comprehensive",
      "Invalid trend_window: Must be between 1 and length of price_data array",
      "Invalid volatility_metric: Must be one of standard_deviation, coefficient_variation, price_range",
      "Insufficient data: Need at least 3 data points for meaningful analysis"
    ],
    "usage": "Provide price_data array with corresponding timestamps array and specify analysis_type. Configure trend_window and volatility_metric as needed. Returns statistical analysis of price patterns and trends.",
    "output_details": {
      "analysis_summary": {
        "type": "string",
        "description": "Summary of key findings from the price analysis"
      },
      "trend_direction": {
        "type": "string",
        "description": "Overall trend direction: increasing, decreasing, or stable"
      },
      "average_price": {
        "type": "number",
        "description": "Average price over the analyzed period"
      },
      "price_volatility": {
        "type": "number",
        "description": "Price volatility metric based on selected calculation method"
      },
      "min_price": {
        "type": "number",
        "description": "Minimum price in the dataset"
      },
      "max_price": {
        "type": "number",
        "description": "Maximum price in the dataset"
      },
      "trend_strength": {
        "type": "number",
        "description": "Strength of the trend (0-1 scale)"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Deal Detection Engine",
    "tool_description": "Analyzes current prices against historical data and market conditions to identify deals, discounts, and optimal buying opportunities.",
    "parameters": {
      "current_price": {
        "type": "number",
        "required": true,
        "description": "Current price of the product"
      },
      "historical_prices": {
        "type": "array",
        "items": {
          "type": "number"
        },
        "required": true,
        "description": "Array of historical prices for comparison"
      },
      "deal_threshold": {
        "type": "number",
        "required": false,
        "default": 0.15,
        "description": "Percentage below average price to consider a deal (0.05 to 0.5)"
      },
      "minimum_savings": {
        "type": "number",
        "required": false,
        "default": 5.0,
        "description": "Minimum dollar amount savings to qualify as a deal"
      },
      "competitor_prices": {
        "type": "array",
        "items": {
          "type": "number"
        },
        "required": false,
        "default": "None",
        "description": "Array of current competitor prices for comparison"
      },
      "include_shipping_deals": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Whether to factor in shipping cost savings"
      }
    },
    "error_messages": [
      "Invalid current_price: Must be a positive number greater than 0",
      "Invalid historical_prices: Array cannot be empty and must contain positive numbers",
      "Invalid deal_threshold: Must be between 0.05 and 0.5 (5% to 50%)",
      "Invalid minimum_savings: Must be a positive number",
      "Invalid competitor_prices: If provided, array must contain positive numbers",
      "Insufficient historical data: Need at least 5 historical price points for reliable deal detection"
    ],
    "usage": "Provide current_price and historical_prices array to detect deals. Configure deal_threshold and minimum_savings to set deal criteria. Optionally include competitor_prices for market comparison. Returns deal status and savings information.",
    "output_details": {
      "is_deal": {
        "type": "boolean",
        "description": "Whether the current price qualifies as a deal"
      },
      "deal_quality": {
        "type": "string",
        "description": "Quality of the deal: excellent, good, fair, or poor"
      },
      "savings_amount": {
        "type": "number",
        "description": "Dollar amount savings compared to average historical price"
      },
      "savings_percentage": {
        "type": "number",
        "description": "Percentage savings compared to average historical price"
      },
      "price_rank": {
        "type": "string",
        "description": "How current price ranks: lowest_ever, bottom_quartile, median, or above_average"
      },
      "competitor_advantage": {
        "type": "boolean",
        "description": "Whether current price beats competitor prices"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Alert Rule Manager",
    "tool_description": "Creates, updates, and manages price alert rules with customizable conditions, thresholds, and notification preferences for automated monitoring.",
    "parameters": {
      "product_id": {
        "type": "string",
        "required": true,
        "description": "Product identifier to create alert rule for"
      },
      "alert_type": {
        "type": "string",
        "required": true,
        "description": "Type of alert: price_drop, price_increase, deal_alert, stock_alert, or competitor_change"
      },
      "threshold_value": {
        "type": "number",
        "required": true,
        "description": "Threshold value for triggering the alert"
      },
      "threshold_type": {
        "type": "string",
        "required": true,
        "description": "Threshold type: percentage or absolute"
      },
      "notification_method": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "required": true,
        "description": "Methods for sending notifications: email, sms, webhook, push"
      },
      "alert_frequency": {
        "type": "string",
        "required": false,
        "default": "immediate",
        "description": "How often to send alerts: immediate, daily, weekly"
      },
      "expiration_date": {
        "type": "string",
        "required": false,
        "default": "None",
        "description": "ISO 8601 date when alert rule expires"
      },
      "is_active": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Whether the alert rule is currently active"
      },
      "priority_level": {
        "type": "string",
        "required": false,
        "default": "medium",
        "description": "Alert priority: low, medium, high, critical"
      },
      "custom_message": {
        "type": "string",
        "required": false,
        "default": "None",
        "description": "Custom message to include in alert notifications"
      }
    },
    "error_messages": [
      "Invalid product_id: Product identifier cannot be empty",
      "Invalid alert_type: Must be one of price_drop, price_increase, deal_alert, stock_alert, competitor_change",
      "Invalid threshold_value: Must be a positive number",
      "Invalid threshold_type: Must be either percentage or absolute",
      "Invalid notification_method: Array must contain at least one method from email, sms, webhook, push",
      "Invalid alert_frequency: Must be one of immediate, daily, weekly",
      "Invalid expiration_date: Must be a valid ISO 8601 date in the future",
      "Invalid priority_level: Must be one of low, medium, high, critical"
    ],
    "usage": "Provide product_id, alert_type, threshold_value, threshold_type, and notification_method to create an alert rule. Configure additional parameters like alert_frequency, expiration_date, and priority_level as needed. Returns confirmation of rule creation with assigned rule ID.",
    "output_details": {
      "rule_id": {
        "type": "string",
        "description": "Unique identifier for the created alert rule"
      },
      "rule_status": {
        "type": "string",
        "description": "Status of rule creation: created, updated, or error"
      },
      "estimated_triggers": {
        "type": "integer",
        "description": "Estimated number of triggers per week based on historical data"
      },
      "rule_summary": {
        "type": "string",
        "description": "Human-readable summary of the alert rule configuration"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Price Change Monitor",
    "tool_description": "Continuously monitors price changes for tracked products and triggers alerts based on configured rules and thresholds.",
    "parameters": {
      "monitoring_duration": {
        "type": "integer",
        "required": true,
        "description": "Duration to monitor in hours (1 to 168 for up to one week)"
      },
      "check_frequency": {
        "type": "integer",
        "required": true,
        "description": "How often to check prices in minutes (15 to 1440)"
      }
    },
    "error_messages": [
      "Invalid monitoring_duration: Must be between 1 and 168 hours",
      "Invalid check_frequency: Must be between 15 and 1440 minutes",
      "No active alert rules: No alert rules are currently active for monitoring",
      "Monitor already running: A price monitoring session is already active"
    ],
    "usage": "Specify monitoring_duration in hours and check_frequency in minutes to start price monitoring. The tool will continuously check prices and trigger alerts based on existing alert rules. Returns monitoring session details and triggered alerts.",
    "output_details": {
      "session_id": {
        "type": "string",
        "description": "Unique identifier for the monitoring session"
      },
      "monitoring_status": {
        "type": "string",
        "description": "Current status: active, completed, or stopped"
      },
      "products_monitored": {
        "type": "integer",
        "description": "Number of products being monitored"
      },
      "alerts_triggered": {
        "type": "integer",
        "description": "Number of alerts triggered during the session"
      },
      "price_changes_detected": {
        "type": "integer",
        "description": "Total number of price changes detected"
      },
      "next_check_time": {
        "type": "string",
        "description": "ISO 8601 timestamp of next scheduled price check"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Competitive Analysis Generator",
    "tool_description": "Generates comprehensive competitive analysis reports comparing pricing strategies, market positioning, and competitive advantages across products and competitors.",
    "parameters": {
      "base_products": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "required": true,
        "description": "Array of base product IDs to analyze"
      },
      "competitor_products": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "required": true,
        "description": "Array of competitor product IDs for comparison"
      },
      "analysis_period_days": {
        "type": "integer",
        "required": true,
        "description": "Number of days of historical data to include in analysis"
      },
      "metrics_to_include": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "required": true,
        "description": "Metrics to include: price_comparison, market_share, pricing_strategy, promotion_frequency, availability"
      },
      "report_format": {
        "type": "string",
        "required": false,
        "default": "summary",
        "description": "Report detail level: summary, detailed, or comprehensive"
      },
      "include_recommendations": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Whether to include strategic recommendations in the report"
      }
    },
    "error_messages": [
      "Invalid base_products: Array cannot be empty and must contain valid product IDs",
      "Invalid competitor_products: Array cannot be empty and must contain valid product IDs",
      "Invalid analysis_period_days: Must be between 7 and 365 days",
      "Invalid metrics_to_include: Array must contain at least one metric from the supported list",
      "Invalid report_format: Must be one of summary, detailed, comprehensive",
      "Insufficient data: Not enough historical data available for the specified analysis period",
      "Product overlap: Base products and competitor products arrays cannot contain the same product IDs"
    ],
    "usage": "Provide base_products and competitor_products arrays along with analysis_period_days and desired metrics_to_include. Configure report_format and include_recommendations as needed. Returns comprehensive competitive analysis with insights and recommendations.",
    "output_details": {
      "analysis_summary": {
        "type": "string",
        "description": "Executive summary of key competitive insights"
      },
      "competitive_position": {
        "type": "string",
        "description": "Overall competitive position: leading, competitive, or lagging"
      },
      "price_advantage_percentage": {
        "type": "number",
        "description": "Average price advantage or disadvantage compared to competitors"
      },
      "market_opportunities": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Array of identified market opportunities"
      },
      "competitive_threats": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Array of competitive threats identified"
      },
      "recommendations": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Array of strategic recommendations based on analysis"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Price Forecast Tool",
    "tool_description": "Predicts future price movements and trends using historical data, market conditions, and seasonal patterns to support strategic decision making.",
    "parameters": {
      "historical_prices": {
        "type": "array",
        "items": {
          "type": "number"
        },
        "required": true,
        "description": "Array of historical price data points"
      },
      "timestamps": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "required": true,
        "description": "Array of ISO 8601 timestamps corresponding to historical prices"
      },
      "forecast_horizon_days": {
        "type": "integer",
        "required": true,
        "description": "Number of days ahead to forecast (1 to 90)"
      },
      "model_type": {
        "type": "string",
        "required": false,
        "default": "auto",
        "description": "Forecasting model: linear_trend, seasonal, moving_average, or auto"
      },
      "confidence_interval": {
        "type": "number",
        "required": false,
        "default": 0.95,
        "description": "Confidence interval for predictions (0.8 to 0.99)"
      }
    },
    "error_messages": [
      "Invalid historical_prices: Array must contain at least 14 data points with positive numbers",
      "Invalid timestamps: Array must contain valid ISO 8601 timestamps matching historical_prices length",
      "Invalid forecast_horizon_days: Must be between 1 and 90 days",
      "Invalid model_type: Must be one of linear_trend, seasonal, moving_average, auto",
      "Invalid confidence_interval: Must be between 0.8 and 0.99",
      "Insufficient data quality: Historical data shows irregular patterns that prevent reliable forecasting",
      "Data too sparse: Need more frequent data points for accurate forecasting"
    ],
    "usage": "Provide historical_prices array with corresponding timestamps and specify forecast_horizon_days. Choose appropriate model_type and confidence_interval for your forecasting needs. Returns predicted prices with confidence intervals and trend analysis.",
    "output_details": {
      "forecast_accuracy": {
        "type": "string",
        "description": "Expected forecast accuracy level: high, medium, or low"
      },
      "predicted_prices": {
        "type": "array",
        "items": {
          "type": "number"
        },
        "description": "Array of predicted prices for the forecast horizon"
      },
      "forecast_dates": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Array of ISO 8601 dates for the predicted prices"
      },
      "confidence_upper": {
        "type": "array",
        "items": {
          "type": "number"
        },
        "description": "Upper confidence interval bounds for predictions"
      },
      "confidence_lower": {
        "type": "array",
        "items": {
          "type": "number"
        },
        "description": "Lower confidence interval bounds for predictions"
      },
      "trend_direction": {
        "type": "string",
        "description": "Predicted trend direction: rising, falling, or stable"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Alert Delivery System",
    "tool_description": "Delivers price alerts and notifications through multiple channels including email, SMS, webhooks, and push notifications with delivery tracking.",
    "parameters": {
      "alert_message": {
        "type": "string",
        "required": true,
        "description": "Alert message content to be delivered"
      },
      "delivery_methods": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "required": true,
        "description": "Delivery methods: email, sms, webhook, push_notification"
      },
      "priority": {
        "type": "string",
        "required": true,
        "description": "Alert priority level: low, medium, high, critical"
      },
      "recipient_contacts": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "required": true,
        "description": "Array of recipient contact information (emails, phone numbers, webhook URLs)"
      }
    },
    "error_messages": [
      "Invalid alert_message: Message cannot be empty or exceed 500 characters",
      "Invalid delivery_methods: Must include at least one method from email, sms, webhook, push_notification",
      "Invalid priority: Must be one of low, medium, high, critical",
      "Invalid recipient_contacts: Must provide valid contact information for each delivery method",
      "Delivery failure: One or more delivery methods failed due to invalid contact information",
      "Rate limit exceeded: Too many alerts sent recently, delivery temporarily throttled"
    ],
    "usage": "Provide alert_message, delivery_methods array, priority level, and recipient_contacts array. The system will attempt delivery through all specified methods and return delivery status for each.",
    "output_details": {
      "delivery_id": {
        "type": "string",
        "description": "Unique identifier for this delivery attempt"
      },
      "total_recipients": {
        "type": "integer",
        "description": "Total number of recipients the alert was sent to"
      },
      "successful_deliveries": {
        "type": "integer",
        "description": "Number of successful deliveries"
      },
      "failed_deliveries": {
        "type": "integer",
        "description": "Number of failed deliveries"
      },
      "delivery_status": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Array of delivery status for each
