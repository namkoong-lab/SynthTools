field_name: ecommerce_and_retail
subfield: Payment Processing and Financial Transactions
task: Handle digital wallet payments and mobile payment integrations
tool_description: |-
  **STEP 1 — Rate task difficulty**

  This task is **hard** due to the complex security requirements, multiple payment gateway integrations, real-time transaction processing, regulatory compliance (PCI DSS, financial regulations), high-stakes error handling, and the need to coordinate between multiple payment providers, fraud detection systems, and financial institutions.

  **STEP 2 — Set a tool budget**

  Given the hard difficulty rating, I'll target **17 tools** within the 15-20 range to handle the comprehensive requirements of digital wallet and mobile payment processing.

  **STEP 3 — List all tool names with dependencies and affordances**

  1. **Payment Method Validator** - Consumes: payment method details → Produces: validation status
  2. **Digital Wallet Authenticator** - Consumes: wallet credentials → Produces: authentication tokens
  3. **Payment Gateway Connector** - Consumes: payment details, gateway config → Produces: gateway response
  4. **Transaction Amount Processor** - Consumes: amounts, currencies → Produces: processed amounts
  5. **Fraud Detection Analyzer** - Consumes: transaction data → Produces: risk scores
  6. **Payment Token Generator** - Consumes: sensitive data → Produces: secure tokens
  7. **Transaction Status Tracker** - Consumes: transaction IDs → Produces: status updates
  8. **Mobile Payment Formatter** - Consumes: payment data → Produces: mobile-formatted requests
  9. **Refund Processor** - Consumes: refund requests → Produces: refund confirmations
  10. **Payment Reconciler** - Consumes: transaction records → Produces: reconciliation reports
  11. **Currency Converter** - Consumes: amounts, currencies → Produces: converted amounts
  12. **Payment Fee Calculator** - Consumes: transaction details → Produces: fee breakdowns
  13. **Compliance Checker** - Consumes: transaction data → Produces: compliance status
  14. **Payment Notification Manager** - Consumes: transaction events → Produces: notifications
  15. **Chargeback Handler** - Consumes: dispute data → Produces: chargeback responses
  16. **Payment Analytics Reporter** - Consumes: transaction history → Produces: analytics reports
  17. **Wallet Balance Manager** - Consumes: wallet operations → Produces: balance updates

  **STEP 4 — Multi-tool plans**

  **Simple Plans:**
  1. **Basic Payment Validation**: Payment Method Validator → Payment Token Generator → Transaction Status Tracker
  2. **Simple Mobile Payment**: Mobile Payment Formatter → Payment Gateway Connector → Payment Notification Manager

  **Medium Plans:**
  1. **Standard Transaction Processing**: Payment Method Validator → Digital Wallet Authenticator → Fraud Detection Analyzer → Payment Gateway Connector → Transaction Status Tracker → Payment Notification Manager
  2. **Multi-Currency Payment**: Currency Converter → Transaction Amount Processor → Payment Fee Calculator → Payment Gateway Connector → Payment Reconciler

  **Complex Plans:**
  1. **Enterprise Payment Flow**: Payment Method Validator → Digital Wallet Authenticator → Fraud Detection Analyzer → Compliance Checker → Transaction Amount Processor → Payment Token Generator → Payment Gateway Connector → Transaction Status Tracker → Payment Notification Manager → Payment Reconciler
  2. **Full Lifecycle Management**: Mobile Payment Formatter → Payment Method Validator → Currency Converter → Payment Fee Calculator → Payment Gateway Connector → Transaction Status Tracker → Refund Processor → Chargeback Handler → Payment Analytics Reporter

  **STEP 5 — Produce tools**

  ```json
  {
    "tool_name": "Payment Method Validator",
    "tool_description": "Validates digital wallet and mobile payment method details including card numbers, wallet IDs, and payment credentials to ensure they meet required formats and security standards.",
    "parameters": {
      "payment_method_type": {
        "type": "string",
        "required": true,
        "description": "Type of payment method (credit_card, debit_card, digital_wallet, bank_transfer, mobile_payment)"
      },
      "payment_details": {
        "type": "string",
        "required": true,
        "description": "Encrypted payment method details or identifier"
      },
      "validation_level": {
        "type": "string",
        "required": false,
        "default": "standard",
        "description": "Validation strictness level (basic, standard, strict)"
      }
    },
    "error_messages": [
      "Invalid payment method type: Must be one of [credit_card, debit_card, digital_wallet, bank_transfer, mobile_payment].",
      "Payment details format error: Ensure payment details are properly formatted and encrypted.",
      "Validation level not recognized: Use basic, standard, or strict validation levels."
    ],
    "usage": "Provide payment_method_type and encrypted payment_details. Optionally specify validation_level for different security requirements. Returns validation status and any formatting issues.",
    "output_details": {
      "is_valid": {
        "type": "boolean",
        "description": "Whether the payment method passed validation"
      },
      "validation_errors": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of validation error messages if any"
      },
      "payment_method_id": {
        "type": "string",
        "description": "Generated unique identifier for the validated payment method"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Digital Wallet Authenticator",
    "tool_description": "Authenticates users with various digital wallet providers (Apple Pay, Google Pay, PayPal, etc.) and manages authentication tokens for secure payment processing.",
    "parameters": {
      "wallet_provider": {
        "type": "string",
        "required": true,
        "description": "Digital wallet provider name (apple_pay, google_pay, paypal, samsung_pay, amazon_pay)"
      },
      "user_credentials": {
        "type": "string",
        "required": true,
        "description": "Encrypted user authentication credentials"
      },
      "device_id": {
        "type": "string",
        "required": true,
        "description": "Unique device identifier for mobile payments"
      },
      "biometric_data": {
        "type": "string",
        "required": false,
        "default": "None",
        "description": "Encrypted biometric authentication data if available"
      },
      "session_timeout": {
        "type": "integer",
        "required": false,
        "default": 3600,
        "description": "Authentication session timeout in seconds"
      }
    },
    "error_messages": [
      "Unsupported wallet provider: Use one of [apple_pay, google_pay, paypal, samsung_pay, amazon_pay].",
      "Authentication failed: Invalid user credentials or expired session.",
      "Device not recognized: Device ID is not registered or blocked.",
      "Biometric authentication error: Biometric data is corrupted or invalid.",
      "Session timeout invalid: Must be between 300 and 7200 seconds."
    ],
    "usage": "Provide wallet_provider, encrypted user_credentials, and device_id. Optionally include biometric_data and session_timeout. Returns authentication status and secure tokens.",
    "output_details": {
      "authentication_status": {
        "type": "string",
        "description": "Status of authentication attempt (success, failed, pending)"
      },
      "access_token": {
        "type": "string",
        "description": "Secure access token for authenticated session"
      },
      "token_expires_at": {
        "type": "string",
        "description": "Token expiration timestamp in ISO 8601 format"
      },
      "wallet_balance": {
        "type": "number",
        "description": "Available balance in the digital wallet"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Payment Gateway Connector",
    "tool_description": "Connects to various payment gateways and processors to execute payment transactions, handling different protocols and response formats across multiple providers.",
    "parameters": {
      "gateway_provider": {
        "type": "string",
        "required": true,
        "description": "Payment gateway provider (stripe, square, paypal, braintree, authorize_net, adyen)"
      },
      "transaction_amount": {
        "type": "number",
        "required": true,
        "description": "Transaction amount in the smallest currency unit (e.g., cents)"
      },
      "currency_code": {
        "type": "string",
        "required": true,
        "description": "ISO 4217 currency code (USD, EUR, GBP, etc.)"
      },
      "payment_token": {
        "type": "string",
        "required": true,
        "description": "Secure payment token from tokenization process"
      },
      "merchant_id": {
        "type": "string",
        "required": true,
        "description": "Merchant identifier for the payment gateway"
      },
      "transaction_type": {
        "type": "string",
        "required": true,
        "description": "Type of transaction (authorize, capture, sale, void, refund)"
      },
      "customer_id": {
        "type": "string",
        "required": false,
        "default": "None",
        "description": "Customer identifier for recurring payments"
      },
      "gateway_timeout": {
        "type": "integer",
        "required": false,
        "default": 30,
        "description": "Gateway request timeout in seconds"
      },
      "retry_attempts": {
        "type": "integer",
        "required": false,
        "default": 3,
        "description": "Number of retry attempts for failed transactions"
      },
      "metadata": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "required": false,
        "default": "None",
        "description": "Additional transaction metadata as key-value pairs"
      }
    },
    "error_messages": [
      "Unsupported gateway provider: Use one of [stripe, square, paypal, braintree, authorize_net, adyen].",
      "Invalid transaction amount: Amount must be greater than 0 and properly formatted.",
      "Invalid currency code: Must be a valid ISO 4217 currency code.",
      "Payment token expired: Generate a new payment token and retry.",
      "Gateway connection failed: Check network connectivity and gateway status.",
      "Transaction declined: Payment was declined by the gateway or issuing bank.",
      "Invalid transaction type: Use one of [authorize, capture, sale, void, refund].",
      "Timeout error: Gateway response exceeded the specified timeout period.",
      "Rate limit exceeded: Too many requests to the gateway, implement backoff strategy."
    ],
    "usage": "Provide gateway_provider, transaction_amount, currency_code, payment_token, merchant_id, and transaction_type. Optionally specify customer_id, gateway_timeout, retry_attempts, and metadata. Returns transaction results and gateway response details.",
    "output_details": {
      "transaction_id": {
        "type": "string",
        "description": "Unique transaction identifier from the gateway"
      },
      "transaction_status": {
        "type": "string",
        "description": "Status of the transaction (approved, declined, pending, error)"
      },
      "gateway_response_code": {
        "type": "string",
        "description": "Response code from the payment gateway"
      },
      "gateway_message": {
        "type": "string",
        "description": "Response message from the payment gateway"
      },
      "processing_fee": {
        "type": "number",
        "description": "Processing fee charged by the gateway"
      },
      "settled_amount": {
        "type": "number",
        "description": "Final amount after fees and processing"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Transaction Amount Processor",
    "tool_description": "Processes and validates transaction amounts, handles currency formatting, applies discounts and taxes, and ensures amounts meet minimum and maximum limits.",
    "parameters": {
      "base_amount": {
        "type": "number",
        "required": true,
        "description": "Base transaction amount before processing"
      },
      "currency_code": {
        "type": "string",
        "required": true,
        "description": "ISO 4217 currency code for the transaction"
      },
      "discount_percentage": {
        "type": "number",
        "required": false,
        "default": 0,
        "description": "Discount percentage to apply (0-100)"
      },
      "tax_rate": {
        "type": "number",
        "required": false,
        "default": 0,
        "description": "Tax rate percentage to apply (0-100)"
      },
      "processing_mode": {
        "type": "string",
        "required": false,
        "default": "standard",
        "description": "Processing mode (standard, round_up, round_down)"
      }
    },
    "error_messages": [
      "Invalid base amount: Amount must be a positive number greater than 0.",
      "Invalid currency code: Must be a valid ISO 4217 currency code.",
      "Invalid discount percentage: Must be between 0 and 100.",
      "Invalid tax rate: Must be between 0 and 100.",
      "Processing mode not recognized: Use standard, round_up, or round_down."
    ],
    "usage": "Provide base_amount and currency_code. Optionally specify discount_percentage, tax_rate, and processing_mode. Returns processed amounts with detailed breakdown.",
    "output_details": {
      "final_amount": {
        "type": "number",
        "description": "Final processed amount after all calculations"
      },
      "discount_applied": {
        "type": "number",
        "description": "Total discount amount applied"
      },
      "tax_applied": {
        "type": "number",
        "description": "Total tax amount applied"
      },
      "amount_breakdown": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Detailed breakdown of amount calculations"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Fraud Detection Analyzer",
    "tool_description": "Analyzes transaction patterns and user behavior to detect potentially fraudulent activities using machine learning models and rule-based systems.",
    "parameters": {
      "transaction_amount": {
        "type": "number",
        "required": true,
        "description": "Transaction amount to analyze"
      },
      "user_id": {
        "type": "string",
        "required": true,
        "description": "User identifier for behavioral analysis"
      },
      "device_fingerprint": {
        "type": "string",
        "required": true,
        "description": "Device fingerprint for device-based fraud detection"
      },
      "location_data": {
        "type": "string",
        "required": true,
        "description": "Geographic location data (IP-based or GPS)"
      },
      "transaction_frequency": {
        "type": "integer",
        "required": true,
        "description": "Number of recent transactions by this user"
      },
      "payment_method_age": {
        "type": "integer",
        "required": true,
        "description": "Age of payment method in days since first use"
      },
      "merchant_category": {
        "type": "string",
        "required": true,
        "description": "Merchant category code or business type"
      },
      "time_of_transaction": {
        "type": "string",
        "required": true,
        "description": "Transaction timestamp in ISO 8601 format"
      },
      "previous_declined_attempts": {
        "type": "integer",
        "required": false,
        "default": 0,
        "description": "Number of recent declined payment attempts"
      },
      "account_age_days": {
        "type": "integer",
        "required": false,
        "default": 0,
        "description": "Age of user account in days"
      },
      "velocity_check_hours": {
        "type": "integer",
        "required": false,
        "default": 24,
        "description": "Time window in hours for velocity checking"
      },
      "risk_tolerance": {
        "type": "string",
        "required": false,
        "default": "medium",
        "description": "Risk tolerance level (low, medium, high)"
      }
    },
    "error_messages": [
      "Invalid transaction amount: Must be a positive number.",
      "Missing user data: User ID and device fingerprint are required for analysis.",
      "Invalid location data: Location data format is not recognized.",
      "Invalid timestamp format: Use ISO 8601 format for time_of_transaction.",
      "Transaction frequency out of range: Must be between 0 and 1000.",
      "Invalid risk tolerance: Use low, medium, or high.",
      "Velocity check hours invalid: Must be between 1 and 168 hours."
    ],
    "usage": "Provide all required transaction and user data parameters. Optionally specify previous_declined_attempts, account_age_days, velocity_check_hours, and risk_tolerance. Returns fraud risk assessment and recommended actions.",
    "output_details": {
      "fraud_score": {
        "type": "number",
        "description": "Fraud risk score from 0-100 (higher indicates more risk)"
      },
      "risk_level": {
        "type": "string",
        "description": "Risk level classification (low, medium, high, critical)"
      },
      "triggered_rules": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of fraud detection rules that were triggered"
      },
      "recommended_action": {
        "type": "string",
        "description": "Recommended action (approve, review, decline, challenge)"
      },
      "confidence_score": {
        "type": "number",
        "description": "Confidence level of the fraud assessment (0-100)"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Payment Token Generator",
    "tool_description": "Generates secure payment tokens to replace sensitive payment information, supporting various tokenization standards and encryption methods for PCI compliance.",
    "parameters": {
      "sensitive_data": {
        "type": "string",
        "required": true,
        "description": "Sensitive payment data to be tokenized (encrypted)"
      },
      "tokenization_method": {
        "type": "string",
        "required": true,
        "description": "Tokenization method (vault, format_preserving, random, deterministic)"
      },
      "token_lifetime": {
        "type": "integer",
        "required": false,
        "default": 3600,
        "description": "Token lifetime in seconds"
      },
      "encryption_key_id": {
        "type": "string",
        "required": false,
        "default": "default",
        "description": "Encryption key identifier for token generation"
      }
    },
    "error_messages": [
      "Invalid sensitive data format: Data must be properly encrypted before tokenization.",
      "Unsupported tokenization method: Use vault, format_preserving, random, or deterministic.",
      "Invalid token lifetime: Must be between 300 and 86400 seconds.",
      "Encryption key not found: Specified encryption key ID does not exist."
    ],
    "usage": "Provide encrypted sensitive_data and tokenization_method. Optionally specify token_lifetime and encryption_key_id. Returns secure tokens and metadata.",
    "output_details": {
      "payment_token": {
        "type": "string",
        "description": "Generated secure payment token"
      },
      "token_expires_at": {
        "type": "string",
        "description": "Token expiration timestamp in ISO 8601 format"
      },
      "token_type": {
        "type": "string",
        "description": "Type of token generated"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Transaction Status Tracker",
    "tool_description": "Tracks and monitors transaction statuses across multiple payment systems, providing real-time updates and status change notifications.",
    "parameters": {
      "transaction_id": {
        "type": "string",
        "required": true,
        "description": "Unique transaction identifier to track"
      },
      "gateway_provider": {
        "type": "string",
        "required": true,
        "description": "Payment gateway provider handling the transaction"
      },
      "polling_interval": {
        "type": "integer",
        "required": false,
        "default": 30,
        "description": "Status polling interval in seconds"
      },
      "timeout_seconds": {
        "type": "integer",
        "required": false,
        "default": 300,
        "description": "Maximum time to track transaction in seconds"
      }
    },
    "error_messages": [
      "Transaction ID not found: The specified transaction ID does not exist.",
      "Invalid gateway provider: Provider is not supported or configured.",
      "Polling interval too frequent: Minimum interval is 10 seconds.",
      "Timeout value invalid: Must be between 60 and 3600 seconds."
    ],
    "usage": "Provide transaction_id and gateway_provider. Optionally specify polling_interval and timeout_seconds. Returns current status and tracking information.",
    "output_details": {
      "current_status": {
        "type": "string",
        "description": "Current transaction status"
      },
      "status_history": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Chronological list of status changes"
      },
      "last_updated": {
        "type": "string",
        "description": "Timestamp of last status update in ISO 8601 format"
      },
      "estimated_completion": {
        "type": "string",
        "description": "Estimated completion time in ISO 8601 format"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Mobile Payment Formatter",
    "tool_description": "Formats payment requests and responses for mobile-specific payment methods and protocols, ensuring compatibility with mobile wallet APIs and deep-linking requirements.",
    "parameters": {
      "mobile_platform": {
        "type": "string",
        "required": true,
        "description": "Target mobile platform (ios, android, web_mobile)"
      },
      "payment_data": {
        "type": "string",
        "required": true,
        "description": "Payment data to be formatted for mobile consumption"
      },
      "app_scheme": {
        "type": "string",
        "required": false,
        "default": "None",
        "description": "Mobile app URL scheme for deep linking"
      },
      "format_type": {
        "type": "string",
        "required": false,
        "default": "json",
        "description": "Output format type (json, xml, url_encoded)"
      }
    },
    "error_messages": [
      "Unsupported mobile platform: Use ios, android, or web_mobile.",
      "Invalid payment data format: Payment data must be properly structured.",
      "Invalid app scheme: URL scheme format is incorrect.",
      "Unsupported format type: Use json, xml, or url_encoded."
    ],
    "usage": "Provide mobile_platform and payment_data. Optionally specify app_scheme and format_type. Returns mobile-optimized payment request format.",
    "output_details": {
      "formatted_request": {
        "type": "string",
        "description": "Mobile-formatted payment request"
      },
      "deep_link_url": {
        "type": "string",
        "description": "Deep link URL for mobile app integration"
      },
      "platform_specific_headers": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Platform-specific HTTP headers required"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Refund Processor",
    "tool_description": "Processes refund requests for digital wallet and mobile payments, handling partial and full refunds across different payment gateways and ensuring proper reconciliation.",
    "parameters": {
      "original_transaction_id": {
        "type": "string",
        "required": true,
        "description": "Original transaction ID to refund"
      },
      "refund_amount": {
        "type": "number",
        "required": true,
        "description": "Amount to refund (must not exceed original amount)"
      },
      "refund_reason": {
        "type": "string",
        "required": true,
        "description": "Reason for refund (customer_request, fraud, error, dispute)"
      },
      "gateway_provider": {
        "type": "string",
        "required": true,
        "description": "Payment gateway that processed the original transaction"
      },
      "refund_type": {
        "type": "string",
        "required": false,
        "default": "full",
        "description": "Type of refund (full, partial)"
      },
      "notification_required": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Whether to send refund notification to customer"
      }
    },
    "error_messages": [
      "Original transaction not found: The specified transaction ID does not exist.",
      "Refund amount exceeds original: Refund amount cannot be greater than original transaction.",
      "Invalid refund reason: Use customer_request, fraud, error, or dispute.",
      "Gateway does not support refunds: The payment gateway does not allow refunds for this transaction.",
      "Transaction already fully refunded: No additional refund amount available.",
      "Refund processing failed: Gateway returned an error during refund processing."
    ],
    "usage": "Provide original_transaction_id, refund_amount, refund_reason, and gateway_provider. Optionally specify refund_type and notification_required. Returns refund confirmation and details.",
    "output_details": {
      "refund_id": {
        "type": "string",
        "description": "Unique identifier for the refund transaction"
      },
      "refund_status": {
        "type": "string",
        "description": "Status of refund processing (approved, pending, failed)"
      },
      "processing_time_estimate": {
        "type": "string",
        "description": "Estimated time for refund to complete"
      },
      "remaining_refundable_amount": {
        "type": "number",
        "description": "Amount still available for future refunds"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Payment Reconciler",
    "tool_description": "Reconciles payment transactions across multiple systems, matching gateway reports with internal records and identifying discrepancies for financial accuracy.",
    "parameters": {
      "reconciliation_date": {
        "type": "string",
        "required": true,
        "description": "Date for reconciliation in YYYY-MM-DD format"
      },
      "gateway_providers": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "required": true,
        "description": "List of payment gateway providers to reconcile",
        "minItems": 1,
        "maxItems": 10
      },
      "transaction_types": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "required": false,
        "default": "None",
        "description": "Types of transactions to include in reconciliation"
      },
      "tolerance_amount": {
        "type": "number",
        "required": false,
        "default": 0.01,
        "description": "Acceptable variance amount for matching transactions"
      },
      "include_fees": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Whether to include processing fees in reconciliation"
      },
      "report_format": {
        "type": "string",
        "required": false,
        "default": "summary",
        "description": "Report detail level (summary, detailed, discrepancies_only)"
      }
    },
    "error_messages": [
      "Invalid reconciliation date: Date must be in YYYY-MM-DD format and not in the future.",
      "No gateway providers specified: At least one gateway provider is required.",
      "Gateway data unavailable: Unable to retrieve data from one or more specified gateways.",
      "Invalid tolerance amount: Must be a positive number between 0 and 100.",
      "Invalid report format: Use summary, detailed, or discrepancies_only."
    ],
    "usage": "Provide reconciliation_date and gateway_providers array. Optionally specify transaction_types, tolerance_amount, include_fees, and report_format. Returns reconciliation report with matches and discrepancies.",
    "output_details": {
      "total_transactions_processed": {
        "type": "integer",
        "description": "Total number of transactions reconciled"
      },
      "matched_transactions": {
        "type": "integer",
        "description": "Number of successfully matched transactions"
      },
      "discrepancies_found": {
        "type": "integer",
        "description": "Number of transactions with discrepancies"
      },
      "total_amount_reconciled": {
        "type": "number",
        "description": "Total monetary amount reconciled"
      },
      "variance_amount": {
        "type": "number",
        "description": "Total variance amount identified"
      },
      "discrepancy_details": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Detailed list of discrepancies found"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Currency Converter",
    "tool_description": "Converts payment amounts between different currencies using real-time exchange rates, with support for multiple currency pairs and rate sources.",
    "parameters": {
      "amount": {
        "type": "number",
        "required": true,
        "description": "Amount to convert"
      },
      "from_currency": {
        "type": "string",
        "required": true,
        "description": "Source currency code (ISO 4217 format)"
      },
      "to_currency": {
        "type": "string",
        "required": true,
        "description": "Target currency code (ISO 4217 format)"
      },
      "rate_source": {
        "type": "string",
        "required": false,
        "default": "live",
        "description": "Exchange rate source (live, fixed, historical)"
      },
      "rate_date": {
        "type": "string",
        "required": false,
        "default": "None",
        "description": "Specific date for historical rates in YYYY-MM-DD format"
      }
    },
    "error_messages": [
      "Invalid amount: Must be a positive number greater than 0.",
      "Invalid currency code: Both from_currency and to_currency must be valid ISO 4217 codes.",
      "Currency pair not supported: The specified currency conversion is not available.",
      "Rate source unavailable: The specified rate source is not accessible.",
      "Invalid rate date: Date must be in YYYY-MM-DD format and within available historical range."
    ],
    "usage": "Provide amount, from_currency, and to_currency. Optionally specify rate_source and rate_date for historical conversions. Returns converted amount and rate information.",
    "output_details": {
      "converted_amount": {
        "type": "number",
        "description": "Amount after currency conversion"
      },
      "exchange_rate": {
        "type": "number",
        "description": "Exchange rate used for conversion"
      },
      "rate_timestamp": {
        "type": "string",
        "description": "Timestamp when the exchange rate was obtained"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Payment Fee Calculator",
    "tool_description": "Calculates processing fees, gateway charges
