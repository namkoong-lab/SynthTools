field_name: ecommerce_and_retail
subfield: Product Search and Discovery
task: Personalized product recommendations based on user behavior, preferences, and purchase history
tool_description: |-
  **STEP 1 — Rate task difficulty**

  This task is **hard** due to several factors: it requires complex user behavior analysis, integration of multiple data sources (browsing history, purchase patterns, preferences), sophisticated recommendation algorithms, real-time personalization, and high accuracy requirements since poor recommendations directly impact business revenue and user experience.

  **STEP 2 — Set a tool budget**

  Given the hard difficulty rating, I'll target **17 tools** within the 15-20 range to handle the complex workflows of data collection, user profiling, recommendation generation, and performance optimization.

  **STEP 3 — List all tool names with dependencies and affordances**

  1. **User Behavior Tracker** - Consumes: user interactions → Produces: behavioral data
  2. **Purchase History Analyzer** - Consumes: transaction data → Produces: purchase patterns
  3. **User Preference Extractor** - Consumes: user data → Produces: preference profiles
  4. **Product Catalog Manager** - Consumes: product data → Produces: structured catalog
  5. **Similarity Calculator** - Consumes: user/product features → Produces: similarity scores
  6. **Collaborative Filter** - Consumes: user-item matrix → Produces: collaborative recommendations
  7. **Content Filter** - Consumes: product attributes, user preferences → Produces: content-based recommendations
  8. **Hybrid Recommender** - Consumes: multiple recommendation lists → Produces: unified recommendations
  9. **Real-time Context Analyzer** - Consumes: current session data → Produces: contextual signals
  10. **Recommendation Ranker** - Consumes: candidate items → Produces: ranked recommendations
  11. **Diversity Optimizer** - Consumes: recommendations → Produces: diversified recommendations
  12. **A/B Test Manager** - Consumes: test parameters → Produces: experiment results
  13. **Performance Metrics Calculator** - Consumes: recommendation outcomes → Produces: performance metrics
  14. **Cold Start Handler** - Consumes: new user/item data → Produces: cold start recommendations
  15. **Seasonal Trend Analyzer** - Consumes: historical data → Produces: seasonal patterns
  16. **Price Sensitivity Analyzer** - Consumes: user purchase data → Produces: price preferences
  17. **Recommendation Explainer** - Consumes: recommendations → Produces: explanation text

  **STEP 4 — Multi-tool plans**

  **Simple Plans:**
  1. New user onboarding: Cold Start Handler → User Preference Extractor → Content Filter (3 tools)
  2. Basic product similarity: Product Catalog Manager → Similarity Calculator → Content Filter (3 tools)

  **Medium Plans:**
  1. Standard personalization: User Behavior Tracker → Purchase History Analyzer → Collaborative Filter → Recommendation Ranker → Performance Metrics Calculator (5 tools)
  2. Context-aware recommendations: Real-time Context Analyzer → User Preference Extractor → Hybrid Recommender → Diversity Optimizer → Recommendation Explainer (5 tools)

  **Complex Plans:**
  1. Full recommendation pipeline: User Behavior Tracker → Purchase History Analyzer → User Preference Extractor → Collaborative Filter → Content Filter → Hybrid Recommender → Real-time Context Analyzer → Recommendation Ranker → Diversity Optimizer → Performance Metrics Calculator (10 tools)
  2. Advanced optimization workflow: Seasonal Trend Analyzer → Price Sensitivity Analyzer → A/B Test Manager → Hybrid Recommender → Recommendation Ranker → Diversity Optimizer → Performance Metrics Calculator → Recommendation Explainer (8 tools)

  **STEP 5 — Produce tools**

  ```json
  {
    "tool_name": "User Behavior Tracker",
    "tool_description": "Tracks and analyzes user interactions including page views, clicks, time spent, and navigation patterns to build behavioral profiles.",
    "parameters": {
      "user_id": {
        "type": "string",
        "required": true,
        "description": "Unique identifier for the user"
      },
      "session_id": {
        "type": "string",
        "required": true,
        "description": "Current session identifier"
      },
      "tracking_duration_hours": {
        "type": "integer",
        "required": false,
        "description": "Number of hours to track behavior data",
        "default": 24
      },
      "include_anonymous": {
        "type": "boolean",
        "required": false,
        "description": "Whether to include anonymous user behavior",
        "default": false
      }
    },
    "error_messages": [
      "Invalid user_id: User ID must be a non-empty string containing only alphanumeric characters and hyphens.",
      "Invalid session_id: Session ID must be a valid UUID or alphanumeric string.",
      "Invalid tracking_duration: Duration must be between 1 and 168 hours (1 week maximum).",
      "User not found: The specified user_id does not exist in the system."
    ],
    "usage": "Provide user_id and session_id to track behavior. Optionally set tracking_duration_hours and include_anonymous flag. Returns comprehensive behavioral data for the specified period.",
    "output_details": {
      "user_id": {
        "type": "string",
        "description": "The tracked user identifier"
      },
      "total_page_views": {
        "type": "integer",
        "description": "Total number of pages viewed"
      },
      "unique_products_viewed": {
        "type": "integer",
        "description": "Number of unique products viewed"
      },
      "average_time_per_page": {
        "type": "number",
        "description": "Average time spent per page in seconds"
      },
      "click_through_rate": {
        "type": "number",
        "description": "Percentage of product views that resulted in clicks"
      },
      "most_viewed_categories": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Top 5 most viewed product categories"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Purchase History Analyzer",
    "tool_description": "Analyzes user purchase patterns, frequency, seasonal trends, and spending behavior to identify preferences and predict future purchases.",
    "parameters": {
      "user_id": {
        "type": "string",
        "required": true,
        "description": "Unique identifier for the user"
      },
      "analysis_period_days": {
        "type": "integer",
        "required": false,
        "description": "Number of days to analyze purchase history",
        "default": 365
      },
      "min_purchase_amount": {
        "type": "number",
        "required": false,
        "description": "Minimum purchase amount to include in analysis",
        "default": 0
      },
      "include_returns": {
        "type": "boolean",
        "required": false,
        "description": "Whether to include returned items in analysis",
        "default": true
      },
      "category_filter": {
        "type": "array",
        "required": false,
        "description": "Specific product categories to analyze",
        "items": {
          "type": "string"
        },
        "default": null
      }
    },
    "error_messages": [
      "Invalid user_id: User ID must be a non-empty string.",
      "Invalid analysis_period: Period must be between 1 and 1095 days (3 years maximum).",
      "Invalid min_purchase_amount: Amount must be zero or positive.",
      "No purchase history: User has no purchase history in the specified period.",
      "Invalid category_filter: Category names must be non-empty strings."
    ],
    "usage": "Provide user_id to analyze purchase history. Optionally filter by time period, amount, returns, and categories. Returns detailed purchase patterns and insights.",
    "output_details": {
      "total_purchases": {
        "type": "integer",
        "description": "Total number of purchases made"
      },
      "total_spent": {
        "type": "number",
        "description": "Total amount spent in the period"
      },
      "average_order_value": {
        "type": "number",
        "description": "Average value per order"
      },
      "purchase_frequency": {
        "type": "number",
        "description": "Average days between purchases"
      },
      "preferred_categories": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Top 5 most purchased categories"
      },
      "seasonal_patterns": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Identified seasonal purchasing patterns"
      },
      "repurchase_likelihood": {
        "type": "number",
        "description": "Probability score (0-1) of making another purchase soon"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "User Preference Extractor",
    "tool_description": "Extracts and consolidates user preferences from multiple sources including explicit ratings, implicit feedback, and demographic data.",
    "parameters": {
      "user_id": {
        "type": "string",
        "required": true,
        "description": "Unique identifier for the user"
      },
      "include_explicit_ratings": {
        "type": "boolean",
        "required": false,
        "description": "Include user-provided ratings and reviews",
        "default": true
      },
      "include_implicit_signals": {
        "type": "boolean",
        "required": false,
        "description": "Include implicit feedback like time spent, clicks",
        "default": true
      }
    },
    "error_messages": [
      "Invalid user_id: User ID must be a non-empty string.",
      "No preference data: User has insufficient preference data to extract meaningful patterns.",
      "Data access error: Unable to access user preference data due to privacy settings."
    ],
    "usage": "Provide user_id to extract preferences. Toggle explicit ratings and implicit signals as needed. Returns comprehensive preference profile with confidence scores.",
    "output_details": {
      "user_id": {
        "type": "string",
        "description": "The analyzed user identifier"
      },
      "preference_categories": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Preferred product categories ranked by preference strength"
      },
      "price_range_preference": {
        "type": "string",
        "description": "Preferred price range (low/medium/high/mixed)"
      },
      "brand_preferences": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Top 5 preferred brands"
      },
      "style_preferences": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Preferred styles or attributes"
      },
      "confidence_score": {
        "type": "number",
        "description": "Confidence in preference extraction (0-1)"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Product Catalog Manager",
    "tool_description": "Manages and structures product catalog data including attributes, categories, pricing, and availability for recommendation systems.",
    "parameters": {
      "catalog_source": {
        "type": "string",
        "required": true,
        "description": "Source of product catalog data (database, file, API)"
      },
      "product_categories": {
        "type": "array",
        "required": false,
        "description": "Specific categories to include in catalog",
        "items": {
          "type": "string"
        },
        "default": null
      },
      "include_out_of_stock": {
        "type": "boolean",
        "required": false,
        "description": "Whether to include out-of-stock products",
        "default": false
      },
      "min_rating": {
        "type": "number",
        "required": false,
        "description": "Minimum product rating to include (0-5)",
        "default": 0
      },
      "max_price": {
        "type": "number",
        "required": false,
        "description": "Maximum price limit for products to include",
        "default": null
      },
      "attribute_fields": {
        "type": "array",
        "required": false,
        "description": "Specific product attributes to extract",
        "items": {
          "type": "string"
        },
        "default": null
      },
      "language": {
        "type": "string",
        "required": false,
        "description": "Language for product descriptions (en, es, fr, de)",
        "default": "en"
      },
      "last_updated_hours": {
        "type": "integer",
        "required": false,
        "description": "Only include products updated within specified hours",
        "default": null
      }
    },
    "error_messages": [
      "Invalid catalog_source: Source must be a valid database connection string, file path, or API endpoint.",
      "Catalog access error: Unable to connect to or read from the specified catalog source.",
      "Invalid price range: max_price must be a positive number if specified.",
      "Invalid rating range: min_rating must be between 0 and 5.",
      "Invalid language code: Supported languages are en, es, fr, de.",
      "No products found: No products match the specified criteria.",
      "Invalid time filter: last_updated_hours must be a positive integer if specified."
    ],
    "usage": "Provide catalog_source and optionally filter by categories, stock status, ratings, price, and other criteria. Returns structured product catalog optimized for recommendations.",
    "output_details": {
      "total_products": {
        "type": "integer",
        "description": "Total number of products in filtered catalog"
      },
      "categories_count": {
        "type": "integer",
        "description": "Number of unique categories"
      },
      "price_range_min": {
        "type": "number",
        "description": "Minimum price in catalog"
      },
      "price_range_max": {
        "type": "number",
        "description": "Maximum price in catalog"
      },
      "average_rating": {
        "type": "number",
        "description": "Average product rating across catalog"
      },
      "top_categories": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Top 10 categories by product count"
      },
      "catalog_freshness": {
        "type": "string",
        "description": "Timestamp of most recent catalog update"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Similarity Calculator",
    "tool_description": "Calculates similarity scores between users, products, or user-product pairs using various similarity metrics and feature vectors.",
    "parameters": {
      "similarity_type": {
        "type": "string",
        "required": true,
        "description": "Type of similarity: user-user, item-item, or user-item"
      },
      "metric": {
        "type": "string",
        "required": true,
        "description": "Similarity metric: cosine, euclidean, jaccard, or pearson"
      },
      "feature_weights": {
        "type": "array",
        "required": false,
        "description": "Weights for different features (must sum to 1.0)",
        "items": {
          "type": "number"
        },
        "default": null
      },
      "min_common_items": {
        "type": "integer",
        "required": false,
        "description": "Minimum number of common items for user-user similarity",
        "default": 3
      }
    },
    "error_messages": [
      "Invalid similarity_type: Must be one of [user-user, item-item, user-item].",
      "Invalid metric: Must be one of [cosine, euclidean, jaccard, pearson].",
      "Invalid feature_weights: Weights must be positive numbers that sum to 1.0.",
      "Insufficient data: Not enough data points to calculate meaningful similarity.",
      "Invalid min_common_items: Must be a positive integer between 1 and 100."
    ],
    "usage": "Specify similarity_type and metric. Optionally provide feature_weights and min_common_items for user similarity. Returns similarity matrix and top similar pairs.",
    "output_details": {
      "similarity_matrix_size": {
        "type": "integer",
        "description": "Dimensions of calculated similarity matrix"
      },
      "average_similarity": {
        "type": "number",
        "description": "Average similarity score across all pairs"
      },
      "top_similar_pairs": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Top 10 most similar pairs with scores"
      },
      "calculation_method": {
        "type": "string",
        "description": "Method and metric used for calculation"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Collaborative Filter",
    "tool_description": "Generates product recommendations using collaborative filtering techniques based on user-item interaction patterns and similar user preferences.",
    "parameters": {
      "user_id": {
        "type": "string",
        "required": true,
        "description": "Target user for recommendations"
      },
      "algorithm": {
        "type": "string",
        "required": true,
        "description": "Collaborative filtering algorithm: user-based, item-based, or matrix-factorization"
      },
      "num_recommendations": {
        "type": "integer",
        "required": false,
        "description": "Number of recommendations to generate",
        "default": 10
      },
      "min_interactions": {
        "type": "integer",
        "required": false,
        "description": "Minimum user interactions required",
        "default": 5
      },
      "similarity_threshold": {
        "type": "number",
        "required": false,
        "description": "Minimum similarity score for neighbor selection",
        "default": 0.1
      },
      "exclude_purchased": {
        "type": "boolean",
        "required": false,
        "description": "Exclude items already purchased by user",
        "default": true
      }
    },
    "error_messages": [
      "Invalid user_id: User ID must be a non-empty string.",
      "Invalid algorithm: Must be one of [user-based, item-based, matrix-factorization].",
      "Invalid num_recommendations: Must be between 1 and 100.",
      "Invalid min_interactions: Must be between 1 and 1000.",
      "Invalid similarity_threshold: Must be between 0.0 and 1.0.",
      "Insufficient user data: User has insufficient interaction history for collaborative filtering.",
      "No similar users found: Unable to find users with sufficient similarity above threshold."
    ],
    "usage": "Provide user_id and algorithm choice. Adjust num_recommendations, interaction thresholds, and filtering options as needed. Returns ranked collaborative recommendations.",
    "output_details": {
      "user_id": {
        "type": "string",
        "description": "Target user identifier"
      },
      "algorithm_used": {
        "type": "string",
        "description": "Collaborative filtering algorithm applied"
      },
      "recommendations": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Product IDs ranked by recommendation score"
      },
      "confidence_scores": {
        "type": "array",
        "items": {
          "type": "number"
        },
        "description": "Confidence scores for each recommendation (0-1)"
      },
      "similar_users_count": {
        "type": "integer",
        "description": "Number of similar users used in calculation"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Content Filter",
    "tool_description": "Generates content-based recommendations by matching user preferences with product attributes, features, and metadata.",
    "parameters": {
      "user_id": {
        "type": "string",
        "required": true,
        "description": "Target user for recommendations"
      },
      "content_features": {
        "type": "array",
        "required": true,
        "description": "Product features to use for matching (category, brand, price, rating, etc.)",
        "items": {
          "type": "string"
        }
      },
      "num_recommendations": {
        "type": "integer",
        "required": false,
        "description": "Number of recommendations to generate",
        "default": 10
      },
      "feature_importance": {
        "type": "array",
        "required": false,
        "description": "Importance weights for each content feature",
        "items": {
          "type": "number"
        },
        "default": null
      },
      "novelty_factor": {
        "type": "number",
        "required": false,
        "description": "Balance between similarity and novelty (0-1)",
        "default": 0.2
      }
    },
    "error_messages": [
      "Invalid user_id: User ID must be a non-empty string.",
      "Invalid content_features: Must provide at least one valid feature name.",
      "Invalid num_recommendations: Must be between 1 and 100.",
      "Feature importance mismatch: Number of importance weights must match number of features.",
      "Invalid feature_importance: All weights must be positive and sum to 1.0.",
      "Invalid novelty_factor: Must be between 0.0 and 1.0.",
      "No user profile: Unable to extract content preferences for the user."
    ],
    "usage": "Provide user_id and content_features to analyze. Optionally set feature importance weights and novelty factor. Returns content-based recommendations with explanation.",
    "output_details": {
      "user_id": {
        "type": "string",
        "description": "Target user identifier"
      },
      "features_used": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Content features used in recommendation"
      },
      "recommendations": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Product IDs ranked by content similarity"
      },
      "similarity_scores": {
        "type": "array",
        "items": {
          "type": "number"
        },
        "description": "Content similarity scores for each recommendation"
      },
      "novelty_scores": {
        "type": "array",
        "items": {
          "type": "number"
        },
        "description": "Novelty scores for each recommendation"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Hybrid Recommender",
    "tool_description": "Combines multiple recommendation approaches (collaborative, content-based, knowledge-based) into unified hybrid recommendations with weighted scoring.",
    "parameters": {
      "user_id": {
        "type": "string",
        "required": true,
        "description": "Target user for recommendations"
      },
      "collaborative_weight": {
        "type": "number",
        "required": false,
        "description": "Weight for collaborative filtering recommendations (0-1)",
        "default": 0.4
      },
      "content_weight": {
        "type": "number",
        "required": false,
        "description": "Weight for content-based recommendations (0-1)",
        "default": 0.4
      },
      "knowledge_weight": {
        "type": "number",
        "required": false,
        "description": "Weight for knowledge-based recommendations (0-1)",
        "default": 0.2
      },
      "num_recommendations": {
        "type": "integer",
        "required": false,
        "description": "Final number of hybrid recommendations",
        "default": 15
      },
      "diversification": {
        "type": "boolean",
        "required": false,
        "description": "Apply diversification to avoid over-concentration",
        "default": true
      }
    },
    "error_messages": [
      "Invalid user_id: User ID must be a non-empty string.",
      "Invalid weights: All weights must be between 0.0 and 1.0 and sum to 1.0.",
      "Invalid num_recommendations: Must be between 1 and 50.",
      "Insufficient input recommendations: Need recommendations from at least two different approaches.",
      "Weight normalization error: Unable to normalize the provided weights to sum to 1.0."
    ],
    "usage": "Provide user_id and optionally adjust weights for different recommendation approaches. Enable diversification to improve recommendation variety. Returns unified hybrid recommendations.",
    "output_details": {
      "user_id": {
        "type": "string",
        "description": "Target user identifier"
      },
      "hybrid_recommendations": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Final hybrid recommendations ranked by combined score"
      },
      "combined_scores": {
        "type": "array",
        "items": {
          "type": "number"
        },
        "description": "Combined scores for each recommendation"
      },
      "source_contributions": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Primary recommendation source for each item"
      },
      "diversity_score": {
        "type": "number",
        "description": "Overall diversity score of recommendations (0-1)"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Real-time Context Analyzer",
    "tool_description": "Analyzes current user context including device, location, time, weather, and session behavior to enhance recommendation relevance.",
    "parameters": {
      "user_id": {
        "type": "string",
        "required": true,
        "description": "Current user identifier"
      },
      "session_id": {
        "type": "string",
        "required": true,
        "description": "Current session identifier"
      },
      "include_location": {
        "type": "boolean",
        "required": false,
        "description": "Include location-based context",
        "default": true
      },
      "include_temporal": {
        "type": "boolean",
        "required": false,
        "description": "Include time-based context (hour, day, season)",
        "default": true
      },
      "include_device": {
        "type": "boolean",
        "required": false,
        "description": "Include device and platform context",
        "default": true
      },
      "context_window_minutes": {
        "type": "integer",
        "required": false,
        "description": "Time window for current session analysis",
        "default": 30
      }
    },
    "error_messages": [
      "Invalid user_id: User ID must be a non-empty string.",
      "Invalid session_id: Session ID must be a valid identifier.",
      "Invalid context_window: Must be between 5 and 120 minutes.",
      "Context data unavailable: Unable to retrieve sufficient context information.",
      "Location services disabled: Location context requested but not available."
    ],
    "usage": "Provide user_id and session_id to analyze current context. Toggle different context types as needed. Returns comprehensive contextual signals for recommendation enhancement.",
    "output_details": {
      "user_id": {
        "type": "string",
        "description": "Analyzed user identifier"
      },
      "session_context": {
        "type": "string",
        "description": "Current session behavior summary"
      },
      "temporal_context": {
        "type": "string",
        "description": "Time-based context (morning/afternoon/evening, weekday/weekend)"
      },
      "device_context": {
        "type": "string",
        "description": "Device type and platform information"
      },
      "location_context": {
        "type": "string",
        "description": "General location context (city/region level)"
      },
      "contextual_signals": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Key contextual signals affecting recommendations"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Recommendation Ranker",
    "tool_description": "Ranks and orders candidate recommendations using multiple factors including relevance, popularity, business rules, and user context.",
    "parameters": {
      "candidate_items": {
        "type": "array",
        "required": true,
        "description": "List of candidate product IDs to rank",
        "items": {
          "type": "string"
        }
      },
      "user_id": {
        "type": "string",
        "required": true,
        "description": "Target user for personalized ranking"
      },
      "ranking_factors": {
        "type": "array",
        "required": false,
        "description": "Ranking factors to consider: relevance, popularity, recency, price, rating",
        "items": {
          "type": "string"
        },
        "default": ["relevance", "popularity", "rating"]
      },
      "business_boost": {
        "type": "array",
        "required": false,
        "description": "Product categories or brands to boost in rankings",
        "items": {
          "type": "string"
        },
        "default": null
      },
      "boost_factor": {
        "type": "number",
        "required": false,
        "description": "Multiplier for boosted items (1.0-3.0)",
        "default": 1.5
      },
      "diversity_penalty": {
        "type": "number",
        "required": false,
        "description": "Penalty for similar items to promote diversity (0-1)",
        "default": 0.1
      },
      "max_items_per_category": {
        "type": "integer",
        "required": false,
        "description": "Maximum items from same category in top results",
        "default": null
      },
      "personalization_weight": {
        "type": "number",
        "required": false,
        "description": "Weight of personalization vs. global popularity (0-1)",
        "default": 0.7
      },
      "freshness_decay_days": {
        "type": "integer",
        "required": false,
        "description": "Days after which item freshness starts to decay",
        "default": 30
      },
      "price_sensitivity": {
        "type": "number",
        "required": false,
        "description": "User's price sensitivity factor (0-1)",
        "default": 0.5
      }
    },
    "error_messages": [
      "Invalid candidate_items: Must provide at least 1 and at most 1000 candidate items.",
      "Invalid user_id: User ID must be a non-empty string.",
      "Invalid ranking_factors: Must be from [relevance, popularity, recency, price, rating].",
      "Invalid boost_factor: Must be between 1.0 and 3.0.",
      "Invalid diversity_penalty: Must be between 0.0 and 1.0.",
      "Invalid personalization_weight: Must be between 0.0 and 1.0.",
      "Invalid freshness_decay_days: Must be between 1 and 365 days.",
      "Invalid price_sensitivity: Must be between 0.0 and 1.0.",
      "Ranking computation failed: Unable to compute ranking scores for the given parameters."
    ],
    "usage": "Provide candidate_items and user_id for personalized ranking. Customize ranking factors, business boosts, and diversity controls. Returns ranked recommendations with scores.",
    "output_details": {
      "ranke
