field_name: accessibility_and_inclusion
subfield: Web and Digital Content Accessibility
task: Automated accessibility testing and compliance scanning of web pages and digital content
tool_description: |-
  **STEP 1 — Rate task difficulty**
  This is a **hard** task due to its broad scope covering multiple accessibility standards (WCAG, Section 508), complex technical analysis across various content types, interdependent validation workflows, high risk of compliance errors with legal implications, and requirements for sophisticated content parsing and analysis infrastructure.

  **STEP 2 — Set a tool budget**
  Given the hard difficulty rating, I'm targeting **17 tools** to comprehensively cover automated accessibility testing and compliance scanning workflows.

  **STEP 3 — List all tool names with dependencies and affordances**
  1. **Page Content Fetcher** - Consumes: URL → Produces: HTML content, metadata
  2. **DOM Structure Analyzer** - Consumes: HTML content → Produces: DOM tree analysis
  3. **Image Alt Text Validator** - Consumes: HTML content → Produces: alt text compliance report
  4. **Color Contrast Checker** - Consumes: CSS styles, HTML → Produces: contrast ratios, violations
  5. **Keyboard Navigation Tester** - Consumes: HTML structure → Produces: tab order analysis
  6. **ARIA Attribute Validator** - Consumes: HTML elements → Produces: ARIA compliance report
  7. **Heading Structure Analyzer** - Consumes: HTML content → Produces: heading hierarchy report
  8. **Form Accessibility Scanner** - Consumes: form elements → Produces: form accessibility report
  9. **Link Text Evaluator** - Consumes: anchor elements → Produces: link accessibility report
  10. **Video Content Checker** - Consumes: video elements → Produces: media accessibility report
  11. **PDF Accessibility Scanner** - Consumes: PDF files → Produces: PDF compliance report
  12. **Mobile Responsiveness Tester** - Consumes: HTML/CSS → Produces: mobile accessibility report
  13. **Screen Reader Simulator** - Consumes: DOM structure → Produces: screen reader output
  14. **WCAG Compliance Evaluator** - Consumes: multiple scan results → Produces: WCAG compliance score
  15. **Section 508 Validator** - Consumes: scan results → Produces: Section 508 compliance report
  16. **Accessibility Report Generator** - Consumes: all validation results → Produces: comprehensive report
  17. **Compliance Dashboard Creator** - Consumes: reports → Produces: executive dashboard

  **STEP 4 — Multi-tool plans**

  **Simple Plans:**
  - **Basic Image Check**: Page Content Fetcher → Image Alt Text Validator → Accessibility Report Generator
  - **Quick Color Scan**: Page Content Fetcher → Color Contrast Checker → WCAG Compliance Evaluator

  **Medium Plans:**
  - **Form Accessibility Audit**: Page Content Fetcher → DOM Structure Analyzer → Form Accessibility Scanner → ARIA Attribute Validator → Accessibility Report Generator
  - **Navigation Testing**: Page Content Fetcher → Keyboard Navigation Tester → Link Text Evaluator → Heading Structure Analyzer → WCAG Compliance Evaluator

  **Complex Plans:**
  - **Full Site Compliance Scan**: Page Content Fetcher → DOM Structure Analyzer → Image Alt Text Validator → Color Contrast Checker → Keyboard Navigation Tester → ARIA Attribute Validator → Form Accessibility Scanner → WCAG Compliance Evaluator → Section 508 Validator → Accessibility Report Generator → Compliance Dashboard Creator
  - **Multimedia Accessibility Audit**: Page Content Fetcher → Video Content Checker → PDF Accessibility Scanner → Screen Reader Simulator → Mobile Responsiveness Tester → WCAG Compliance Evaluator → Accessibility Report Generator

  **STEP 5 — Produce tools**

  ```json
  {
    "tool_name": "Page Content Fetcher",
    "tool_description": "Retrieves and parses web page content including HTML, CSS, and metadata for accessibility analysis.",
    "parameters": {
      "url": {
        "type": "string",
        "required": true,
        "description": "The URL of the web page to fetch and analyze"
      },
      "user_agent": {
        "type": "string",
        "required": false,
        "description": "Custom user agent string for the request",
        "default": "AccessibilityBot/1.0"
      },
      "timeout": {
        "type": "integer",
        "required": false,
        "description": "Request timeout in seconds (5-60)",
        "default": 30
      }
    },
    "error_messages": [
      "Invalid URL format: Provide a valid HTTP or HTTPS URL.",
      "Page not accessible: The URL returned a 4xx or 5xx HTTP status code.",
      "Request timeout: The page took longer than the specified timeout to load.",
      "Network error: Unable to establish connection to the server."
    ],
    "usage": "Provide a valid URL to fetch the page content. Optionally specify a custom user agent and timeout value. Returns the HTML content and metadata for further accessibility analysis.",
    "output_details": {
      "html_content": {
        "type": "string",
        "description": "The complete HTML content of the page"
      },
      "page_title": {
        "type": "string",
        "description": "The title of the web page"
      },
      "status_code": {
        "type": "integer",
        "description": "HTTP response status code"
      },
      "content_type": {
        "type": "string",
        "description": "The content type of the response"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "DOM Structure Analyzer",
    "tool_description": "Analyzes HTML content to extract DOM structure, element hierarchy, and semantic information for accessibility testing.",
    "parameters": {
      "html_content": {
        "type": "string",
        "required": true,
        "description": "The HTML content to analyze"
      },
      "include_inline_styles": {
        "type": "boolean",
        "required": false,
        "description": "Whether to include inline CSS styles in analysis",
        "default": true
      }
    },
    "error_messages": [
      "Invalid HTML: The provided HTML content is malformed or empty.",
      "Parsing error: Unable to parse the HTML structure due to syntax errors."
    ],
    "usage": "Provide HTML content from a web page. The tool will parse and analyze the DOM structure, identifying semantic elements and their relationships for accessibility evaluation.",
    "output_details": {
      "total_elements": {
        "type": "integer",
        "description": "Total number of HTML elements found"
      },
      "semantic_elements": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of semantic HTML elements found (header, nav, main, etc.)"
      },
      "landmark_count": {
        "type": "integer",
        "description": "Number of landmark elements identified"
      },
      "nesting_depth": {
        "type": "integer",
        "description": "Maximum nesting depth of elements"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Image Alt Text Validator",
    "tool_description": "Validates alternative text for images, checking for presence, quality, and WCAG compliance of alt attributes.",
    "parameters": {
      "html_content": {
        "type": "string",
        "required": true,
        "description": "HTML content containing images to validate"
      },
      "check_decorative": {
        "type": "boolean",
        "required": false,
        "description": "Whether to flag decorative images without empty alt attributes",
        "default": true
      },
      "min_alt_length": {
        "type": "integer",
        "required": false,
        "description": "Minimum character length for meaningful alt text (1-20)",
        "default": 3
      },
      "max_alt_length": {
        "type": "integer",
        "required": false,
        "description": "Maximum recommended alt text length (50-250)",
        "default": 125
      }
    },
    "error_messages": [
      "Invalid HTML content: Provide valid HTML containing image elements.",
      "Invalid length parameters: min_alt_length must be 1-20, max_alt_length must be 50-250, and min < max."
    ],
    "usage": "Provide HTML content to scan all img elements for alt text compliance. Configure length limits and decorative image checking as needed.",
    "output_details": {
      "total_images": {
        "type": "integer",
        "description": "Total number of images found"
      },
      "missing_alt": {
        "type": "integer",
        "description": "Number of images missing alt attributes"
      },
      "empty_alt": {
        "type": "integer",
        "description": "Number of images with empty alt attributes"
      },
      "violations": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of specific alt text violations found"
      },
      "compliance_score": {
        "type": "number",
        "description": "Percentage compliance score for image alt text"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Color Contrast Checker",
    "tool_description": "Analyzes color contrast ratios between text and background colors to ensure WCAG AA and AAA compliance.",
    "parameters": {
      "html_content": {
        "type": "string",
        "required": true,
        "description": "HTML content to analyze for color contrast"
      },
      "css_styles": {
        "type": "string",
        "required": false,
        "description": "Associated CSS styles for the HTML content",
        "default": ""
      },
      "compliance_level": {
        "type": "string",
        "required": false,
        "description": "WCAG compliance level to check: AA or AAA",
        "default": "AA"
      },
      "check_large_text": {
        "type": "boolean",
        "required": false,
        "description": "Whether to apply large text contrast requirements",
        "default": true
      },
      "ignore_transparent": {
        "type": "boolean",
        "required": false,
        "description": "Whether to skip elements with transparent backgrounds",
        "default": false
      }
    },
    "error_messages": [
      "Invalid HTML content: Provide valid HTML with text elements to analyze.",
      "Invalid compliance level: Use 'AA' or 'AAA' for WCAG compliance level.",
      "CSS parsing error: The provided CSS contains syntax errors."
    ],
    "usage": "Provide HTML content and optionally CSS styles to analyze color contrast ratios. Specify WCAG compliance level and configure large text and transparency handling.",
    "output_details": {
      "elements_checked": {
        "type": "integer",
        "description": "Number of text elements analyzed"
      },
      "passing_elements": {
        "type": "integer",
        "description": "Number of elements meeting contrast requirements"
      },
      "failing_elements": {
        "type": "integer",
        "description": "Number of elements failing contrast requirements"
      },
      "contrast_violations": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of specific contrast violations with ratios"
      },
      "overall_score": {
        "type": "number",
        "description": "Overall contrast compliance percentage"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Keyboard Navigation Tester",
    "tool_description": "Tests keyboard accessibility by analyzing tab order, focus indicators, and keyboard trap scenarios.",
    "parameters": {
      "html_content": {
        "type": "string",
        "required": true,
        "description": "HTML content to test for keyboard navigation"
      },
      "check_tabindex": {
        "type": "boolean",
        "required": false,
        "description": "Whether to validate tabindex usage",
        "default": true
      },
      "detect_focus_traps": {
        "type": "boolean",
        "required": false,
        "description": "Whether to detect keyboard focus traps",
        "default": true
      }
    },
    "error_messages": [
      "Invalid HTML content: Provide valid HTML with interactive elements to test.",
      "No focusable elements: The HTML content contains no keyboard-accessible elements."
    ],
    "usage": "Provide HTML content to analyze keyboard navigation patterns. Enable tabindex validation and focus trap detection as needed.",
    "output_details": {
      "focusable_elements": {
        "type": "integer",
        "description": "Number of keyboard-focusable elements found"
      },
      "tab_order_issues": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of tab order problems identified"
      },
      "focus_indicators": {
        "type": "integer",
        "description": "Number of elements with visible focus indicators"
      },
      "keyboard_traps": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of potential keyboard traps detected"
      },
      "navigation_score": {
        "type": "number",
        "description": "Overall keyboard navigation accessibility score"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "ARIA Attribute Validator",
    "tool_description": "Validates ARIA attributes, roles, properties, and states for proper implementation and accessibility compliance.",
    "parameters": {
      "html_content": {
        "type": "string",
        "required": true,
        "description": "HTML content containing ARIA attributes to validate"
      },
      "check_required_props": {
        "type": "boolean",
        "required": false,
        "description": "Whether to validate required ARIA properties",
        "default": true
      },
      "validate_role_usage": {
        "type": "boolean",
        "required": false,
        "description": "Whether to validate proper role usage",
        "default": true
      },
      "check_landmarks": {
        "type": "boolean",
        "required": false,
        "description": "Whether to validate landmark roles",
        "default": true
      },
      "strict_validation": {
        "type": "boolean",
        "required": false,
        "description": "Whether to apply strict ARIA specification validation",
        "default": false
      }
    },
    "error_messages": [
      "Invalid HTML content: Provide valid HTML with ARIA attributes to validate.",
      "No ARIA attributes found: The HTML content contains no ARIA attributes to validate."
    ],
    "usage": "Provide HTML content to validate all ARIA attributes, roles, and properties. Configure validation strictness and specific checks as needed.",
    "output_details": {
      "aria_elements": {
        "type": "integer",
        "description": "Number of elements with ARIA attributes"
      },
      "valid_roles": {
        "type": "integer",
        "description": "Number of elements with valid ARIA roles"
      },
      "invalid_roles": {
        "type": "integer",
        "description": "Number of elements with invalid ARIA roles"
      },
      "property_violations": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of ARIA property and state violations"
      },
      "landmark_issues": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of landmark role problems"
      },
      "aria_score": {
        "type": "number",
        "description": "Overall ARIA implementation quality score"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Heading Structure Analyzer",
    "tool_description": "Analyzes heading hierarchy and structure to ensure proper document outline and navigation for screen readers.",
    "parameters": {
      "html_content": {
        "type": "string",
        "required": true,
        "description": "HTML content to analyze for heading structure"
      },
      "require_h1": {
        "type": "boolean",
        "required": false,
        "description": "Whether to require an H1 element",
        "default": true
      },
      "check_hierarchy": {
        "type": "boolean",
        "required": false,
        "description": "Whether to validate heading level hierarchy",
        "default": true
      }
    },
    "error_messages": [
      "Invalid HTML content: Provide valid HTML content to analyze heading structure.",
      "No headings found: The HTML content contains no heading elements (h1-h6)."
    ],
    "usage": "Provide HTML content to analyze the heading structure and hierarchy. Configure requirements for H1 presence and hierarchy validation.",
    "output_details": {
      "total_headings": {
        "type": "integer",
        "description": "Total number of heading elements found"
      },
      "heading_levels": {
        "type": "array",
        "items": {
          "type": "integer"
        },
        "description": "Array of heading levels present (1-6)"
      },
      "hierarchy_violations": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of heading hierarchy problems"
      },
      "empty_headings": {
        "type": "integer",
        "description": "Number of headings with no text content"
      },
      "structure_score": {
        "type": "number",
        "description": "Overall heading structure quality score"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Form Accessibility Scanner",
    "tool_description": "Scans form elements for accessibility compliance including labels, fieldsets, error handling, and keyboard navigation.",
    "parameters": {
      "html_content": {
        "type": "string",
        "required": true,
        "description": "HTML content containing forms to scan"
      },
      "check_labels": {
        "type": "boolean",
        "required": false,
        "description": "Whether to validate form control labels",
        "default": true
      },
      "check_fieldsets": {
        "type": "boolean",
        "required": false,
        "description": "Whether to validate fieldset usage for grouped controls",
        "default": true
      },
      "check_error_handling": {
        "type": "boolean",
        "required": false,
        "description": "Whether to check for accessible error messaging",
        "default": true
      },
      "check_required_indicators": {
        "type": "boolean",
        "required": false,
        "description": "Whether to validate required field indicators",
        "default": true
      },
      "validate_input_types": {
        "type": "boolean",
        "required": false,
        "description": "Whether to validate appropriate input types",
        "default": true
      }
    },
    "error_messages": [
      "Invalid HTML content: Provide valid HTML content containing form elements.",
      "No forms found: The HTML content contains no form elements to analyze."
    ],
    "usage": "Provide HTML content to scan all form elements for accessibility compliance. Enable specific checks for labels, fieldsets, error handling, and input validation.",
    "output_details": {
      "total_forms": {
        "type": "integer",
        "description": "Total number of forms found"
      },
      "total_controls": {
        "type": "integer",
        "description": "Total number of form controls"
      },
      "unlabeled_controls": {
        "type": "integer",
        "description": "Number of controls without proper labels"
      },
      "missing_fieldsets": {
        "type": "integer",
        "description": "Number of control groups missing fieldsets"
      },
      "accessibility_violations": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of form accessibility violations"
      },
      "form_score": {
        "type": "number",
        "description": "Overall form accessibility score"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Link Text Evaluator",
    "tool_description": "Evaluates link text for accessibility, checking for descriptive content, context, and compliance with best practices.",
    "parameters": {
      "html_content": {
        "type": "string",
        "required": true,
        "description": "HTML content containing links to evaluate"
      },
      "flag_generic_text": {
        "type": "boolean",
        "required": false,
        "description": "Whether to flag generic link text like 'click here'",
        "default": true
      },
      "min_text_length": {
        "type": "integer",
        "required": false,
        "description": "Minimum meaningful link text length (1-10)",
        "default": 2
      },
      "check_title_attributes": {
        "type": "boolean",
        "required": false,
        "description": "Whether to consider title attributes in evaluation",
        "default": true
      }
    },
    "error_messages": [
      "Invalid HTML content: Provide valid HTML content containing link elements.",
      "No links found: The HTML content contains no anchor elements to evaluate.",
      "Invalid min_text_length: Value must be between 1 and 10."
    ],
    "usage": "Provide HTML content to evaluate all link text for accessibility and usability. Configure generic text detection and minimum length requirements.",
    "output_details": {
      "total_links": {
        "type": "integer",
        "description": "Total number of links found"
      },
      "empty_links": {
        "type": "integer",
        "description": "Number of links with no text content"
      },
      "generic_links": {
        "type": "integer",
        "description": "Number of links with generic text"
      },
      "problematic_links": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of links with accessibility issues"
      },
      "link_quality_score": {
        "type": "number",
        "description": "Overall link text quality score"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Video Content Checker",
    "tool_description": "Checks video and audio content for accessibility features like captions, transcripts, audio descriptions, and controls.",
    "parameters": {
      "html_content": {
        "type": "string",
        "required": true,
        "description": "HTML content containing video/audio elements"
      },
      "require_captions": {
        "type": "boolean",
        "required": false,
        "description": "Whether to require captions for video content",
        "default": true
      },
      "require_transcripts": {
        "type": "boolean",
        "required": false,
        "description": "Whether to require transcript availability",
        "default": false
      },
      "check_autoplay": {
        "type": "boolean",
        "required": false,
        "description": "Whether to flag autoplay content",
        "default": true
      },
      "validate_controls": {
        "type": "boolean",
        "required": false,
        "description": "Whether to validate accessible media controls",
        "default": true
      }
    },
    "error_messages": [
      "Invalid HTML content: Provide valid HTML content containing media elements.",
      "No media elements found: The HTML content contains no video or audio elements."
    ],
    "usage": "Provide HTML content to check video and audio elements for accessibility features. Configure requirements for captions, transcripts, and control validation.",
    "output_details": {
      "video_elements": {
        "type": "integer",
        "description": "Number of video elements found"
      },
      "audio_elements": {
        "type": "integer",
        "description": "Number of audio elements found"
      },
      "captioned_videos": {
        "type": "integer",
        "description": "Number of videos with caption tracks"
      },
      "autoplay_issues": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of autoplay accessibility concerns"
      },
      "media_violations": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of media accessibility violations"
      },
      "media_score": {
        "type": "number",
        "description": "Overall media accessibility score"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "PDF Accessibility Scanner",
    "tool_description": "Scans PDF documents for accessibility features including tags, reading order, alternative text, and structure.",
    "parameters": {
      "pdf_url": {
        "type": "string",
        "required": true,
        "description": "URL or path to the PDF document to scan"
      },
      "check_tags": {
        "type": "boolean",
        "required": false,
        "description": "Whether to verify PDF tagging structure",
        "default": true
      },
      "check_reading_order": {
        "type": "boolean",
        "required": false,
        "description": "Whether to validate logical reading order",
        "default": true
      },
      "check_color_contrast": {
        "type": "boolean",
        "required": false,
        "description": "Whether to analyze color contrast in PDF",
        "default": false
      },
      "extract_text": {
        "type": "boolean",
        "required": false,
        "description": "Whether to test text extraction capability",
        "default": true
      }
    },
    "error_messages": [
      "Invalid PDF URL: Provide a valid URL or file path to a PDF document.",
      "PDF not accessible: Unable to access or read the PDF file.",
      "Corrupted PDF: The PDF file appears to be corrupted or unreadable.",
      "Password protected: The PDF is password protected and cannot be analyzed."
    ],
    "usage": "Provide a PDF URL or file path to scan for accessibility features. Configure specific checks for tags, reading order, and text extraction.",
    "output_details": {
      "is_tagged": {
        "type": "boolean",
        "description": "Whether the PDF contains accessibility tags"
      },
      "page_count": {
        "type": "integer",
        "description": "Total number of pages in the PDF"
      },
      "text_extractable": {
        "type": "boolean",
        "description": "Whether text can be extracted from the PDF"
      },
      "structure_violations": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of PDF structure accessibility issues"
      },
      "pdf_score": {
        "type": "number",
        "description": "Overall PDF accessibility compliance score"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Mobile Responsiveness Tester",
    "tool_description": "Tests mobile accessibility including responsive design, touch target sizes, and mobile-specific accessibility features.",
    "parameters": {
      "html_content": {
        "type": "string",
        "required": true,
        "description": "HTML content to test for mobile accessibility"
      },
      "css_styles": {
        "type": "string",
        "required": false,
        "description": "CSS styles associated with the content",
        "default": ""
      },
      "screen_widths": {
        "type": "array",
        "required": false,
        "description": "Screen widths to test (in pixels)",
        "items": {
          "type": "integer"
        },
        "default": [320, 768, 1024]
      },
      "check_touch_targets": {
        "type": "boolean",
        "required": false,
        "description": "Whether to validate touch target sizes",
        "default": true
      },
      "min_touch_size": {
        "type": "integer",
        "required": false,
        "description": "Minimum touch target size in pixels (24-48)",
        "default": 44
      }
    },
    "error_messages": [
      "Invalid HTML content: Provide valid HTML content for mobile testing.",
      "Invalid screen widths: Screen width values must be positive integers.",
      "Invalid touch size: min_touch_size must be between 24 and 48 pixels."
    ],
    "usage": "Provide HTML content and optionally CSS to test mobile accessibility across different screen sizes. Configure touch target validation and minimum sizes.",
    "output_details": {
      "responsive_breakpoints": {
        "type": "array",
        "items": {
          "type": "integer"
        },
        "description": "Screen widths where layout changes occur"
      },
      "touch_target_violations": {
        "type": "integer",
        "description": "Number of touch targets below minimum size"
      },
      "viewport_issues": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of viewport and scaling issues"
      },
      "mobile_score": {
        "type": "number",
        "description": "Overall mobile accessibility score"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Screen Reader Simulator",
    "tool_description": "Simulates screen reader output to test how content will be announced to users with visual impairments.",
    "parameters": {
      "html_content": {
        "type": "string",
        "required": true,
        "description": "HTML content to simulate screen reader output for"
      },
      "screen_reader_type": {
        "type": "string",
        "required": false,
        "description": "Type of screen reader to simulate: NVDA, JAWS, or VoiceOver",
        "default": "NVDA"
      },
      "include_aria": {
        "type": "boolean",
        "required": false,
        "description": "Whether to include ARIA announcements",
        "default": true
      },
      "navigation_mode": {
        "type": "string",
        "required": false,
        "description": "Navigation mode: browse or focus",
        "default": "browse"
      }
    },
    "error_messages": [
      "Invalid HTML content: Provide valid HTML content for screen reader simulation.",
      "Invalid screen reader type: Use NVDA, JAWS, or VoiceOver.",
      "Invalid navigation mode: Use 'browse' or 'focus' mode."
    ],
    "usage": "Provide HTML content to simulate how it would be announced by screen readers. Choose screen reader type and navigation mode for accurate simulation.",
    "output_details": {
      "reading_order": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Sequential order of content as read by screen reader"
      },
      "announced_text": {
        "type": "string",
        "description": "Complete text that would be announced"
      },
      "navigation_landmarks": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Available navigation landmarks"
      },
      "reading_issues": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Potential issues with screen reader experience"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "WCAG Compliance Evaluator",
    "tool_description": "Evaluates overall WCAG compliance by aggregating results from multiple accessibility scans and assigning compliance ratings.",
    "parameters": {
      "scan_results": {
        "type": "array",
        "required": true,
        "description": "Array of individual accessibility scan result summaries",
