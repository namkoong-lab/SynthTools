field_name: databases
subfield: Database Security and Access Control
task: Database Permission and Privilege Administration
tool_description: |-
  ## STEP 1 — Rate task difficulty

  This task involves complex multi-layered security configurations across different database systems, user hierarchies, and permission matrices. It requires understanding of database-specific access control models, role inheritance, audit compliance, and potential security vulnerabilities. The coordination between user management, role assignments, and privilege verification creates significant dependencies and high error impact. **Difficulty: Hard**

  ## STEP 2 — Set a tool budget

  Given the hard difficulty rating, I'm targeting 17 tools within the 15-20 range. This accounts for the complexity of user management, role administration, privilege assignment, audit logging, security validation, and cross-system coordination required for comprehensive database permission administration.

  ## STEP 3 — List all tool names with dependencies and affordances

  **Tools and their data flow:**
  1. **Database Connection Validator** → Produces: validated connection configs
  2. **User Account Manager** → Consumes: connection configs → Produces: user account info
  3. **Role Definition Manager** → Consumes: connection configs → Produces: role definitions
  4. **Permission Matrix Generator** → Consumes: roles, users → Produces: permission mappings
  5. **Privilege Assignment Tool** → Consumes: permission mappings → Produces: assigned privileges
  6. **Access Control List Builder** → Consumes: privileges, users → Produces: ACL configurations
  7. **Database Schema Permission Setter** → Consumes: ACL configs → Produces: schema-level permissions
  8. **Table Level Access Controller** → Consumes: schema permissions → Produces: table-level access
  9. **Column Level Security Manager** → Consumes: table access → Produces: column-level restrictions
  10. **Stored Procedure Permission Manager** → Consumes: user info → Produces: procedure permissions
  11. **Database Login Credential Manager** → Consumes: user accounts → Produces: authentication configs
  12. **Permission Audit Trail Generator** → Consumes: all permission data → Produces: audit logs
  13. **Access Rights Validator** → Consumes: permissions, users → Produces: validation results
  14. **Role Hierarchy Manager** → Consumes: roles → Produces: role inheritance structure
  15. **Security Policy Enforcer** → Consumes: policies, permissions → Produces: enforcement status
  16. **Permission Conflict Resolver** → Consumes: conflicting permissions → Produces: resolved permissions
  17. **Database Security Report Generator** → Consumes: all security data → Produces: comprehensive reports

  ## STEP 4 — Multi-tool plans

  **Simple Plans:**
  - **Basic User Setup**: Database Connection Validator → User Account Manager → Database Login Credential Manager
  - **Role Creation**: Database Connection Validator → Role Definition Manager → Role Hierarchy Manager

  **Medium Plans:**
  - **Schema Access Setup**: Database Connection Validator → User Account Manager → Role Definition Manager → Permission Matrix Generator → Database Schema Permission Setter → Access Rights Validator
  - **Audit Compliance Check**: Permission Audit Trail Generator → Access Rights Validator → Database Security Report Generator

  **Complex Plans:**
  - **Complete Permission Architecture**: Database Connection Validator → User Account Manager → Role Definition Manager → Role Hierarchy Manager → Permission Matrix Generator → Privilege Assignment Tool → Access Control List Builder → Database Schema Permission Setter → Table Level Access Controller → Column Level Security Manager → Security Policy Enforcer → Permission Conflict Resolver → Access Rights Validator → Permission Audit Trail Generator → Database Security Report Generator
  - **Multi-Level Security Implementation**: Database Connection Validator → User Account Manager → Role Definition Manager → Permission Matrix Generator → Database Schema Permission Setter → Table Level Access Controller → Column Level Security Manager → Stored Procedure Permission Manager → Security Policy Enforcer → Permission Conflict Resolver → Access Rights Validator

  ## STEP 5 — Produce tools

  ```json
  {
    "tool_name": "Database Connection Validator",
    "tool_description": "Validates database connection parameters and tests connectivity to ensure the target database system is accessible for permission administration tasks.",
    "parameters": {
      "host": {
        "type": "string",
        "required": true,
        "description": "Database server hostname or IP address"
      },
      "port": {
        "type": "integer",
        "required": true,
        "description": "Database server port number"
      },
      "database_name": {
        "type": "string",
        "required": true,
        "description": "Name of the target database"
      },
      "database_type": {
        "type": "string",
        "required": true,
        "description": "Database system type (mysql, postgresql, oracle, sqlserver, mongodb)"
      },
      "admin_username": {
        "type": "string",
        "required": true,
        "description": "Administrative username for connection"
      }
    },
    "error_messages": [
      "Connection timeout: Database server is not responding. Check host and port configuration.",
      "Authentication failed: Invalid admin credentials provided. Verify username and password.",
      "Database not found: Specified database does not exist on the server.",
      "Unsupported database type: Use one of [mysql, postgresql, oracle, sqlserver, mongodb].",
      "Network error: Unable to reach database server. Check network connectivity and firewall settings."
    ],
    "usage": "Provide database connection details including host, port, database_name, database_type, and admin_username. The tool validates connectivity and returns connection status with database system information.",
    "output_details": {
      "connection_status": {
        "type": "string",
        "description": "Status of database connection (connected/failed)"
      },
      "database_version": {
        "type": "string",
        "description": "Version of the database system"
      },
      "connection_id": {
        "type": "string",
        "description": "Unique identifier for this database connection session"
      },
      "server_info": {
        "type": "string",
        "description": "Additional server information and capabilities"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "User Account Manager",
    "tool_description": "Creates, modifies, and manages database user accounts with basic authentication settings and account properties.",
    "parameters": {
      "connection_id": {
        "type": "string",
        "required": true,
        "description": "Database connection identifier from connection validator"
      },
      "operation": {
        "type": "string",
        "required": true,
        "description": "Operation type (create, modify, delete, list)"
      },
      "username": {
        "type": "string",
        "required": false,
        "description": "Target username for the operation",
        "default": null
      },
      "password": {
        "type": "string",
        "required": false,
        "description": "Password for user account (required for create/modify)",
        "default": null
      },
      "account_status": {
        "type": "string",
        "required": false,
        "description": "Account status (active, locked, expired)",
        "default": "active"
      },
      "password_expiry_days": {
        "type": "integer",
        "required": false,
        "description": "Number of days until password expires (1-365)",
        "default": 90
      },
      "max_connections": {
        "type": "integer",
        "required": false,
        "description": "Maximum concurrent connections for user (1-1000)",
        "default": 10
      }
    },
    "error_messages": [
      "Invalid operation: Use one of [create, modify, delete, list].",
      "Username required: Provide username for create, modify, or delete operations.",
      "Password required: Password must be provided for create and modify operations.",
      "User already exists: Username is already taken in the database.",
      "User not found: Specified username does not exist for modify/delete operations.",
      "Invalid password policy: Password does not meet database security requirements.",
      "Invalid connection: Connection ID is not valid or connection has expired.",
      "Parameter out of range: password_expiry_days must be 1-365, max_connections must be 1-1000."
    ],
    "usage": "Specify connection_id and operation type. For create/modify operations, provide username, password, and optional account settings. The tool manages database user accounts and returns operation results.",
    "output_details": {
      "operation_result": {
        "type": "string",
        "description": "Result status of the user account operation"
      },
      "username": {
        "type": "string",
        "description": "Username that was processed"
      },
      "account_info": {
        "type": "string",
        "description": "Current account information and settings"
      },
      "user_list": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of usernames (for list operation)"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Role Definition Manager",
    "tool_description": "Creates and manages database roles with associated permissions and role hierarchies for systematic privilege management.",
    "parameters": {
      "connection_id": {
        "type": "string",
        "required": true,
        "description": "Database connection identifier"
      },
      "operation": {
        "type": "string",
        "required": true,
        "description": "Role operation (create, modify, delete, list)"
      },
      "role_name": {
        "type": "string",
        "required": false,
        "description": "Name of the role to manage",
        "default": null
      },
      "role_description": {
        "type": "string",
        "required": false,
        "description": "Description of the role purpose",
        "default": null
      },
      "role_type": {
        "type": "string",
        "required": false,
        "description": "Role category (admin, developer, analyst, viewer, custom)",
        "default": "custom"
      }
    },
    "error_messages": [
      "Invalid operation: Use one of [create, modify, delete, list].",
      "Role name required: Provide role_name for create, modify, or delete operations.",
      "Role already exists: Role name is already defined in the database.",
      "Role not found: Specified role does not exist for modify/delete operations.",
      "Invalid role type: Use one of [admin, developer, analyst, viewer, custom].",
      "Invalid connection: Connection ID is not valid or connection has expired.",
      "Role in use: Cannot delete role that is currently assigned to users."
    ],
    "usage": "Provide connection_id and operation type. For create/modify operations, specify role_name, optional role_description, and role_type. The tool manages database roles and returns role information.",
    "output_details": {
      "operation_result": {
        "type": "string",
        "description": "Status of the role management operation"
      },
      "role_name": {
        "type": "string",
        "description": "Name of the role that was processed"
      },
      "role_details": {
        "type": "string",
        "description": "Detailed information about the role"
      },
      "roles_list": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of all available roles (for list operation)"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Permission Matrix Generator",
    "tool_description": "Generates comprehensive permission matrices mapping users to roles and defining access patterns for database resources.",
    "parameters": {
      "connection_id": {
        "type": "string",
        "required": true,
        "description": "Database connection identifier"
      },
      "users": {
        "type": "array",
        "required": true,
        "description": "List of usernames to include in the matrix",
        "items": {
          "type": "string"
        },
        "minItems": 1,
        "maxItems": 100
      },
      "roles": {
        "type": "array",
        "required": true,
        "description": "List of roles to include in the matrix",
        "items": {
          "type": "string"
        },
        "minItems": 1,
        "maxItems": 50
      },
      "resources": {
        "type": "array",
        "required": true,
        "description": "List of database resources (schemas, tables, procedures)",
        "items": {
          "type": "string"
        },
        "minItems": 1,
        "maxItems": 200
      },
      "permission_types": {
        "type": "array",
        "required": true,
        "description": "Types of permissions to consider (SELECT, INSERT, UPDATE, DELETE, EXECUTE, CREATE, DROP)",
        "items": {
          "type": "string"
        },
        "minItems": 1,
        "maxItems": 10
      },
      "matrix_format": {
        "type": "string",
        "required": false,
        "description": "Output format for the matrix (detailed, summary, csv)",
        "default": "detailed"
      }
    },
    "error_messages": [
      "Invalid connection: Connection ID is not valid or connection has expired.",
      "Empty user list: At least one user must be specified.",
      "Empty role list: At least one role must be specified.",
      "Empty resource list: At least one database resource must be specified.",
      "Invalid permission type: Use valid database permission types like SELECT, INSERT, UPDATE, DELETE, EXECUTE, CREATE, DROP.",
      "Invalid matrix format: Use one of [detailed, summary, csv].",
      "Resource not found: One or more specified database resources do not exist.",
      "User not found: One or more specified users do not exist in the database.",
      "Role not found: One or more specified roles do not exist in the database."
    ],
    "usage": "Provide connection_id, arrays of users, roles, resources, and permission_types to analyze. Optionally specify matrix_format. The tool generates a comprehensive permission matrix showing access relationships.",
    "output_details": {
      "matrix_summary": {
        "type": "string",
        "description": "Summary of the generated permission matrix"
      },
      "user_role_mappings": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of user-to-role assignment strings"
      },
      "permission_conflicts": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of detected permission conflicts"
      },
      "matrix_data": {
        "type": "string",
        "description": "Formatted permission matrix data"
      },
      "recommendations": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Security and optimization recommendations"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Privilege Assignment Tool",
    "tool_description": "Assigns specific database privileges to users and roles based on permission matrices and security policies.",
    "parameters": {
      "connection_id": {
        "type": "string",
        "required": true,
        "description": "Database connection identifier"
      },
      "assignment_type": {
        "type": "string",
        "required": true,
        "description": "Type of assignment (user_to_role, role_to_privilege, user_to_privilege)"
      },
      "source": {
        "type": "string",
        "required": true,
        "description": "Source entity (username or role name)"
      },
      "target": {
        "type": "string",
        "required": true,
        "description": "Target entity (role name, privilege, or resource)"
      },
      "privilege_type": {
        "type": "string",
        "required": false,
        "description": "Specific privilege type (SELECT, INSERT, UPDATE, DELETE, EXECUTE, CREATE, DROP, ALL)",
        "default": "SELECT"
      },
      "resource_scope": {
        "type": "string",
        "required": false,
        "description": "Scope of the resource (database, schema, table, column, procedure)",
        "default": "table"
      },
      "grant_option": {
        "type": "boolean",
        "required": false,
        "description": "Whether to grant permission to grant this privilege to others",
        "default": false
      }
    },
    "error_messages": [
      "Invalid assignment type: Use one of [user_to_role, role_to_privilege, user_to_privilege].",
      "Source entity not found: Specified user or role does not exist.",
      "Target entity not found: Specified role, privilege, or resource does not exist.",
      "Invalid privilege type: Use one of [SELECT, INSERT, UPDATE, DELETE, EXECUTE, CREATE, DROP, ALL].",
      "Invalid resource scope: Use one of [database, schema, table, column, procedure].",
      "Privilege already exists: The specified privilege is already assigned.",
      "Insufficient permissions: Admin account lacks permission to grant this privilege.",
      "Invalid connection: Connection ID is not valid or connection has expired.",
      "Circular role assignment: Assignment would create a circular role hierarchy."
    ],
    "usage": "Specify connection_id, assignment_type, source, and target entities. Optionally set privilege_type, resource_scope, and grant_option. The tool assigns database privileges and returns assignment results.",
    "output_details": {
      "assignment_status": {
        "type": "string",
        "description": "Status of the privilege assignment operation"
      },
      "privilege_details": {
        "type": "string",
        "description": "Details of the assigned privilege"
      },
      "affected_entities": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of entities affected by this assignment"
      },
      "security_impact": {
        "type": "string",
        "description": "Security impact assessment of this assignment"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Access Control List Builder",
    "tool_description": "Builds and manages Access Control Lists (ACLs) for database resources, combining user privileges and role-based permissions into comprehensive access control configurations.",
    "parameters": {
      "connection_id": {
        "type": "string",
        "required": true,
        "description": "Database connection identifier"
      },
      "resource_name": {
        "type": "string",
        "required": true,
        "description": "Database resource name (schema, table, view, procedure)"
      },
      "resource_type": {
        "type": "string",
        "required": true,
        "description": "Type of database resource (schema, table, view, procedure, function)"
      },
      "authorized_users": {
        "type": "array",
        "required": true,
        "description": "List of users with access to this resource",
        "items": {
          "type": "string"
        },
        "minItems": 1,
        "maxItems": 100
      },
      "authorized_roles": {
        "type": "array",
        "required": true,
        "description": "List of roles with access to this resource",
        "items": {
          "type": "string"
        },
        "minItems": 0,
        "maxItems": 50
      },
      "permissions": {
        "type": "array",
        "required": true,
        "description": "List of permissions to include in ACL",
        "items": {
          "type": "string"
        },
        "minItems": 1,
        "maxItems": 20
      },
      "acl_mode": {
        "type": "string",
        "required": false,
        "description": "ACL enforcement mode (strict, permissive, audit)",
        "default": "strict"
      },
      "inheritance_enabled": {
        "type": "boolean",
        "required": false,
        "description": "Whether to enable permission inheritance from parent resources",
        "default": true
      },
      "effective_date": {
        "type": "string",
        "required": false,
        "description": "When ACL becomes effective (ISO 8601 format)",
        "format": "date-time",
        "default": null
      },
      "expiry_date": {
        "type": "string",
        "required": false,
        "description": "When ACL expires (ISO 8601 format)",
        "format": "date-time",
        "default": null
      }
    },
    "error_messages": [
      "Resource not found: Specified database resource does not exist.",
      "Invalid resource type: Use one of [schema, table, view, procedure, function].",
      "Invalid user: One or more specified users do not exist in the database.",
      "Invalid role: One or more specified roles do not exist in the database.",
      "Invalid permission: One or more permissions are not valid for this resource type.",
      "Invalid ACL mode: Use one of [strict, permissive, audit].",
      "Invalid date format: Dates must be in ISO 8601 format.",
      "Date conflict: Effective date must be before expiry date.",
      "Empty permissions: At least one permission must be specified.",
      "Invalid connection: Connection ID is not valid or connection has expired."
    ],
    "usage": "Provide connection_id, resource details (name and type), lists of authorized users/roles, and permissions. Optionally configure ACL mode, inheritance, and date restrictions. The tool builds comprehensive ACL configurations.",
    "output_details": {
      "acl_id": {
        "type": "string",
        "description": "Unique identifier for the created ACL"
      },
      "acl_summary": {
        "type": "string",
        "description": "Summary of ACL configuration and coverage"
      },
      "effective_permissions": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of effective permissions after ACL application"
      },
      "access_matrix": {
        "type": "string",
        "description": "Formatted access matrix for this resource"
      },
      "security_warnings": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Security warnings or concerns with current ACL"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Database Schema Permission Setter",
    "tool_description": "Sets and manages permissions at the database schema level, controlling access to entire schemas and their contained objects.",
    "parameters": {
      "connection_id": {
        "type": "string",
        "required": true,
        "description": "Database connection identifier"
      },
      "schema_name": {
        "type": "string",
        "required": true,
        "description": "Name of the database schema"
      },
      "permission_operation": {
        "type": "string",
        "required": true,
        "description": "Permission operation (grant, revoke, check)"
      },
      "grantee": {
        "type": "string",
        "required": true,
        "description": "User or role receiving permissions"
      },
      "schema_permissions": {
        "type": "array",
        "required": true,
        "description": "Schema-level permissions to set",
        "items": {
          "type": "string"
        },
        "minItems": 1,
        "maxItems": 15
      },
      "cascade_to_objects": {
        "type": "boolean",
        "required": false,
        "description": "Whether to apply permissions to all objects in schema",
        "default": false
      },
      "include_future_objects": {
        "type": "boolean",
        "required": false,
        "description": "Whether permissions apply to future objects in schema",
        "default": false
      }
    },
    "error_messages": [
      "Schema not found: Specified schema does not exist in the database.",
      "Invalid permission operation: Use one of [grant, revoke, check].",
      "Grantee not found: Specified user or role does not exist.",
      "Invalid schema permission: One or more permissions are not valid for schema level.",
      "Permission already exists: The specified permission is already granted.",
      "Permission not found: Cannot revoke permission that was not previously granted.",
      "Insufficient admin privileges: Admin account cannot grant these schema permissions.",
      "Invalid connection: Connection ID is not valid or connection has expired."
    ],
    "usage": "Specify connection_id, schema_name, permission_operation, grantee, and array of schema_permissions. Optionally set cascade and future object options. The tool manages schema-level database permissions.",
    "output_details": {
      "operation_status": {
        "type": "string",
        "description": "Status of the schema permission operation"
      },
      "affected_permissions": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of permissions that were modified"
      },
      "schema_access_summary": {
        "type": "string",
        "description": "Summary of current access rights for the schema"
      },
      "cascaded_objects": {
        "type": "integer",
        "description": "Number of objects affected by cascade option"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Table Level Access Controller",
    "tool_description": "Controls access permissions at the individual table level, managing fine-grained table-specific privileges and access restrictions.",
    "parameters": {
      "connection_id": {
        "type": "string",
        "required": true,
        "description": "Database connection identifier"
      },
      "table_name": {
        "type": "string",
        "required": true,
        "description": "Name of the database table"
      },
      "schema_name": {
        "type": "string",
        "required": false,
        "description": "Schema containing the table",
        "default": null
      },
      "access_operation": {
        "type": "string",
        "required": true,
        "description": "Access control operation (grant, revoke, modify, check)"
      },
      "principal": {
        "type": "string",
        "required": true,
        "description": "User or role for access control"
      },
      "table_privileges": {
        "type": "array",
        "required": true,
        "description": "Table privileges to manage",
        "items": {
          "type": "string"
        },
        "minItems": 1,
        "maxItems": 10
      },
      "row_filter": {
        "type": "string",
        "required": false,
        "description": "Optional row-level filter condition",
        "default": null
      }
    },
    "error_messages": [
      "Table not found: Specified table does not exist in the database or schema.",
      "Invalid access operation: Use one of [grant, revoke, modify, check].",
      "Principal not found: Specified user or role does not exist.",
      "Invalid table privilege: One or more privileges are not valid for table level access.",
      "Invalid row filter: Row filter syntax is incorrect for this database system.",
      "Permission conflict: Operation conflicts with existing permissions.",
      "Insufficient privileges: Admin account cannot manage these table permissions.",
      "Invalid connection: Connection ID is not valid or connection has expired."
    ],
    "usage": "Provide connection_id, table_name, access_operation, principal, and table_privileges array. Optionally specify schema_name and row_filter for fine-grained control. The tool manages table-level access permissions.",
    "output_details": {
      "access_control_status": {
        "type": "string",
        "description": "Result status of table access control operation"
      },
      "current_privileges": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Current privileges for the principal on this table"
      },
      "table_access_info": {
        "type": "string",
        "description": "Detailed information about table access configuration"
      },
      "row_security_enabled": {
        "type": "boolean",
        "description": "Whether row-level security is active for this table"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Column Level Security Manager",
    "tool_description": "Manages column-level security settings including access restrictions, data masking, and sensitive data protection for specific table columns.",
    "parameters": {
      "connection_id": {
        "type": "string",
        "required": true,
        "description": "Database connection identifier"
      },
      "table_name": {
        "type": "string",
        "required": true,
        "description": "Name of the table containing the columns"
      },
      "column_names": {
        "type": "array",
        "required": true,
        "description": "List of column names to secure",
        "items": {
          "type": "string"
        },
        "minItems": 1,
        "maxItems": 50
      },
      "security_operation": {
        "type": "string",
        "required": true,
        "description": "Security operation (restrict, mask, encrypt, grant, revoke)"
      },
      "principals": {
        "type": "array",
        "required": true,
        "description": "Users or roles affected by column security",
        "items": {
          "type": "string"
        },
        "minItems": 1,
        "maxItems": 100
      },
      "masking_type": {
        "type": "string",
        "required": false,
        "description": "Type of data masking (full, partial, random, format_preserving)",
        "default": null
      },
      "access_level": {
        "type": "string",
        "required": false,
        "description": "Column access level (none, read, write, full)",
        "default": "read"
      }
    },
    "error_messages": [
      "Table not found: Specified table does not exist in the database.",
      "Column not found: One or more specified columns do not exist in the table.",
      "Invalid security operation: Use one of [restrict, mask, encrypt, grant, revoke].",
      "Principal not found: One or more specified users or roles do not exist.",
      "Invalid masking type: Use one of [full, partial, random, format_preserving] or null.",
      "Invalid access level: Use one of [none, read, write, full].",
      "Masking not supported: Column data type does not support the specified masking type.",
      "Security conflict: Operation conflicts with existing column security policies.",
      "Invalid connection: Connection ID is not valid or connection has expired."
    ],
    "usage": "Specify connection_id, table_name, column_names array, security_operation, and principals array. Optionally set masking_type and access_level for fine-grained column security. The tool manages column-level security settings.",
    "output_details": {
      "security_status": {
        "type": "string",
        "description": "Status of column security operation"
      },
      "protected_columns": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of columns with active security measures"
      },
      "security_summary": {
        "type": "string",
        "description": "Summary of column security configuration"
      },
      "affected_users": {
        "type": "integer",
        "description": "Number of users affected by column security changes"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Stored Procedure Permission Manager",
    "tool_description": "Manages execution permissions for stored procedures, functions, and other database programmable objects.",
    "parameters": {
      "connection_id": {
        "type": "string",
        "required": true,
        "description": "Database connection identifier"
      },
      "procedure_name": {
        "type": "string",
        "required": true,
        "description": "Name of the stored procedure or function"
      },
      "schema_name": {
        "type": "
