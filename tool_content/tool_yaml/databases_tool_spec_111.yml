field_name: databases
subfield: Database Migration and Data Transfer
task: Target database preparation and schema creation
tool_description: |-
  **STEP 1 — Rate task difficulty**

  This task is **medium** difficulty. It involves multiple coordinated subtasks including schema analysis, dependency resolution, data type mapping, constraint validation, and rollback planning. While individual components are well-understood, the coordination between schema design, migration planning, and validation requires careful sequencing and error handling.

  **STEP 2 — Set a tool budget**

  Given the medium complexity, I'll target **12 tools** to cover schema analysis, design, validation, migration planning, and execution phases with appropriate granularity.

  **STEP 3 — List all tool names and dependencies**

  1. **Database Connection Validator** - Consumes: connection params → Produces: connection status
  2. **Source Schema Analyzer** - Consumes: source connection → Produces: schema metadata
  3. **Target Database Compatibility Checker** - Consumes: source schema, target DB type → Produces: compatibility report
  4. **Data Type Mapper** - Consumes: source types, target DB type → Produces: type mappings
  5. **Schema Dependency Resolver** - Consumes: schema metadata → Produces: creation order
  6. **Target Schema Generator** - Consumes: source schema, type mappings → Produces: target DDL
  7. **Schema Validator** - Consumes: DDL statements → Produces: validation results
  8. **Migration Script Builder** - Consumes: DDL, dependencies → Produces: migration scripts
  9. **Rollback Plan Generator** - Consumes: migration scripts → Produces: rollback scripts
  10. **Schema Deployment Executor** - Consumes: migration scripts, connection → Produces: execution results
  11. **Schema Verification Tool** - Consumes: target connection, expected schema → Produces: verification report
  12. **Migration Progress Tracker** - Consumes: execution steps → Produces: progress status

  **STEP 4 — Multi-tool plans**

  **Simple plans:**
  - Basic validation: Database Connection Validator → Source Schema Analyzer → Schema Validator
  - Type mapping: Source Schema Analyzer → Data Type Mapper → Target Schema Generator

  **Medium plans:**
  - Schema preparation: Database Connection Validator → Source Schema Analyzer → Target Database Compatibility Checker → Data Type Mapper → Target Schema Generator → Schema Validator
  - Migration planning: Schema Dependency Resolver → Migration Script Builder → Rollback Plan Generator

  **Complex plans:**
  - Full migration workflow: Database Connection Validator → Source Schema Analyzer → Target Database Compatibility Checker → Data Type Mapper → Schema Dependency Resolver → Target Schema Generator → Schema Validator → Migration Script Builder → Rollback Plan Generator → Schema Deployment Executor → Schema Verification Tool → Migration Progress Tracker
  - Recovery workflow: Rollback Plan Generator → Schema Deployment Executor → Schema Verification Tool → Migration Progress Tracker

  **STEP 5 — Produce tools**

  ```json
  {
    "tool_name": "Database Connection Validator",
    "tool_description": "Validates database connections and retrieves basic database information to ensure connectivity before migration operations.",
    "parameters": {
      "host": {
        "type": "string",
        "required": true,
        "description": "Database server hostname or IP address"
      },
      "port": {
        "type": "integer",
        "required": true,
        "description": "Database server port number"
      },
      "database_name": {
        "type": "string",
        "required": true,
        "description": "Name of the database to connect to"
      },
      "username": {
        "type": "string",
        "required": true,
        "description": "Database username for authentication"
      },
      "password": {
        "type": "string",
        "required": true,
        "description": "Database password for authentication"
      }
    },
    "error_messages": [
      "Connection timeout: Unable to reach database server. Check host and port settings.",
      "Authentication failed: Invalid username or password provided.",
      "Database not found: The specified database name does not exist on the server.",
      "Network error: Unable to establish network connection to database server."
    ],
    "usage": "Provide database connection parameters to test connectivity and retrieve basic database information before performing migration operations.",
    "output_details": {
      "connection_status": {
        "type": "string",
        "description": "Status of the connection attempt (success/failure)"
      },
      "database_version": {
        "type": "string",
        "description": "Version of the database server"
      },
      "database_type": {
        "type": "string",
        "description": "Type of database system (MySQL, PostgreSQL, etc.)"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Source Schema Analyzer",
    "tool_description": "Analyzes the source database schema to extract comprehensive metadata including tables, columns, constraints, indexes, and relationships.",
    "parameters": {
      "host": {
        "type": "string",
        "required": true,
        "description": "Source database server hostname or IP address"
      },
      "port": {
        "type": "integer",
        "required": true,
        "description": "Source database server port number"
      },
      "database_name": {
        "type": "string",
        "required": true,
        "description": "Name of the source database"
      },
      "username": {
        "type": "string",
        "required": true,
        "description": "Database username for authentication"
      },
      "password": {
        "type": "string",
        "required": true,
        "description": "Database password for authentication"
      },
      "include_system_tables": {
        "type": "boolean",
        "required": false,
        "default": false,
        "description": "Whether to include system tables in analysis"
      },
      "table_filter": {
        "type": "array",
        "items": {"type": "string"},
        "required": false,
        "default": null,
        "description": "List of specific table names to analyze (if empty, analyzes all tables)"
      }
    },
    "error_messages": [
      "Connection failed: Unable to connect to source database. Verify connection parameters.",
      "Permission denied: User lacks privileges to read schema metadata.",
      "Invalid table filter: One or more specified tables do not exist in the database.",
      "Schema read error: Unable to retrieve complete schema information due to database restrictions."
    ],
    "usage": "Connect to source database and specify analysis scope using table filters. The tool extracts comprehensive schema metadata for migration planning.",
    "output_details": {
      "table_count": {
        "type": "integer",
        "description": "Number of tables analyzed"
      },
      "table_names": {
        "type": "array",
        "items": {"type": "string"},
        "description": "List of analyzed table names"
      },
      "column_metadata": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Detailed column information including names, types, and constraints"
      },
      "foreign_keys": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Foreign key relationships between tables"
      },
      "indexes": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Index definitions and properties"
      },
      "constraints": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Check constraints and unique constraints"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Target Database Compatibility Checker",
    "tool_description": "Analyzes compatibility between source schema and target database system, identifying potential migration issues and required adaptations.",
    "parameters": {
      "source_schema_metadata": {
        "type": "string",
        "required": true,
        "description": "JSON string containing source schema metadata from Schema Analyzer"
      },
      "target_database_type": {
        "type": "string",
        "required": true,
        "description": "Target database type (MySQL, PostgreSQL, Oracle, SQL Server, SQLite)"
      },
      "target_database_version": {
        "type": "string",
        "required": false,
        "default": "latest",
        "description": "Target database version"
      }
    },
    "error_messages": [
      "Invalid schema metadata: Source schema metadata is malformed or incomplete.",
      "Unsupported target database: Target database type is not supported.",
      "Version incompatibility: Target database version does not support required features.",
      "Critical compatibility issues: Migration cannot proceed due to incompatible features."
    ],
    "usage": "Provide source schema metadata and target database specifications to identify compatibility issues and required adaptations for successful migration.",
    "output_details": {
      "compatibility_score": {
        "type": "number",
        "description": "Overall compatibility score (0-100)"
      },
      "blocking_issues": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Issues that prevent migration"
      },
      "warnings": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Non-blocking compatibility warnings"
      },
      "recommendations": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Recommendations for resolving issues"
      },
      "feature_gaps": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Source features not available in target database"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Data Type Mapper",
    "tool_description": "Maps source database data types to equivalent target database types, handling precision, scale, and constraint mappings.",
    "parameters": {
      "source_data_types": {
        "type": "array",
        "items": {"type": "string"},
        "required": true,
        "description": "List of source data types to map"
      },
      "source_database_type": {
        "type": "string",
        "required": true,
        "description": "Source database type (MySQL, PostgreSQL, Oracle, SQL Server, SQLite)"
      },
      "target_database_type": {
        "type": "string",
        "required": true,
        "description": "Target database type (MySQL, PostgreSQL, Oracle, SQL Server, SQLite)"
      },
      "preserve_precision": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Whether to preserve numeric precision and scale"
      },
      "strict_mapping": {
        "type": "boolean",
        "required": false,
        "default": false,
        "description": "Whether to use strict type mapping or allow compatible approximations"
      }
    },
    "error_messages": [
      "Unsupported source database: Source database type is not supported for mapping.",
      "Unsupported target database: Target database type is not supported for mapping.",
      "Unmappable data type: One or more source data types cannot be mapped to target database.",
      "Precision loss warning: Target mapping may result in precision or scale loss."
    ],
    "usage": "Provide source data types and database specifications to generate appropriate target database type mappings with precision preservation options.",
    "output_details": {
      "type_mappings": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Source to target type mapping pairs"
      },
      "mapping_warnings": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Warnings about potential data loss or precision issues"
      },
      "conversion_notes": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Notes about special conversion requirements"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Schema Dependency Resolver",
    "tool_description": "Analyzes schema dependencies and determines the correct order for creating database objects to avoid dependency conflicts.",
    "parameters": {
      "schema_metadata": {
        "type": "string",
        "required": true,
        "description": "JSON string containing complete schema metadata"
      },
      "resolve_circular_dependencies": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Whether to attempt resolution of circular dependencies"
      }
    },
    "error_messages": [
      "Invalid schema metadata: Schema metadata is malformed or incomplete.",
      "Circular dependency detected: Unresolvable circular dependencies found in schema.",
      "Missing dependency information: Required dependency information is missing from metadata.",
      "Dependency resolution failed: Unable to determine safe creation order."
    ],
    "usage": "Provide complete schema metadata to analyze dependencies and generate a safe order for creating database objects during migration.",
    "output_details": {
      "creation_order": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Ordered list of database objects for creation"
      },
      "dependency_graph": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Dependency relationships between objects"
      },
      "circular_dependencies": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Identified circular dependencies and resolution strategies"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Target Schema Generator",
    "tool_description": "Generates complete DDL statements for target database schema creation based on source metadata and type mappings.",
    "parameters": {
      "source_schema_metadata": {
        "type": "string",
        "required": true,
        "description": "JSON string containing source schema metadata"
      },
      "type_mappings": {
        "type": "string",
        "required": true,
        "description": "JSON string containing data type mappings"
      },
      "target_database_type": {
        "type": "string",
        "required": true,
        "description": "Target database type (MySQL, PostgreSQL, Oracle, SQL Server, SQLite)"
      },
      "include_indexes": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Whether to include index creation statements"
      },
      "include_constraints": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Whether to include constraint creation statements"
      },
      "naming_convention": {
        "type": "string",
        "required": false,
        "default": "preserve",
        "description": "Naming convention to apply (preserve, lowercase, uppercase, snake_case)"
      },
      "schema_prefix": {
        "type": "string",
        "required": false,
        "default": null,
        "description": "Optional prefix to add to schema object names"
      },
      "add_audit_columns": {
        "type": "boolean",
        "required": false,
        "default": false,
        "description": "Whether to add audit columns (created_at, updated_at) to tables"
      },
      "collation": {
        "type": "string",
        "required": false,
        "default": null,
        "description": "Default collation for text columns"
      },
      "create_if_not_exists": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Whether to use CREATE IF NOT EXISTS syntax"
      }
    },
    "error_messages": [
      "Invalid source metadata: Source schema metadata is malformed or incomplete.",
      "Invalid type mappings: Type mapping data is malformed or incomplete.",
      "Unsupported target database: Target database type is not supported.",
      "Invalid naming convention: Specified naming convention is not supported.",
      "DDL generation failed: Unable to generate valid DDL statements for target database.",
      "Constraint conflict: Generated constraints conflict with target database limitations."
    ],
    "usage": "Provide source schema metadata, type mappings, and generation options to create complete DDL statements for target database schema creation.",
    "output_details": {
      "ddl_statements": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Complete DDL statements for schema creation"
      },
      "table_count": {
        "type": "integer",
        "description": "Number of tables in generated schema"
      },
      "index_count": {
        "type": "integer",
        "description": "Number of indexes in generated schema"
      },
      "constraint_count": {
        "type": "integer",
        "description": "Number of constraints in generated schema"
      },
      "generation_warnings": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Warnings about potential issues with generated DDL"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Schema Validator",
    "tool_description": "Validates DDL statements for syntax correctness, naming conventions, and database-specific compliance rules.",
    "parameters": {
      "ddl_statements": {
        "type": "array",
        "items": {"type": "string"},
        "required": true,
        "description": "DDL statements to validate"
      },
      "database_type": {
        "type": "string",
        "required": true,
        "description": "Target database type for validation rules"
      },
      "strict_validation": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Whether to apply strict validation rules"
      }
    },
    "error_messages": [
      "Empty DDL statements: No DDL statements provided for validation.",
      "Unsupported database type: Database type is not supported for validation.",
      "Syntax errors: One or more DDL statements contain syntax errors.",
      "Naming convention violations: Object names violate database naming conventions.",
      "Constraint violations: DDL statements violate database-specific constraints."
    ],
    "usage": "Provide DDL statements and database type to validate syntax, naming conventions, and compliance with database-specific rules.",
    "output_details": {
      "validation_status": {
        "type": "string",
        "description": "Overall validation result (passed/failed)"
      },
      "syntax_errors": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Syntax errors found in DDL statements"
      },
      "warnings": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Non-blocking validation warnings"
      },
      "validated_statement_count": {
        "type": "integer",
        "description": "Number of statements successfully validated"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Migration Script Builder",
    "tool_description": "Builds complete migration scripts with proper sequencing, error handling, and transaction management for database schema deployment.",
    "parameters": {
      "ddl_statements": {
        "type": "array",
        "items": {"type": "string"},
        "required": true,
        "description": "Validated DDL statements for migration"
      },
      "creation_order": {
        "type": "array",
        "items": {"type": "string"},
        "required": true,
        "description": "Ordered list of objects for creation from dependency resolver"
      },
      "database_type": {
        "type": "string",
        "required": true,
        "description": "Target database type for script generation"
      },
      "use_transactions": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Whether to wrap migration in transactions"
      },
      "include_error_handling": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Whether to include error handling and rollback logic"
      }
    },
    "error_messages": [
      "Empty DDL statements: No DDL statements provided for script building.",
      "Invalid creation order: Creation order is malformed or incomplete.",
      "Unsupported database type: Database type is not supported for script generation.",
      "Script generation failed: Unable to generate valid migration script.",
      "Order mismatch: DDL statements don't match provided creation order."
    ],
    "usage": "Provide validated DDL statements and creation order to build complete migration scripts with proper sequencing and error handling.",
    "output_details": {
      "migration_script": {
        "type": "string",
        "description": "Complete migration script ready for execution"
      },
      "script_steps": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Individual steps in the migration script"
      },
      "estimated_duration": {
        "type": "string",
        "description": "Estimated time for script execution"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Rollback Plan Generator",
    "tool_description": "Generates rollback scripts and procedures to reverse migration changes in case of failure or rollback requirements.",
    "parameters": {
      "migration_script": {
        "type": "string",
        "required": true,
        "description": "Migration script to generate rollback for"
      },
      "database_type": {
        "type": "string",
        "required": true,
        "description": "Target database type for rollback script generation"
      }
    },
    "error_messages": [
      "Empty migration script: No migration script provided for rollback generation.",
      "Unsupported database type: Database type is not supported for rollback generation.",
      "Rollback generation failed: Unable to generate valid rollback procedures.",
      "Non-reversible operations: Migration contains operations that cannot be automatically reversed."
    ],
    "usage": "Provide migration script and database type to generate comprehensive rollback procedures for migration reversal.",
    "output_details": {
      "rollback_script": {
        "type": "string",
        "description": "Complete rollback script to reverse migration"
      },
      "rollback_steps": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Individual rollback steps"
      },
      "manual_steps": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Manual steps required for complete rollback"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Schema Deployment Executor",
    "tool_description": "Executes migration scripts against target database with progress tracking, error handling, and rollback capabilities.",
    "parameters": {
      "host": {
        "type": "string",
        "required": true,
        "description": "Target database server hostname or IP address"
      },
      "port": {
        "type": "integer",
        "required": true,
        "description": "Target database server port number"
      },
      "database_name": {
        "type": "string",
        "required": true,
        "description": "Name of the target database"
      },
      "username": {
        "type": "string",
        "required": true,
        "description": "Database username for authentication"
      },
      "password": {
        "type": "string",
        "required": true,
        "description": "Database password for authentication"
      },
      "migration_script": {
        "type": "string",
        "required": true,
        "description": "Migration script to execute"
      },
      "dry_run": {
        "type": "boolean",
        "required": false,
        "default": false,
        "description": "Whether to perform a dry run without actual execution"
      },
      "continue_on_error": {
        "type": "boolean",
        "required": false,
        "default": false,
        "description": "Whether to continue execution after non-critical errors"
      },
      "rollback_on_failure": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Whether to automatically rollback on script failure"
      }
    },
    "error_messages": [
      "Connection failed: Unable to connect to target database for deployment.",
      "Permission denied: User lacks privileges to execute DDL statements.",
      "Script execution failed: Migration script failed during execution.",
      "Rollback failed: Automatic rollback encountered errors during execution.",
      "Timeout error: Script execution exceeded maximum allowed time.",
      "Transaction error: Database transaction failed or was aborted."
    ],
    "usage": "Connect to target database and execute migration script with specified options for error handling and rollback behavior.",
    "output_details": {
      "execution_status": {
        "type": "string",
        "description": "Overall execution result (success/failure/partial)"
      },
      "executed_steps": {
        "type": "integer",
        "description": "Number of script steps successfully executed"
      },
      "failed_steps": {
        "type": "integer",
        "description": "Number of script steps that failed"
      },
      "execution_time": {
        "type": "string",
        "description": "Total time taken for script execution"
      },
      "error_messages": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Error messages from failed steps"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Schema Verification Tool",
    "tool_description": "Verifies that target database schema matches expected structure after migration deployment, checking tables, columns, constraints, and indexes.",
    "parameters": {
      "host": {
        "type": "string",
        "required": true,
        "description": "Target database server hostname or IP address"
      },
      "port": {
        "type": "integer",
        "required": true,
        "description": "Target database server port number"
      },
      "database_name": {
        "type": "string",
        "required": true,
        "description": "Name of the target database"
      },
      "username": {
        "type": "string",
        "required": true,
        "description": "Database username for authentication"
      },
      "password": {
        "type": "string",
        "required": true,
        "description": "Database password for authentication"
      },
      "expected_schema": {
        "type": "string",
        "required": true,
        "description": "JSON string containing expected schema structure"
      },
      "verify_data_types": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Whether to verify column data types match expected"
      },
      "verify_constraints": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Whether to verify constraints match expected"
      }
    },
    "error_messages": [
      "Connection failed: Unable to connect to target database for verification.",
      "Permission denied: User lacks privileges to read schema information.",
      "Invalid expected schema: Expected schema data is malformed or incomplete.",
      "Schema mismatch: Target schema does not match expected structure.",
      "Verification incomplete: Unable to complete full schema verification."
    ],
    "usage": "Connect to target database and compare actual schema structure against expected schema to verify successful migration.",
    "output_details": {
      "verification_status": {
        "type": "string",
        "description": "Overall verification result (passed/failed)"
      },
      "matching_tables": {
        "type": "integer",
        "description": "Number of tables that match expected structure"
      },
      "missing_tables": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Tables missing from target schema"
      },
      "extra_tables": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Unexpected tables in target schema"
      },
      "schema_differences": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Detailed differences between expected and actual schema"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Migration Progress Tracker",
    "tool_description": "Tracks and reports progress of migration operations, maintaining execution history and providing status updates for long-running migrations.",
    "parameters": {
      "operation_type": {
        "type": "string",
        "required": true,
        "description": "Type of operation to track (schema_creation, data_migration, verification, rollback)"
      },
      "total_steps": {
        "type": "integer",
        "required": true,
        "description": "Total number of steps in the operation"
      },
      "completed_steps": {
        "type": "integer",
        "required": true,
        "description": "Number of steps completed so far"
      },
      "current_step_description": {
        "type": "string",
        "required": true,
        "description": "Description of the currently executing step"
      },
      "start_time": {
        "type": "string",
        "format": "date-time",
        "required": true,
        "description": "Start time of the operation (ISO 8601 format)"
      },
      "estimated_completion_time": {
        "type": "string",
        "format": "date-time",
        "required": false,
        "default": null,
        "description": "Estimated completion time (ISO 8601 format)"
      }
    },
    "error_messages": [
      "Invalid operation type: Operation type must be one of [schema_creation, data_migration, verification, rollback].",
      "Invalid step count: Completed steps cannot exceed total steps.",
      "Invalid time format: Start time and estimated completion time must be in ISO 8601 format.",
      "Missing required information: All required tracking parameters must be provided."
    ],
    "usage": "Provide operation details and progress information to track migration progress and generate status reports with completion estimates.",
    "output_details": {
      "progress_percentage": {
        "type": "number",
        "description": "Completion percentage (0-100)"
      },
      "elapsed_time": {
        "type": "string",
        "description": "Time elapsed since operation start"
      },
      "remaining_time": {
        "type": "string",
        "description": "Estimated remaining time for completion"
      },
      "current_status": {
        "type": "string",
        "description": "Current operation status description"
      },
      "steps_per_minute": {
        "type": "number",
        "description": "Average steps completed per minute"
      }
    }
  }
  ```
