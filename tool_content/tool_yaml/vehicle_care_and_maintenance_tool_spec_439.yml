field_name: vehicle_care_and_maintenance
subfield: preventive_maintenance_scheduling
task: Track and monitor vehicle usage patterns to predict optimal maintenance timing
tool_description: |-
  **STEP 1 — Rate task difficulty**

  This task is of **medium** difficulty. It involves collecting and analyzing diverse data streams (mileage, engine hours, driving conditions), implementing predictive algorithms, and coordinating multiple maintenance schedules across different vehicle components. The complexity comes from handling real-time monitoring, statistical analysis for pattern recognition, and the coordination between multiple maintenance cycles with varying dependencies.

  **STEP 2 — Set a tool budget**

  Given the medium difficulty, I'll target **12 tools** to cover the comprehensive workflow from data collection through predictive analysis to maintenance scheduling and alerts.

  **STEP 3 — List all tool names and dependencies**

  Tool dependencies and affordances:
  - **Vehicle Data Collector** → produces usage metrics → consumed by **Usage Pattern Analyzer**
  - **Usage Pattern Analyzer** → produces patterns → consumed by **Maintenance Predictor**
  - **Maintenance Schedule Creator** → produces schedules → consumed by **Schedule Optimizer**
  - **Condition Threshold Monitor** → produces alerts → consumed by **Alert Manager**
  - **Historical Data Processor** → produces trends → consumed by **Maintenance Predictor**
  - **Cost Calculator** → produces cost estimates → consumed by **Schedule Optimizer**
  - **Fleet Comparator** → produces benchmarks → consumed by **Performance Reporter**
  - **Maintenance Window Finder** → produces time slots → consumed by **Schedule Optimizer**
  - **Component Tracker** → produces component status → consumed by **Maintenance Predictor**
  - **Alert Manager** → produces notifications → consumed by external systems
  - **Performance Reporter** → produces reports → consumed by management systems
  - **Schedule Optimizer** → produces optimized schedules → final output

  **STEP 4 — Multi-tool plans**

  **Simple plans:**
  1. **Basic monitoring**: Vehicle Data Collector → Condition Threshold Monitor → Alert Manager (tracks basic metrics and sends alerts)
  2. **Component tracking**: Component Tracker → Maintenance Schedule Creator → Alert Manager (monitors individual components and schedules)

  **Medium plans:**
  1. **Pattern-based prediction**: Vehicle Data Collector → Usage Pattern Analyzer → Maintenance Predictor → Schedule Optimizer (analyzes patterns to optimize maintenance timing)
  2. **Cost-optimized scheduling**: Maintenance Schedule Creator → Cost Calculator → Maintenance Window Finder → Schedule Optimizer (creates cost-effective maintenance schedules)

  **Complex plans:**
  1. **Full predictive maintenance**: Vehicle Data Collector → Historical Data Processor → Usage Pattern Analyzer → Component Tracker → Maintenance Predictor → Cost Calculator → Maintenance Window Finder → Schedule Optimizer → Alert Manager (comprehensive predictive maintenance workflow)
  2. **Fleet performance optimization**: Vehicle Data Collector → Usage Pattern Analyzer → Fleet Comparator → Component Tracker → Maintenance Predictor → Schedule Optimizer → Performance Reporter → Alert Manager (fleet-wide optimization and reporting)

  **STEP 5 — Produce tools**

  ```json
  {
    "tool_name": "Vehicle Data Collector",
    "tool_description": "Collects real-time vehicle usage data including mileage, engine hours, fuel consumption, and driving conditions for maintenance analysis.",
    "parameters": {
      "vehicle_id": {
        "type": "string",
        "required": true,
        "description": "Unique identifier for the vehicle"
      },
      "data_sources": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "required": true,
        "description": "List of data sources to collect from (odometer, engine_hours, fuel_consumption, gps, obd2, telematics)"
      },
      "collection_interval": {
        "type": "integer",
        "required": false,
        "default": 3600,
        "description": "Data collection interval in seconds (300-86400)"
      },
      "start_date": {
        "type": "string",
        "format": "date-time",
        "required": true,
        "description": "Start date for data collection"
      },
      "end_date": {
        "type": "string",
        "format": "date-time",
        "required": true,
        "description": "End date for data collection"
      }
    },
    "error_messages": [
      "Invalid vehicle_id: Vehicle ID must be a non-empty string and exist in the system.",
      "Invalid data_sources: Use valid sources [odometer, engine_hours, fuel_consumption, gps, obd2, telematics].",
      "Invalid collection_interval: Interval must be between 300 and 86400 seconds.",
      "Invalid date range: start_date must be before end_date and both must be valid ISO 8601 timestamps.",
      "Data source unavailable: One or more specified data sources are not available for this vehicle."
    ],
    "usage": "Specify vehicle_id, data_sources array, and date range. Optionally set collection_interval for custom sampling frequency. Returns collected usage data for the specified period.",
    "output_details": {
      "vehicle_id": {
        "type": "string",
        "description": "The vehicle identifier"
      },
      "collection_period": {
        "type": "string",
        "description": "Date range of collected data"
      },
      "data_points": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Array of timestamped data entries"
      },
      "total_mileage": {
        "type": "number",
        "description": "Total mileage during collection period"
      },
      "total_engine_hours": {
        "type": "number",
        "description": "Total engine hours during collection period"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Usage Pattern Analyzer",
    "tool_description": "Analyzes vehicle usage data to identify patterns in driving behavior, usage intensity, and operational conditions that affect maintenance needs.",
    "parameters": {
      "usage_data": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "required": true,
        "description": "Array of usage data entries from Vehicle Data Collector"
      },
      "analysis_type": {
        "type": "string",
        "required": true,
        "description": "Type of analysis to perform (seasonal, daily, usage_intensity, driving_conditions)"
      },
      "pattern_threshold": {
        "type": "number",
        "required": false,
        "default": 0.75,
        "description": "Confidence threshold for pattern detection (0.5-1.0)"
      }
    },
    "error_messages": [
      "Insufficient data: Need at least 7 days of usage data for meaningful pattern analysis.",
      "Invalid analysis_type: Use one of [seasonal, daily, usage_intensity, driving_conditions].",
      "Invalid pattern_threshold: Threshold must be between 0.5 and 1.0.",
      "Data format error: Usage data must be properly formatted timestamp-value pairs."
    ],
    "usage": "Provide usage_data array and specify analysis_type. Optionally adjust pattern_threshold for sensitivity. Returns identified usage patterns and their statistical significance.",
    "output_details": {
      "patterns_found": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of identified usage patterns"
      },
      "pattern_confidence": {
        "type": "array",
        "items": {
          "type": "number"
        },
        "description": "Confidence scores for each identified pattern"
      },
      "usage_intensity": {
        "type": "string",
        "description": "Overall usage intensity classification (light, moderate, heavy)"
      },
      "seasonal_variations": {
        "type": "boolean",
        "description": "Whether seasonal usage variations were detected"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Maintenance Predictor",
    "tool_description": "Predicts optimal maintenance timing based on usage patterns, component wear rates, and historical maintenance data using machine learning algorithms.",
    "parameters": {
      "vehicle_id": {
        "type": "string",
        "required": true,
        "description": "Vehicle identifier for prediction"
      },
      "usage_patterns": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "required": true,
        "description": "Usage patterns from pattern analyzer"
      },
      "component_status": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "required": true,
        "description": "Current status of vehicle components"
      },
      "historical_data": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "required": true,
        "description": "Historical maintenance records"
      },
      "prediction_horizon": {
        "type": "integer",
        "required": false,
        "default": 90,
        "description": "Prediction horizon in days (30-365)"
      },
      "prediction_model": {
        "type": "string",
        "required": false,
        "default": "ensemble",
        "description": "Prediction model type (linear, ensemble, neural_network)"
      },
      "confidence_level": {
        "type": "number",
        "required": false,
        "default": 0.8,
        "description": "Minimum confidence level for predictions (0.6-0.95)"
      }
    },
    "error_messages": [
      "Insufficient historical data: Need at least 6 months of maintenance history for accurate predictions.",
      "Invalid prediction_horizon: Horizon must be between 30 and 365 days.",
      "Invalid prediction_model: Use one of [linear, ensemble, neural_network].",
      "Invalid confidence_level: Confidence level must be between 0.6 and 0.95.",
      "Component data mismatch: Component status data doesn't match vehicle configuration."
    ],
    "usage": "Provide vehicle_id, usage_patterns, component_status, and historical_data arrays. Optionally specify prediction_horizon, model type, and confidence_level. Returns maintenance predictions with timing and confidence scores.",
    "output_details": {
      "predictions": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Array of maintenance predictions with timing"
      },
      "confidence_scores": {
        "type": "array",
        "items": {
          "type": "number"
        },
        "description": "Confidence scores for each prediction"
      },
      "next_service_date": {
        "type": "string",
        "format": "date-time",
        "description": "Predicted date for next service"
      },
      "critical_components": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Components requiring immediate attention"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Component Tracker",
    "tool_description": "Tracks individual vehicle component conditions, wear levels, and remaining useful life based on usage data and manufacturer specifications.",
    "parameters": {
      "vehicle_id": {
        "type": "string",
        "required": true,
        "description": "Vehicle identifier"
      },
      "components_list": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "required": true,
        "description": "List of components to track (engine, transmission, brakes, tires, battery, filters)"
      },
      "usage_data": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "required": true,
        "description": "Current usage data from data collector"
      },
      "manufacturer_specs": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "required": true,
        "description": "Manufacturer maintenance specifications"
      },
      "wear_calculation_method": {
        "type": "string",
        "required": false,
        "default": "usage_based",
        "description": "Method for calculating wear (time_based, usage_based, condition_based)"
      }
    },
    "error_messages": [
      "Invalid components_list: Use valid component names [engine, transmission, brakes, tires, battery, filters, oil, coolant].",
      "Missing manufacturer_specs: Manufacturer specifications required for accurate tracking.",
      "Invalid wear_calculation_method: Use one of [time_based, usage_based, condition_based].",
      "Data inconsistency: Usage data doesn't align with component specifications.",
      "Vehicle configuration error: Components list doesn't match vehicle configuration."
    ],
    "usage": "Provide vehicle_id, components_list, usage_data, and manufacturer_specs. Optionally specify wear_calculation_method. Returns current component status and remaining useful life estimates.",
    "output_details": {
      "component_status": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Current status of each tracked component"
      },
      "wear_levels": {
        "type": "array",
        "items": {
          "type": "number"
        },
        "description": "Wear percentage for each component (0-100)"
      },
      "remaining_life": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Estimated remaining useful life for each component"
      },
      "replacement_priority": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Priority ranking for component replacements"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Schedule Optimizer",
    "tool_description": "Optimizes maintenance schedules by considering multiple factors including cost, availability, component dependencies, and operational requirements.",
    "parameters": {
      "maintenance_tasks": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "required": true,
        "description": "List of maintenance tasks to schedule"
      },
      "predicted_dates": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "required": true,
        "description": "Predicted optimal dates for each task"
      },
      "cost_estimates": {
        "type": "array",
        "items": {
          "type": "number"
        },
        "required": true,
        "description": "Cost estimates for each maintenance task"
      },
      "available_windows": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "required": true,
        "description": "Available maintenance time windows"
      },
      "optimization_criteria": {
        "type": "string",
        "required": false,
        "default": "balanced",
        "description": "Optimization criteria (cost_minimization, time_efficiency, balanced)"
      },
      "max_delay_days": {
        "type": "integer",
        "required": false,
        "default": 14,
        "description": "Maximum allowable delay from predicted date (1-60 days)"
      },
      "grouping_enabled": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Whether to group compatible maintenance tasks"
      }
    },
    "error_messages": [
      "Task count mismatch: Number of tasks, dates, and costs must be equal.",
      "Invalid optimization_criteria: Use one of [cost_minimization, time_efficiency, balanced].",
      "Invalid max_delay_days: Delay must be between 1 and 60 days.",
      "No available windows: At least one maintenance window must be provided.",
      "Scheduling conflict: Cannot fit all tasks within available windows and delay constraints."
    ],
    "usage": "Provide arrays of maintenance_tasks, predicted_dates, cost_estimates, and available_windows. Optionally specify optimization_criteria, max_delay_days, and grouping_enabled. Returns optimized maintenance schedule.",
    "output_details": {
      "optimized_schedule": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Optimized maintenance schedule with dates and tasks"
      },
      "total_cost": {
        "type": "number",
        "description": "Total estimated cost of scheduled maintenance"
      },
      "schedule_efficiency": {
        "type": "number",
        "description": "Efficiency score of the optimized schedule (0-100)"
      },
      "grouped_tasks": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Tasks that were grouped together for efficiency"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Alert Manager",
    "tool_description": "Manages maintenance alerts and notifications based on thresholds, urgency levels, and stakeholder preferences for timely maintenance communication.",
    "parameters": {
      "alert_triggers": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "required": true,
        "description": "Conditions that trigger alerts"
      },
      "urgency_level": {
        "type": "string",
        "required": true,
        "description": "Alert urgency level (low, medium, high, critical)"
      },
      "notification_channels": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "required": true,
        "description": "Notification channels (email, sms, dashboard, mobile_app)"
      },
      "recipients": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "required": true,
        "description": "List of notification recipients"
      },
      "escalation_enabled": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Whether to enable alert escalation"
      },
      "escalation_delay": {
        "type": "integer",
        "required": false,
        "default": 24,
        "description": "Hours before escalating unacknowledged alerts (1-168)"
      }
    },
    "error_messages": [
      "Invalid urgency_level: Use one of [low, medium, high, critical].",
      "Invalid notification_channels: Use valid channels [email, sms, dashboard, mobile_app].",
      "Empty recipients list: At least one recipient must be specified.",
      "Invalid escalation_delay: Delay must be between 1 and 168 hours.",
      "Channel configuration error: Selected notification channels are not properly configured."
    ],
    "usage": "Specify alert_triggers, urgency_level, notification_channels, and recipients. Optionally configure escalation_enabled and escalation_delay. Returns alert configuration and delivery status.",
    "output_details": {
      "alert_id": {
        "type": "string",
        "description": "Unique identifier for the created alert"
      },
      "delivery_status": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Status of alert delivery to each channel"
      },
      "acknowledgment_required": {
        "type": "boolean",
        "description": "Whether alert requires acknowledgment"
      },
      "escalation_scheduled": {
        "type": "boolean",
        "description": "Whether escalation is scheduled for this alert"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Historical Data Processor",
    "tool_description": "Processes and analyzes historical maintenance data to identify trends, failure patterns, and improvement opportunities for predictive maintenance.",
    "parameters": {
      "historical_records": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "required": true,
        "description": "Historical maintenance records to process"
      },
      "analysis_period": {
        "type": "string",
        "required": true,
        "description": "Time period for analysis (6months, 1year, 2years, 5years)"
      },
      "trend_analysis": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Whether to perform trend analysis"
      },
      "failure_pattern_detection": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Whether to detect failure patterns"
      }
    },
    "error_messages": [
      "Insufficient historical data: Need at least 6 months of maintenance records for analysis.",
      "Invalid analysis_period: Use one of [6months, 1year, 2years, 5years].",
      "Data format error: Historical records must be in proper maintenance record format.",
      "Analysis timeout: Dataset too large for selected analysis period, try shorter period."
    ],
    "usage": "Provide historical_records array and specify analysis_period. Optionally enable/disable trend_analysis and failure_pattern_detection. Returns processed historical insights and trends.",
    "output_details": {
      "maintenance_trends": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Identified maintenance trends over the analysis period"
      },
      "failure_patterns": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Common failure patterns detected"
      },
      "cost_trends": {
        "type": "array",
        "items": {
          "type": "number"
        },
        "description": "Maintenance cost trends over time"
      },
      "seasonal_effects": {
        "type": "boolean",
        "description": "Whether seasonal effects were detected in maintenance patterns"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Cost Calculator",
    "tool_description": "Calculates maintenance costs including parts, labor, downtime, and indirect costs to support cost-effective maintenance planning and budgeting.",
    "parameters": {
      "maintenance_tasks": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "required": true,
        "description": "List of maintenance tasks for cost calculation"
      },
      "parts_costs": {
        "type": "array",
        "items": {
          "type": "number"
        },
        "required": true,
        "description": "Cost of parts for each maintenance task"
      },
      "labor_hours": {
        "type": "array",
        "items": {
          "type": "number"
        },
        "required": true,
        "description": "Labor hours required for each task"
      },
      "hourly_rate": {
        "type": "number",
        "required": true,
        "description": "Labor hourly rate"
      },
      "include_downtime": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Whether to include downtime costs"
      },
      "downtime_cost_per_hour": {
        "type": "number",
        "required": false,
        "default": 0,
        "description": "Cost per hour of vehicle downtime"
      },
      "markup_percentage": {
        "type": "number",
        "required": false,
        "default": 0,
        "description": "Markup percentage for indirect costs (0-50)"
      }
    },
    "error_messages": [
      "Array length mismatch: maintenance_tasks, parts_costs, and labor_hours arrays must have equal length.",
      "Invalid hourly_rate: Labor hourly rate must be greater than 0.",
      "Invalid downtime_cost_per_hour: Downtime cost must be 0 or greater.",
      "Invalid markup_percentage: Markup must be between 0 and 50 percent.",
      "Negative costs detected: Parts costs and labor hours cannot be negative."
    ],
    "usage": "Provide maintenance_tasks, parts_costs, labor_hours arrays and hourly_rate. Optionally include downtime costs and markup percentage. Returns detailed cost breakdown for each task.",
    "output_details": {
      "task_costs": {
        "type": "array",
        "items": {
          "type": "number"
        },
        "description": "Total cost for each maintenance task"
      },
      "total_parts_cost": {
        "type": "number",
        "description": "Total cost of all parts"
      },
      "total_labor_cost": {
        "type": "number",
        "description": "Total labor cost"
      },
      "total_downtime_cost": {
        "type": "number",
        "description": "Total downtime cost"
      },
      "grand_total": {
        "type": "number",
        "description": "Grand total of all maintenance costs"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Fleet Comparator",
    "tool_description": "Compares vehicle maintenance performance across fleet to identify best practices, outliers, and optimization opportunities for similar vehicles.",
    "parameters": {
      "target_vehicle_id": {
        "type": "string",
        "required": true,
        "description": "Vehicle ID to compare against fleet"
      },
      "fleet_data": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "required": true,
        "description": "Fleet maintenance performance data"
      },
      "comparison_metrics": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "required": true,
        "description": "Metrics to compare (cost_per_mile, downtime_hours, failure_rate, fuel_efficiency)"
      },
      "similar_vehicles_only": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Whether to compare only with similar vehicle types"
      }
    },
    "error_messages": [
      "Vehicle not found: target_vehicle_id does not exist in fleet data.",
      "Insufficient fleet data: Need at least 5 vehicles for meaningful comparison.",
      "Invalid comparison_metrics: Use valid metrics [cost_per_mile, downtime_hours, failure_rate, fuel_efficiency, maintenance_frequency].",
      "No similar vehicles: No similar vehicles found in fleet for comparison when similar_vehicles_only is enabled."
    ],
    "usage": "Provide target_vehicle_id, fleet_data array, and comparison_metrics. Optionally set similar_vehicles_only to limit comparison scope. Returns performance comparison and benchmarks.",
    "output_details": {
      "vehicle_ranking": {
        "type": "integer",
        "description": "Ranking of target vehicle within fleet (1 = best)"
      },
      "percentile_score": {
        "type": "number",
        "description": "Percentile score compared to fleet (0-100)"
      },
      "best_performers": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Top performing vehicles in the fleet"
      },
      "improvement_opportunities": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Areas where target vehicle can improve"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Condition Threshold Monitor",
    "tool_description": "Monitors vehicle conditions against predefined thresholds to trigger early warning alerts before component failures or maintenance due dates.",
    "parameters": {
      "vehicle_id": {
        "type": "string",
        "required": true,
        "description": "Vehicle identifier to monitor"
      },
      "monitoring_parameters": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "required": true,
        "description": "Parameters to monitor (oil_life, brake_wear, tire_pressure, battery_voltage, coolant_temp)"
      },
      "threshold_values": {
        "type": "array",
        "items": {
          "type": "number"
        },
        "required": true,
        "description": "Threshold values for each monitoring parameter"
      },
      "monitoring_frequency": {
        "type": "integer",
        "required": false,
        "default": 3600,
        "description": "Monitoring frequency in seconds (300-86400)"
      },
      "alert_sensitivity": {
        "type": "string",
        "required": false,
        "default": "medium",
        "description": "Alert sensitivity level (low, medium, high)"
      }
    },
    "error_messages": [
      "Array length mismatch: monitoring_parameters and threshold_values must have equal length.",
      "Invalid monitoring_parameters: Use valid parameters [oil_life, brake_wear, tire_pressure, battery_voltage, coolant_temp, engine_temp, transmission_temp].",
      "Invalid threshold values: Threshold values must be positive numbers within valid ranges for each parameter.",
      "Invalid monitoring_frequency: Frequency must be between 300 and 86400 seconds.",
      "Invalid alert_sensitivity: Use one of [low, medium, high]."
    ],
    "usage": "Specify vehicle_id, monitoring_parameters, and corresponding threshold_values. Optionally set monitoring_frequency and alert_sensitivity. Returns threshold monitoring status and any alerts.",
    "output_details": {
      "monitoring_status": {
        "type": "string",
        "description": "Overall monitoring status (active, inactive, error)"
      },
      "threshold_breaches": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of parameters that have breached thresholds"
      },
      "current_values": {
        "type": "array",
        "items": {
          "type": "number"
        },
        "description": "Current values of monitored parameters"
      },
      "alerts_generated": {
        "type": "integer",
        "description": "Number of alerts generated in current monitoring session"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Performance Reporter",
    "tool_description": "Generates comprehensive maintenance performance reports with KPIs, trends, and recommendations for management and stakeholder review.",
    "parameters": {
      "report_type": {
        "type": "string",
        "required": true,
        "description": "Type of report to generate (summary, detailed, executive, compliance)"
      },
      "reporting_period": {
        "type": "string",
        "required": true,
        "description": "Reporting time period (weekly, monthly, quarterly, yearly)"
      },
      "vehicle_ids": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "required": true,
        "description": "List of vehicle IDs to include in report"
      },
      "performance_data": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "required": true,
        "description": "Performance data for report generation"
      },
      "include_recommendations": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Whether to include improvement recommendations"
      },
      "cost_analysis": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Whether to include cost analysis in report"
      },
      "benchmark_comparison": {
        "type": "boolean",
        "required": false,
        "default": false,
        "description": "Whether to include industry benchmark comparison"
      }
    },
    "error_messages": [
      "Invalid report_type: Use one of [summary, detailed, executive,
