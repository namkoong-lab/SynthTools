field_name: ecommerce_and_retail
subfield: Customer Account Management
task: Account security monitoring and fraud detection
tool_description: |-
  **STEP 1 — Rate task difficulty**

  This task is **hard**. Account security monitoring and fraud detection involves analyzing complex behavioral patterns, real-time transaction monitoring, multi-layered risk assessment, coordinating between multiple data sources, and has high impact where errors could result in financial losses or compromised customer accounts.

  **STEP 2 — Set a tool budget**

  Given the hard difficulty rating, I'm targeting **17 tools** to cover the comprehensive workflow from data collection to fraud response.

  **STEP 3 — List all tool names with dependencies and affordances**

  1. **Account Activity Monitor** - Consumes: account data → Produces: activity logs
  2. **Transaction Pattern Analyzer** - Consumes: transaction data → Produces: pattern analysis
  3. **Device Fingerprint Tracker** - Consumes: device metadata → Produces: device profiles
  4. **Geolocation Validator** - Consumes: IP/location data → Produces: location risk scores
  5. **Behavioral Baseline Creator** - Consumes: historical user data → Produces: baseline profiles
  6. **Anomaly Detection Engine** - Consumes: current activity + baselines → Produces: anomaly scores
  7. **Risk Score Calculator** - Consumes: multiple risk factors → Produces: consolidated risk scores
  8. **Fraud Rule Engine** - Consumes: account data + rules → Produces: rule violation flags
  9. **ML Fraud Classifier** - Consumes: feature vectors → Produces: fraud probability scores
  10. **Identity Verification Checker** - Consumes: identity data → Produces: verification status
  11. **Account Lockout Manager** - Consumes: security decisions → Produces: account status updates
  12. **Alert Generator** - Consumes: risk scores + thresholds → Produces: security alerts
  13. **Investigation Case Creator** - Consumes: fraud indicators → Produces: case records
  14. **Fraud Pattern Learner** - Consumes: confirmed fraud cases → Produces: updated models
  15. **Security Event Logger** - Consumes: security events → Produces: audit logs
  16. **Customer Communication Manager** - Consumes: security actions → Produces: customer notifications
  17. **Compliance Reporter** - Consumes: security metrics → Produces: compliance reports

  **STEP 4 — Multi-tool plans**

  **Simple plans:**
  1. Basic login monitoring: Account Activity Monitor → Geolocation Validator → Alert Generator
  2. Device tracking: Device Fingerprint Tracker → Risk Score Calculator → Security Event Logger

  **Medium plans:**
  1. Transaction fraud detection: Transaction Pattern Analyzer → Anomaly Detection Engine → ML Fraud Classifier → Alert Generator → Investigation Case Creator
  2. Account compromise response: Identity Verification Checker → Risk Score Calculator → Account Lockout Manager → Customer Communication Manager → Security Event Logger

  **Complex plans:**
  1. Comprehensive fraud detection: Account Activity Monitor → Behavioral Baseline Creator → Transaction Pattern Analyzer → Device Fingerprint Tracker → Geolocation Validator → Anomaly Detection Engine → Fraud Rule Engine → ML Fraud Classifier → Risk Score Calculator → Alert Generator → Investigation Case Creator → Fraud Pattern Learner
  2. End-to-end security incident response: Multiple detection tools → Risk Score Calculator → Account Lockout Manager → Customer Communication Manager → Investigation Case Creator → Security Event Logger → Compliance Reporter → Fraud Pattern Learner

  **STEP 5 — Produce tools**

  ```json
  {
    "tool_name": "Account Activity Monitor",
    "tool_description": "Monitors and analyzes account activity patterns including login attempts, session duration, and user actions to identify suspicious behavior.",
    "parameters": {
      "account_id": {
        "type": "string",
        "required": true,
        "description": "Unique identifier for the customer account"
      },
      "monitoring_duration_hours": {
        "type": "integer",
        "required": false,
        "default": 24,
        "description": "Number of hours to monitor activity (1-168)"
      },
      "include_failed_attempts": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Whether to include failed login attempts in monitoring"
      }
    },
    "error_messages": [
      "Invalid account_id: Account ID must be a non-empty string and exist in the system.",
      "Invalid monitoring_duration_hours: Duration must be between 1 and 168 hours.",
      "Account access denied: Insufficient permissions to monitor this account."
    ],
    "usage": "Provide account_id and optionally set monitoring_duration_hours and include_failed_attempts. Monitor continuously for the specified duration to capture activity patterns.",
    "output_details": {
      "account_id": {
        "type": "string",
        "description": "The monitored account identifier"
      },
      "total_login_attempts": {
        "type": "integer",
        "description": "Total number of login attempts during monitoring period"
      },
      "failed_login_attempts": {
        "type": "integer",
        "description": "Number of failed login attempts"
      },
      "unique_devices": {
        "type": "integer",
        "description": "Number of unique devices used"
      },
      "activity_timestamps": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Array of timestamp strings when activities occurred"
      },
      "suspicious_patterns": {
        "type": "array",
        "items": {"type": "string"},
        "description": "List of identified suspicious activity patterns"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Transaction Pattern Analyzer",
    "tool_description": "Analyzes transaction patterns to identify unusual spending behavior, velocity anomalies, and potentially fraudulent transactions.",
    "parameters": {
      "account_id": {
        "type": "string",
        "required": true,
        "description": "Account identifier for transaction analysis"
      },
      "lookback_days": {
        "type": "integer",
        "required": false,
        "default": 30,
        "description": "Number of days to analyze historical transactions (1-365)"
      },
      "transaction_types": {
        "type": "array",
        "items": {"type": "string"},
        "required": false,
        "default": ["purchase", "refund", "transfer"],
        "description": "Types of transactions to analyze"
      },
      "amount_threshold": {
        "type": "number",
        "required": false,
        "default": 1000.0,
        "description": "Transaction amount threshold for flagging (minimum 0.01)"
      },
      "velocity_window_hours": {
        "type": "integer",
        "required": false,
        "default": 24,
        "description": "Time window in hours for velocity analysis (1-168)"
      }
    },
    "error_messages": [
      "Invalid account_id: Account must exist and be accessible for analysis.",
      "Invalid lookback_days: Must be between 1 and 365 days.",
      "Invalid transaction_types: Must be non-empty array of valid transaction type strings.",
      "Invalid amount_threshold: Must be a positive number >= 0.01.",
      "Invalid velocity_window_hours: Must be between 1 and 168 hours.",
      "Insufficient transaction data: Account must have at least one transaction in the specified period."
    ],
    "usage": "Specify account_id and configure analysis parameters. The tool examines transaction patterns over the lookback period to identify anomalies and suspicious behavior.",
    "output_details": {
      "account_id": {
        "type": "string",
        "description": "The analyzed account identifier"
      },
      "total_transactions": {
        "type": "integer",
        "description": "Total number of transactions analyzed"
      },
      "average_transaction_amount": {
        "type": "number",
        "description": "Average transaction amount in the period"
      },
      "velocity_score": {
        "type": "number",
        "description": "Transaction velocity anomaly score (0-100)"
      },
      "pattern_anomalies": {
        "type": "array",
        "items": {"type": "string"},
        "description": "List of detected pattern anomalies"
      },
      "high_risk_transactions": {
        "type": "array",
        "items": {"type": "string"},
        "description": "List of transaction IDs flagged as high risk"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Device Fingerprint Tracker",
    "tool_description": "Creates and tracks device fingerprints to identify known and unknown devices accessing customer accounts.",
    "parameters": {
      "account_id": {
        "type": "string",
        "required": true,
        "description": "Account identifier for device tracking"
      },
      "device_metadata": {
        "type": "array",
        "items": {"type": "string"},
        "required": true,
        "description": "Array of device metadata strings (user agent, screen resolution, etc.)"
      },
      "ip_address": {
        "type": "string",
        "required": true,
        "description": "IP address of the device"
      },
      "session_id": {
        "type": "string",
        "required": true,
        "description": "Current session identifier"
      },
      "create_new_fingerprint": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Whether to create a new fingerprint for unknown devices"
      }
    },
    "error_messages": [
      "Invalid account_id: Account must exist in the system.",
      "Invalid device_metadata: Must be non-empty array of metadata strings.",
      "Invalid ip_address: Must be a valid IPv4 or IPv6 address format.",
      "Invalid session_id: Session ID must be a non-empty string.",
      "Device fingerprinting failed: Unable to generate stable fingerprint from provided metadata."
    ],
    "usage": "Provide account_id, device_metadata array, ip_address, and session_id. The tool will match against known devices or create new fingerprints as configured.",
    "output_details": {
      "device_fingerprint_id": {
        "type": "string",
        "description": "Unique identifier for the device fingerprint"
      },
      "is_known_device": {
        "type": "boolean",
        "description": "Whether this device has been seen before for this account"
      },
      "device_risk_score": {
        "type": "number",
        "description": "Risk score for the device (0-100)"
      },
      "first_seen_date": {
        "type": "string",
        "description": "First time this device was seen (ISO 8601 format)"
      },
      "last_seen_date": {
        "type": "string",
        "description": "Last time this device was seen (ISO 8601 format)"
      },
      "device_reputation": {
        "type": "string",
        "description": "Device reputation status (trusted, suspicious, blocked)"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Geolocation Validator",
    "tool_description": "Validates user location against expected patterns and identifies impossible travel scenarios and high-risk locations.",
    "parameters": {
      "account_id": {
        "type": "string",
        "required": true,
        "description": "Account identifier for location validation"
      },
      "current_ip": {
        "type": "string",
        "required": true,
        "description": "Current IP address for geolocation lookup"
      },
      "timestamp": {
        "type": "string",
        "required": true,
        "description": "Current access timestamp in ISO 8601 format"
      }
    },
    "error_messages": [
      "Invalid account_id: Account must exist in the system.",
      "Invalid current_ip: Must be a valid IPv4 or IPv6 address.",
      "Invalid timestamp: Must be valid ISO 8601 format.",
      "Geolocation service unavailable: Unable to resolve IP address to location.",
      "Historical location data insufficient: Need previous location data for comparison."
    ],
    "usage": "Provide account_id, current_ip, and timestamp. The tool compares current location with historical patterns to identify suspicious access attempts.",
    "output_details": {
      "current_country": {
        "type": "string",
        "description": "Current access country"
      },
      "current_city": {
        "type": "string",
        "description": "Current access city"
      },
      "location_risk_score": {
        "type": "number",
        "description": "Location-based risk score (0-100)"
      },
      "is_impossible_travel": {
        "type": "boolean",
        "description": "Whether this represents impossible travel from last location"
      },
      "travel_distance_km": {
        "type": "number",
        "description": "Distance in kilometers from last known location"
      },
      "is_high_risk_location": {
        "type": "boolean",
        "description": "Whether current location is considered high risk"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Behavioral Baseline Creator",
    "tool_description": "Creates behavioral baselines for user accounts by analyzing historical patterns of activity, transactions, and access behaviors.",
    "parameters": {
      "account_id": {
        "type": "string",
        "required": true,
        "description": "Account identifier for baseline creation"
      },
      "analysis_period_days": {
        "type": "integer",
        "required": false,
        "default": 90,
        "description": "Number of days of historical data to analyze (30-365)"
      },
      "include_weekday_patterns": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Whether to include day-of-week patterns in baseline"
      },
      "include_time_patterns": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Whether to include time-of-day patterns in baseline"
      },
      "include_transaction_patterns": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Whether to include transaction patterns in baseline"
      },
      "include_device_patterns": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Whether to include device usage patterns in baseline"
      },
      "include_location_patterns": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Whether to include location patterns in baseline"
      },
      "minimum_data_points": {
        "type": "integer",
        "required": false,
        "default": 20,
        "description": "Minimum number of data points required for reliable baseline (5-100)"
      },
      "confidence_threshold": {
        "type": "number",
        "required": false,
        "default": 0.8,
        "description": "Confidence threshold for pattern reliability (0.5-1.0)"
      },
      "update_existing": {
        "type": "boolean",
        "required": false,
        "default": false,
        "description": "Whether to update existing baseline or create new one"
      }
    },
    "error_messages": [
      "Invalid account_id: Account must exist and have sufficient historical data.",
      "Invalid analysis_period_days: Must be between 30 and 365 days.",
      "Invalid minimum_data_points: Must be between 5 and 100.",
      "Invalid confidence_threshold: Must be between 0.5 and 1.0.",
      "Insufficient historical data: Account must have minimum required data points for reliable baseline creation.",
      "Baseline creation failed: Unable to establish reliable patterns from available data."
    ],
    "usage": "Provide account_id and configure analysis parameters. The tool analyzes historical account behavior to create a comprehensive behavioral baseline for anomaly detection.",
    "output_details": {
      "baseline_id": {
        "type": "string",
        "description": "Unique identifier for the created baseline"
      },
      "creation_timestamp": {
        "type": "string",
        "description": "When the baseline was created (ISO 8601 format)"
      },
      "data_points_analyzed": {
        "type": "integer",
        "description": "Number of historical data points used"
      },
      "baseline_confidence": {
        "type": "number",
        "description": "Overall confidence score for the baseline (0-1)"
      },
      "typical_login_hours": {
        "type": "array",
        "items": {"type": "integer"},
        "description": "Array of typical login hours (0-23)"
      },
      "typical_transaction_amount_range": {
        "type": "array",
        "items": {"type": "number"},
        "description": "Array with min and max typical transaction amounts"
      },
      "baseline_summary": {
        "type": "string",
        "description": "Summary of key behavioral patterns identified"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Anomaly Detection Engine",
    "tool_description": "Detects anomalies in current user behavior by comparing against established behavioral baselines using statistical and machine learning methods.",
    "parameters": {
      "account_id": {
        "type": "string",
        "required": true,
        "description": "Account identifier for anomaly detection"
      },
      "baseline_id": {
        "type": "string",
        "required": true,
        "description": "Baseline identifier to compare against"
      },
      "current_activity_data": {
        "type": "array",
        "items": {"type": "string"},
        "required": true,
        "description": "Current activity data points for comparison"
      },
      "detection_sensitivity": {
        "type": "string",
        "required": false,
        "default": "medium",
        "description": "Detection sensitivity level (low, medium, high)"
      },
      "anomaly_threshold": {
        "type": "number",
        "required": false,
        "default": 0.7,
        "description": "Threshold for flagging anomalies (0.1-1.0)"
      }
    },
    "error_messages": [
      "Invalid account_id: Account must exist in the system.",
      "Invalid baseline_id: Baseline must exist and be associated with the account.",
      "Invalid current_activity_data: Must be non-empty array of activity data strings.",
      "Invalid detection_sensitivity: Must be one of [low, medium, high].",
      "Invalid anomaly_threshold: Must be between 0.1 and 1.0.",
      "Baseline comparison failed: Unable to compare current activity against baseline patterns."
    ],
    "usage": "Provide account_id, baseline_id, and current_activity_data array. Configure detection sensitivity and threshold to identify behavioral anomalies.",
    "output_details": {
      "anomaly_score": {
        "type": "number",
        "description": "Overall anomaly score (0-1, higher indicates more anomalous)"
      },
      "is_anomalous": {
        "type": "boolean",
        "description": "Whether the activity exceeds the anomaly threshold"
      },
      "anomaly_categories": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Categories of anomalies detected (time, location, transaction, device)"
      },
      "anomaly_details": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Detailed descriptions of specific anomalies found"
      },
      "confidence_score": {
        "type": "number",
        "description": "Confidence in the anomaly detection (0-1)"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Risk Score Calculator",
    "tool_description": "Calculates consolidated risk scores by combining multiple risk factors from various security analysis tools.",
    "parameters": {
      "account_id": {
        "type": "string",
        "required": true,
        "description": "Account identifier for risk calculation"
      },
      "risk_factors": {
        "type": "array",
        "items": {"type": "number"},
        "required": true,
        "description": "Array of individual risk factor scores (0-100)"
      },
      "risk_factor_weights": {
        "type": "array",
        "items": {"type": "number"},
        "required": false,
        "default": [1.0],
        "description": "Weights for each risk factor (must match risk_factors length)"
      },
      "risk_categories": {
        "type": "array",
        "items": {"type": "string"},
        "required": true,
        "description": "Category names corresponding to each risk factor"
      }
    },
    "error_messages": [
      "Invalid account_id: Account must exist in the system.",
      "Invalid risk_factors: Must be non-empty array of numbers between 0 and 100.",
      "Invalid risk_factor_weights: Must be array of positive numbers matching risk_factors length.",
      "Invalid risk_categories: Must be non-empty array matching risk_factors length.",
      "Risk calculation error: Unable to compute consolidated risk score from provided factors."
    ],
    "usage": "Provide account_id, risk_factors array, and corresponding risk_categories. Optionally specify custom weights for different risk factors.",
    "output_details": {
      "consolidated_risk_score": {
        "type": "number",
        "description": "Overall consolidated risk score (0-100)"
      },
      "risk_level": {
        "type": "string",
        "description": "Risk level classification (low, medium, high, critical)"
      },
      "top_risk_categories": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Risk categories contributing most to overall score"
      },
      "risk_breakdown": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Detailed breakdown of individual risk factor contributions"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Fraud Rule Engine",
    "tool_description": "Evaluates account activity against predefined fraud detection rules and business logic to identify rule violations.",
    "parameters": {
      "account_id": {
        "type": "string",
        "required": true,
        "description": "Account identifier for rule evaluation"
      },
      "rule_categories": {
        "type": "array",
        "items": {"type": "string"},
        "required": false,
        "default": ["all"],
        "description": "Categories of rules to evaluate (velocity, pattern, blacklist, etc.)"
      },
      "activity_context": {
        "type": "array",
        "items": {"type": "string"},
        "required": true,
        "description": "Current activity context data for rule evaluation"
      },
      "rule_severity_filter": {
        "type": "string",
        "required": false,
        "default": "all",
        "description": "Filter rules by severity level (low, medium, high, all)"
      }
    },
    "error_messages": [
      "Invalid account_id: Account must exist in the system.",
      "Invalid rule_categories: Must be array of valid rule category strings.",
      "Invalid activity_context: Must be non-empty array of context data strings.",
      "Invalid rule_severity_filter: Must be one of [low, medium, high, all].",
      "Rule evaluation failed: Unable to evaluate rules against provided activity context."
    ],
    "usage": "Provide account_id and activity_context. Optionally filter by rule_categories and rule_severity_filter to focus on specific rule sets.",
    "output_details": {
      "rules_evaluated": {
        "type": "integer",
        "description": "Total number of rules evaluated"
      },
      "rules_triggered": {
        "type": "integer",
        "description": "Number of rules that triggered violations"
      },
      "triggered_rule_ids": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Array of rule IDs that were triggered"
      },
      "violation_severity": {
        "type": "string",
        "description": "Highest severity level of triggered rules"
      },
      "violation_summary": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Summary descriptions of rule violations"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "ML Fraud Classifier",
    "tool_description": "Uses machine learning models to classify account activity and transactions as fraudulent or legitimate based on feature vectors.",
    "parameters": {
      "account_id": {
        "type": "string",
        "required": true,
        "description": "Account identifier for fraud classification"
      },
      "feature_vector": {
        "type": "array",
        "items": {"type": "number"},
        "required": true,
        "description": "Numerical feature vector for ML model input"
      },
      "model_type": {
        "type": "string",
        "required": false,
        "default": "ensemble",
        "description": "ML model to use (ensemble, neural_network, gradient_boosting, random_forest)"
      },
      "confidence_threshold": {
        "type": "number",
        "required": false,
        "default": 0.8,
        "description": "Minimum confidence threshold for predictions (0.5-1.0)"
      }
    },
    "error_messages": [
      "Invalid account_id: Account must exist in the system.",
      "Invalid feature_vector: Must be non-empty array of numerical values matching model requirements.",
      "Invalid model_type: Must be one of [ensemble, neural_network, gradient_boosting, random_forest].",
      "Invalid confidence_threshold: Must be between 0.5 and 1.0.",
      "Model prediction failed: Unable to generate fraud prediction from feature vector.",
      "Model not available: Specified model type is not currently available."
    ],
    "usage": "Provide account_id and properly formatted feature_vector. Select appropriate model_type and set confidence_threshold for fraud classification.",
    "output_details": {
      "fraud_probability": {
        "type": "number",
        "description": "Probability that the activity is fraudulent (0-1)"
      },
      "is_fraud": {
        "type": "boolean",
        "description": "Binary classification result based on threshold"
      },
      "prediction_confidence": {
        "type": "number",
        "description": "Model confidence in the prediction (0-1)"
      },
      "model_used": {
        "type": "string",
        "description": "Name of the ML model that generated the prediction"
      },
      "feature_importance": {
        "type": "array",
        "items": {"type": "number"},
        "description": "Importance scores for input features"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Identity Verification Checker",
    "tool_description": "Performs identity verification checks against customer-provided information and external verification databases.",
    "parameters": {
      "account_id": {
        "type": "string",
        "required": true,
        "description": "Account identifier for identity verification"
      },
      "verification_method": {
        "type": "string",
        "required": true,
        "description": "Verification method to use (document, biometric, knowledge_based, multi_factor)"
      },
      "provided_data": {
        "type": "array",
        "items": {"type": "string"},
        "required": true,
        "description": "Customer-provided verification data"
      },
      "verification_level": {
        "type": "string",
        "required": false,
        "default": "standard",
        "description": "Verification strictness level (basic, standard, enhanced)"
      },
      "allow_partial_match": {
        "type": "boolean",
        "required": false,
        "default": false,
        "description": "Whether to accept partial matches in verification"
      }
    },
    "error_messages": [
      "Invalid account_id: Account must exist in the system.",
      "Invalid verification_method: Must be one of [document, biometric, knowledge_based, multi_factor].",
      "Invalid provided_data: Must be non-empty array of verification data strings.",
      "Invalid verification_level: Must be one of [basic, standard, enhanced].",
      "Verification service unavailable: External verification service is temporarily unavailable.",
      "Insufficient verification data: Provided data is insufficient for selected verification method."
    ],
    "usage": "Specify account_id, verification_method, and provided_data array. Configure verification_level and allow_partial_match based on security requirements.",
    "output_details": {
      "verification_result": {
        "type": "string",
        "description": "Verification outcome (passed, failed, pending, inconclusive)"
      },
      "verification_score": {
        "type": "number",
        "description": "Verification confidence score (0-100)"
      },
      "verified_attributes": {
        "type": "array",
        "items": {"type": "string"},
        "description": "List of successfully verified identity attributes"
      },
      "failed_attributes": {
        "type": "array",
        "items": {"type": "string"},
        "description": "List of attributes that failed verification"
      },
      "verification_timestamp": {
        "type": "string",
        "description": "When verification was completed (ISO 8601 format)"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Account Lockout Manager",
    "tool_description": "Manages account security actions including temporary lockouts, permanent suspensions, and access restrictions based on security decisions.",
    "parameters": {
      "account_id": {
        "type": "string",
        "required": true,
        "description": "Account identifier for security action"
      },
      "action_type": {
        "type": "string",
        "required": true,
        "description": "Security action to take (temporary_lockout, permanent_suspension, access_restriction, unlock)"
      },
      "reason": {
        "type": "string",
        "required": true,
        "description": "Reason for the security action"
      },
      "duration_hours": {
        "type": "integer",
        "required": false,
        "default": null,
        "description": "Duration for temporary actions in hours (1-8760)"
      },
      "notify_customer": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Whether to send notification to customer"
      }
    },
    "error_messages": [
      "Invalid account_id: Account must exist and be accessible for security actions.",
      "Invalid action_type: Must be one of [temporary_lockout, permanent_suspension, access_restriction, unlock].",
      "Invalid reason: Reason must be a non-empty descriptive string.",
      "Invalid duration_hours: For temporary actions, duration must be between 1 and 8760 hours.",
      "Action not permitted: Current account state does not allow this security action.",
      "Security action failed: Unable to execute the requested security action."
    ],
    "usage": "Specify account_id, action_type, and reason. For temporary actions, set duration_hours. Configure notify_customer based on security policies.",
    "output_details": {
      "action_id": {
        "type": "string",
        "description": "Unique identifier for the security action taken"
      },
      "action_status": {
        "type": "string",
        "description": "Status of the action (completed, pending, failed)"
      },
      "effective_timestamp": {
        "type": "string",
        "description": "When the action became effective (ISO 8601 format)"
      },
      "
