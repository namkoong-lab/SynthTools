field_name: ecommerce_and_retail
subfield: Payment Processing and Financial Transactions
task: Handle payment method tokenization and secure credential storage
tool_description: |-
  ## STEP 1 — Rate task difficulty

  This task is **hard** due to the critical security requirements, complex compliance standards (PCI DSS), multiple payment method types, encryption/tokenization workflows, secure key management, and the high risk impact of security breaches or data exposure.

  ## STEP 2 — Set a tool budget

  Given the hard difficulty rating, I'm targeting 17 tools within the 15-20 range to cover the comprehensive security, tokenization, compliance, and operational aspects required for secure payment credential handling.

  ## STEP 3 — List all tool names and dependencies

  **Tool names with dependencies:**
  1. **Payment Method Validator** - Consumes: raw payment data → Produces: validation results
  2. **Tokenization Engine** - Consumes: validated payment data → Produces: secure tokens
  3. **Encryption Service** - Consumes: sensitive data → Produces: encrypted data
  4. **Key Management Service** - Consumes: key requests → Produces: encryption keys
  5. **Token Vault Manager** - Consumes: tokens, metadata → Produces: storage confirmations
  6. **PCI Compliance Checker** - Consumes: system configurations → Produces: compliance reports
  7. **Payment Method Detector** - Consumes: payment input → Produces: payment type classification
  8. **Secure Storage Controller** - Consumes: encrypted data → Produces: storage locations
  9. **Token Lifecycle Manager** - Consumes: token operations → Produces: lifecycle updates
  10. **Audit Logger** - Consumes: system events → Produces: audit trails
  11. **Access Control Manager** - Consumes: user credentials → Produces: authorization decisions
  12. **Token Retrieval Service** - Consumes: token requests → Produces: decrypted data
  13. **Data Sanitizer** - Consumes: raw input → Produces: sanitized data
  14. **Fraud Detection Scanner** - Consumes: payment patterns → Produces: risk scores
  15. **Backup Manager** - Consumes: encrypted tokens → Produces: secure backups
  16. **Token Expiration Controller** - Consumes: time policies → Produces: expiration schedules
  17. **Security Event Monitor** - Consumes: system activities → Produces: security alerts

  ## STEP 4 — Multi-tool plans

  **Simple Plans:**
  - **Basic Tokenization**: Payment Method Detector → Payment Method Validator → Tokenization Engine → Token Vault Manager
  - **Token Retrieval**: Access Control Manager → Token Retrieval Service → Data Sanitizer

  **Medium Plans:**
  - **Secure Payment Processing**: Data Sanitizer → Payment Method Detector → Payment Method Validator → Fraud Detection Scanner → Encryption Service → Tokenization Engine → Token Vault Manager → Audit Logger
  - **Compliance Workflow**: PCI Compliance Checker → Key Management Service → Secure Storage Controller → Token Lifecycle Manager → Backup Manager

  **Complex Plans:**
  - **Full Security Pipeline**: Data Sanitizer → Payment Method Detector → Payment Method Validator → Fraud Detection Scanner → Key Management Service → Encryption Service → Tokenization Engine → Access Control Manager → Token Vault Manager → Secure Storage Controller → Audit Logger → Security Event Monitor
  - **Token Lifecycle Management**: Token Lifecycle Manager → Token Expiration Controller → Access Control Manager → Token Retrieval Service → Backup Manager → Security Event Monitor → Audit Logger

  ## STEP 5 — Produce tools

  ```json
  {
    "tool_name": "Payment Method Validator",
    "tool_description": "Validates payment method details including card numbers, expiration dates, CVV codes, and account information to ensure they meet industry standards and formatting requirements.",
    "parameters": {
      "payment_data": {
        "type": "string",
        "required": true,
        "description": "Raw payment method data to validate (card number, account number, etc.)"
      },
      "payment_type": {
        "type": "string",
        "required": true,
        "description": "Type of payment method (credit_card, debit_card, bank_account, digital_wallet)"
      },
      "validation_level": {
        "type": "string",
        "required": false,
        "description": "Validation strictness level (basic, standard, strict)",
        "default": "standard"
      }
    },
    "error_messages": [
      "Invalid payment data format: Ensure payment data follows the correct format for the specified payment type.",
      "Unsupported payment type: Use one of [credit_card, debit_card, bank_account, digital_wallet].",
      "Invalid validation level: Use one of [basic, standard, strict].",
      "Payment data failed validation: The provided payment information does not meet security or format requirements."
    ],
    "usage": "Provide payment_data and payment_type to validate payment method details. Set validation_level to control strictness. Returns validation status and any identified issues.",
    "output_details": {
      "is_valid": {
        "type": "boolean",
        "description": "Whether the payment method passed validation"
      },
      "validation_errors": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of validation errors found"
      },
      "normalized_data": {
        "type": "string",
        "description": "Normalized version of the payment data"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Tokenization Engine",
    "tool_description": "Converts sensitive payment data into secure, non-sensitive tokens using industry-standard tokenization algorithms while maintaining referential integrity.",
    "parameters": {
      "sensitive_data": {
        "type": "string",
        "required": true,
        "description": "Validated sensitive payment data to tokenize"
      },
      "token_format": {
        "type": "string",
        "required": true,
        "description": "Desired token format (format_preserving, random, uuid)"
      },
      "encryption_key_id": {
        "type": "string",
        "required": true,
        "description": "ID of encryption key to use for tokenization"
      },
      "preserve_format": {
        "type": "boolean",
        "required": false,
        "description": "Whether to preserve original data format in token",
        "default": true
      },
      "token_length": {
        "type": "integer",
        "required": false,
        "description": "Length of generated token (8-64 characters)",
        "default": 16
      }
    },
    "error_messages": [
      "Invalid sensitive data: Ensure the data is properly validated before tokenization.",
      "Unsupported token format: Use one of [format_preserving, random, uuid].",
      "Invalid encryption key ID: Provide a valid encryption key ID from the key management service.",
      "Invalid token length: Token length must be between 8 and 64 characters.",
      "Tokenization failed: Unable to generate secure token for the provided data."
    ],
    "usage": "Provide validated sensitive_data, token_format, and encryption_key_id to generate secure tokens. Optionally set preserve_format and token_length based on requirements.",
    "output_details": {
      "token": {
        "type": "string",
        "description": "Generated secure token"
      },
      "token_id": {
        "type": "string",
        "description": "Unique identifier for the token"
      },
      "creation_timestamp": {
        "type": "string",
        "description": "When the token was created"
      },
      "token_type": {
        "type": "string",
        "description": "Type of token generated"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Key Management Service",
    "tool_description": "Manages encryption keys for tokenization including key generation, rotation, storage, and retrieval with hardware security module (HSM) integration.",
    "parameters": {
      "operation": {
        "type": "string",
        "required": true,
        "description": "Key operation to perform (generate, rotate, retrieve, deactivate)"
      },
      "key_type": {
        "type": "string",
        "required": true,
        "description": "Type of encryption key (aes256, rsa2048, rsa4096)"
      },
      "key_id": {
        "type": "string",
        "required": false,
        "description": "Existing key ID for operations other than generate",
        "default": "None"
      },
      "key_usage": {
        "type": "string",
        "required": true,
        "description": "Intended usage for the key (tokenization, encryption, signing)"
      },
      "rotation_schedule": {
        "type": "integer",
        "required": false,
        "description": "Key rotation schedule in days (30-365)",
        "default": 90
      },
      "hsm_enabled": {
        "type": "boolean",
        "required": false,
        "description": "Whether to use hardware security module",
        "default": true
      },
      "key_strength": {
        "type": "integer",
        "required": false,
        "description": "Key strength level (128, 192, 256 for AES)",
        "default": 256
      }
    },
    "error_messages": [
      "Invalid operation: Use one of [generate, rotate, retrieve, deactivate].",
      "Unsupported key type: Use one of [aes256, rsa2048, rsa4096].",
      "Invalid key usage: Use one of [tokenization, encryption, signing].",
      "Key not found: The specified key_id does not exist in the key store.",
      "Invalid rotation schedule: Rotation schedule must be between 30 and 365 days.",
      "Invalid key strength: Use 128, 192, or 256 for AES keys.",
      "HSM operation failed: Hardware security module is unavailable or returned an error."
    ],
    "usage": "Specify operation, key_type, and key_usage for key operations. Provide key_id for existing keys. Configure rotation_schedule, hsm_enabled, and key_strength as needed.",
    "output_details": {
      "key_id": {
        "type": "string",
        "description": "Unique identifier for the encryption key"
      },
      "key_status": {
        "type": "string",
        "description": "Current status of the key"
      },
      "creation_date": {
        "type": "string",
        "description": "When the key was created"
      },
      "expiration_date": {
        "type": "string",
        "description": "When the key expires"
      },
      "operation_result": {
        "type": "string",
        "description": "Result of the requested operation"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Token Vault Manager",
    "tool_description": "Manages secure storage and retrieval of tokens in a hardened vault environment with access controls and audit logging.",
    "parameters": {
      "operation": {
        "type": "string",
        "required": true,
        "description": "Vault operation (store, retrieve, delete, list)"
      },
      "token_id": {
        "type": "string",
        "required": false,
        "description": "Token identifier for retrieve/delete operations",
        "default": "None"
      },
      "token_data": {
        "type": "string",
        "required": false,
        "description": "Token data for store operations",
        "default": "None"
      },
      "metadata": {
        "type": "array",
        "required": false,
        "description": "Additional metadata tags for the token",
        "items": {
          "type": "string"
        },
        "default": []
      },
      "access_level": {
        "type": "string",
        "required": true,
        "description": "Required access level (read, write, admin)"
      },
      "user_id": {
        "type": "string",
        "required": true,
        "description": "User ID performing the operation"
      },
      "retention_days": {
        "type": "integer",
        "required": false,
        "description": "Days to retain token (30-2555)",
        "default": 365
      }
    },
    "error_messages": [
      "Invalid operation: Use one of [store, retrieve, delete, list].",
      "Token not found: The specified token_id does not exist in the vault.",
      "Access denied: User does not have required access level for this operation.",
      "Invalid retention period: Retention days must be between 30 and 2555.",
      "Vault storage error: Unable to store token due to vault capacity or security constraints.",
      "Missing required data: Provide token_data for store operations or token_id for retrieve/delete operations."
    ],
    "usage": "Specify operation, access_level, and user_id for all operations. Provide token_data and metadata for store operations, token_id for retrieve/delete operations. Set retention_days as needed.",
    "output_details": {
      "operation_status": {
        "type": "string",
        "description": "Status of the vault operation"
      },
      "token_id": {
        "type": "string",
        "description": "Token identifier"
      },
      "storage_location": {
        "type": "string",
        "description": "Vault storage location reference"
      },
      "timestamp": {
        "type": "string",
        "description": "Operation timestamp"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "PCI Compliance Checker",
    "tool_description": "Validates system configurations and processes against PCI DSS requirements to ensure compliance with payment card industry data security standards.",
    "parameters": {
      "compliance_scope": {
        "type": "string",
        "required": true,
        "description": "Scope of compliance check (network, storage, access_control, tokenization, full)"
      },
      "merchant_level": {
        "type": "integer",
        "required": true,
        "description": "PCI merchant level (1-4)"
      },
      "system_components": {
        "type": "array",
        "required": true,
        "description": "System components to check",
        "items": {
          "type": "string"
        },
        "minItems": 1,
        "maxItems": 50
      },
      "check_type": {
        "type": "string",
        "required": false,
        "description": "Type of compliance check (quick, standard, comprehensive)",
        "default": "standard"
      },
      "include_remediation": {
        "type": "boolean",
        "required": false,
        "description": "Include remediation suggestions in results",
        "default": true
      }
    },
    "error_messages": [
      "Invalid compliance scope: Use one of [network, storage, access_control, tokenization, full].",
      "Invalid merchant level: Merchant level must be 1, 2, 3, or 4.",
      "Invalid check type: Use one of [quick, standard, comprehensive].",
      "No system components specified: Provide at least one system component to check.",
      "Compliance check failed: Unable to complete compliance verification due to system access issues."
    ],
    "usage": "Specify compliance_scope, merchant_level, and system_components to check PCI DSS compliance. Set check_type for different levels of thoroughness and include_remediation for guidance.",
    "output_details": {
      "compliance_score": {
        "type": "number",
        "description": "Overall compliance score (0-100)"
      },
      "requirements_met": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of PCI requirements that are met"
      },
      "violations": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of compliance violations found"
      },
      "remediation_steps": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Recommended remediation actions"
      },
      "certification_status": {
        "type": "string",
        "description": "Current certification status"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Payment Method Detector",
    "tool_description": "Automatically detects and classifies payment method types from input data using pattern recognition and validation algorithms.",
    "parameters": {
      "input_data": {
        "type": "string",
        "required": true,
        "description": "Raw payment input data to analyze and classify"
      },
      "detection_confidence": {
        "type": "number",
        "required": false,
        "description": "Minimum confidence threshold for detection (0.5-1.0)",
        "default": 0.8
      }
    },
    "error_messages": [
      "Invalid input data: Provide non-empty payment data for analysis.",
      "Invalid confidence threshold: Detection confidence must be between 0.5 and 1.0.",
      "Detection failed: Unable to classify the payment method from the provided data."
    ],
    "usage": "Provide input_data containing payment information to automatically detect the payment method type. Adjust detection_confidence to control classification sensitivity.",
    "output_details": {
      "payment_type": {
        "type": "string",
        "description": "Detected payment method type"
      },
      "confidence_score": {
        "type": "number",
        "description": "Confidence level of the detection"
      },
      "card_brand": {
        "type": "string",
        "description": "Detected card brand if applicable"
      },
      "additional_attributes": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Additional detected attributes"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Encryption Service",
    "tool_description": "Provides advanced encryption and decryption services for sensitive payment data using multiple encryption algorithms and key management integration.",
    "parameters": {
      "operation": {
        "type": "string",
        "required": true,
        "description": "Encryption operation (encrypt, decrypt)"
      },
      "data": {
        "type": "string",
        "required": true,
        "description": "Data to encrypt or decrypt"
      },
      "encryption_algorithm": {
        "type": "string",
        "required": true,
        "description": "Encryption algorithm (aes256_gcm, aes256_cbc, rsa_oaep)"
      },
      "key_id": {
        "type": "string",
        "required": true,
        "description": "Encryption key identifier"
      },
      "initialization_vector": {
        "type": "string",
        "required": false,
        "description": "Custom initialization vector for encryption",
        "default": "None"
      },
      "additional_data": {
        "type": "string",
        "required": false,
        "description": "Additional authenticated data for GCM mode",
        "default": "None"
      },
      "output_format": {
        "type": "string",
        "required": false,
        "description": "Output format (base64, hex, binary)",
        "default": "base64"
      }
    },
    "error_messages": [
      "Invalid operation: Use 'encrypt' or 'decrypt'.",
      "Unsupported encryption algorithm: Use one of [aes256_gcm, aes256_cbc, rsa_oaep].",
      "Invalid key ID: Provide a valid encryption key identifier.",
      "Invalid output format: Use one of [base64, hex, binary].",
      "Encryption failed: Unable to encrypt/decrypt data with the specified parameters.",
      "Key not found: The specified encryption key does not exist or is not accessible."
    ],
    "usage": "Specify operation, data, encryption_algorithm, and key_id for encryption/decryption. Optionally provide initialization_vector, additional_data, and output_format based on algorithm requirements.",
    "output_details": {
      "result": {
        "type": "string",
        "description": "Encrypted or decrypted data"
      },
      "algorithm_used": {
        "type": "string",
        "description": "Encryption algorithm that was used"
      },
      "key_version": {
        "type": "string",
        "description": "Version of the encryption key used"
      },
      "operation_timestamp": {
        "type": "string",
        "description": "When the encryption/decryption was performed"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Secure Storage Controller",
    "tool_description": "Manages secure storage locations, access controls, and data lifecycle for encrypted tokens and sensitive payment information across multiple storage backends.",
    "parameters": {
      "storage_operation": {
        "type": "string",
        "required": true,
        "description": "Storage operation (create, read, update, delete, migrate)"
      },
      "data_classification": {
        "type": "string",
        "required": true,
        "description": "Data classification level (public, internal, confidential, restricted)"
      },
      "storage_backend": {
        "type": "string",
        "required": true,
        "description": "Storage backend type (hsm, database, file_system, cloud_storage)"
      },
      "record_id": {
        "type": "string",
        "required": false,
        "description": "Record identifier for read/update/delete operations",
        "default": "None"
      },
      "data_payload": {
        "type": "string",
        "required": false,
        "description": "Data to store (for create/update operations)",
        "default": "None"
      },
      "encryption_required": {
        "type": "boolean",
        "required": false,
        "description": "Whether data should be encrypted at rest",
        "default": true
      },
      "backup_enabled": {
        "type": "boolean",
        "required": false,
        "description": "Whether to enable automatic backups",
        "default": true
      },
      "geographic_region": {
        "type": "string",
        "required": false,
        "description": "Preferred geographic region for storage",
        "default": "us-east"
      },
      "compliance_requirements": {
        "type": "array",
        "required": false,
        "description": "Compliance requirements to enforce",
        "items": {
          "type": "string"
        },
        "default": ["pci_dss"]
      },
      "retention_policy": {
        "type": "string",
        "required": false,
        "description": "Data retention policy (7_years, 3_years, 1_year, custom)",
        "default": "7_years"
      },
      "access_permissions": {
        "type": "array",
        "required": false,
        "description": "Access permission levels",
        "items": {
          "type": "string"
        },
        "default": ["read", "write"]
      }
    },
    "error_messages": [
      "Invalid storage operation: Use one of [create, read, update, delete, migrate].",
      "Invalid data classification: Use one of [public, internal, confidential, restricted].",
      "Unsupported storage backend: Use one of [hsm, database, file_system, cloud_storage].",
      "Record not found: The specified record_id does not exist in the storage backend.",
      "Storage capacity exceeded: Unable to store data due to capacity limitations.",
      "Access denied: Insufficient permissions for the requested storage operation.",
      "Compliance violation: Storage configuration does not meet specified compliance requirements.",
      "Invalid retention policy: Use one of [7_years, 3_years, 1_year, custom].",
      "Geographic restriction: Storage in the specified region is not available or compliant."
    ],
    "usage": "Specify storage_operation, data_classification, and storage_backend for all operations. Provide record_id for read/update/delete, data_payload for create/update. Configure encryption, backup, region, compliance, retention, and access settings as needed.",
    "output_details": {
      "operation_result": {
        "type": "string",
        "description": "Result of the storage operation"
      },
      "record_id": {
        "type": "string",
        "description": "Unique identifier for the stored record"
      },
      "storage_location": {
        "type": "string",
        "description": "Physical or logical storage location"
      },
      "access_url": {
        "type": "string",
        "description": "Secure access URL for the stored data"
      },
      "metadata": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Storage metadata and attributes"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Token Lifecycle Manager",
    "tool_description": "Manages the complete lifecycle of payment tokens including creation, activation, suspension, expiration, and deletion with automated policy enforcement.",
    "parameters": {
      "lifecycle_operation": {
        "type": "string",
        "required": true,
        "description": "Lifecycle operation (activate, suspend, expire, delete, renew, status)"
      },
      "token_id": {
        "type": "string",
        "required": true,
        "description": "Token identifier to manage"
      },
      "reason": {
        "type": "string",
        "required": false,
        "description": "Reason for the lifecycle operation",
        "default": "None"
      },
      "effective_date": {
        "type": "string",
        "required": false,
        "description": "When the operation should take effect",
        "default": "None"
      },
      "notification_required": {
        "type": "boolean",
        "required": false,
        "description": "Whether to send notifications for this operation",
        "default": true
      }
    },
    "error_messages": [
      "Invalid lifecycle operation: Use one of [activate, suspend, expire, delete, renew, status].",
      "Token not found: The specified token_id does not exist.",
      "Invalid operation for current state: The requested operation is not valid for the token's current lifecycle state.",
      "Invalid effective date: Effective date must be in the future for scheduled operations.",
      "Operation not permitted: User does not have permission to perform this lifecycle operation."
    ],
    "usage": "Specify lifecycle_operation and token_id to manage token lifecycle. Provide reason for audit purposes, effective_date for scheduling, and set notification_required as needed.",
    "output_details": {
      "operation_status": {
        "type": "string",
        "description": "Status of the lifecycle operation"
      },
      "current_state": {
        "type": "string",
        "description": "Current lifecycle state of the token"
      },
      "state_change_timestamp": {
        "type": "string",
        "description": "When the state change occurred"
      },
      "next_action_due": {
        "type": "string",
        "description": "Next scheduled lifecycle action"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Audit Logger",
    "tool_description": "Comprehensive audit logging system that captures, formats, and stores security events and system activities with tamper-proof logging and compliance reporting.",
    "parameters": {
      "event_type": {
        "type": "string",
        "required": true,
        "description": "Type of event to log (authentication, authorization, data_access, system_change, security_incident)"
      },
      "event_description": {
        "type": "string",
        "required": true,
        "description": "Detailed description of the event"
      },
      "user_id": {
        "type": "string",
        "required": true,
        "description": "User ID associated with the event"
      },
      "resource_affected": {
        "type": "string",
        "required": false,
        "description": "System resource or data affected by the event",
        "default": "None"
      },
      "severity_level": {
        "type": "string",
        "required": false,
        "description": "Severity level (low, medium, high, critical)",
        "default": "medium"
      },
      "source_ip": {
        "type": "string",
        "required": false,
        "description": "Source IP address of the event",
        "default": "None"
      },
      "additional_context": {
        "type": "array",
        "required": false,
        "description": "Additional contextual information",
        "items": {
          "type": "string"
        },
        "default": []
      },
      "compliance_tags": {
        "type": "array",
        "required": false,
        "description": "Compliance framework tags",
        "items": {
          "type": "string"
        },
        "default": ["pci_dss"]
      }
    },
    "error_messages": [
      "Invalid event type: Use one of [authentication, authorization, data_access, system_change, security_incident].",
      "Invalid severity level: Use one of [low, medium, high, critical].",
      "Missing required information: Event description and user ID are required for all audit entries.",
      "Log storage failed: Unable to store audit log entry due to storage system issues.",
      "Invalid IP address format: Provide a valid IPv4 or IPv6 address for source_ip."
    ],
    "usage": "Specify event_type, event_description, and user_id for all audit entries. Include resource_affected, severity_level, source_ip, additional_context, and compliance_tags for complete audit trails.",
    "output_details": {
      "audit_id": {
        "type": "string",
        "description": "Unique identifier for the audit entry"
      },
      "timestamp": {
        "type": "string",
        "description": "When the audit entry was created"
      },
      "log_storage_location": {
        "type": "string",
        "description": "Where the audit log is stored"
      },
      "integrity_hash": {
        "type": "string",
        "description": "Hash for audit log integrity verification"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Access Control Manager",
    "tool_description": "Manages user authentication, authorization, and access control for payment processing systems with role-based permissions and multi-factor authentication support.",
    "parameters": {
      "operation": {
        "type": "string",
        "required": true,
        "description": "Access control operation (authenticate, authorize, grant_access, revoke_access, check_permissions)"
      },
      "user_id": {
        "type": "string",
        "required": true,
        "description": "User identifier"
      },
      "resource": {
        "type": "string",
        "required": false,
        "description": "Resource being accessed",
        "default": "None"
      },
      "requested_action": {
        "type": "string",
        "required": false,
        "description": "Action being requested (read, write, delete, admin)",
        "default": "read"
      },
      "authentication_method": {
        "type": "string",
        "required": false,
        "description": "Authentication method (password, mfa, certificate, token)",
        "default": "password"
      },
      "session_duration": {
        "type": "integer",
        "required": false,
        "description": "Session duration in minutes (15-480)",
        "default": 60
      }
    },
    "error_messages": [
      "Invalid operation: Use one of [authenticate, authorize, grant_access, revoke_access, check_permissions].",
      "Invalid requested action: Use one of [read, write, delete, admin].",
      "Invalid authentication method: Use one of [password, mfa, certificate, token
