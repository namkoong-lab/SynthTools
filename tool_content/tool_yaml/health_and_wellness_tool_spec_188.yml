field_name: health_and_wellness
subfield: Electronic Health Records Management
task: Patient registration and demographic data management
tool_description: |-
  **STEP 1 — Rate task difficulty**

  This task involves managing patient registration and demographic data in electronic health records, which requires handling sensitive personal information, ensuring data accuracy, maintaining compliance with healthcare regulations (HIPAA), and supporting various administrative workflows. The task is of medium difficulty due to the need for data validation, privacy considerations, and integration with existing healthcare systems.

  **STEP 2 — Set a tool budget**

  Given the medium complexity of patient registration and demographic data management, I will target 12 tools to cover the various aspects of patient onboarding, data validation, record management, and compliance requirements.

  **STEP 3 — List all tool names and dependencies**

  1. **Patient Identity Validator** - Consumes: personal identifiers → Produces: validated identity data
  2. **Demographic Data Collector** - Consumes: patient input → Produces: structured demographic information
  3. **Insurance Verification Tool** - Consumes: insurance details → Produces: coverage validation
  4. **Address Standardizer** - Consumes: raw address → Produces: standardized address format
  5. **Emergency Contact Manager** - Consumes: contact information → Produces: verified emergency contacts
  6. **Medical History Importer** - Consumes: previous records → Produces: consolidated medical history
  7. **Consent Form Generator** - Consumes: patient preferences → Produces: customized consent forms
  8. **Duplicate Record Detector** - Consumes: patient data → Produces: duplicate analysis
  9. **Privacy Compliance Checker** - Consumes: data collection practices → Produces: compliance status
  10. **Patient Portal Creator** - Consumes: registration data → Produces: portal access credentials
  11. **Record Update Processor** - Consumes: change requests → Produces: updated patient records
  12. **Registration Status Tracker** - Consumes: workflow states → Produces: completion status

  **STEP 4 — Multi-tool plans**

  **Simple Plans:**
  1. Basic Registration: Patient Identity Validator → Demographic Data Collector → Registration Status Tracker
  2. Address Verification: Address Standardizer → Duplicate Record Detector

  **Medium Plans:**
  1. Complete New Patient Setup: Patient Identity Validator → Demographic Data Collector → Insurance Verification Tool → Emergency Contact Manager → Consent Form Generator → Patient Portal Creator
  2. Record Migration: Medical History Importer → Duplicate Record Detector → Record Update Processor → Privacy Compliance Checker

  **Complex Plans:**
  1. Full Registration Workflow: Patient Identity Validator → Demographic Data Collector → Address Standardizer → Insurance Verification Tool → Emergency Contact Manager → Duplicate Record Detector → Medical History Importer → Consent Form Generator → Privacy Compliance Checker → Patient Portal Creator → Registration Status Tracker
  2. Data Quality Audit: Duplicate Record Detector → Privacy Compliance Checker → Record Update Processor → Address Standardizer → Patient Identity Validator → Registration Status Tracker

  **STEP 5 — Produce tools**

  ```json
  {
    "tool_name": "Patient Identity Validator",
    "tool_description": "Validates and standardizes patient identity information including name variations, date of birth, and government identification numbers to ensure accurate patient identification.",
    "parameters": {
      "first_name": {
        "type": "string",
        "required": true,
        "description": "Patient's legal first name"
      },
      "last_name": {
        "type": "string",
        "required": true,
        "description": "Patient's legal last name"
      },
      "date_of_birth": {
        "type": "string",
        "required": true,
        "description": "Patient's date of birth in YYYY-MM-DD format",
        "format": "date-time"
      },
      "ssn": {
        "type": "string",
        "required": false,
        "description": "Social Security Number (XXX-XX-XXXX format)",
        "default": "None"
      },
      "middle_name": {
        "type": "string",
        "required": false,
        "description": "Patient's middle name or initial",
        "default": "None"
      }
    },
    "error_messages": [
      "Invalid name format: Names must contain only alphabetic characters, spaces, hyphens, and apostrophes.",
      "Invalid date of birth: Date must be in YYYY-MM-DD format and represent a valid past date.",
      "Invalid SSN format: SSN must be in XXX-XX-XXXX format with valid digits.",
      "Missing required fields: first_name, last_name, and date_of_birth are mandatory.",
      "Date validation error: Date of birth cannot be in the future or indicate an age over 150 years."
    ],
    "usage": "Provide patient's first_name, last_name, and date_of_birth as required parameters. Optionally include middle_name and ssn for enhanced validation. The tool returns standardized identity information and validation status.",
    "output_details": {
      "validation_status": {
        "type": "string",
        "description": "Status of identity validation (valid, warning, invalid)"
      },
      "standardized_name": {
        "type": "string",
        "description": "Full name in standardized format"
      },
      "age": {
        "type": "integer",
        "description": "Calculated age based on date of birth"
      },
      "identity_score": {
        "type": "number",
        "description": "Confidence score for identity validation (0-1)"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Demographic Data Collector",
    "tool_description": "Collects and structures comprehensive demographic information including contact details, preferred language, ethnicity, and socioeconomic factors for patient records.",
    "parameters": {
      "phone_primary": {
        "type": "string",
        "required": true,
        "description": "Primary phone number in (XXX) XXX-XXXX format"
      },
      "email": {
        "type": "string",
        "required": true,
        "description": "Primary email address"
      },
      "gender": {
        "type": "string",
        "required": true,
        "description": "Gender identity (male, female, non-binary, other, prefer-not-to-say)"
      },
      "race": {
        "type": "string",
        "required": true,
        "description": "Race/ethnicity category"
      },
      "preferred_language": {
        "type": "string",
        "required": true,
        "description": "Preferred language for communication"
      },
      "marital_status": {
        "type": "string",
        "required": true,
        "description": "Marital status (single, married, divorced, widowed, separated)"
      },
      "employment_status": {
        "type": "string",
        "required": true,
        "description": "Current employment status"
      },
      "phone_secondary": {
        "type": "string",
        "required": false,
        "description": "Secondary phone number",
        "default": "None"
      },
      "preferred_contact_method": {
        "type": "string",
        "required": false,
        "description": "Preferred method of contact (phone, email, text, mail)",
        "default": "phone"
      },
      "religion": {
        "type": "string",
        "required": false,
        "description": "Religious affiliation",
        "default": "None"
      },
      "education_level": {
        "type": "string",
        "required": false,
        "description": "Highest education level completed",
        "default": "None"
      }
    },
    "error_messages": [
      "Invalid phone format: Phone numbers must be in (XXX) XXX-XXXX format with valid area codes.",
      "Invalid email format: Email must be a valid email address format.",
      "Invalid gender selection: Choose from male, female, non-binary, other, or prefer-not-to-say.",
      "Invalid marital status: Choose from single, married, divorced, widowed, or separated.",
      "Invalid contact method: Choose from phone, email, text, or mail.",
      "Missing required demographic fields: All required demographic information must be provided."
    ],
    "usage": "Provide all required demographic parameters including contact information and demographic categories. Optional parameters can enhance patient communication preferences. Returns structured demographic profile for EHR integration.",
    "output_details": {
      "demographic_profile": {
        "type": "string",
        "description": "Formatted demographic summary"
      },
      "contact_preferences": {
        "type": "string",
        "description": "Patient's preferred contact method and details"
      },
      "cultural_considerations": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Cultural and linguistic considerations for care"
      },
      "completeness_score": {
        "type": "number",
        "description": "Percentage of demographic data fields completed (0-1)"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Insurance Verification Tool",
    "tool_description": "Verifies patient insurance coverage, benefits, and eligibility for healthcare services by validating insurance information and checking coverage status.",
    "parameters": {
      "insurance_company": {
        "type": "string",
        "required": true,
        "description": "Name of the insurance company"
      },
      "policy_number": {
        "type": "string",
        "required": true,
        "description": "Insurance policy or member ID number"
      },
      "group_number": {
        "type": "string",
        "required": true,
        "description": "Insurance group number"
      },
      "policy_holder_name": {
        "type": "string",
        "required": true,
        "description": "Name of the primary policy holder"
      },
      "relationship_to_holder": {
        "type": "string",
        "required": true,
        "description": "Patient's relationship to policy holder (self, spouse, child, other)"
      },
      "effective_date": {
        "type": "string",
        "required": false,
        "description": "Insurance policy effective date",
        "format": "date-time",
        "default": "None"
      }
    },
    "error_messages": [
      "Insurance company not recognized: Verify the insurance company name is correct and contracted.",
      "Invalid policy number: Policy number format does not match insurance company standards.",
      "Coverage expired or inactive: The insurance policy is not currently active.",
      "Patient not found on policy: Patient is not listed as a covered member on this policy.",
      "Invalid relationship specified: Relationship must be self, spouse, child, or other.",
      "Verification timeout: Unable to connect to insurance verification system, try again later."
    ],
    "usage": "Provide insurance_company, policy_number, group_number, policy_holder_name, and relationship_to_holder. Optionally include effective_date for additional validation. Returns coverage status and benefit information.",
    "output_details": {
      "verification_status": {
        "type": "string",
        "description": "Insurance verification result (verified, pending, denied)"
      },
      "coverage_active": {
        "type": "boolean",
        "description": "Whether insurance coverage is currently active"
      },
      "copay_amount": {
        "type": "number",
        "description": "Patient copay amount for standard visits"
      },
      "deductible_remaining": {
        "type": "number",
        "description": "Remaining deductible amount for the year"
      },
      "coverage_details": {
        "type": "string",
        "description": "Summary of covered services and limitations"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Address Standardizer",
    "tool_description": "Standardizes and validates patient addresses using postal service standards, ensuring accurate mail delivery and geographic consistency.",
    "parameters": {
      "street_address": {
        "type": "string",
        "required": true,
        "description": "Street address including number and street name"
      },
      "city": {
        "type": "string",
        "required": true,
        "description": "City name"
      },
      "state": {
        "type": "string",
        "required": true,
        "description": "State abbreviation (2 letters)"
      },
      "zip_code": {
        "type": "string",
        "required": true,
        "description": "ZIP code (5 or 9 digit format)"
      },
      "apartment_unit": {
        "type": "string",
        "required": false,
        "description": "Apartment, unit, or suite number",
        "default": "None"
      }
    },
    "error_messages": [
      "Invalid street address: Street address cannot be empty and must contain valid characters.",
      "City not found: The specified city name could not be validated.",
      "Invalid state abbreviation: State must be a valid 2-letter US state abbreviation.",
      "Invalid ZIP code format: ZIP code must be 5 digits or 5+4 digit format (XXXXX or XXXXX-XXXX).",
      "Address not deliverable: The address combination cannot be validated as a deliverable location."
    ],
    "usage": "Provide street_address, city, state, and zip_code as required parameters. Include apartment_unit if applicable. The tool returns standardized address format and validation status.",
    "output_details": {
      "standardized_address": {
        "type": "string",
        "description": "Complete standardized address in postal format"
      },
      "validation_status": {
        "type": "string",
        "description": "Address validation result (valid, corrected, invalid)"
      },
      "corrections_made": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of corrections applied to the original address"
      },
      "deliverable": {
        "type": "boolean",
        "description": "Whether the address is confirmed deliverable"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Emergency Contact Manager",
    "tool_description": "Manages emergency contact information for patients, including validation of contact details and relationship verification for healthcare emergency situations.",
    "parameters": {
      "contact_name": {
        "type": "string",
        "required": true,
        "description": "Full name of emergency contact person"
      },
      "relationship": {
        "type": "string",
        "required": true,
        "description": "Relationship to patient (spouse, parent, sibling, child, friend, other)"
      },
      "primary_phone": {
        "type": "string",
        "required": true,
        "description": "Primary phone number for emergency contact"
      },
      "secondary_phone": {
        "type": "string",
        "required": false,
        "description": "Secondary phone number for emergency contact",
        "default": "None"
      },
      "email": {
        "type": "string",
        "required": false,
        "description": "Email address of emergency contact",
        "default": "None"
      },
      "address": {
        "type": "string",
        "required": false,
        "description": "Full address of emergency contact",
        "default": "None"
      },
      "is_primary_contact": {
        "type": "boolean",
        "required": false,
        "description": "Whether this is the primary emergency contact",
        "default": true
      }
    },
    "error_messages": [
      "Invalid contact name: Emergency contact name must contain only valid alphabetic characters.",
      "Invalid relationship: Relationship must be one of: spouse, parent, sibling, child, friend, or other.",
      "Invalid phone format: Phone numbers must be in valid format (XXX) XXX-XXXX.",
      "Missing contact information: At least one phone number must be provided.",
      "Invalid email format: Email address must be in valid format if provided.",
      "Contact verification failed: Unable to validate the provided contact information."
    ],
    "usage": "Provide contact_name, relationship, and primary_phone as minimum requirements. Add secondary_phone, email, and address for comprehensive contact options. Set is_primary_contact to designate the main emergency contact.",
    "output_details": {
      "contact_id": {
        "type": "string",
        "description": "Unique identifier for this emergency contact"
      },
      "verification_status": {
        "type": "string",
        "description": "Contact verification status (verified, pending, failed)"
      },
      "contact_summary": {
        "type": "string",
        "description": "Formatted emergency contact information"
      },
      "priority_level": {
        "type": "integer",
        "description": "Contact priority ranking (1 = highest priority)"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Medical History Importer",
    "tool_description": "Imports and consolidates previous medical records from external sources, standardizing medical history data for integration into the current EHR system.",
    "parameters": {
      "source_system": {
        "type": "string",
        "required": true,
        "description": "Source EHR system or healthcare provider name"
      },
      "record_format": {
        "type": "string",
        "required": true,
        "description": "Format of incoming records (HL7, FHIR, CCD, PDF, paper)"
      },
      "patient_consent": {
        "type": "boolean",
        "required": true,
        "description": "Patient has provided consent for record transfer"
      },
      "record_date_range": {
        "type": "array",
        "required": true,
        "description": "Date range of records to import [start_date, end_date]",
        "items": {
          "type": "string"
        },
        "minItems": 2,
        "maxItems": 2
      },
      "previous_provider_name": {
        "type": "string",
        "required": true,
        "description": "Name of the previous healthcare provider"
      },
      "record_types": {
        "type": "array",
        "required": true,
        "description": "Types of records to import (lab_results, medications, allergies, procedures, diagnoses, imaging)",
        "items": {
          "type": "string"
        },
        "minItems": 1,
        "maxItems": 10
      },
      "priority_level": {
        "type": "string",
        "required": false,
        "description": "Import priority level (urgent, standard, low)",
        "default": "standard"
      },
      "quality_threshold": {
        "type": "number",
        "required": false,
        "description": "Minimum quality score for record acceptance (0-1)",
        "default": 0.8
      },
      "auto_merge": {
        "type": "boolean",
        "required": false,
        "description": "Automatically merge compatible records",
        "default": false
      },
      "include_notes": {
        "type": "boolean",
        "required": false,
        "description": "Include clinical notes and narrative text",
        "default": true
      }
    },
    "error_messages": [
      "Invalid record format: Supported formats are HL7, FHIR, CCD, PDF, and paper.",
      "Consent not provided: Patient consent is required for medical record import.",
      "Invalid date range: Start date must be before end date and both must be valid dates.",
      "Unsupported record type: Valid types are lab_results, medications, allergies, procedures, diagnoses, imaging.",
      "Source system unavailable: Unable to connect to the specified source EHR system.",
      "Data quality too low: Records do not meet the minimum quality threshold.",
      "Import timeout: Record import process exceeded time limits.",
      "Format conversion error: Unable to convert records from source format to target format."
    ],
    "usage": "Specify source_system, record_format, patient_consent status, record_date_range, previous_provider_name, and record_types. Set optional parameters for import customization. Returns import status and consolidated medical history summary.",
    "output_details": {
      "import_status": {
        "type": "string",
        "description": "Overall import status (completed, partial, failed)"
      },
      "records_imported": {
        "type": "integer",
        "description": "Number of records successfully imported"
      },
      "records_failed": {
        "type": "integer",
        "description": "Number of records that failed to import"
      },
      "quality_score": {
        "type": "number",
        "description": "Overall quality score of imported records (0-1)"
      },
      "import_summary": {
        "type": "string",
        "description": "Summary of imported medical history data"
      },
      "conflicts_detected": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of data conflicts requiring manual review"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Consent Form Generator",
    "tool_description": "Generates customized patient consent forms based on healthcare services, patient preferences, and regulatory requirements for treatment, data sharing, and communication.",
    "parameters": {
      "consent_types": {
        "type": "array",
        "required": true,
        "description": "Types of consent needed (treatment, data_sharing, communication, research, billing)",
        "items": {
          "type": "string"
        },
        "minItems": 1,
        "maxItems": 5
      },
      "patient_age": {
        "type": "integer",
        "required": true,
        "description": "Patient's age to determine consent requirements"
      },
      "language_preference": {
        "type": "string",
        "required": true,
        "description": "Preferred language for consent forms"
      },
      "services_requested": {
        "type": "array",
        "required": true,
        "description": "Healthcare services patient is consenting to",
        "items": {
          "type": "string"
        },
        "minItems": 1,
        "maxItems": 10
      }
    },
    "error_messages": [
      "Invalid consent type: Supported types are treatment, data_sharing, communication, research, billing.",
      "Invalid patient age: Age must be between 0 and 150.",
      "Unsupported language: The requested language is not available for consent forms.",
      "Invalid service type: One or more requested services are not recognized.",
      "Minor consent requirements: Additional guardian consent may be required for patients under 18.",
      "Form generation error: Unable to generate consent forms due to system error."
    ],
    "usage": "Provide consent_types array, patient_age, language_preference, and services_requested array. The tool generates appropriate consent forms based on patient needs and regulatory requirements.",
    "output_details": {
      "consent_forms": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Generated consent form identifiers"
      },
      "additional_requirements": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Additional consent requirements based on patient profile"
      },
      "expiration_dates": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Expiration dates for each consent form"
      },
      "guardian_required": {
        "type": "boolean",
        "description": "Whether guardian consent is required"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Duplicate Record Detector",
    "tool_description": "Detects potential duplicate patient records in the EHR system by analyzing demographic and identifying information to prevent record fragmentation.",
    "parameters": {
      "search_criteria": {
        "type": "array",
        "required": true,
        "description": "Patient identifiers to search (name, dob, ssn, phone, email, address)",
        "items": {
          "type": "string"
        },
        "minItems": 2,
        "maxItems": 6
      },
      "matching_threshold": {
        "type": "number",
        "required": false,
        "description": "Similarity threshold for duplicate detection (0-1)",
        "default": 0.85
      },
      "search_scope": {
        "type": "string",
        "required": false,
        "description": "Scope of search (active_records, all_records, archived_records)",
        "default": "active_records"
      }
    },
    "error_messages": [
      "Insufficient search criteria: At least 2 search criteria must be provided.",
      "Invalid matching threshold: Threshold must be between 0 and 1.",
      "Invalid search scope: Scope must be active_records, all_records, or archived_records.",
      "Search timeout: Duplicate detection search exceeded time limits.",
      "Database connection error: Unable to access patient records for duplicate detection."
    ],
    "usage": "Provide search_criteria array with patient identifiers. Optionally adjust matching_threshold and search_scope. Returns potential duplicate records with confidence scores for review.",
    "output_details": {
      "duplicates_found": {
        "type": "integer",
        "description": "Number of potential duplicate records identified"
      },
      "duplicate_records": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Patient record IDs of potential duplicates"
      },
      "confidence_scores": {
        "type": "array",
        "items": {
          "type": "number"
        },
        "description": "Confidence scores for each potential duplicate (0-1)"
      },
      "recommended_action": {
        "type": "string",
        "description": "Recommended action (merge_records, manual_review, no_action)"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Privacy Compliance Checker",
    "tool_description": "Validates patient data collection and management practices against healthcare privacy regulations including HIPAA compliance and data protection requirements.",
    "parameters": {
      "data_elements": {
        "type": "array",
        "required": true,
        "description": "Types of patient data being collected or processed",
        "items": {
          "type": "string"
        },
        "minItems": 1,
        "maxItems": 20
      },
      "intended_use": {
        "type": "string",
        "required": true,
        "description": "Intended use of patient data (treatment, billing, research, quality_improvement)"
      },
      "data_sharing": {
        "type": "boolean",
        "required": true,
        "description": "Whether data will be shared with external parties"
      },
      "retention_period": {
        "type": "integer",
        "required": true,
        "description": "Planned data retention period in years"
      },
      "patient_consent_obtained": {
        "type": "boolean",
        "required": true,
        "description": "Whether patient consent has been obtained"
      },
      "access_controls": {
        "type": "array",
        "required": true,
        "description": "Access control measures in place (role_based, encryption, audit_logs, authentication)",
        "items": {
          "type": "string"
        },
        "minItems": 1,
        "maxItems": 10
      },
      "geographic_location": {
        "type": "string",
        "required": false,
        "description": "Geographic location for jurisdiction-specific compliance",
        "default": "US"
      }
    },
    "error_messages": [
      "Missing required data elements: At least one data element type must be specified.",
      "Invalid intended use: Use must be treatment, billing, research, or quality_improvement.",
      "Insufficient access controls: Minimum security measures not met for data protection.",
      "Consent required: Patient consent is mandatory for the specified data use.",
      "Excessive retention period: Data retention period exceeds regulatory limits.",
      "Data sharing restrictions: External data sharing requires additional compliance measures.",
      "Jurisdiction compliance error: Data handling does not meet location-specific requirements."
    ],
    "usage": "Specify data_elements being processed, intended_use, data_sharing status, retention_period, patient_consent_obtained, and access_controls. Optionally specify geographic_location. Returns compliance status and recommendations.",
    "output_details": {
      "compliance_status": {
        "type": "string",
        "description": "Overall compliance status (compliant, non_compliant, needs_review)"
      },
      "violations_found": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of compliance violations identified"
      },
      "recommendations": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Recommended actions to achieve compliance"
      },
      "risk_score": {
        "type": "number",
        "description": "Privacy risk assessment score (0-1, higher = more risk)"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Patient Portal Creator",
    "tool_description": "Creates secure patient portal accounts with appropriate access credentials and permissions for patients to access their health information online.",
    "parameters": {
      "patient_email": {
        "type": "string",
        "required": true,
        "description": "Patient's email address for portal login"
      },
      "access_level": {
        "type": "string",
        "required": true,
        "description": "Portal access level (full, limited, guardian, proxy)"
      },
      "enable_features": {
        "type": "array",
        "required": true,
        "description": "Portal features to enable (appointments, messaging, lab_results, billing, medications)",
        "items": {
          "type": "string"
        },
        "minItems": 1,
        "maxItems": 5
      },
      "security_questions": {
        "type": "array",
        "required": true,
        "description": "Security questions for account recovery",
        "items": {
          "type": "string"
        },
        "minItems": 2,
        "maxItems": 5
      },
      "notification_preferences": {
        "type": "array",
        "required": false,
        "description": "Types of notifications to enable (email, sms, push)",
        "items": {
          "type": "string"
        },
        "default": ["email"]
      }
    },
    "error_messages": [
      "Invalid email format: Email address must be in valid format for portal access.",
      "Invalid access level: Access level must be full, limited, guardian, or proxy.",
      "Unsupported portal feature: One or more requested features are not available.",
      "Insufficient security questions: At least 2 security questions are required.",
      "Email already in use: The provided email address is already associated with another portal account.",
      "Account creation failed: Unable to create patient portal account due to system error."
    ],
    "usage": "Provide patient_email, access_level, enable_features array, and security_questions array. Optionally specify notification_preferences. Returns portal account details and access credentials.",
    "output_details": {
      "portal_username": {
        "type": "string",
        "description": "Generated username for portal access"
      },
      "temporary_password": {
        "type": "string",
        "description": "Temporary password for initial login"
      },
      "account_status": {
        "type": "string",
        "description": "Portal account status (active, pending_activation, suspended)"
      },
      "activation_required": {
        "type": "boolean",
        "description": "Whether email activation is required"
      },
      "portal_url": {
        "type": "string",
        "description": "URL for patient portal access"
      }
    }
  }
  ```

  ```json
  {
    "tool_
