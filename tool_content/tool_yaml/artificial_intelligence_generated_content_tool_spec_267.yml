field_name: artificial_intelligence_generated_content
subfield: Image Creation and Visual Art
task: Edit and modify existing images with AI-powered transformations
tool_description: |-
  ## STEP 1 — Rate task difficulty

  This task involves complex computer vision operations, requiring coordination between multiple AI models, handling various image formats and transformations, and managing quality control across different editing operations. The scope includes diverse transformation types (style transfer, object manipulation, enhancement), significant dependencies between preprocessing and editing steps, and high risk of quality degradation. **Difficulty: Hard**

  ## STEP 2 — Set a tool budget

  Given the hard difficulty rating, I'm targeting 17 tools within the 15-20 range. This allows for comprehensive coverage of image preprocessing, various transformation types, quality assessment, batch operations, and output management while maintaining tool composability.

  ## STEP 3 — List all tool names and dependencies

  **Tools with upstream dependencies and downstream affordances:**
  1. Image Format Converter (consumes: image files → produces: standardized formats)
  2. Image Metadata Extractor (consumes: images → produces: metadata info)
  3. Image Quality Analyzer (consumes: images → produces: quality metrics)
  4. Background Remover (consumes: images → produces: masked images)
  5. Object Detector (consumes: images → produces: object locations)
  6. Style Transfer Applicator (consumes: images + style refs → produces: stylized images)
  7. Color Palette Modifier (consumes: images + color specs → produces: recolored images)
  8. Resolution Enhancer (consumes: low-res images → produces: high-res images)
  9. Lighting Adjuster (consumes: images + lighting params → produces: adjusted images)
  10. Texture Synthesizer (consumes: images + texture specs → produces: textured images)
  11. Object Replacer (consumes: images + masks + replacement specs → produces: modified images)
  12. Image Compositor (consumes: multiple images + positioning → produces: composite images)
  13. Filter Bank Processor (consumes: images + filter specs → produces: filtered images)
  14. Batch Transformation Manager (consumes: image batches + operations → produces: processed batches)
  15. Quality Comparison Tool (consumes: original + modified images → produces: comparison metrics)
  16. Transformation Validator (consumes: transformed images → produces: validation results)
  17. Output Format Optimizer (consumes: processed images → produces: optimized outputs)

  ## STEP 4 — Multi-tool plans

  **Simple Plans:**
  - Basic Enhancement: Image Quality Analyzer → Resolution Enhancer → Output Format Optimizer
  - Color Correction: Color Palette Modifier → Quality Comparison Tool → Output Format Optimizer

  **Medium Plans:**
  - Object Replacement: Object Detector → Background Remover → Object Replacer → Transformation Validator → Output Format Optimizer
  - Style Transfer Workflow: Image Metadata Extractor → Style Transfer Applicator → Lighting Adjuster → Quality Comparison Tool → Output Format Optimizer

  **Complex Plans:**
  - Complete Image Redesign: Image Format Converter → Object Detector → Background Remover → Style Transfer Applicator → Texture Synthesizer → Object Replacer → Image Compositor → Resolution Enhancer → Transformation Validator → Output Format Optimizer
  - Professional Batch Processing: Image Metadata Extractor → Image Quality Analyzer → Batch Transformation Manager (with multiple filters) → Quality Comparison Tool → Transformation Validator → Output Format Optimizer

  ## STEP 5 — Produce tools

  ```json
  {
    "tool_name": "Image Format Converter",
    "tool_description": "Converts images between different formats and ensures compatibility with downstream AI processing tools.",
    "parameters": {
      "input_path": {
        "type": "string",
        "required": true,
        "description": "Path to the input image file"
      },
      "output_format": {
        "type": "string",
        "required": true,
        "description": "Target format: PNG, JPEG, WEBP, TIFF, BMP"
      },
      "quality": {
        "type": "integer",
        "required": false,
        "description": "Quality level for lossy formats (1-100)",
        "default": 95
      }
    },
    "error_messages": [
      "Invalid input path: Ensure the file exists and is accessible.",
      "Unsupported format: Use one of [PNG, JPEG, WEBP, TIFF, BMP].",
      "Quality out of range: Quality must be between 1-100 for JPEG/WEBP formats.",
      "Corrupted image file: The input image appears to be damaged or unreadable."
    ],
    "usage": "Provide input_path and output_format. Set quality parameter for lossy formats. Tool handles format conversion and validates output integrity.",
    "output_details": {
      "converted_path": {
        "type": "string",
        "description": "Path to the converted image file"
      },
      "original_size": {
        "type": "integer",
        "description": "Original file size in bytes"
      },
      "new_size": {
        "type": "integer",
        "description": "New file size in bytes after conversion"
      },
      "conversion_status": {
        "type": "string",
        "description": "Status of the conversion operation"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Image Metadata Extractor",
    "tool_description": "Extracts comprehensive metadata from images including dimensions, color space, camera settings, and technical properties needed for AI transformations.",
    "parameters": {
      "image_path": {
        "type": "string",
        "required": true,
        "description": "Path to the image file for metadata extraction"
      },
      "include_exif": {
        "type": "boolean",
        "required": false,
        "description": "Whether to include EXIF camera data",
        "default": true
      },
      "include_color_analysis": {
        "type": "boolean",
        "required": false,
        "description": "Whether to perform color space analysis",
        "default": true
      },
      "extract_histogram": {
        "type": "boolean",
        "required": false,
        "description": "Whether to extract color histogram data",
        "default": false
      }
    },
    "error_messages": [
      "Image not found: The specified image path does not exist or is not accessible.",
      "Unsupported image format: The file format cannot be processed for metadata extraction.",
      "Corrupted metadata: The image metadata is corrupted or incomplete.",
      "Insufficient permissions: Cannot read the image file due to permission restrictions."
    ],
    "usage": "Provide image_path and specify which metadata components to extract. Use extracted metadata to inform downstream transformation parameters and quality settings.",
    "output_details": {
      "width": {
        "type": "integer",
        "description": "Image width in pixels"
      },
      "height": {
        "type": "integer",
        "description": "Image height in pixels"
      },
      "color_space": {
        "type": "string",
        "description": "Color space of the image (RGB, CMYK, etc.)"
      },
      "bit_depth": {
        "type": "integer",
        "description": "Color bit depth per channel"
      },
      "file_format": {
        "type": "string",
        "description": "Original file format"
      },
      "creation_date": {
        "type": "string",
        "description": "Image creation timestamp",
        "format": "date-time"
      },
      "dominant_colors": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Top 5 dominant colors in hex format"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Image Quality Analyzer",
    "tool_description": "Analyzes image quality metrics including sharpness, noise levels, exposure, and overall technical quality to guide enhancement decisions.",
    "parameters": {
      "image_path": {
        "type": "string",
        "required": true,
        "description": "Path to the image file for quality analysis"
      },
      "analysis_depth": {
        "type": "string",
        "required": false,
        "description": "Analysis level: basic, standard, comprehensive",
        "default": "standard"
      }
    },
    "error_messages": [
      "Image file not accessible: Check that the image path exists and is readable.",
      "Invalid analysis depth: Use one of [basic, standard, comprehensive].",
      "Image too small: Image must be at least 100x100 pixels for meaningful analysis.",
      "Processing error: Unable to complete quality analysis due to image format issues."
    ],
    "usage": "Provide image_path and select analysis_depth. Use quality scores to determine which enhancements are needed and set appropriate processing parameters.",
    "output_details": {
      "overall_quality_score": {
        "type": "number",
        "description": "Overall quality score from 0-100"
      },
      "sharpness_score": {
        "type": "number",
        "description": "Image sharpness rating from 0-100"
      },
      "noise_level": {
        "type": "number",
        "description": "Noise level from 0-100 (lower is better)"
      },
      "brightness_score": {
        "type": "number",
        "description": "Brightness appropriateness from 0-100"
      },
      "contrast_score": {
        "type": "number",
        "description": "Contrast quality from 0-100"
      },
      "color_accuracy": {
        "type": "number",
        "description": "Color accuracy assessment from 0-100"
      },
      "recommended_enhancements": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Suggested improvement operations"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Background Remover",
    "tool_description": "Uses AI to automatically detect and remove backgrounds from images, creating clean cutouts or transparent backgrounds for further editing.",
    "parameters": {
      "image_path": {
        "type": "string",
        "required": true,
        "description": "Path to the input image file"
      },
      "output_format": {
        "type": "string",
        "required": false,
        "description": "Output format: PNG, TIFF (supports transparency)",
        "default": "PNG"
      },
      "edge_refinement": {
        "type": "boolean",
        "required": false,
        "description": "Apply edge refinement for smoother cutouts",
        "default": true
      },
      "feather_radius": {
        "type": "number",
        "required": false,
        "description": "Edge feathering radius in pixels (0-10)",
        "default": 1.0
      },
      "confidence_threshold": {
        "type": "number",
        "required": false,
        "description": "AI confidence threshold for background detection (0.1-0.9)",
        "default": 0.7
      }
    },
    "error_messages": [
      "Image not found: The specified input image path does not exist.",
      "Invalid output format: Use PNG or TIFF for transparency support.",
      "Feather radius out of range: Must be between 0-10 pixels.",
      "Confidence threshold invalid: Must be between 0.1-0.9.",
      "Background detection failed: Unable to identify clear subject-background separation.",
      "Complex scene detected: Image contains multiple overlapping subjects that complicate background removal."
    ],
    "usage": "Provide image_path and configure removal parameters. The tool identifies the main subject and removes the background. Use edge_refinement and feather_radius for better cutout quality.",
    "output_details": {
      "output_path": {
        "type": "string",
        "description": "Path to the background-removed image"
      },
      "mask_path": {
        "type": "string",
        "description": "Path to the generated mask file"
      },
      "subject_confidence": {
        "type": "number",
        "description": "AI confidence in subject detection (0-1)"
      },
      "edge_pixels_processed": {
        "type": "integer",
        "description": "Number of edge pixels refined"
      },
      "processing_time": {
        "type": "number",
        "description": "Processing time in seconds"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Object Detector",
    "tool_description": "Detects and locates objects within images using AI vision models, providing bounding boxes and confidence scores for identified objects.",
    "parameters": {
      "image_path": {
        "type": "string",
        "required": true,
        "description": "Path to the input image file"
      },
      "model_type": {
        "type": "string",
        "required": false,
        "description": "Detection model: general, person, vehicle, animal, furniture",
        "default": "general"
      },
      "confidence_threshold": {
        "type": "number",
        "required": false,
        "description": "Minimum confidence for object detection (0.1-0.9)",
        "default": 0.5
      },
      "max_objects": {
        "type": "integer",
        "required": false,
        "description": "Maximum number of objects to detect (1-50)",
        "default": 20
      },
      "include_masks": {
        "type": "boolean",
        "required": false,
        "description": "Generate pixel-level masks for detected objects",
        "default": false
      }
    },
    "error_messages": [
      "Image file not accessible: Verify the image path exists and is readable.",
      "Unsupported model type: Use one of [general, person, vehicle, animal, furniture].",
      "Confidence threshold out of range: Must be between 0.1-0.9.",
      "Max objects invalid: Must be between 1-50.",
      "No objects detected: No objects found above the specified confidence threshold.",
      "Image resolution too low: Image must be at least 224x224 pixels for reliable detection."
    ],
    "usage": "Provide image_path and configure detection parameters. Choose appropriate model_type for your use case. Set confidence_threshold based on precision requirements.",
    "output_details": {
      "detected_objects": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of detected object class names"
      },
      "bounding_boxes": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Bounding box coordinates as x,y,width,height strings"
      },
      "confidence_scores": {
        "type": "array",
        "items": {
          "type": "number"
        },
        "description": "Confidence scores for each detected object"
      },
      "object_count": {
        "type": "integer",
        "description": "Total number of objects detected"
      },
      "mask_paths": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Paths to generated mask files (if include_masks=true)"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Style Transfer Applicator",
    "tool_description": "Applies artistic style transfer to images using neural networks, transforming content images with the style of reference artwork or photographs.",
    "parameters": {
      "content_image_path": {
        "type": "string",
        "required": true,
        "description": "Path to the content image to be stylized"
      },
      "style_image_path": {
        "type": "string",
        "required": true,
        "description": "Path to the style reference image"
      },
      "style_strength": {
        "type": "number",
        "required": false,
        "description": "Style transfer intensity (0.1-2.0)",
        "default": 1.0
      },
      "content_weight": {
        "type": "number",
        "required": false,
        "description": "Content preservation weight (0.1-1.0)",
        "default": 0.5
      },
      "output_resolution": {
        "type": "string",
        "required": false,
        "description": "Output resolution: original, 512x512, 1024x1024, 2048x2048",
        "default": "original"
      },
      "preserve_colors": {
        "type": "boolean",
        "required": false,
        "description": "Preserve original colors while applying style",
        "default": false
      },
      "iterations": {
        "type": "integer",
        "required": false,
        "description": "Number of optimization iterations (100-2000)",
        "default": 1000
      },
      "style_layers": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "required": false,
        "description": "Neural network layers to use for style extraction",
        "default": ["conv1_1", "conv2_1", "conv3_1", "conv4_1", "conv5_1"]
      }
    },
    "error_messages": [
      "Content image not found: Verify the content image path exists and is accessible.",
      "Style image not found: Verify the style image path exists and is accessible.",
      "Style strength out of range: Must be between 0.1-2.0.",
      "Content weight out of range: Must be between 0.1-1.0.",
      "Invalid output resolution: Use original, 512x512, 1024x1024, or 2048x2048.",
      "Iterations out of range: Must be between 100-2000.",
      "Invalid style layers: Style layers must be valid CNN layer names.",
      "Images too different in aspect ratio: Extreme aspect ratio differences may cause distortion.",
      "Insufficient GPU memory: Reduce output resolution or use smaller input images.",
      "Style transfer failed: Unable to converge to a stable stylized result."
    ],
    "usage": "Provide content_image_path and style_image_path. Adjust style_strength and content_weight to balance artistic effect vs content preservation. Use preserve_colors to maintain original color scheme.",
    "output_details": {
      "stylized_image_path": {
        "type": "string",
        "description": "Path to the stylized output image"
      },
      "style_loss": {
        "type": "number",
        "description": "Final style loss value"
      },
      "content_loss": {
        "type": "number",
        "description": "Final content loss value"
      },
      "total_loss": {
        "type": "number",
        "description": "Combined optimization loss"
      },
      "processing_time": {
        "type": "number",
        "description": "Processing time in seconds"
      },
      "convergence_iterations": {
        "type": "integer",
        "description": "Number of iterations until convergence"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Color Palette Modifier",
    "tool_description": "Modifies image colors by applying color palette transformations, temperature adjustments, saturation changes, and selective color replacements.",
    "parameters": {
      "image_path": {
        "type": "string",
        "required": true,
        "description": "Path to the input image file"
      },
      "operation": {
        "type": "string",
        "required": true,
        "description": "Color operation: temperature, saturation, hue_shift, palette_replace, selective_color"
      },
      "temperature": {
        "type": "number",
        "required": false,
        "description": "Color temperature adjustment (-100 to 100)",
        "default": 0
      },
      "saturation": {
        "type": "number",
        "required": false,
        "description": "Saturation adjustment (-100 to 100)",
        "default": 0
      },
      "hue_shift": {
        "type": "number",
        "required": false,
        "description": "Hue rotation in degrees (-180 to 180)",
        "default": 0
      }
    },
    "error_messages": [
      "Image not found: The specified image path does not exist or is not accessible.",
      "Invalid operation: Use one of [temperature, saturation, hue_shift, palette_replace, selective_color].",
      "Temperature out of range: Must be between -100 and 100.",
      "Saturation out of range: Must be between -100 and 100.",
      "Hue shift out of range: Must be between -180 and 180.",
      "Color modification failed: Unable to apply the specified color transformation."
    ],
    "usage": "Provide image_path and specify the color operation to perform. Set appropriate adjustment values based on the chosen operation. Combine multiple operations for complex color grading.",
    "output_details": {
      "modified_image_path": {
        "type": "string",
        "description": "Path to the color-modified image"
      },
      "color_histogram_change": {
        "type": "number",
        "description": "Measure of overall color distribution change"
      },
      "dominant_colors_before": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Top 5 dominant colors before modification"
      },
      "dominant_colors_after": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Top 5 dominant colors after modification"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Resolution Enhancer",
    "tool_description": "Enhances image resolution using AI upscaling techniques, improving detail and sharpness while maintaining image quality and reducing artifacts.",
    "parameters": {
      "image_path": {
        "type": "string",
        "required": true,
        "description": "Path to the input image file"
      },
      "scale_factor": {
        "type": "number",
        "required": true,
        "description": "Upscaling factor (1.5, 2.0, 3.0, 4.0)"
      },
      "enhancement_model": {
        "type": "string",
        "required": false,
        "description": "AI model: real_esrgan, esrgan, srcnn, edsr",
        "default": "real_esrgan"
      },
      "denoise_strength": {
        "type": "number",
        "required": false,
        "description": "Noise reduction strength (0-1)",
        "default": 0.5
      }
    },
    "error_messages": [
      "Image not found: The specified image path does not exist.",
      "Invalid scale factor: Use one of [1.5, 2.0, 3.0, 4.0].",
      "Unsupported model: Use one of [real_esrgan, esrgan, srcnn, edsr].",
      "Denoise strength out of range: Must be between 0-1.",
      "Image too large: Input image exceeds maximum size limit for upscaling.",
      "Enhancement failed: Unable to complete resolution enhancement due to processing error."
    ],
    "usage": "Provide image_path and scale_factor. Choose enhancement_model based on image type - real_esrgan for photos, esrgan for artwork. Adjust denoise_strength for noisy images.",
    "output_details": {
      "enhanced_image_path": {
        "type": "string",
        "description": "Path to the resolution-enhanced image"
      },
      "original_dimensions": {
        "type": "string",
        "description": "Original image dimensions as 'widthxheight'"
      },
      "enhanced_dimensions": {
        "type": "string",
        "description": "Enhanced image dimensions as 'widthxheight'"
      },
      "quality_improvement_score": {
        "type": "number",
        "description": "Estimated quality improvement score (0-100)"
      },
      "processing_time": {
        "type": "number",
        "description": "Processing time in seconds"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Lighting Adjuster",
    "tool_description": "Adjusts lighting conditions in images including exposure, shadows, highlights, and contrast to improve visual appeal and correct lighting issues.",
    "parameters": {
      "image_path": {
        "type": "string",
        "required": true,
        "description": "Path to the input image file"
      },
      "exposure": {
        "type": "number",
        "required": false,
        "description": "Exposure adjustment (-3.0 to 3.0 stops)",
        "default": 0.0
      },
      "shadows": {
        "type": "number",
        "required": false,
        "description": "Shadow adjustment (-100 to 100)",
        "default": 0
      },
      "highlights": {
        "type": "number",
        "required": false,
        "description": "Highlight adjustment (-100 to 100)",
        "default": 0
      },
      "contrast": {
        "type": "number",
        "required": false,
        "description": "Contrast adjustment (-100 to 100)",
        "default": 0
      },
      "brightness": {
        "type": "number",
        "required": false,
        "description": "Brightness adjustment (-100 to 100)",
        "default": 0
      },
      "auto_correct": {
        "type": "boolean",
        "required": false,
        "description": "Apply automatic lighting correction",
        "default": false
      }
    },
    "error_messages": [
      "Image not accessible: Verify the image path exists and is readable.",
      "Exposure out of range: Must be between -3.0 and 3.0 stops.",
      "Shadows adjustment invalid: Must be between -100 and 100.",
      "Highlights adjustment invalid: Must be between -100 and 100.",
      "Contrast adjustment invalid: Must be between -100 and 100.",
      "Brightness adjustment invalid: Must be between -100 and 100.",
      "Lighting adjustment failed: Unable to apply lighting modifications to the image."
    ],
    "usage": "Provide image_path and adjust lighting parameters as needed. Use auto_correct for automatic optimization, or manually fine-tune exposure, shadows, highlights, contrast, and brightness.",
    "output_details": {
      "adjusted_image_path": {
        "type": "string",
        "description": "Path to the lighting-adjusted image"
      },
      "exposure_applied": {
        "type": "number",
        "description": "Final exposure adjustment applied"
      },
      "histogram_improvement": {
        "type": "number",
        "description": "Histogram distribution improvement score (0-100)"
      },
      "lighting_quality_score": {
        "type": "number",
        "description": "Overall lighting quality score after adjustment (0-100)"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Texture Synthesizer",
    "tool_description": "Applies texture synthesis and modification to images, adding realistic textures or modifying existing surface appearances using AI-based texture generation.",
    "parameters": {
      "image_path": {
        "type": "string",
        "required": true,
        "description": "Path to the input image file"
      },
      "texture_type": {
        "type": "string",
        "required": true,
        "description": "Texture to apply: fabric, wood, metal, stone, paper, leather, concrete"
      },
      "texture_strength": {
        "type": "number",
        "required": false,
        "description": "Texture application strength (0.1-2.0)",
        "default": 1.0
      },
      "blend_mode": {
        "type": "string",
        "required": false,
        "description": "Blending mode: overlay, multiply, soft_light, hard_light",
        "default": "overlay"
      },
      "mask_path": {
        "type": "string",
        "required": false,
        "description": "Path to mask file for selective texture application",
        "default": "None"
      }
    },
    "error_messages": [
      "Image not found: The specified image path does not exist or is not accessible.",
      "Invalid texture type: Use one of [fabric, wood, metal, stone, paper, leather, concrete].",
      "Texture strength out of range: Must be between 0.1-2.0.",
      "Invalid blend mode: Use one of [overlay, multiply, soft_light, hard_light].",
      "Mask file not found: The specified mask path does not exist (if provided).",
      "Texture synthesis failed: Unable to generate or apply the specified texture.",
      "Incompatible mask dimensions: Mask must match image dimensions exactly."
    ],
    "usage": "Provide image_path and select texture_type. Adjust texture_strength for intensity control. Use mask_path to apply texture only to specific image regions. Choose blend_mode for different texture effects.",
    "output_details": {
      "textured_image_path": {
        "type": "string",
        "description": "Path to the texture-applied image"
      },
      "texture_coverage": {
        "type": "number",
        "description": "Percentage of image area covered by texture (0-100)"
      },
      "texture_quality_score": {
        "type": "number",
        "description": "Quality assessment of texture application (0-100)"
      },
      "blending_effectiveness": {
        "type": "number",
        "description": "How well the texture blended with original image (0-100)"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Object Replacer",
    "tool_description": "Replaces detected objects in images with new content using inpainting and object insertion techniques, maintaining realistic lighting and perspective.",
    "parameters": {
      "image_path": {
        "type": "string",
        "required": true,
        "description": "Path to the input image file"
      },
      "mask_path": {
        "type": "string",
        "required": true,
        "description": "Path to mask defining area to replace"
      },
      "replacement_type": {
        "type": "string",
        "required": true,
        "description": "Replacement method: inpaint, object_insert, texture_fill, color_fill"
      },
      "replacement_image_path": {
        "type": "string",
        "required": false,
        "description": "Path to replacement object image (for object_insert)",
        "default": "None"
      },
      "match_lighting": {
        "type": "boolean",
        "required": false,
        "description": "Match lighting conditions of original image",
        "default": true
      },
      "match_perspective": {
        "type": "boolean",
        "required": false,
        "description": "Adjust perspective to match scene geometry",
        "default": true
      },
      "blend_edges": {
        "type": "boolean",
        "required": false,
        "description": "Smooth edges of replaced region",
        "default": true
      },
      "quality_mode": {
        "type": "string",
        "required": false,
        "description": "Processing quality: fast, standard, high",
        "default": "standard"
      }
    },
    "error_messages": [
      "Image not found: The specified image path does not exist or is not accessible.",
      "Mask not found: The specified mask path does not exist or is not accessible.",
      "Invalid replacement type: Use one of [inpaint, object_insert, texture_fill, color_fill].",
      "Replacement image required: object_insert mode requires replacement_image_path.",
      "Replacement image not found: The
