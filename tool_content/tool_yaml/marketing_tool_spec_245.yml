field_name: marketing
subfield: Content Creation and Management
task: Visual content creation and editing
tool_description: |-
  ## STEP 1 — Rate task difficulty

  This task involves medium complexity due to the diverse range of visual content types (images, videos, graphics), multiple editing workflows, brand consistency requirements, and the need for creative iteration cycles. The coordination between different content formats and maintaining quality standards across various platforms adds moderate complexity.

  ## STEP 2 — Set a tool budget

  Given the medium difficulty, I'll target 12 tools to cover the breadth of visual content creation workflows, from asset management to final output generation.

  ## STEP 3 — List all tool names and dependencies

  **Tools with upstream dependencies and downstream affordances:**
  1. **Image Asset Uploader** - consumes: file paths → produces: asset metadata
  2. **Brand Style Extractor** - consumes: brand guidelines → produces: style parameters
  3. **Image Editor** - consumes: image assets, edit parameters → produces: edited images
  4. **Text Overlay Generator** - consumes: text, styling → produces: text-overlaid images
  5. **Video Frame Extractor** - consumes: video files → produces: frame images
  6. **Video Assembler** - consumes: video clips, audio → produces: assembled videos
  7. **Color Palette Analyzer** - consumes: images → produces: color schemes
  8. **Template Matcher** - consumes: content specs → produces: template recommendations
  9. **Batch Processor** - consumes: multiple assets, operations → produces: processed batches
  10. **Quality Checker** - consumes: visual content → produces: quality metrics
  11. **Format Converter** - consumes: content files → produces: converted formats
  12. **Content Optimizer** - consumes: content, platform specs → produces: optimized content

  ## STEP 4 — Multi-tool plans

  **Simple plans:**
  - Single image edit: Image Asset Uploader → Image Editor → Quality Checker
  - Brand color extraction: Image Asset Uploader → Color Palette Analyzer → Brand Style Extractor

  **Medium plans:**
  - Social media post creation: Template Matcher → Image Editor → Text Overlay Generator → Format Converter → Content Optimizer
  - Video thumbnail creation: Video Frame Extractor → Image Editor → Text Overlay Generator → Quality Checker

  **Complex plans:**
  - Multi-platform campaign: Image Asset Uploader → Brand Style Extractor → Template Matcher → Batch Processor → (Image Editor + Text Overlay Generator) → Format Converter → Content Optimizer → Quality Checker
  - Video content production: Video Frame Extractor → Image Editor → Text Overlay Generator → Video Assembler → Format Converter → Content Optimizer

  ## STEP 5 — Produce tools

  ```json
  {
    "tool_name": "Image Asset Uploader",
    "tool_description": "Uploads and catalogs image assets with metadata extraction for content management systems.",
    "parameters": {
      "file_path": {
        "type": "string",
        "required": true,
        "description": "Local file path to the image asset"
      },
      "asset_category": {
        "type": "string",
        "required": true,
        "description": "Category classification: product, lifestyle, brand, background, icon"
      },
      "tags": {
        "type": "array",
        "required": false,
        "items": {"type": "string"},
        "description": "Descriptive tags for asset organization",
        "default": null
      }
    },
    "error_messages": [
      "File not found: Verify the file_path exists and is accessible.",
      "Unsupported format: Use JPG, PNG, GIF, or WEBP image formats only.",
      "Invalid category: Use one of [product, lifestyle, brand, background, icon].",
      "File size too large: Maximum file size is 50MB."
    ],
    "usage": "Provide the file_path and asset_category, optionally add descriptive tags. Returns asset metadata and upload confirmation.",
    "output_details": {
      "asset_id": {
        "type": "string",
        "description": "Unique identifier for the uploaded asset"
      },
      "file_size": {
        "type": "number",
        "description": "File size in megabytes"
      },
      "dimensions": {
        "type": "string",
        "description": "Image dimensions as 'width x height'"
      },
      "upload_timestamp": {
        "type": "string",
        "description": "Upload completion timestamp"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Brand Style Extractor",
    "tool_description": "Extracts and standardizes brand visual elements including colors, fonts, and style guidelines for consistent content creation.",
    "parameters": {
      "brand_name": {
        "type": "string",
        "required": true,
        "description": "Name of the brand for style extraction"
      },
      "primary_colors": {
        "type": "array",
        "required": true,
        "items": {"type": "string"},
        "description": "Primary brand colors in hex format (e.g., #FF5733)",
        "minItems": 1,
        "maxItems": 5
      },
      "secondary_colors": {
        "type": "array",
        "required": false,
        "items": {"type": "string"},
        "description": "Secondary brand colors in hex format",
        "default": null
      },
      "font_family": {
        "type": "string",
        "required": true,
        "description": "Primary font family name"
      },
      "logo_url": {
        "type": "string",
        "required": false,
        "description": "URL or path to brand logo file",
        "default": null
      },
      "style_mood": {
        "type": "string",
        "required": true,
        "description": "Brand mood: modern, classic, playful, professional, luxury, minimalist"
      },
      "target_audience": {
        "type": "string",
        "required": true,
        "description": "Primary target demographic"
      },
      "brand_voice": {
        "type": "string",
        "required": true,
        "description": "Brand voice tone: formal, casual, friendly, authoritative, humorous"
      }
    },
    "error_messages": [
      "Invalid color format: Use hex color codes starting with # (e.g., #FF5733).",
      "Unsupported style mood: Use one of [modern, classic, playful, professional, luxury, minimalist].",
      "Invalid brand voice: Use one of [formal, casual, friendly, authoritative, humorous].",
      "Missing required fields: brand_name, primary_colors, font_family, style_mood, target_audience, and brand_voice are required."
    ],
    "usage": "Define brand_name, primary_colors, font_family, style_mood, target_audience, and brand_voice. Optionally include secondary_colors and logo_url. Returns standardized brand style guide.",
    "output_details": {
      "style_guide_id": {
        "type": "string",
        "description": "Unique identifier for the generated style guide"
      },
      "color_palette": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Complete color palette with hex codes"
      },
      "typography_rules": {
        "type": "string",
        "description": "Font usage guidelines and hierarchy"
      },
      "visual_guidelines": {
        "type": "string",
        "description": "Summary of visual style requirements"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Image Editor",
    "tool_description": "Performs comprehensive image editing operations including cropping, filtering, color adjustment, and effects application.",
    "parameters": {
      "asset_id": {
        "type": "string",
        "required": true,
        "description": "Unique identifier of the image asset to edit"
      },
      "operations": {
        "type": "array",
        "required": true,
        "items": {"type": "string"},
        "description": "List of edit operations: crop, resize, brightness, contrast, saturation, blur, sharpen, vintage, bw",
        "minItems": 1,
        "maxItems": 10
      },
      "crop_dimensions": {
        "type": "string",
        "required": false,
        "description": "Crop dimensions as 'width x height' or aspect ratio like '16:9'",
        "default": null
      },
      "resize_dimensions": {
        "type": "string",
        "required": false,
        "description": "Resize dimensions as 'width x height' in pixels",
        "default": null
      },
      "brightness_level": {
        "type": "number",
        "required": false,
        "description": "Brightness adjustment from -100 to 100",
        "default": 0
      },
      "contrast_level": {
        "type": "number",
        "required": false,
        "description": "Contrast adjustment from -100 to 100",
        "default": 0
      }
    },
    "error_messages": [
      "Asset not found: Verify the asset_id exists in the system.",
      "Invalid operation: Use supported operations [crop, resize, brightness, contrast, saturation, blur, sharpen, vintage, bw].",
      "Invalid dimensions format: Use 'width x height' format for dimensions.",
      "Parameter out of range: brightness_level and contrast_level must be between -100 and 100.",
      "Missing required parameters: crop_dimensions required when using 'crop' operation, resize_dimensions required when using 'resize' operation."
    ],
    "usage": "Provide asset_id and list of operations. Include specific parameters like crop_dimensions, resize_dimensions, brightness_level, contrast_level as needed for your operations.",
    "output_details": {
      "edited_asset_id": {
        "type": "string",
        "description": "New asset ID for the edited image"
      },
      "operations_applied": {
        "type": "array",
        "items": {"type": "string"},
        "description": "List of successfully applied operations"
      },
      "final_dimensions": {
        "type": "string",
        "description": "Final image dimensions after editing"
      },
      "processing_time": {
        "type": "number",
        "description": "Time taken for processing in seconds"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Text Overlay Generator",
    "tool_description": "Generates text overlays on images with customizable typography, positioning, and styling effects.",
    "parameters": {
      "asset_id": {
        "type": "string",
        "required": true,
        "description": "Image asset ID to add text overlay"
      },
      "text_content": {
        "type": "string",
        "required": true,
        "description": "Text content to overlay on image"
      },
      "font_family": {
        "type": "string",
        "required": false,
        "description": "Font family name",
        "default": "Arial"
      },
      "font_size": {
        "type": "integer",
        "required": false,
        "description": "Font size in pixels (12-200)",
        "default": 24
      },
      "text_color": {
        "type": "string",
        "required": false,
        "description": "Text color in hex format",
        "default": "#FFFFFF"
      },
      "position": {
        "type": "string",
        "required": false,
        "description": "Text position: top-left, top-center, top-right, center-left, center, center-right, bottom-left, bottom-center, bottom-right",
        "default": "center"
      },
      "background_opacity": {
        "type": "number",
        "required": false,
        "description": "Text background opacity (0.0-1.0)",
        "default": 0.0
      },
      "text_shadow": {
        "type": "boolean",
        "required": false,
        "description": "Enable text shadow for better readability",
        "default": false
      }
    },
    "error_messages": [
      "Asset not found: Verify the asset_id exists in the system.",
      "Text content too long: Maximum 500 characters allowed.",
      "Invalid font size: Font size must be between 12 and 200 pixels.",
      "Invalid color format: Use hex color codes starting with # (e.g., #FFFFFF).",
      "Invalid position: Use one of [top-left, top-center, top-right, center-left, center, center-right, bottom-left, bottom-center, bottom-right].",
      "Invalid opacity value: background_opacity must be between 0.0 and 1.0."
    ],
    "usage": "Provide asset_id and text_content, customize font_family, font_size, text_color, position, background_opacity, and text_shadow as needed. Returns image with text overlay applied.",
    "output_details": {
      "overlaid_asset_id": {
        "type": "string",
        "description": "New asset ID for image with text overlay"
      },
      "text_applied": {
        "type": "string",
        "description": "The text content that was applied"
      },
      "text_position": {
        "type": "string",
        "description": "Final position of the text overlay"
      },
      "readability_score": {
        "type": "number",
        "description": "Text readability score from 0-100"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Video Frame Extractor",
    "tool_description": "Extracts individual frames or sequences from video files for thumbnail creation and content analysis.",
    "parameters": {
      "video_path": {
        "type": "string",
        "required": true,
        "description": "Path to the video file"
      },
      "extraction_type": {
        "type": "string",
        "required": true,
        "description": "Type of extraction: single_frame, keyframes, interval, sequence"
      },
      "timestamp": {
        "type": "string",
        "required": false,
        "description": "Specific timestamp for single frame extraction (HH:MM:SS format)",
        "default": null
      },
      "interval_seconds": {
        "type": "number",
        "required": false,
        "description": "Interval between frames in seconds for interval extraction",
        "default": null
      },
      "frame_count": {
        "type": "integer",
        "required": false,
        "description": "Number of frames to extract (1-100)",
        "default": 1
      }
    },
    "error_messages": [
      "Video file not found: Verify the video_path exists and is accessible.",
      "Unsupported video format: Use MP4, AVI, MOV, or MKV formats.",
      "Invalid extraction type: Use one of [single_frame, keyframes, interval, sequence].",
      "Invalid timestamp format: Use HH:MM:SS format for timestamp.",
      "Parameter mismatch: timestamp required for single_frame, interval_seconds required for interval extraction.",
      "Frame count out of range: frame_count must be between 1 and 100."
    ],
    "usage": "Provide video_path and extraction_type. Include timestamp for single_frame, interval_seconds for interval, or frame_count for sequence extraction. Returns extracted frame images.",
    "output_details": {
      "extracted_frames": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Asset IDs of extracted frame images"
      },
      "extraction_timestamps": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Timestamps of extracted frames"
      },
      "video_duration": {
        "type": "string",
        "description": "Total video duration in HH:MM:SS format"
      },
      "frame_dimensions": {
        "type": "string",
        "description": "Frame dimensions as 'width x height'"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Video Assembler",
    "tool_description": "Combines video clips, images, and audio tracks into cohesive video content with transitions and effects.",
    "parameters": {
      "video_clips": {
        "type": "array",
        "required": true,
        "items": {"type": "string"},
        "description": "Array of video clip paths or asset IDs",
        "minItems": 1,
        "maxItems": 20
      },
      "audio_track": {
        "type": "string",
        "required": false,
        "description": "Path to background audio file",
        "default": null
      },
      "transition_type": {
        "type": "string",
        "required": false,
        "description": "Transition between clips: fade, slide, zoom, cut",
        "default": "cut"
      },
      "output_resolution": {
        "type": "string",
        "required": false,
        "description": "Output video resolution: 720p, 1080p, 4K",
        "default": "1080p"
      },
      "frame_rate": {
        "type": "integer",
        "required": false,
        "description": "Output frame rate (24, 30, 60 fps)",
        "default": 30
      },
      "video_quality": {
        "type": "string",
        "required": false,
        "description": "Output quality: low, medium, high",
        "default": "medium"
      }
    },
    "error_messages": [
      "Video clips not found: Verify all video_clips paths exist and are accessible.",
      "Unsupported audio format: Use MP3, WAV, or AAC audio formats.",
      "Invalid transition type: Use one of [fade, slide, zoom, cut].",
      "Invalid resolution: Use one of [720p, 1080p, 4K].",
      "Invalid frame rate: Use one of [24, 30, 60] fps.",
      "Invalid quality setting: Use one of [low, medium, high]."
    ],
    "usage": "Provide array of video_clips, optionally specify audio_track, transition_type, output_resolution, frame_rate, and video_quality. Returns assembled video file.",
    "output_details": {
      "assembled_video_id": {
        "type": "string",
        "description": "Asset ID of the assembled video"
      },
      "total_duration": {
        "type": "string",
        "description": "Total video duration in HH:MM:SS format"
      },
      "file_size": {
        "type": "number",
        "description": "Output file size in megabytes"
      },
      "processing_time": {
        "type": "number",
        "description": "Assembly processing time in seconds"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Color Palette Analyzer",
    "tool_description": "Analyzes images to extract dominant colors and generate harmonious color palettes for design consistency.",
    "parameters": {
      "asset_id": {
        "type": "string",
        "required": true,
        "description": "Image asset ID to analyze"
      },
      "palette_size": {
        "type": "integer",
        "required": false,
        "description": "Number of colors to extract (3-10)",
        "default": 5
      },
      "analysis_type": {
        "type": "string",
        "required": false,
        "description": "Analysis method: dominant, complementary, triadic, analogous",
        "default": "dominant"
      }
    },
    "error_messages": [
      "Asset not found: Verify the asset_id exists in the system.",
      "Invalid palette size: palette_size must be between 3 and 10.",
      "Invalid analysis type: Use one of [dominant, complementary, triadic, analogous].",
      "Image too small: Minimum image size is 100x100 pixels for accurate analysis."
    ],
    "usage": "Provide asset_id, optionally set palette_size and analysis_type. Returns extracted color palette with hex codes and usage recommendations.",
    "output_details": {
      "primary_colors": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Primary colors in hex format"
      },
      "color_percentages": {
        "type": "array",
        "items": {"type": "number"},
        "description": "Percentage distribution of each color"
      },
      "harmony_score": {
        "type": "number",
        "description": "Color harmony rating from 0-100"
      },
      "palette_mood": {
        "type": "string",
        "description": "Mood classification of the color palette"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Template Matcher",
    "tool_description": "Matches content requirements with appropriate design templates based on platform specifications and content type.",
    "parameters": {
      "content_type": {
        "type": "string",
        "required": true,
        "description": "Type of content: social_post, banner, story, thumbnail, header, card"
      },
      "platform": {
        "type": "string",
        "required": true,
        "description": "Target platform: instagram, facebook, twitter, linkedin, youtube, website"
      },
      "industry": {
        "type": "string",
        "required": false,
        "description": "Industry category for template styling",
        "default": "general"
      },
      "color_scheme": {
        "type": "string",
        "required": false,
        "description": "Preferred color scheme: bright, muted, monochrome, colorful",
        "default": "colorful"
      },
      "style_preference": {
        "type": "string",
        "required": false,
        "description": "Design style: minimal, modern, vintage, corporate, creative",
        "default": "modern"
      }
    },
    "error_messages": [
      "Invalid content type: Use one of [social_post, banner, story, thumbnail, header, card].",
      "Unsupported platform: Use one of [instagram, facebook, twitter, linkedin, youtube, website].",
      "Invalid color scheme: Use one of [bright, muted, monochrome, colorful].",
      "Invalid style preference: Use one of [minimal, modern, vintage, corporate, creative]."
    ],
    "usage": "Specify content_type and platform, optionally define industry, color_scheme, and style_preference. Returns matching template recommendations with specifications.",
    "output_details": {
      "recommended_templates": {
        "type": "array",
        "items": {"type": "string"},
        "description": "List of template IDs that match criteria"
      },
      "dimensions": {
        "type": "string",
        "description": "Optimal dimensions for the content type and platform"
      },
      "layout_suggestions": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Layout arrangement suggestions"
      },
      "match_confidence": {
        "type": "number",
        "description": "Template matching confidence score 0-100"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Batch Processor",
    "tool_description": "Processes multiple visual assets simultaneously with consistent operations for efficient bulk content creation.",
    "parameters": {
      "asset_ids": {
        "type": "array",
        "required": true,
        "items": {"type": "string"},
        "description": "Array of asset IDs to process",
        "minItems": 2,
        "maxItems": 50
      },
      "batch_operations": {
        "type": "array",
        "required": true,
        "items": {"type": "string"},
        "description": "Operations to apply to all assets: resize, watermark, format_convert, compress, filter",
        "minItems": 1,
        "maxItems": 5
      },
      "output_format": {
        "type": "string",
        "required": false,
        "description": "Target output format: jpg, png, webp, gif",
        "default": null
      },
      "resize_dimensions": {
        "type": "string",
        "required": false,
        "description": "Uniform resize dimensions as 'width x height'",
        "default": null
      },
      "watermark_text": {
        "type": "string",
        "required": false,
        "description": "Watermark text to apply",
        "default": null
      },
      "compression_level": {
        "type": "integer",
        "required": false,
        "description": "Compression quality 1-100",
        "default": 85
      },
      "filter_name": {
        "type": "string",
        "required": false,
        "description": "Filter to apply: sepia, blur, sharpen, vintage, bw",
        "default": null
      },
      "preserve_originals": {
        "type": "boolean",
        "required": false,
        "description": "Keep original files after processing",
        "default": true
      }
    },
    "error_messages": [
      "Assets not found: Some asset_ids in the array do not exist in the system.",
      "Invalid batch operations: Use supported operations [resize, watermark, format_convert, compress, filter].",
      "Too many assets: Maximum 50 assets can be processed in one batch.",
      "Missing required parameters: resize_dimensions required for resize operation, watermark_text for watermark, etc.",
      "Invalid compression level: compression_level must be between 1 and 100.",
      "Invalid filter name: Use one of [sepia, blur, sharpen, vintage, bw]."
    ],
    "usage": "Provide asset_ids array and batch_operations. Include specific parameters like output_format, resize_dimensions, watermark_text based on your operations. Set preserve_originals to control file retention.",
    "output_details": {
      "processed_asset_ids": {
        "type": "array",
        "items": {"type": "string"},
        "description": "New asset IDs of processed files"
      },
      "successful_operations": {
        "type": "integer",
        "description": "Number of successfully processed assets"
      },
      "failed_operations": {
        "type": "integer",
        "description": "Number of assets that failed processing"
      },
      "total_processing_time": {
        "type": "number",
        "description": "Total batch processing time in seconds"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Quality Checker",
    "tool_description": "Evaluates visual content quality including resolution, composition, brand compliance, and technical standards.",
    "parameters": {
      "asset_id": {
        "type": "string",
        "required": true,
        "description": "Asset ID to evaluate for quality"
      },
      "check_resolution": {
        "type": "boolean",
        "required": false,
        "description": "Evaluate image resolution quality",
        "default": true
      },
      "check_composition": {
        "type": "boolean",
        "required": false,
        "description": "Analyze compositional elements",
        "default": true
      },
      "brand_guidelines_id": {
        "type": "string",
        "required": false,
        "description": "Brand style guide ID for compliance checking",
        "default": null
      }
    },
    "error_messages": [
      "Asset not found: Verify the asset_id exists in the system.",
      "Brand guidelines not found: Verify the brand_guidelines_id exists if provided.",
      "Unsupported asset type: Quality checking supports image and video assets only."
    ],
    "usage": "Provide asset_id, optionally enable check_resolution and check_composition, and include brand_guidelines_id for brand compliance evaluation. Returns comprehensive quality assessment.",
    "output_details": {
      "overall_quality_score": {
        "type": "number",
        "description": "Overall quality rating from 0-100"
      },
      "resolution_score": {
        "type": "number",
        "description": "Image resolution quality score 0-100"
      },
      "composition_score": {
        "type": "number",
        "description": "Compositional quality score 0-100"
      },
      "brand_compliance_score": {
        "type": "number",
        "description": "Brand guideline compliance score 0-100"
      },
      "quality_issues": {
        "type": "array",
        "items": {"type": "string"},
        "description": "List of identified quality issues"
      },
      "recommendations": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Improvement recommendations"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Format Converter",
    "tool_description": "Converts visual content between different file formats while maintaining optimal quality and compression settings.",
    "parameters": {
      "asset_id": {
        "type": "string",
        "required": true,
        "description": "Asset ID to convert"
      },
      "target_format": {
        "type": "string",
        "required": true,
        "description": "Target file format: jpg, png, webp, gif, mp4, avi, mov"
      },
      "quality_setting": {
        "type": "integer",
        "required": false,
        "description": "Quality level 1-100 for lossy formats",
        "default": 90
      },
      "preserve_metadata": {
        "type": "boolean",
        "required": false,
        "description": "Retain original file metadata",
        "default": true
      }
    },
    "error_messages": [
      "Asset not found: Verify the asset_id exists in the system.",
      "Unsupported format conversion: Cannot convert to the specified target_format from current format.",
      "Invalid quality setting: quality_setting must be between 1 and 100.",
      "Conversion failed: File may be corrupted or format incompatible."
    ],
    "usage": "Provide asset_id and target_format, optionally adjust quality_setting and preserve_metadata. Returns converted file in the specified format.",
    "output_details": {
      "converted_asset_id": {
        "type": "string",
        "description": "New asset ID of converted file"
      },
      "original_format": {
        "type": "string",
        "description": "Original file format"
      },
      "new_format": {
        "type": "string",
        "description": "Converted file format"
      },
      "file_size_change": {
        "type": "string",
        "description": "File size change as percentage"
      },
      "conversion_time": {
        "type": "number",
        "description": "Conversion processing time in seconds"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Content Optimizer",
    "tool_description": "Optimizes visual content for specific platforms and use cases, adjusting dimensions, compression, and metadata for best performance.",
    "parameters": {
      "asset_id": {
        "type": "string",
        "required": true,
        "description": "Asset ID to optimize"
      },
      "target_platform": {
        "type": "string",
        "required": true,
        "description": "Target platform: instagram, facebook, twitter, linkedin, youtube, website, email, print"
      },
      "content_purpose": {
        "type": "string",
        "required": true,
        "description": "Content purpose: feed_post, story, profile_image, cover_photo, ad, thumbnail, hero_banner"
      },
      "optimization_priority": {
        "type": "string",
        "required": false,
        "description": "Optimization focus: speed, quality, size, engagement",
        "default
