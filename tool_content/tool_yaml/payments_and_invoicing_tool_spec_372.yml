field_name: payments_and_invoicing
subfield: Payment Processing and Gateway Integration
task: Integrate and manage multiple payment gateway connections and routing
tool_description: |-
  **STEP 1 — Rate task difficulty**

  This task involves integrating multiple payment gateways with complex routing logic, handling various payment methods, managing security protocols, and ensuring transaction reliability across different providers. The scope includes gateway configuration, transaction routing, error handling, compliance requirements, and real-time processing coordination. This is a **hard** difficulty task due to high coordination dependencies, significant error impact, complex security requirements, and extensive infrastructure needs.

  **STEP 2 — Set a tool budget**

  Given the hard difficulty rating, I'm targeting **17 tools** to cover gateway management, payment routing, transaction processing, security validation, monitoring, and compliance aspects.

  **STEP 3 — List all tool names and dependencies**

  1. **Gateway Connection Validator** - Consumes: gateway credentials, endpoints → Produces: connection status, capability info
  2. **Payment Method Mapper** - Consumes: gateway capabilities → Produces: supported payment method mappings
  3. **Routing Rules Engine** - Consumes: transaction details, gateway status → Produces: optimal gateway selection
  4. **Transaction Request Builder** - Consumes: payment data, gateway specs → Produces: formatted gateway requests
  5. **Gateway Response Parser** - Consumes: raw gateway responses → Produces: standardized transaction results
  6. **Payment Security Validator** - Consumes: payment data, security rules → Produces: validation results, risk scores
  7. **Multi Gateway Orchestrator** - Consumes: payment requests, routing rules → Produces: coordinated processing results
  8. **Transaction Status Monitor** - Consumes: transaction IDs, gateway endpoints → Produces: real-time status updates
  9. **Failover Handler** - Consumes: failed transactions, backup gateways → Produces: retry attempts, fallback results
  10. **Settlement Reconciler** - Consumes: gateway settlements, internal records → Produces: reconciliation reports
  11. **Gateway Performance Analyzer** - Consumes: transaction logs, timing data → Produces: performance metrics
  12. **Compliance Checker** - Consumes: transaction data, regulatory rules → Produces: compliance status
  13. **Webhook Event Processor** - Consumes: webhook payloads → Produces: processed event notifications
  14. **Payment Token Manager** - Consumes: sensitive payment data → Produces: secure tokens, token mappings
  15. **Gateway Rate Limiter** - Consumes: request rates, gateway limits → Produces: throttling decisions
  16. **Transaction Log Aggregator** - Consumes: multi-gateway logs → Produces: unified transaction history
  17. **Payment Route Optimizer** - Consumes: historical data, costs, success rates → Produces: optimized routing strategies

  **STEP 4 — Multi-tool plans**

  **Simple Plans:**
  1. **Basic Gateway Setup**: Gateway Connection Validator → Payment Method Mapper → Transaction Request Builder (validates connection, maps methods, builds requests)
  2. **Single Transaction Processing**: Payment Security Validator → Transaction Request Builder → Gateway Response Parser (validates, processes, parses single payment)

  **Medium Plans:**
  1. **Smart Payment Routing**: Routing Rules Engine → Multi Gateway Orchestrator → Transaction Status Monitor → Gateway Response Parser (intelligent routing with monitoring)
  2. **Failed Transaction Recovery**: Failover Handler → Gateway Connection Validator → Transaction Request Builder → Gateway Response Parser (handles failures with backup gateways)

  **Complex Plans:**
  1. **Full Payment Ecosystem**: Payment Security Validator → Routing Rules Engine → Multi Gateway Orchestrator → Transaction Status Monitor → Webhook Event Processor → Settlement Reconciler (complete payment processing with monitoring and reconciliation)
  2. **Performance-Optimized Processing**: Gateway Rate Limiter → Payment Route Optimizer → Multi Gateway Orchestrator → Gateway Performance Analyzer → Transaction Log Aggregator → Compliance Checker (optimized processing with analytics and compliance)

  **STEP 5 — Produce tools**

  ```json
  {
    "tool_name": "Gateway Connection Validator",
    "tool_description": "Validates connectivity and capabilities of payment gateway endpoints, testing authentication and retrieving supported features.",
    "parameters": {
      "gateway_name": {
        "type": "string",
        "required": true,
        "description": "Name identifier for the payment gateway"
      },
      "api_endpoint": {
        "type": "string",
        "required": true,
        "description": "Base URL for the gateway API"
      },
      "api_key": {
        "type": "string",
        "required": true,
        "description": "API key for gateway authentication"
      },
      "secret_key": {
        "type": "string",
        "required": true,
        "description": "Secret key for gateway authentication"
      },
      "test_mode": {
        "type": "boolean",
        "required": false,
        "description": "Whether to use sandbox/test environment",
        "default": true
      }
    },
    "error_messages": [
      "Authentication failed: Check that api_key and secret_key are valid and have proper permissions.",
      "Connection timeout: Gateway endpoint is unreachable or responding slowly. Verify api_endpoint URL.",
      "Invalid gateway configuration: Ensure gateway_name matches a supported provider.",
      "SSL certificate error: Gateway endpoint has invalid or expired SSL certificate."
    ],
    "usage": "Provide gateway credentials and endpoint information to test connectivity and retrieve gateway capabilities. Use test_mode=true for initial setup validation.",
    "output_details": {
      "connection_status": {
        "type": "string",
        "description": "Status of gateway connection (connected, failed, timeout)"
      },
      "response_time_ms": {
        "type": "integer",
        "description": "Gateway response time in milliseconds"
      },
      "supported_methods": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of supported payment methods by this gateway"
      },
      "capabilities": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Special capabilities like tokenization, recurring payments, etc."
      },
      "currency_support": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Supported currency codes"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Payment Method Mapper",
    "tool_description": "Maps payment methods across different gateway formats and creates standardized payment method configurations for unified processing.",
    "parameters": {
      "gateway_methods": {
        "type": "array",
        "required": true,
        "description": "Array of payment method strings from gateway",
        "items": {
          "type": "string"
        },
        "minItems": 1,
        "maxItems": 50
      },
      "gateway_name": {
        "type": "string",
        "required": true,
        "description": "Name of the payment gateway"
      }
    },
    "error_messages": [
      "Unsupported gateway: The specified gateway_name is not recognized in the mapping system.",
      "Empty payment methods: gateway_methods array cannot be empty.",
      "Invalid method format: One or more payment methods are not in recognized format for this gateway."
    ],
    "usage": "Provide the list of payment methods supported by a gateway to get standardized mappings for unified payment processing across multiple gateways.",
    "output_details": {
      "standard_methods": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Standardized payment method names"
      },
      "method_mappings": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Gateway-specific method codes mapped to standard methods"
      },
      "unsupported_methods": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Methods from gateway that have no standard mapping"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Routing Rules Engine",
    "tool_description": "Analyzes transaction parameters and gateway status to determine optimal payment gateway routing based on configurable business rules and performance metrics.",
    "parameters": {
      "transaction_amount": {
        "type": "number",
        "required": true,
        "description": "Transaction amount in base currency units"
      },
      "currency_code": {
        "type": "string",
        "required": true,
        "description": "ISO 4217 currency code"
      },
      "payment_method": {
        "type": "string",
        "required": true,
        "description": "Standardized payment method name"
      },
      "merchant_id": {
        "type": "string",
        "required": true,
        "description": "Merchant identifier"
      },
      "customer_country": {
        "type": "string",
        "required": true,
        "description": "Customer country code"
      },
      "available_gateways": {
        "type": "array",
        "required": true,
        "description": "List of currently available gateway names",
        "items": {
          "type": "string"
        },
        "minItems": 1,
        "maxItems": 10
      },
      "priority_factors": {
        "type": "array",
        "required": false,
        "description": "Routing priority factors: cost, speed, reliability, geographic",
        "items": {
          "type": "string"
        },
        "default": ["reliability", "cost"]
      },
      "risk_level": {
        "type": "string",
        "required": false,
        "description": "Transaction risk level: low, medium, high",
        "default": "medium"
      },
      "require_3ds": {
        "type": "boolean",
        "required": false,
        "description": "Whether 3D Secure authentication is required",
        "default": false
      }
    },
    "error_messages": [
      "Invalid currency code: Provide a valid ISO 4217 currency code.",
      "Unsupported payment method: The specified payment method is not supported by any available gateway.",
      "No available gateways: At least one gateway must be provided in available_gateways.",
      "Invalid risk level: Use one of [low, medium, high].",
      "Invalid priority factors: Use combinations of [cost, speed, reliability, geographic].",
      "Amount validation failed: transaction_amount must be positive number."
    ],
    "usage": "Provide transaction details and available gateways to get optimal routing recommendations. Configure priority_factors based on business requirements and set appropriate risk_level for enhanced routing decisions.",
    "output_details": {
      "recommended_gateway": {
        "type": "string",
        "description": "Primary recommended gateway for this transaction"
      },
      "alternative_gateways": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Ordered list of alternative gateways for fallback"
      },
      "routing_reason": {
        "type": "string",
        "description": "Explanation of why this gateway was selected"
      },
      "estimated_cost": {
        "type": "number",
        "description": "Estimated transaction cost for recommended gateway"
      },
      "confidence_score": {
        "type": "number",
        "description": "Confidence score for routing decision (0-100)"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Transaction Request Builder",
    "tool_description": "Constructs gateway-specific payment request payloads by transforming standardized transaction data into the required format for each payment provider.",
    "parameters": {
      "gateway_name": {
        "type": "string",
        "required": true,
        "description": "Target payment gateway identifier"
      },
      "transaction_id": {
        "type": "string",
        "required": true,
        "description": "Unique transaction identifier"
      },
      "amount": {
        "type": "number",
        "required": true,
        "description": "Transaction amount"
      },
      "currency": {
        "type": "string",
        "required": true,
        "description": "Currency code"
      },
      "payment_method": {
        "type": "string",
        "required": true,
        "description": "Payment method identifier"
      },
      "customer_email": {
        "type": "string",
        "required": true,
        "description": "Customer email address"
      },
      "customer_name": {
        "type": "string",
        "required": false,
        "description": "Customer full name",
        "default": None
      },
      "billing_address": {
        "type": "string",
        "required": false,
        "description": "Customer billing address",
        "default": None
      },
      "description": {
        "type": "string",
        "required": false,
        "description": "Transaction description",
        "default": None
      }
    },
    "error_messages": [
      "Unsupported gateway: The specified gateway_name is not supported for request building.",
      "Invalid amount: Amount must be positive number greater than minimum gateway requirement.",
      "Invalid email format: customer_email must be valid email address format.",
      "Missing required field: Some gateways require additional fields like billing_address or customer_name.",
      "Currency not supported: The specified currency is not supported by this gateway."
    ],
    "usage": "Provide standardized transaction details and target gateway to generate properly formatted payment request. Include optional fields like customer_name and billing_address when required by specific gateways.",
    "output_details": {
      "request_payload": {
        "type": "string",
        "description": "JSON-formatted request payload for the gateway"
      },
      "request_headers": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Required HTTP headers for gateway request"
      },
      "endpoint_url": {
        "type": "string",
        "description": "Specific API endpoint URL for this request"
      },
      "http_method": {
        "type": "string",
        "description": "HTTP method to use (GET, POST, PUT)"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Gateway Response Parser",
    "tool_description": "Parses and standardizes payment gateway responses into unified format, extracting transaction status, error details, and metadata from various gateway-specific response formats.",
    "parameters": {
      "gateway_name": {
        "type": "string",
        "required": true,
        "description": "Source payment gateway identifier"
      },
      "raw_response": {
        "type": "string",
        "required": true,
        "description": "Raw JSON response string from gateway"
      },
      "http_status_code": {
        "type": "integer",
        "required": true,
        "description": "HTTP status code from gateway response"
      },
      "original_transaction_id": {
        "type": "string",
        "required": true,
        "description": "Original transaction ID sent to gateway"
      }
    },
    "error_messages": [
      "Invalid JSON response: The raw_response is not valid JSON format.",
      "Unsupported gateway response: Cannot parse response from specified gateway_name.",
      "Missing transaction data: Response does not contain required transaction information.",
      "Malformed response structure: Response structure does not match expected gateway format."
    ],
    "usage": "Provide the raw gateway response along with gateway identifier and HTTP status to get standardized transaction result. Use original_transaction_id to maintain transaction tracking.",
    "output_details": {
      "transaction_status": {
        "type": "string",
        "description": "Standardized status: success, failed, pending, declined, error"
      },
      "gateway_transaction_id": {
        "type": "string",
        "description": "Gateway-specific transaction identifier"
      },
      "amount_processed": {
        "type": "number",
        "description": "Actual amount processed by gateway"
      },
      "processing_fee": {
        "type": "number",
        "description": "Gateway processing fee charged"
      },
      "error_code": {
        "type": "string",
        "description": "Standardized error code if transaction failed"
      },
      "error_message": {
        "type": "string",
        "description": "Human-readable error description"
      },
      "processing_time_ms": {
        "type": "integer",
        "description": "Gateway processing time in milliseconds"
      },
      "metadata": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Additional gateway-specific metadata fields"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Payment Security Validator",
    "tool_description": "Validates payment data against security rules, performs risk assessment, and ensures compliance with PCI DSS and fraud prevention requirements before processing.",
    "parameters": {
      "payment_data": {
        "type": "string",
        "required": true,
        "description": "JSON string containing payment information to validate"
      },
      "validation_rules": {
        "type": "array",
        "required": true,
        "description": "Security validation rules to apply",
        "items": {
          "type": "string"
        },
        "minItems": 1,
        "maxItems": 20
      },
      "risk_threshold": {
        "type": "number",
        "required": false,
        "description": "Risk score threshold for approval (0-100)",
        "default": 75
      },
      "enable_fraud_check": {
        "type": "boolean",
        "required": false,
        "description": "Enable advanced fraud detection",
        "default": true
      },
      "customer_history": {
        "type": "string",
        "required": false,
        "description": "JSON string with customer transaction history",
        "default": None
      },
      "ip_address": {
        "type": "string",
        "required": false,
        "description": "Customer IP address for geolocation checks",
        "default": None
      },
      "device_fingerprint": {
        "type": "string",
        "required": false,
        "description": "Device fingerprint for fraud detection",
        "default": None
      },
      "require_cvv": {
        "type": "boolean",
        "required": false,
        "description": "Require CVV validation for card payments",
        "default": true
      },
      "require_address_match": {
        "type": "boolean",
        "required": false,
        "description": "Require billing address verification",
        "default": false
      },
      "max_daily_amount": {
        "type": "number",
        "required": false,
        "description": "Maximum daily transaction amount per customer",
        "default": 10000
      }
    },
    "error_messages": [
      "Invalid payment data format: payment_data must be valid JSON containing required payment fields.",
      "Unknown validation rule: One or more validation rules are not recognized.",
      "Risk threshold out of range: risk_threshold must be between 0 and 100.",
      "Invalid IP address format: ip_address must be valid IPv4 or IPv6 format.",
      "Malformed customer history: customer_history must be valid JSON format if provided.",
      "CVV validation failed: CVV is required but missing or invalid format.",
      "Address verification failed: Billing address is required but missing or invalid."
    ],
    "usage": "Provide payment data and validation rules to perform security checks and risk assessment. Configure fraud detection parameters and validation requirements based on business risk tolerance. Include customer_history and device information for enhanced fraud detection.",
    "output_details": {
      "validation_result": {
        "type": "string",
        "description": "Overall validation result: approved, declined, review_required"
      },
      "risk_score": {
        "type": "number",
        "description": "Calculated risk score (0-100)"
      },
      "failed_rules": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of validation rules that failed"
      },
      "fraud_indicators": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Detected fraud risk indicators"
      },
      "recommendation": {
        "type": "string",
        "description": "Processing recommendation based on validation results"
      },
      "pci_compliance": {
        "type": "boolean",
        "description": "Whether transaction meets PCI DSS requirements"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Multi Gateway Orchestrator",
    "tool_description": "Coordinates payment processing across multiple gateways with intelligent routing, load balancing, and real-time failover management for high-availability payment processing.",
    "parameters": {
      "primary_gateway": {
        "type": "string",
        "required": true,
        "description": "Primary gateway for transaction processing"
      },
      "fallback_gateways": {
        "type": "array",
        "required": true,
        "description": "Ordered list of fallback gateways",
        "items": {
          "type": "string"
        },
        "minItems": 1,
        "maxItems": 5
      },
      "transaction_payload": {
        "type": "string",
        "required": true,
        "description": "Standardized transaction data as JSON string"
      },
      "timeout_seconds": {
        "type": "integer",
        "required": false,
        "description": "Maximum timeout per gateway attempt",
        "default": 30
      },
      "max_retry_attempts": {
        "type": "integer",
        "required": false,
        "description": "Maximum retry attempts across all gateways",
        "default": 3
      },
      "enable_load_balancing": {
        "type": "boolean",
        "required": false,
        "description": "Enable intelligent load balancing",
        "default": false
      },
      "parallel_processing": {
        "type": "boolean",
        "required": false,
        "description": "Enable parallel processing for speed",
        "default": false
      }
    },
    "error_messages": [
      "No available gateways: All specified gateways are unavailable or failed validation.",
      "Invalid transaction payload: transaction_payload must be valid JSON format.",
      "Timeout too short: timeout_seconds must be at least 5 seconds.",
      "Retry limit exceeded: max_retry_attempts must be between 1 and 10.",
      "Primary gateway unavailable: Specified primary_gateway is not responding.",
      "All gateways failed: No gateway could successfully process the transaction."
    ],
    "usage": "Provide primary gateway, fallback options, and transaction data to orchestrate multi-gateway payment processing. Enable load_balancing for high-volume scenarios and parallel_processing for speed optimization. Set appropriate timeout and retry limits based on transaction requirements.",
    "output_details": {
      "final_result": {
        "type": "string",
        "description": "Final transaction result: success, failed, timeout"
      },
      "successful_gateway": {
        "type": "string",
        "description": "Gateway that successfully processed the transaction"
      },
      "attempts_made": {
        "type": "integer",
        "description": "Total number of gateway attempts made"
      },
      "total_processing_time": {
        "type": "integer",
        "description": "Total processing time in milliseconds"
      },
      "gateway_responses": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Responses from each gateway attempted"
      },
      "failover_triggered": {
        "type": "boolean",
        "description": "Whether failover to backup gateways was triggered"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Transaction Status Monitor",
    "tool_description": "Monitors transaction status across multiple gateways in real-time, tracking pending payments and providing status updates for transaction lifecycle management.",
    "parameters": {
      "transaction_ids": {
        "type": "array",
        "required": true,
        "description": "List of transaction IDs to monitor",
        "items": {
          "type": "string"
        },
        "minItems": 1,
        "maxItems": 100
      },
      "monitoring_duration_minutes": {
        "type": "integer",
        "required": false,
        "description": "How long to monitor transactions in minutes",
        "default": 60
      },
      "check_interval_seconds": {
        "type": "integer",
        "required": false,
        "description": "Interval between status checks in seconds",
        "default": 30
      }
    },
    "error_messages": [
      "Invalid transaction IDs: One or more transaction IDs are not found in the system.",
      "Monitoring duration too long: monitoring_duration_minutes cannot exceed 1440 (24 hours).",
      "Check interval too frequent: check_interval_seconds must be at least 10 seconds.",
      "Too many transactions: Cannot monitor more than 100 transactions simultaneously."
    ],
    "usage": "Provide transaction IDs to monitor their status across gateways. Set appropriate monitoring_duration_minutes and check_interval_seconds based on expected transaction completion times.",
    "output_details": {
      "monitored_transactions": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Transaction IDs that were successfully monitored"
      },
      "current_statuses": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Current status of each monitored transaction"
      },
      "status_changes": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Status changes detected during monitoring period"
      },
      "completed_count": {
        "type": "integer",
        "description": "Number of transactions that completed during monitoring"
      },
      "pending_count": {
        "type": "integer",
        "description": "Number of transactions still pending"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Failover Handler",
    "tool_description": "Manages payment failover scenarios by automatically retrying failed transactions through backup gateways with intelligent retry logic and circuit breaker patterns.",
    "parameters": {
      "failed_transaction_data": {
        "type": "string",
        "required": true,
        "description": "JSON string containing original transaction data"
      },
      "original_gateway": {
        "type": "string",
        "required": true,
        "description": "Gateway that originally failed the transaction"
      },
      "failure_reason": {
        "type": "string",
        "required": true,
        "description": "Reason for original transaction failure"
      },
      "backup_gateways": {
        "type": "array",
        "required": true,
        "description": "Ordered list of backup gateways to try",
        "items": {
          "type": "string"
        },
        "minItems": 1,
        "maxItems": 5
      },
      "retry_strategy": {
        "type": "string",
        "required": false,
        "description": "Retry strategy: immediate, exponential_backoff, linear_delay",
        "default": "exponential_backoff"
      },
      "max_attempts": {
        "type": "integer",
        "required": false,
        "description": "Maximum retry attempts across backup gateways",
        "default": 3
      }
    },
    "error_messages": [
      "Invalid transaction data: failed_transaction_data must be valid JSON format.",
      "No backup gateways: At least one backup gateway must be provided.",
      "Invalid retry strategy: Use one of [immediate, exponential_backoff, linear_delay].",
      "Max attempts exceeded: max_attempts must be between 1 and 10.",
      "All backup gateways failed: No backup gateway could process the transaction."
    ],
    "usage": "Provide failed transaction details and backup gateways to attempt recovery. Choose appropriate retry_strategy based on failure type and set max_attempts to balance success probability with processing time.",
    "output_details": {
      "recovery_result": {
        "type": "string",
        "description": "Failover result: success, failed, partial_success"
      },
      "successful_gateway": {
        "type": "string",
        "description": "Backup gateway that successfully processed transaction"
      },
      "attempts_summary": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Summary of each failover attempt made"
      },
      "total_failover_time": {
        "type": "integer",
        "description": "Total time spent on failover processing in milliseconds"
      },
      "final_transaction_id": {
        "type": "string",
        "description": "New transaction ID if recovery was successful"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Settlement Reconciler",
    "tool_description": "Reconciles payment settlements from multiple gateways against internal transaction records, identifying discrepancies and generating settlement reports for financial accounting.",
    "parameters": {
      "settlement_date": {
        "type": "string",
        "required": true,
        "description": "Settlement date to reconcile in YYYY-MM-DD format",
        "format": "date-time"
      },
      "gateway_settlement_files": {
        "type": "array",
        "required": true,
        "description": "Array of settlement file paths from gateways",
        "items": {
          "type": "string"
        },
        "minItems": 1,
        "maxItems": 10
      },
      "internal_records_file": {
        "type": "string",
        "required": true,
        "description": "Path to internal transaction records file"
      },
      "tolerance_amount": {
        "type": "number",
        "required": false,
        "description": "Acceptable variance for amount matching",
        "default": 0.01
      },
      "include_fees_reconciliation": {
        "type": "boolean",
        "required": false,
        "description": "Include fee reconciliation in the report",
        "default": true
      },
      "currency_filter": {
        "type": "array",
        "required": false,
        "description": "Filter reconciliation by specific currencies",
        "items": {
          "type": "string"
        },
        "default": None
      },
      "generate_detailed_report": {
        "type": "boolean",
        "required": false,
        "description": "Generate detailed discrepancy report",
        "default": true
      }
    },
    "error_messages": [
      "Invalid settlement date: settlement_date must be in YYYY-MM-DD format and not in the future.",
      "Settlement files not found: One or more files in gateway_settlement_files do not exist.",
      "Internal records file missing: internal_records_file path is invalid or file not accessible.",
      "File format error: Settlement files must be in CSV or JSON format.",
      "Currency code invalid: One or more currency codes in currency_filter are not valid ISO 4217 codes.",
      "Tolerance amount invalid: tolerance_amount must be positive number."
    ],
    "usage": "Provide settlement date, gateway settlement files, and internal records to perform reconciliation. Set tolerance_amount for acceptable variances and use currency_filter to focus on specific currencies. Enable generate_detailed_report for comprehensive discrepancy analysis.",
    "output_details": {
      "reconciliation_status": {
        "type": "string",
        "description": "Overall reconciliation result: matched, discrepancies_found, failed"
      },
      "total_transactions_processed": {
        "type": "integer",
        "description": "Total number of transactions reconcile
