field_name: legal_services
subfield: contract_drafting_and_review
task: Legal clause library management and insertion of standard provisions
tool_description: |-
  ## STEP 1 — Rate task difficulty

  This task has medium difficulty. It involves managing a structured library of legal clauses with proper categorization, version control, and context-aware insertion, but the scope is well-defined within contract law. The main complexities are ensuring legal accuracy, handling clause dependencies, and maintaining consistency across different contract types, but these are manageable with systematic approaches.

  ## STEP 2 — Set a tool budget

  Given the medium difficulty, I'll target 12 tools to cover clause library management, search/retrieval, validation, insertion, version control, and integration workflows.

  ## STEP 3 — List all tool names and dependencies

  **Tools and Dependencies:**
  1. **Clause Library Initializer** - Consumes: none | Produces: library structure
  2. **Clause Content Creator** - Consumes: clause text, metadata | Produces: standardized clause entries
  3. **Clause Category Manager** - Consumes: categories, hierarchies | Produces: organized taxonomy
  4. **Clause Search Engine** - Consumes: search criteria | Produces: matching clauses
  5. **Clause Version Controller** - Consumes: clause modifications | Produces: version history
  6. **Clause Validator** - Consumes: clause content | Produces: validation results
  7. **Contract Template Analyzer** - Consumes: contract templates | Produces: insertion points
  8. **Clause Dependency Mapper** - Consumes: clause relationships | Produces: dependency graph
  9. **Clause Insertion Engine** - Consumes: clauses, contracts | Produces: modified contracts
  10. **Clause Conflict Detector** - Consumes: multiple clauses | Produces: conflict analysis
  11. **Usage Analytics Tracker** - Consumes: usage data | Produces: usage statistics
  12. **Clause Export Manager** - Consumes: clause selections | Produces: exported packages

  ## STEP 4 — Multi-tool plans

  **Simple Plans:**
  1. **Basic Clause Addition**: Clause Content Creator → Clause Validator → Clause Library Initializer (add validated clause to library)
  2. **Simple Search & Insert**: Clause Search Engine → Clause Insertion Engine (find and insert standard clause)

  **Medium Plans:**
  1. **Categorized Clause Management**: Clause Category Manager → Clause Content Creator → Clause Validator → Usage Analytics Tracker (organize and track clause usage)
  2. **Version-Controlled Updates**: Clause Search Engine → Clause Version Controller → Clause Validator → Clause Library Initializer (update clause with version control)

  **Complex Plans:**
  1. **Full Contract Review Workflow**: Contract Template Analyzer → Clause Search Engine → Clause Dependency Mapper → Clause Conflict Detector → Clause Insertion Engine → Clause Export Manager (comprehensive contract clause management)
  2. **Advanced Library Maintenance**: Usage Analytics Tracker → Clause Version Controller → Clause Dependency Mapper → Clause Validator → Clause Category Manager (maintain and optimize clause library)

  ## STEP 5 — Produce tools

  ```json
  {
    "tool_name": "Clause Library Initializer",
    "tool_description": "Initializes and manages the structure of a legal clause library with organizational metadata and access controls.",
    "parameters": {
      "library_name": {
        "type": "string",
        "required": true,
        "description": "Name of the clause library to initialize"
      },
      "jurisdiction": {
        "type": "string",
        "required": true,
        "description": "Primary legal jurisdiction (e.g., 'US-Federal', 'UK', 'EU')"
      },
      "practice_areas": {
        "type": "array",
        "items": {"type": "string"},
        "required": true,
        "description": "Legal practice areas this library covers"
      },
      "access_level": {
        "type": "string",
        "required": false,
        "description": "Access control level: 'public', 'internal', 'restricted'",
        "default": "internal"
      }
    },
    "error_messages": [
      "Invalid jurisdiction format: Use standard jurisdiction codes like 'US-Federal', 'UK', 'EU', etc.",
      "Empty practice areas: Provide at least one practice area for the library",
      "Invalid access level: Must be one of 'public', 'internal', or 'restricted'",
      "Library name conflict: A library with this name already exists"
    ],
    "usage": "Provide library_name, jurisdiction, and practice_areas to create a new clause library. Optionally set access_level for permissions.",
    "output_details": {
      "library_id": {
        "type": "string",
        "description": "Unique identifier for the created library"
      },
      "status": {
        "type": "string",
        "description": "Creation status message"
      },
      "creation_date": {
        "type": "string",
        "description": "Library creation timestamp"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Clause Content Creator",
    "tool_description": "Creates standardized clause entries with metadata, tags, and formatting for library storage.",
    "parameters": {
      "clause_title": {
        "type": "string",
        "required": true,
        "description": "Descriptive title for the clause"
      },
      "clause_text": {
        "type": "string",
        "required": true,
        "description": "Full text content of the legal clause"
      },
      "clause_type": {
        "type": "string",
        "required": true,
        "description": "Type of clause (e.g., 'indemnification', 'termination', 'confidentiality')"
      },
      "jurisdiction": {
        "type": "string",
        "required": true,
        "description": "Applicable legal jurisdiction"
      },
      "contract_types": {
        "type": "array",
        "items": {"type": "string"},
        "required": true,
        "description": "Contract types where this clause applies"
      },
      "risk_level": {
        "type": "string",
        "required": true,
        "description": "Risk assessment: 'low', 'medium', 'high'"
      },
      "tags": {
        "type": "array",
        "items": {"type": "string"},
        "required": false,
        "description": "Searchable tags for the clause",
        "default": null
      },
      "author": {
        "type": "string",
        "required": true,
        "description": "Legal professional who created/reviewed the clause"
      },
      "notes": {
        "type": "string",
        "required": false,
        "description": "Additional notes or usage guidelines",
        "default": null
      }
    },
    "error_messages": [
      "Empty clause content: Clause text cannot be empty or contain only whitespace",
      "Invalid clause type: Provide a recognized clause type or use 'other' for custom types",
      "Invalid risk level: Must be 'low', 'medium', or 'high'",
      "Missing contract types: Provide at least one applicable contract type",
      "Clause too long: Clause text exceeds maximum length limit of 10,000 characters"
    ],
    "usage": "Provide clause_title, clause_text, clause_type, jurisdiction, contract_types, risk_level, and author. Optionally add tags and notes for better organization.",
    "output_details": {
      "clause_id": {
        "type": "string",
        "description": "Unique identifier for the created clause"
      },
      "word_count": {
        "type": "integer",
        "description": "Number of words in the clause text"
      },
      "creation_timestamp": {
        "type": "string",
        "description": "When the clause was created"
      },
      "status": {
        "type": "string",
        "description": "Creation status confirmation"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Clause Category Manager",
    "tool_description": "Manages hierarchical categorization and tagging systems for organizing clauses in the library.",
    "parameters": {
      "action": {
        "type": "string",
        "required": true,
        "description": "Action to perform: 'create_category', 'update_category', 'delete_category', 'list_categories'"
      },
      "category_name": {
        "type": "string",
        "required": false,
        "description": "Name of the category (required for create/update/delete)",
        "default": null
      },
      "parent_category": {
        "type": "string",
        "required": false,
        "description": "Parent category for hierarchical organization",
        "default": null
      },
      "category_description": {
        "type": "string",
        "required": false,
        "description": "Description of the category purpose",
        "default": null
      }
    },
    "error_messages": [
      "Invalid action: Must be one of 'create_category', 'update_category', 'delete_category', 'list_categories'",
      "Missing category name: category_name is required for create, update, and delete actions",
      "Category not found: The specified category does not exist",
      "Circular dependency: Parent category would create a circular reference",
      "Category in use: Cannot delete category that contains clauses or subcategories"
    ],
    "usage": "Specify action type and provide category_name for create/update/delete operations. Use parent_category to create hierarchical structures.",
    "output_details": {
      "categories": {
        "type": "array",
        "items": {"type": "string"},
        "description": "List of category names and their hierarchy"
      },
      "operation_result": {
        "type": "string",
        "description": "Result message of the requested operation"
      },
      "category_count": {
        "type": "integer",
        "description": "Total number of categories in the system"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Clause Search Engine",
    "tool_description": "Searches the clause library using keywords, filters, and metadata criteria to find relevant clauses.",
    "parameters": {
      "search_query": {
        "type": "string",
        "required": false,
        "description": "Text search query for clause content and titles",
        "default": null
      },
      "clause_types": {
        "type": "array",
        "items": {"type": "string"},
        "required": false,
        "description": "Filter by specific clause types",
        "default": null
      },
      "jurisdictions": {
        "type": "array",
        "items": {"type": "string"},
        "required": false,
        "description": "Filter by legal jurisdictions",
        "default": null
      },
      "contract_types": {
        "type": "array",
        "items": {"type": "string"},
        "required": false,
        "description": "Filter by applicable contract types",
        "default": null
      },
      "risk_levels": {
        "type": "array",
        "items": {"type": "string"},
        "required": false,
        "description": "Filter by risk levels: 'low', 'medium', 'high'",
        "default": null
      },
      "tags": {
        "type": "array",
        "items": {"type": "string"},
        "required": false,
        "description": "Filter by clause tags",
        "default": null
      },
      "max_results": {
        "type": "integer",
        "required": false,
        "description": "Maximum number of results to return (1-100)",
        "default": 20
      },
      "sort_by": {
        "type": "string",
        "required": false,
        "description": "Sort criteria: 'relevance', 'date', 'title', 'risk_level'",
        "default": "relevance"
      }
    },
    "error_messages": [
      "Invalid risk levels: Risk levels must be 'low', 'medium', or 'high'",
      "Invalid max results: Must be between 1 and 100",
      "Invalid sort criteria: Must be one of 'relevance', 'date', 'title', 'risk_level'",
      "No search criteria: Provide at least one search parameter",
      "Search timeout: Query took too long to execute, try narrowing search criteria"
    ],
    "usage": "Provide search criteria using search_query and/or filter parameters. Adjust max_results and sort_by to control output format.",
    "output_details": {
      "results": {
        "type": "array",
        "items": {"type": "string"},
        "description": "List of matching clause IDs"
      },
      "result_count": {
        "type": "integer",
        "description": "Number of clauses found"
      },
      "search_summary": {
        "type": "string",
        "description": "Summary of search criteria and results"
      },
      "execution_time": {
        "type": "number",
        "description": "Search execution time in seconds"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Clause Version Controller",
    "tool_description": "Manages version history, tracks changes, and enables rollback functionality for clause modifications.",
    "parameters": {
      "clause_id": {
        "type": "string",
        "required": true,
        "description": "Unique identifier of the clause to version"
      },
      "action": {
        "type": "string",
        "required": true,
        "description": "Version action: 'create_version', 'list_versions', 'rollback', 'compare_versions'"
      },
      "new_content": {
        "type": "string",
        "required": false,
        "description": "Updated clause content (required for create_version)",
        "default": null
      },
      "change_notes": {
        "type": "string",
        "required": false,
        "description": "Notes describing the changes made",
        "default": null
      },
      "version_number": {
        "type": "string",
        "required": false,
        "description": "Specific version number for rollback or comparison",
        "default": null
      },
      "compare_version": {
        "type": "string",
        "required": false,
        "description": "Second version for comparison (used with compare_versions action)",
        "default": null
      }
    },
    "error_messages": [
      "Invalid action: Must be one of 'create_version', 'list_versions', 'rollback', 'compare_versions'",
      "Clause not found: The specified clause_id does not exist",
      "Missing content: new_content is required for create_version action",
      "Version not found: The specified version_number does not exist for this clause",
      "Missing comparison version: compare_version is required for compare_versions action",
      "No changes detected: The new content is identical to the current version"
    ],
    "usage": "Provide clause_id and action. For create_version, include new_content and optionally change_notes. For rollback or comparison, specify version_number.",
    "output_details": {
      "current_version": {
        "type": "string",
        "description": "Current version number of the clause"
      },
      "version_history": {
        "type": "array",
        "items": {"type": "string"},
        "description": "List of version numbers and timestamps"
      },
      "operation_result": {
        "type": "string",
        "description": "Result message of the version operation"
      },
      "change_summary": {
        "type": "string",
        "description": "Summary of changes between versions"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Clause Validator",
    "tool_description": "Validates clause content for legal consistency, formatting standards, and potential issues before library insertion.",
    "parameters": {
      "clause_content": {
        "type": "string",
        "required": true,
        "description": "The clause text to validate"
      },
      "jurisdiction": {
        "type": "string",
        "required": true,
        "description": "Legal jurisdiction for validation context"
      },
      "contract_type": {
        "type": "string",
        "required": true,
        "description": "Type of contract where clause will be used"
      },
      "validation_level": {
        "type": "string",
        "required": false,
        "description": "Validation strictness: 'basic', 'standard', 'strict'",
        "default": "standard"
      },
      "check_formatting": {
        "type": "boolean",
        "required": false,
        "description": "Whether to validate formatting and structure",
        "default": true
      }
    },
    "error_messages": [
      "Empty clause content: Clause text cannot be empty or contain only whitespace",
      "Invalid jurisdiction: Provide a recognized legal jurisdiction code",
      "Invalid validation level: Must be 'basic', 'standard', or 'strict'",
      "Clause too short: Clause appears to be incomplete or too brief",
      "Invalid characters: Clause contains unsupported special characters or encoding issues"
    ],
    "usage": "Provide clause_content, jurisdiction, and contract_type for validation. Adjust validation_level and check_formatting based on requirements.",
    "output_details": {
      "is_valid": {
        "type": "boolean",
        "description": "Whether the clause passes validation"
      },
      "validation_score": {
        "type": "integer",
        "description": "Validation score from 0-100"
      },
      "issues_found": {
        "type": "array",
        "items": {"type": "string"},
        "description": "List of validation issues or warnings"
      },
      "recommendations": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Suggested improvements for the clause"
      },
      "word_count": {
        "type": "integer",
        "description": "Number of words in the validated clause"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Contract Template Analyzer",
    "tool_description": "Analyzes contract templates to identify clause insertion points, existing provisions, and structural elements.",
    "parameters": {
      "contract_content": {
        "type": "string",
        "required": true,
        "description": "Full text of the contract template to analyze"
      },
      "contract_type": {
        "type": "string",
        "required": true,
        "description": "Type of contract being analyzed"
      },
      "jurisdiction": {
        "type": "string",
        "required": true,
        "description": "Legal jurisdiction of the contract"
      },
      "analysis_depth": {
        "type": "string",
        "required": false,
        "description": "Analysis level: 'basic', 'detailed', 'comprehensive'",
        "default": "detailed"
      },
      "identify_gaps": {
        "type": "boolean",
        "required": false,
        "description": "Whether to identify missing standard clauses",
        "default": true
      },
      "suggest_positions": {
        "type": "boolean",
        "required": false,
        "description": "Whether to suggest optimal insertion positions",
        "default": true
      }
    },
    "error_messages": [
      "Empty contract content: Contract text cannot be empty",
      "Invalid analysis depth: Must be 'basic', 'detailed', or 'comprehensive'",
      "Contract too short: Contract appears incomplete or too brief for analysis",
      "Unsupported contract type: Provide a recognized contract type",
      "Analysis timeout: Contract is too complex for analysis within time limits"
    ],
    "usage": "Provide contract_content, contract_type, and jurisdiction. Adjust analysis_depth and toggle gap identification and position suggestions as needed.",
    "output_details": {
      "existing_clauses": {
        "type": "array",
        "items": {"type": "string"},
        "description": "List of clause types already present in the contract"
      },
      "insertion_points": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Recommended positions for clause insertion"
      },
      "missing_clauses": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Standard clauses that appear to be missing"
      },
      "structure_analysis": {
        "type": "string",
        "description": "Analysis of contract structure and organization"
      },
      "recommendations": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Suggestions for contract improvement"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Clause Dependency Mapper",
    "tool_description": "Maps relationships and dependencies between clauses to ensure consistent and compatible clause combinations.",
    "parameters": {
      "primary_clause_id": {
        "type": "string",
        "required": true,
        "description": "Main clause to analyze dependencies for"
      },
      "target_clause_ids": {
        "type": "array",
        "items": {"type": "string"},
        "required": false,
        "description": "Specific clauses to check relationships with",
        "default": null
      },
      "contract_type": {
        "type": "string",
        "required": true,
        "description": "Type of contract for context"
      },
      "mapping_scope": {
        "type": "string",
        "required": false,
        "description": "Scope of dependency mapping: 'direct', 'extended', 'full'",
        "default": "extended"
      }
    },
    "error_messages": [
      "Clause not found: The primary_clause_id does not exist in the library",
      "Invalid mapping scope: Must be 'direct', 'extended', or 'full'",
      "Target clause not found: One or more target_clause_ids do not exist",
      "Circular dependency detected: The clause relationships form a circular reference",
      "Insufficient context: Contract type is required for dependency analysis"
    ],
    "usage": "Provide primary_clause_id and contract_type. Optionally specify target_clause_ids for focused analysis and adjust mapping_scope for depth.",
    "output_details": {
      "dependencies": {
        "type": "array",
        "items": {"type": "string"},
        "description": "List of clause IDs that the primary clause depends on"
      },
      "dependents": {
        "type": "array",
        "items": {"type": "string"},
        "description": "List of clause IDs that depend on the primary clause"
      },
      "compatibility_scores": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Compatibility ratings with related clauses"
      },
      "relationship_types": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Types of relationships identified"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Clause Insertion Engine",
    "tool_description": "Inserts selected clauses into contract templates at optimal positions while maintaining document structure and formatting.",
    "parameters": {
      "contract_content": {
        "type": "string",
        "required": true,
        "description": "Original contract text where clauses will be inserted"
      },
      "clause_ids": {
        "type": "array",
        "items": {"type": "string"},
        "required": true,
        "description": "List of clause IDs to insert into the contract"
      },
      "insertion_mode": {
        "type": "string",
        "required": false,
        "description": "How to handle insertions: 'auto', 'manual', 'suggested'",
        "default": "auto"
      },
      "insertion_positions": {
        "type": "array",
        "items": {"type": "string"},
        "required": false,
        "description": "Specific positions for manual insertion mode",
        "default": null
      },
      "preserve_formatting": {
        "type": "boolean",
        "required": false,
        "description": "Whether to maintain original document formatting",
        "default": true
      },
      "add_headers": {
        "type": "boolean",
        "required": false,
        "description": "Whether to add section headers for inserted clauses",
        "default": true
      },
      "numbering_style": {
        "type": "string",
        "required": false,
        "description": "Numbering format: 'decimal', 'roman', 'alpha', 'none'",
        "default": "decimal"
      }
    },
    "error_messages": [
      "Empty contract content: Cannot insert clauses into empty contract",
      "No clauses specified: Provide at least one clause_id to insert",
      "Clause not found: One or more specified clause_ids do not exist",
      "Invalid insertion mode: Must be 'auto', 'manual', or 'suggested'",
      "Position mismatch: Number of insertion_positions must match number of clauses for manual mode",
      "Invalid numbering style: Must be 'decimal', 'roman', 'alpha', or 'none'"
    ],
    "usage": "Provide contract_content and clause_ids. Use insertion_mode and insertion_positions to control placement. Adjust formatting options as needed.",
    "output_details": {
      "modified_contract": {
        "type": "string",
        "description": "Contract text with inserted clauses"
      },
      "insertion_summary": {
        "type": "string",
        "description": "Summary of clauses inserted and positions"
      },
      "clause_positions": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Final positions where each clause was inserted"
      },
      "word_count_change": {
        "type": "integer",
        "description": "Change in document word count after insertion"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Clause Conflict Detector",
    "tool_description": "Detects conflicts, inconsistencies, and contradictions between multiple clauses in a contract or clause set.",
    "parameters": {
      "clause_ids": {
        "type": "array",
        "items": {"type": "string"},
        "required": true,
        "description": "List of clause IDs to analyze for conflicts",
        "minItems": 2,
        "maxItems": 50
      },
      "contract_type": {
        "type": "string",
        "required": true,
        "description": "Type of contract for context-specific conflict detection"
      },
      "jurisdiction": {
        "type": "string",
        "required": true,
        "description": "Legal jurisdiction for jurisdiction-specific rules"
      },
      "conflict_sensitivity": {
        "type": "string",
        "required": false,
        "description": "Detection sensitivity: 'low', 'medium', 'high'",
        "default": "medium"
      },
      "check_semantic": {
        "type": "boolean",
        "required": false,
        "description": "Whether to perform semantic conflict analysis",
        "default": true
      },
      "check_legal": {
        "type": "boolean",
        "required": false,
        "description": "Whether to check for legal inconsistencies",
        "default": true
      }
    },
    "error_messages": [
      "Insufficient clauses: Provide at least 2 clause IDs for conflict detection",
      "Too many clauses: Maximum 50 clauses can be analyzed simultaneously",
      "Clause not found: One or more specified clause_ids do not exist",
      "Invalid sensitivity level: Must be 'low', 'medium', or 'high'",
      "Analysis failed: Unable to complete conflict detection due to clause complexity"
    ],
    "usage": "Provide clause_ids, contract_type, and jurisdiction. Adjust conflict_sensitivity and toggle semantic/legal checking based on analysis needs.",
    "output_details": {
      "conflicts_found": {
        "type": "integer",
        "description": "Number of conflicts detected"
      },
      "conflict_details": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Detailed descriptions of each conflict found"
      },
      "severity_levels": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Severity rating for each conflict (low/medium/high)"
      },
      "resolution_suggestions": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Suggested approaches to resolve conflicts"
      },
      "compatibility_score": {
        "type": "integer",
        "description": "Overall compatibility score (0-100) for the clause set"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Usage Analytics Tracker",
    "tool_description": "Tracks and analyzes clause usage patterns, popularity metrics, and performance data across the library.",
    "parameters": {
      "tracking_period": {
        "type": "string",
        "required": true,
        "description": "Time period for analysis: 'week', 'month', 'quarter', 'year'"
      },
      "start_date": {
        "type": "string",
        "required": false,
        "description": "Start date for custom period analysis (ISO 8601 format)",
        "default": null
      },
      "end_date": {
        "type": "string",
        "required": false,
        "description": "End date for custom period analysis (ISO 8601 format)",
        "default": null
      },
      "analysis_type": {
        "type": "string",
        "required": false,
        "description": "Type of analysis: 'usage', 'performance', 'trends', 'all'",
        "default": "all"
      },
      "filter_jurisdiction": {
        "type": "string",
        "required": false,
        "description": "Filter results by specific jurisdiction",
        "default": null
      }
    },
    "error_messages": [
      "Invalid tracking period: Must be 'week', 'month', 'quarter', or 'year'",
      "Invalid date format: Dates must be in ISO 8601 format (YYYY-MM-DD)",
      "Date range error: start_date must be before end_date",
      "Invalid analysis type: Must be 'usage', 'performance', 'trends', or 'all'",
      "No data available: No usage data found for the specified period"
    ],
    "usage": "Specify tracking_period or provide start_date and end_date for custom ranges. Use analysis_type to focus on specific metrics.",
    "output_details": {
      "most_used_clauses": {
        "type": "array",
        "items": {"type": "string"},
        "description": "List of most frequently used clause IDs"
      },
      "usage_counts": {
        "type": "array",
        "items": {"type": "integer"},
        "description": "Usage frequency numbers corresponding to most used clauses"
      },
      "trend_analysis": {
        "type": "string",
        "description": "Summary of usage trends over the analysis period"
      },
      "performance_metrics": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Performance indicators for clause effectiveness"
      },
      "total_insertions": {
        "type": "integer",
        "description": "Total number of clause insertions in the period"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Clause Export Manager",
    "tool_description": "Exports selected clauses and clause sets in various formats for sharing, backup,
