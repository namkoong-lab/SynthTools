field_name: humor_and_comedy
subfield: Comedic Writing and Scriptwriting
task: Generate comedic dialogue and character interactions for scripts
tool_description: |-
  **STEP 1 — Rate task difficulty**

  This task has medium difficulty. It requires understanding character development, comedic timing, dialogue flow, and various humor techniques, but the scope is well-defined within scriptwriting. The main challenges involve balancing multiple characters' voices, maintaining comedic consistency, and ensuring dialogue serves both humor and narrative purposes.

  **STEP 2 — Set a tool budget**

  Given the medium complexity, I'll target 12 tools to cover character creation, dialogue generation, comedic timing, script formatting, and quality assessment workflows.

  **STEP 3 — List all tool names and dependencies**

  Tools and their data flow:
  - Character Profile Creator → Character Interaction Mapper, Comedic Dialogue Generator
  - Comedic Style Analyzer → Dialogue Tone Adjuster, Humor Pattern Detector
  - Dialogue Line Generator → Comedic Timing Validator, Script Formatter
  - Character Interaction Mapper → Scene Dialogue Builder
  - Humor Pattern Detector → Comedy Beat Scheduler
  - Scene Dialogue Builder → Script Formatter, Dialogue Flow Analyzer
  - Comedic Timing Validator → Comedy Beat Scheduler
  - Dialogue Tone Adjuster → Dialogue Flow Analyzer
  - Comedy Beat Scheduler → Script Formatter
  - Script Formatter → Dialogue Quality Scorer
  - Dialogue Flow Analyzer → Dialogue Quality Scorer
  - Dialogue Quality Scorer (final output assessment)

  **STEP 4 — Multi-tool plans**

  Simple plans:
  1. Character Profile Creator → Dialogue Line Generator → Script Formatter (basic character-specific dialogue creation)
  2. Comedic Style Analyzer → Dialogue Tone Adjuster → Dialogue Quality Scorer (style-consistent dialogue refinement)

  Medium plans:
  1. Character Profile Creator → Character Interaction Mapper → Scene Dialogue Builder → Comedic Timing Validator → Script Formatter (complete scene creation)
  2. Comedic Style Analyzer → Humor Pattern Detector → Comedy Beat Scheduler → Dialogue Flow Analyzer (timing-focused comedy structure)

  Complex plans:
  1. Character Profile Creator → Character Interaction Mapper → Scene Dialogue Builder → Comedic Timing Validator → Comedy Beat Scheduler → Script Formatter → Dialogue Quality Scorer (full scene development with quality assessment)
  2. Comedic Style Analyzer → Humor Pattern Detector → Dialogue Line Generator → Dialogue Tone Adjuster → Dialogue Flow Analyzer → Comedy Beat Scheduler → Script Formatter → Dialogue Quality Scorer (comprehensive comedy optimization workflow)

  **STEP 5 — Produce tools**

  ```json
  {
    "tool_name": "Character Profile Creator",
    "tool_description": "Creates detailed character profiles with personality traits, speaking patterns, and comedic characteristics for script development.",
    "parameters": {
      "character_name": {
        "type": "string",
        "required": true,
        "description": "Name of the character to create"
      },
      "character_type": {
        "type": "string",
        "required": true,
        "description": "Character archetype: protagonist, antagonist, sidekick, comic relief, straight man"
      },
      "personality_traits": {
        "type": "array",
        "required": true,
        "description": "List of personality traits",
        "items": {"type": "string"},
        "minItems": 3,
        "maxItems": 8
      },
      "age_range": {
        "type": "string",
        "required": false,
        "description": "Character age range: child, teenager, young adult, middle aged, elderly",
        "default": "young adult"
      }
    },
    "error_messages": [
      "Invalid character type: Use one of [protagonist, antagonist, sidekick, comic relief, straight man]",
      "Insufficient personality traits: Provide 3-8 distinct personality traits",
      "Invalid age range: Use one of [child, teenager, young adult, middle aged, elderly]"
    ],
    "usage": "Provide character_name, character_type, and personality_traits array. Optionally specify age_range. Returns comprehensive character profile for comedic dialogue generation.",
    "output_details": {
      "character_id": {
        "type": "string",
        "description": "Unique identifier for the character"
      },
      "speaking_style": {
        "type": "string",
        "description": "Description of character's dialogue patterns"
      },
      "comedic_strengths": {
        "type": "array",
        "items": {"type": "string"},
        "description": "List of comedy techniques this character excels at"
      },
      "character_summary": {
        "type": "string",
        "description": "Complete character profile summary"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Comedic Style Analyzer",
    "tool_description": "Analyzes and identifies comedic styles and techniques from sample text to ensure consistency in script writing.",
    "parameters": {
      "sample_text": {
        "type": "string",
        "required": true,
        "description": "Sample comedic text to analyze"
      },
      "target_genre": {
        "type": "string",
        "required": true,
        "description": "Comedy genre: sitcom, sketch, romantic comedy, dark comedy, satire, physical comedy"
      }
    },
    "error_messages": [
      "Empty sample text: Provide at least 50 characters of sample text for analysis",
      "Invalid target genre: Use one of [sitcom, sketch, romantic comedy, dark comedy, satire, physical comedy]",
      "Insufficient comedic content: Sample text must contain identifiable humor elements"
    ],
    "usage": "Input sample_text and target_genre to analyze comedic patterns and style. Returns detailed breakdown of humor techniques and style characteristics.",
    "output_details": {
      "primary_style": {
        "type": "string",
        "description": "Dominant comedic style identified"
      },
      "humor_techniques": {
        "type": "array",
        "items": {"type": "string"},
        "description": "List of specific humor techniques found"
      },
      "tone_description": {
        "type": "string",
        "description": "Overall comedic tone analysis"
      },
      "style_score": {
        "type": "number",
        "description": "Consistency score from 0-10 for the comedic style"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Dialogue Line Generator",
    "tool_description": "Generates individual comedic dialogue lines for specific characters based on context and comedic intent.",
    "parameters": {
      "character_id": {
        "type": "string",
        "required": true,
        "description": "Unique identifier of the speaking character"
      },
      "dialogue_context": {
        "type": "string",
        "required": true,
        "description": "Situational context for the dialogue"
      },
      "comedic_intent": {
        "type": "string",
        "required": true,
        "description": "Type of humor to achieve: punchline, setup, callback, wordplay, observational, absurd, sarcastic"
      },
      "target_audience": {
        "type": "string",
        "required": false,
        "description": "Intended audience: family, adult, mature",
        "default": "adult"
      },
      "line_count": {
        "type": "integer",
        "required": false,
        "description": "Number of alternative lines to generate (1-5)",
        "default": 3
      }
    },
    "error_messages": [
      "Unknown character: character_id must reference an existing character profile",
      "Invalid comedic intent: Use one of [punchline, setup, callback, wordplay, observational, absurd, sarcastic]",
      "Invalid target audience: Use one of [family, adult, mature]",
      "Invalid line count: Must be between 1 and 5",
      "Empty context: dialogue_context must be at least 10 characters long"
    ],
    "usage": "Provide character_id, dialogue_context, and comedic_intent. Optionally set target_audience and line_count. Returns generated dialogue options with comedic analysis.",
    "output_details": {
      "generated_lines": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Array of generated dialogue lines"
      },
      "comedy_type": {
        "type": "string",
        "description": "Specific type of comedy achieved"
      },
      "timing_notes": {
        "type": "string",
        "description": "Comedic timing recommendations for delivery"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Character Interaction Mapper",
    "tool_description": "Maps comedic relationships and interaction dynamics between multiple characters to optimize dialogue exchanges.",
    "parameters": {
      "character_ids": {
        "type": "array",
        "required": true,
        "description": "Array of character identifiers for interaction mapping",
        "items": {"type": "string"},
        "minItems": 2,
        "maxItems": 6
      },
      "scene_setting": {
        "type": "string",
        "required": true,
        "description": "Physical and social setting for character interactions"
      },
      "conflict_type": {
        "type": "string",
        "required": false,
        "description": "Type of comedic conflict: misunderstanding, rivalry, awkwardness, cultural clash, generational gap",
        "default": "misunderstanding"
      },
      "interaction_style": {
        "type": "string",
        "required": false,
        "description": "Overall interaction dynamic: banter, argument, collaboration, competition",
        "default": "banter"
      }
    },
    "error_messages": [
      "Invalid character count: Must include 2-6 character identifiers",
      "Unknown characters: All character_ids must reference existing character profiles",
      "Invalid conflict type: Use one of [misunderstanding, rivalry, awkwardness, cultural clash, generational gap]",
      "Invalid interaction style: Use one of [banter, argument, collaboration, competition]",
      "Empty scene setting: scene_setting must be at least 20 characters long"
    ],
    "usage": "Provide array of character_ids and scene_setting. Optionally specify conflict_type and interaction_style. Returns interaction dynamics and comedic potential analysis.",
    "output_details": {
      "interaction_map": {
        "type": "string",
        "description": "Detailed mapping of character relationships and dynamics"
      },
      "comedic_opportunities": {
        "type": "array",
        "items": {"type": "string"},
        "description": "List of specific comedic opportunities identified"
      },
      "dialogue_flow_pattern": {
        "type": "string",
        "description": "Recommended pattern for dialogue exchanges"
      },
      "chemistry_score": {
        "type": "number",
        "description": "Comedic chemistry rating from 0-10"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Scene Dialogue Builder",
    "tool_description": "Constructs complete dialogue sequences for scenes with multiple characters, incorporating comedic timing and interaction dynamics.",
    "parameters": {
      "scene_description": {
        "type": "string",
        "required": true,
        "description": "Detailed description of the scene setup and objectives"
      },
      "participating_characters": {
        "type": "array",
        "required": true,
        "description": "List of character identifiers participating in the scene",
        "items": {"type": "string"},
        "minItems": 2,
        "maxItems": 5
      },
      "scene_length": {
        "type": "string",
        "required": true,
        "description": "Target scene length: short, medium, long"
      },
      "comedic_climax": {
        "type": "string",
        "required": true,
        "description": "Description of the scene's comedic peak moment"
      },
      "dialogue_style": {
        "type": "string",
        "required": false,
        "description": "Overall dialogue style: snappy, conversational, theatrical, naturalistic",
        "default": "conversational"
      },
      "pacing": {
        "type": "string",
        "required": false,
        "description": "Scene pacing: fast, moderate, slow",
        "default": "moderate"
      }
    },
    "error_messages": [
      "Invalid scene length: Use one of [short, medium, long]",
      "Unknown participating characters: All character identifiers must exist",
      "Invalid character count: Must have 2-5 participating characters",
      "Invalid dialogue style: Use one of [snappy, conversational, theatrical, naturalistic]",
      "Invalid pacing: Use one of [fast, moderate, slow]",
      "Insufficient scene description: scene_description must be at least 50 characters",
      "Missing comedic climax: comedic_climax must be specified and at least 20 characters"
    ],
    "usage": "Provide scene_description, participating_characters, scene_length, and comedic_climax. Optionally set dialogue_style and pacing. Returns complete scene dialogue with stage directions.",
    "output_details": {
      "scene_dialogue": {
        "type": "string",
        "description": "Complete formatted scene dialogue"
      },
      "character_lines_count": {
        "type": "array",
        "items": {"type": "integer"},
        "description": "Number of lines per character in order of participation"
      },
      "comedic_beats": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Identified comedic beats and their positions"
      },
      "scene_summary": {
        "type": "string",
        "description": "Summary of the completed scene"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Comedic Timing Validator",
    "tool_description": "Analyzes and validates comedic timing in dialogue sequences to ensure optimal humor delivery and pacing.",
    "parameters": {
      "dialogue_text": {
        "type": "string",
        "required": true,
        "description": "Dialogue text to analyze for comedic timing"
      },
      "performance_medium": {
        "type": "string",
        "required": true,
        "description": "Intended performance medium: stage, television, film, radio, live performance"
      }
    },
    "error_messages": [
      "Insufficient dialogue: dialogue_text must be at least 100 characters long",
      "Invalid performance medium: Use one of [stage, television, film, radio, live performance]",
      "No comedic elements detected: Dialogue must contain identifiable humor attempts",
      "Timing conflicts detected: Overlapping comedic beats may reduce effectiveness"
    ],
    "usage": "Input dialogue_text and specify performance_medium. Returns timing analysis with suggestions for optimal comedic delivery and pacing adjustments.",
    "output_details": {
      "timing_score": {
        "type": "number",
        "description": "Overall timing effectiveness score from 0-10"
      },
      "pacing_analysis": {
        "type": "string",
        "description": "Detailed analysis of dialogue pacing"
      },
      "timing_adjustments": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Specific suggestions for improving comedic timing"
      },
      "beat_positions": {
        "type": "array",
        "items": {"type": "number"},
        "description": "Character positions of major comedic beats"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Humor Pattern Detector",
    "tool_description": "Identifies recurring humor patterns and comedic structures within dialogue to ensure variety and avoid repetition.",
    "parameters": {
      "text_samples": {
        "type": "array",
        "required": true,
        "description": "Array of dialogue samples to analyze for patterns",
        "items": {"type": "string"},
        "minItems": 2,
        "maxItems": 10
      },
      "pattern_sensitivity": {
        "type": "string",
        "required": false,
        "description": "Detection sensitivity level: low, medium, high",
        "default": "medium"
      }
    },
    "error_messages": [
      "Insufficient samples: Provide 2-10 dialogue samples for pattern analysis",
      "Empty samples detected: All dialogue samples must contain at least 20 characters",
      "Invalid sensitivity level: Use one of [low, medium, high]",
      "No patterns detected: Samples may lack sufficient comedic content for analysis"
    ],
    "usage": "Provide array of text_samples for pattern analysis. Optionally adjust pattern_sensitivity. Returns identified humor patterns and repetition warnings.",
    "output_details": {
      "detected_patterns": {
        "type": "array",
        "items": {"type": "string"},
        "description": "List of identified humor patterns"
      },
      "repetition_warnings": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Areas where patterns may be overused"
      },
      "pattern_diversity_score": {
        "type": "number",
        "description": "Humor variety score from 0-10"
      },
      "recommendations": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Suggestions for improving pattern variety"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Dialogue Tone Adjuster",
    "tool_description": "Adjusts the comedic tone and style of existing dialogue to match specific requirements or character voices.",
    "parameters": {
      "original_dialogue": {
        "type": "string",
        "required": true,
        "description": "Original dialogue text to be adjusted"
      },
      "target_tone": {
        "type": "string",
        "required": true,
        "description": "Desired comedic tone: witty, slapstick, dry, absurd, wholesome, edgy, self-deprecating"
      },
      "intensity_level": {
        "type": "string",
        "required": true,
        "description": "Tone intensity: subtle, moderate, strong"
      },
      "preserve_meaning": {
        "type": "boolean",
        "required": false,
        "description": "Whether to maintain original meaning while adjusting tone",
        "default": true
      }
    },
    "error_messages": [
      "Empty dialogue: original_dialogue must contain at least 20 characters",
      "Invalid target tone: Use one of [witty, slapstick, dry, absurd, wholesome, edgy, self-deprecating]",
      "Invalid intensity level: Use one of [subtle, moderate, strong]",
      "Adjustment impossible: Original dialogue may not support the requested tone change"
    ],
    "usage": "Provide original_dialogue, target_tone, and intensity_level. Optionally set preserve_meaning. Returns tone-adjusted dialogue with modification notes.",
    "output_details": {
      "adjusted_dialogue": {
        "type": "string",
        "description": "Dialogue adjusted to match target tone"
      },
      "modifications_made": {
        "type": "array",
        "items": {"type": "string"},
        "description": "List of specific changes made to achieve target tone"
      },
      "tone_achievement_score": {
        "type": "number",
        "description": "Success rating for achieving target tone from 0-10"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Comedy Beat Scheduler",
    "tool_description": "Schedules and optimizes the placement of comedic beats within dialogue sequences for maximum impact and flow.",
    "parameters": {
      "dialogue_sequence": {
        "type": "string",
        "required": true,
        "description": "Complete dialogue sequence to schedule comedy beats for"
      },
      "beat_frequency": {
        "type": "string",
        "required": true,
        "description": "Desired frequency of comedic beats: high, medium, low"
      },
      "sequence_type": {
        "type": "string",
        "required": true,
        "description": "Type of sequence: opening, build-up, climax, resolution, transition"
      },
      "total_duration_minutes": {
        "type": "number",
        "required": false,
        "description": "Estimated performance duration in minutes",
        "default": 5.0
      },
      "audience_energy_level": {
        "type": "string",
        "required": false,
        "description": "Expected audience energy: cold, warm, hot",
        "default": "warm"
      }
    },
    "error_messages": [
      "Insufficient dialogue: dialogue_sequence must be at least 200 characters for beat scheduling",
      "Invalid beat frequency: Use one of [high, medium, low]",
      "Invalid sequence type: Use one of [opening, build-up, climax, resolution, transition]",
      "Invalid duration: total_duration_minutes must be between 1 and 60 minutes",
      "Invalid audience energy: Use one of [cold, warm, hot]"
    ],
    "usage": "Provide dialogue_sequence, beat_frequency, and sequence_type. Optionally set total_duration_minutes and audience_energy_level. Returns optimized beat scheduling with timing recommendations.",
    "output_details": {
      "beat_schedule": {
        "type": "string",
        "description": "Detailed schedule of comedic beat placements"
      },
      "timing_markers": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Specific timing markers for comedic beats"
      },
      "flow_optimization_score": {
        "type": "number",
        "description": "Overall flow optimization rating from 0-10"
      },
      "pacing_recommendations": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Specific pacing suggestions for optimal delivery"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Script Formatter",
    "tool_description": "Formats comedic dialogue into proper script format with stage directions, character names, and comedic timing notations.",
    "parameters": {
      "raw_dialogue": {
        "type": "string",
        "required": true,
        "description": "Unformatted dialogue text to be formatted"
      },
      "script_format": {
        "type": "string",
        "required": true,
        "description": "Target script format: screenplay, stage play, sketch, sitcom, radio script"
      },
      "include_stage_directions": {
        "type": "boolean",
        "required": false,
        "description": "Whether to include comedic stage directions and timing notes",
        "default": true
      },
      "character_name_style": {
        "type": "string",
        "required": false,
        "description": "Character name formatting: uppercase, title_case, lowercase",
        "default": "uppercase"
      }
    },
    "error_messages": [
      "Empty dialogue: raw_dialogue must contain at least 50 characters",
      "Invalid script format: Use one of [screenplay, stage play, sketch, sitcom, radio script]",
      "Invalid character name style: Use one of [uppercase, title_case, lowercase]",
      "Formatting error: Unable to identify character speakers in the dialogue",
      "Missing character information: Dialogue must include identifiable character names or speakers"
    ],
    "usage": "Provide raw_dialogue and script_format. Optionally set include_stage_directions and character_name_style. Returns professionally formatted script with appropriate comedic notations.",
    "output_details": {
      "formatted_script": {
        "type": "string",
        "description": "Complete formatted script text"
      },
      "page_count": {
        "type": "number",
        "description": "Estimated page count for the formatted script"
      },
      "character_list": {
        "type": "array",
        "items": {"type": "string"},
        "description": "List of all characters appearing in the script"
      },
      "formatting_notes": {
        "type": "string",
        "description": "Notes about formatting choices and comedic annotations added"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Dialogue Flow Analyzer",
    "tool_description": "Analyzes the natural flow and readability of comedic dialogue to ensure smooth character interactions and conversations.",
    "parameters": {
      "dialogue_text": {
        "type": "string",
        "required": true,
        "description": "Dialogue text to analyze for flow and naturalness"
      },
      "conversation_participants": {
        "type": "array",
        "required": true,
        "description": "List of character names or identifiers participating in the conversation",
        "items": {"type": "string"},
        "minItems": 2,
        "maxItems": 5
      },
      "flow_criteria": {
        "type": "array",
        "required": false,
        "description": "Specific flow aspects to analyze",
        "items": {"type": "string"},
        "default": ["naturalness", "pacing", "transitions", "character_consistency"]
      }
    },
    "error_messages": [
      "Insufficient dialogue: dialogue_text must be at least 100 characters long",
      "Invalid participant count: Must specify 2-5 conversation participants",
      "Invalid flow criteria: Use valid criteria like naturalness, pacing, transitions, character_consistency",
      "Character mismatch: Participants in dialogue don't match specified conversation_participants",
      "Flow analysis failed: Unable to identify clear conversation structure"
    ],
    "usage": "Provide dialogue_text and conversation_participants. Optionally specify flow_criteria for focused analysis. Returns comprehensive flow analysis with improvement suggestions.",
    "output_details": {
      "overall_flow_score": {
        "type": "number",
        "description": "Overall conversation flow rating from 0-10"
      },
      "naturalness_rating": {
        "type": "number",
        "description": "How natural the dialogue sounds from 0-10"
      },
      "pacing_assessment": {
        "type": "string",
        "description": "Analysis of dialogue pacing and rhythm"
      },
      "improvement_suggestions": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Specific suggestions for improving dialogue flow"
      },
      "problematic_sections": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Sections of dialogue that may need revision"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Dialogue Quality Scorer",
    "tool_description": "Provides comprehensive quality assessment of comedic dialogue including humor effectiveness, character consistency, and overall script quality.",
    "parameters": {
      "script_content": {
        "type": "string",
        "required": true,
        "description": "Complete script or dialogue content to evaluate"
      },
      "evaluation_criteria": {
        "type": "array",
        "required": true,
        "description": "Quality criteria to assess",
        "items": {"type": "string"},
        "minItems": 3,
        "maxItems": 8
      },
      "target_audience": {
        "type": "string",
        "required": true,
        "description": "Intended audience: family, adult, mature, niche"
      },
      "genre_expectations": {
        "type": "string",
        "required": true,
        "description": "Comedy genre for evaluation context: sitcom, sketch, romantic comedy, dark comedy, satire, physical comedy"
      },
      "scoring_weight_humor": {
        "type": "number",
        "required": false,
        "description": "Weight for humor effectiveness in scoring (0.1-1.0)",
        "default": 0.4
      },
      "scoring_weight_character": {
        "type": "number",
        "required": false,
        "description": "Weight for character consistency in scoring (0.1-1.0)",
        "default": 0.3
      },
      "scoring_weight_technical": {
        "type": "number",
        "required": false,
        "description": "Weight for technical quality in scoring (0.1-1.0)",
        "default": 0.3
      },
      "comparison_benchmark": {
        "type": "string",
        "required": false,
        "description": "Quality benchmark level: amateur, professional, industry_standard, award_winning",
        "default": "professional"
      }
    },
    "error_messages": [
      "Insufficient content: script_content must be at least 200 characters for meaningful evaluation",
      "Invalid criteria count: Must specify 3-8 evaluation criteria",
      "Invalid target audience: Use one of [family, adult, mature, niche]",
      "Invalid genre: Use one of [sitcom, sketch, romantic comedy, dark comedy, satire, physical comedy]",
      "Invalid scoring weights: All weights must be between 0.1-1.0 and should sum to approximately 1.0",
      "Invalid benchmark: Use one of [amateur, professional, industry_standard, award_winning]",
      "Content analysis failed: Unable to identify sufficient comedic elements for scoring"
    ],
    "usage": "Provide script_content, evaluation_criteria, target_audience, and genre_expectations. Optionally adjust scoring weights and comparison_benchmark. Returns detailed quality assessment with scores and improvement recommendations.",
    "output_details": {
      "overall_quality_score": {
        "type": "number",
        "description": "Comprehensive quality score from 0-100"
      },
      "humor_effectiveness_score": {
        "type": "number",
        "description": "Comedy effectiveness rating from 0-10"
      },
      "character_consistency_score": {
        "type": "number",
        "description": "Character voice consistency rating from 0-10"
      },
      "technical_quality_score": {
        "type": "number",
        "description": "Technical writing quality rating from 0-10"
      },
      "strengths": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Identified strengths in the script"
      },
      "areas_for_improvement": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Specific areas needing improvement"
      },
      "benchmark_comparison": {
        "type": "string",
        "description": "How the script compares to the specified benchmark"
      },
      "revision_priority": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Prioritized list of revision recommendations"
      }
    }
  }
  ```
