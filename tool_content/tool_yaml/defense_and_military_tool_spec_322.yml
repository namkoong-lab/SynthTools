field_name: defense_and_military
subfield: Intelligence Analysis and Reconnaissance
task: Signal Intelligence Monitoring and Processing
tool_description: |-
  **STEP 1 — Rate task difficulty**

  Signal Intelligence Monitoring and Processing is a **hard** task. It involves complex multi-source data fusion from various signal types (communications, electronic, radar), requires sophisticated pattern recognition and anomaly detection, demands real-time processing capabilities, involves high coordination between collection and analysis phases, and carries significant risk where errors could impact national security or military operations.

  **STEP 2 — Set a tool budget**

  Given the hard difficulty rating, I'm targeting **18 tools** within the 15-20 range to cover the comprehensive workflow from signal acquisition through final intelligence product generation.

  **STEP 3 — List all tool names and dependencies**

  Tools and their data flow:
  1. **Signal Source Configurator** → produces collection parameters
  2. **RF Spectrum Analyzer** → consumes frequency ranges, produces signal characteristics
  3. **Communications Interceptor** → consumes target parameters, produces intercepted communications
  4. **Signal Demodulator** → consumes raw signals, produces demodulated data
  5. **Protocol Decoder** → consumes demodulated data, produces structured messages
  6. **Frequency Pattern Detector** → consumes spectrum data, produces pattern classifications
  7. **Signal Classification Engine** → consumes signal features, produces signal types
  8. **Direction Finding Calculator** → consumes multiple sensor inputs, produces location estimates
  9. **Traffic Analysis Processor** → consumes communication metadata, produces traffic patterns
  10. **Anomaly Detection System** → consumes normal baselines, produces anomaly alerts
  11. **Signal Database Manager** → consumes processed signals, produces stored intelligence
  12. **Correlation Analysis Tool** → consumes multiple intelligence sources, produces correlations
  13. **Threat Assessment Generator** → consumes analyzed data, produces threat evaluations
  14. **Intelligence Report Compiler** → consumes all analysis outputs, produces formal reports
  15. **Real-time Alert System** → consumes critical findings, produces immediate notifications
  16. **Signal Quality Assessor** → consumes raw signals, produces quality metrics
  17. **Collection Gap Analyzer** → consumes coverage data, produces gap assessments
  18. **Intelligence Product Validator** → consumes reports, produces validated intelligence

  **STEP 4 — Multi-tool plans**

  **Simple Plans:**
  1. Basic Signal Detection: Signal Source Configurator → RF Spectrum Analyzer → Signal Classification Engine
  2. Quality Assessment: RF Spectrum Analyzer → Signal Quality Assessor → Real-time Alert System

  **Medium Plans:**
  1. Communication Analysis: Communications Interceptor → Signal Demodulator → Protocol Decoder → Traffic Analysis Processor → Intelligence Report Compiler
  2. Threat Detection: Frequency Pattern Detector → Anomaly Detection System → Threat Assessment Generator → Real-time Alert System

  **Complex Plans:**
  1. Full SIGINT Pipeline: Signal Source Configurator → Communications Interceptor → Signal Demodulator → Protocol Decoder → Direction Finding Calculator → Traffic Analysis Processor → Correlation Analysis Tool → Threat Assessment Generator → Intelligence Report Compiler
  2. Comprehensive Analysis: RF Spectrum Analyzer → Signal Classification Engine → Signal Database Manager → Correlation Analysis Tool → Collection Gap Analyzer → Intelligence Product Validator

  **STEP 5 — Produce tools**

  ```json
  {
    "tool_name": "Signal Source Configurator",
    "tool_description": "Configures signal collection parameters including frequency ranges, geographic coverage areas, and collection priorities for intelligence gathering operations.",
    "parameters": {
      "frequency_start_mhz": {
        "type": "number",
        "required": true,
        "description": "Starting frequency in MHz for signal collection range"
      },
      "frequency_end_mhz": {
        "type": "number",
        "required": true,
        "description": "Ending frequency in MHz for signal collection range"
      },
      "geographic_bounds": {
        "type": "array",
        "required": true,
        "description": "Geographic coordinates defining collection area [lat_min, lon_min, lat_max, lon_max]",
        "items": {"type": "number"},
        "minItems": 4,
        "maxItems": 4
      },
      "collection_priority": {
        "type": "string",
        "required": true,
        "description": "Priority level for collection: low, medium, high, critical"
      },
      "duration_hours": {
        "type": "integer",
        "required": false,
        "description": "Collection duration in hours",
        "default": 24
      }
    },
    "error_messages": [
      "Invalid frequency range: frequency_start_mhz must be less than frequency_end_mhz and both must be positive",
      "Geographic bounds error: Must provide exactly 4 coordinates [lat_min, lon_min, lat_max, lon_max] with valid latitude (-90 to 90) and longitude (-180 to 180) ranges",
      "Invalid priority level: collection_priority must be one of [low, medium, high, critical]",
      "Duration out of range: duration_hours must be between 1 and 168 hours"
    ],
    "usage": "Set frequency_start_mhz and frequency_end_mhz to define the signal spectrum to monitor, provide geographic_bounds array with coordinates, specify collection_priority, and optionally set duration_hours for the collection period.",
    "output_details": {
      "configuration_id": {
        "type": "string",
        "description": "Unique identifier for this collection configuration"
      },
      "status": {
        "type": "string",
        "description": "Configuration status: active, pending, error"
      },
      "coverage_area_km2": {
        "type": "number",
        "description": "Total geographic coverage area in square kilometers"
      },
      "bandwidth_mhz": {
        "type": "number",
        "description": "Total frequency bandwidth configured in MHz"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "RF Spectrum Analyzer",
    "tool_description": "Analyzes radio frequency spectrum data to identify signal characteristics, power levels, and spectral occupancy patterns for intelligence analysis.",
    "parameters": {
      "frequency_range_mhz": {
        "type": "array",
        "required": true,
        "description": "Frequency range to analyze [start_freq, end_freq] in MHz",
        "items": {"type": "number"},
        "minItems": 2,
        "maxItems": 2
      },
      "resolution_khz": {
        "type": "number",
        "required": true,
        "description": "Frequency resolution in kHz for analysis"
      },
      "integration_time_ms": {
        "type": "integer",
        "required": true,
        "description": "Integration time in milliseconds for each measurement"
      },
      "threshold_dbm": {
        "type": "number",
        "required": false,
        "description": "Signal detection threshold in dBm",
        "default": -80
      },
      "window_function": {
        "type": "string",
        "required": false,
        "description": "FFT window function: hamming, hanning, blackman, rectangular",
        "default": "hamming"
      }
    },
    "error_messages": [
      "Invalid frequency range: Start frequency must be less than end frequency, both must be positive",
      "Resolution too coarse: resolution_khz must be between 0.1 and 1000 kHz",
      "Integration time error: integration_time_ms must be between 1 and 10000 milliseconds",
      "Threshold out of range: threshold_dbm must be between -120 and 0 dBm",
      "Unsupported window function: Use one of [hamming, hanning, blackman, rectangular]"
    ],
    "usage": "Provide frequency_range_mhz array with start and end frequencies, set resolution_khz for desired frequency granularity, specify integration_time_ms for measurement duration, and optionally adjust threshold_dbm and window_function for analysis parameters.",
    "output_details": {
      "detected_signals": {
        "type": "array",
        "items": {"type": "number"},
        "description": "Array of detected signal frequencies in MHz"
      },
      "power_levels_dbm": {
        "type": "array",
        "items": {"type": "number"},
        "description": "Corresponding power levels for detected signals in dBm"
      },
      "occupancy_percentage": {
        "type": "number",
        "description": "Percentage of spectrum showing signal activity"
      },
      "peak_frequency_mhz": {
        "type": "number",
        "description": "Frequency of strongest detected signal in MHz"
      },
      "analysis_timestamp": {
        "type": "string",
        "description": "Timestamp of analysis completion in ISO 8601 format"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Communications Interceptor",
    "tool_description": "Intercepts and captures communications signals from specified targets or frequency ranges for intelligence analysis.",
    "parameters": {
      "target_frequencies": {
        "type": "array",
        "required": true,
        "description": "Array of target frequencies in MHz to monitor",
        "items": {"type": "number"},
        "minItems": 1,
        "maxItems": 50
      },
      "modulation_types": {
        "type": "array",
        "required": true,
        "description": "Expected modulation types: AM, FM, SSB, PSK, FSK, QAM",
        "items": {"type": "string"},
        "minItems": 1,
        "maxItems": 10
      },
      "capture_duration_seconds": {
        "type": "integer",
        "required": true,
        "description": "Duration to capture communications in seconds"
      },
      "bandwidth_khz": {
        "type": "number",
        "required": false,
        "description": "Bandwidth around each target frequency in kHz",
        "default": 25
      },
      "signal_strength_threshold": {
        "type": "number",
        "required": false,
        "description": "Minimum signal strength threshold in dBm",
        "default": -90
      }
    },
    "error_messages": [
      "Invalid target frequencies: All frequencies must be positive values in MHz",
      "Unsupported modulation: modulation_types must contain only [AM, FM, SSB, PSK, FSK, QAM]",
      "Capture duration error: capture_duration_seconds must be between 1 and 3600 seconds",
      "Bandwidth out of range: bandwidth_khz must be between 1 and 200 kHz",
      "Threshold error: signal_strength_threshold must be between -120 and -20 dBm"
    ],
    "usage": "Specify target_frequencies array with frequencies to monitor, provide modulation_types expected for those frequencies, set capture_duration_seconds for monitoring period, and optionally adjust bandwidth_khz and signal_strength_threshold for capture parameters.",
    "output_details": {
      "intercepted_count": {
        "type": "integer",
        "description": "Number of communications successfully intercepted"
      },
      "capture_files": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Array of captured signal file identifiers"
      },
      "frequency_activity": {
        "type": "array",
        "items": {"type": "number"},
        "description": "Activity levels for each monitored frequency"
      },
      "strongest_signals": {
        "type": "array",
        "items": {"type": "number"},
        "description": "Frequencies with strongest signal activity in MHz"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Signal Demodulator",
    "tool_description": "Demodulates captured radio signals to extract the underlying information or data content from various modulation schemes.",
    "parameters": {
      "signal_file_id": {
        "type": "string",
        "required": true,
        "description": "Identifier of the captured signal file to demodulate"
      },
      "modulation_type": {
        "type": "string",
        "required": true,
        "description": "Modulation scheme to use: AM, FM, SSB, PSK, FSK, QAM"
      },
      "carrier_frequency_mhz": {
        "type": "number",
        "required": true,
        "description": "Carrier frequency of the signal in MHz"
      },
      "symbol_rate": {
        "type": "integer",
        "required": false,
        "description": "Symbol rate for digital modulations in symbols per second",
        "default": 9600
      }
    },
    "error_messages": [
      "Signal file not found: The specified signal_file_id does not exist or is inaccessible",
      "Unsupported modulation: modulation_type must be one of [AM, FM, SSB, PSK, FSK, QAM]",
      "Invalid carrier frequency: carrier_frequency_mhz must be a positive number",
      "Symbol rate error: symbol_rate must be between 300 and 1000000 symbols per second"
    ],
    "usage": "Provide signal_file_id of the captured signal, specify the modulation_type used in the signal, set carrier_frequency_mhz for the signal's carrier, and optionally set symbol_rate for digital modulations.",
    "output_details": {
      "demodulation_success": {
        "type": "boolean",
        "description": "Whether demodulation was successful"
      },
      "output_data_file": {
        "type": "string",
        "description": "File identifier containing demodulated data"
      },
      "signal_quality": {
        "type": "number",
        "description": "Signal quality score from 0 to 100"
      },
      "data_rate_bps": {
        "type": "integer",
        "description": "Detected data rate in bits per second"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Protocol Decoder",
    "tool_description": "Decodes structured communication protocols from demodulated signals to extract message content and metadata.",
    "parameters": {
      "data_file_id": {
        "type": "string",
        "required": true,
        "description": "Identifier of demodulated data file to decode"
      },
      "protocol_type": {
        "type": "string",
        "required": true,
        "description": "Communication protocol to decode"
      },
      "encoding_format": {
        "type": "string",
        "required": false,
        "description": "Data encoding format: ASCII, UTF-8, binary, hex",
        "default": "ASCII"
      }
    },
    "error_messages": [
      "Data file not accessible: The specified data_file_id cannot be found or opened",
      "Unsupported protocol: The specified protocol_type is not supported by this decoder",
      "Invalid encoding format: encoding_format must be one of [ASCII, UTF-8, binary, hex]",
      "Decoding failure: Unable to decode data due to corruption or incorrect protocol specification"
    ],
    "usage": "Specify data_file_id containing demodulated signal data, provide protocol_type for the communication standard used, and optionally set encoding_format for the data representation.",
    "output_details": {
      "decoded_messages": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Array of successfully decoded message contents"
      },
      "message_timestamps": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Timestamps for each decoded message"
      },
      "protocol_metadata": {
        "type": "string",
        "description": "JSON string containing protocol-specific metadata"
      },
      "decoding_confidence": {
        "type": "number",
        "description": "Confidence score for decoding accuracy (0-100)"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Frequency Pattern Detector",
    "tool_description": "Analyzes frequency spectrum data to detect and classify recurring patterns, frequency hopping, and communication signatures.",
    "parameters": {
      "spectrum_data_file": {
        "type": "string",
        "required": true,
        "description": "File containing spectrum analysis data"
      },
      "analysis_window_seconds": {
        "type": "integer",
        "required": true,
        "description": "Time window for pattern analysis in seconds"
      },
      "min_pattern_duration_ms": {
        "type": "integer",
        "required": true,
        "description": "Minimum pattern duration to detect in milliseconds"
      },
      "frequency_tolerance_khz": {
        "type": "number",
        "required": true,
        "description": "Frequency tolerance for pattern matching in kHz"
      },
      "detection_sensitivity": {
        "type": "string",
        "required": false,
        "description": "Detection sensitivity level: low, medium, high",
        "default": "medium"
      },
      "pattern_types": {
        "type": "array",
        "required": false,
        "description": "Specific pattern types to search for",
        "items": {"type": "string"},
        "default": ["frequency_hopping", "burst_patterns", "periodic_signals"]
      }
    },
    "error_messages": [
      "Spectrum data file error: Cannot access or read the specified spectrum_data_file",
      "Invalid analysis window: analysis_window_seconds must be between 1 and 3600 seconds",
      "Pattern duration error: min_pattern_duration_ms must be between 1 and 60000 milliseconds",
      "Frequency tolerance error: frequency_tolerance_khz must be between 0.1 and 100 kHz",
      "Invalid sensitivity level: detection_sensitivity must be one of [low, medium, high]",
      "Unsupported pattern type: pattern_types array contains unsupported pattern identifiers"
    ],
    "usage": "Provide spectrum_data_file containing frequency analysis results, set analysis_window_seconds for the observation period, specify min_pattern_duration_ms and frequency_tolerance_khz for detection parameters, and optionally configure detection_sensitivity and pattern_types for targeted analysis.",
    "output_details": {
      "detected_patterns": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Array of detected pattern types and descriptions"
      },
      "pattern_frequencies": {
        "type": "array",
        "items": {"type": "number"},
        "description": "Central frequencies for detected patterns in MHz"
      },
      "pattern_confidence": {
        "type": "array",
        "items": {"type": "number"},
        "description": "Confidence scores for each detected pattern (0-100)"
      },
      "hopping_sequences": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Identified frequency hopping sequences if detected"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Signal Classification Engine",
    "tool_description": "Classifies signals based on their characteristics to identify signal types, sources, and potential threat levels.",
    "parameters": {
      "signal_features_file": {
        "type": "string",
        "required": true,
        "description": "File containing extracted signal feature data"
      },
      "classification_model": {
        "type": "string",
        "required": true,
        "description": "Classification model to use for signal identification"
      },
      "confidence_threshold": {
        "type": "number",
        "required": false,
        "description": "Minimum confidence threshold for classification (0-100)",
        "default": 75
      }
    },
    "error_messages": [
      "Feature file not found: Cannot locate or access the specified signal_features_file",
      "Invalid classification model: The specified classification_model is not available or recognized",
      "Confidence threshold error: confidence_threshold must be between 0 and 100",
      "Feature data format error: Signal features file contains invalid or corrupted data"
    ],
    "usage": "Specify signal_features_file containing signal characteristics, provide classification_model name for the analysis approach, and optionally set confidence_threshold for classification certainty requirements.",
    "output_details": {
      "signal_classifications": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Array of classified signal types"
      },
      "classification_confidence": {
        "type": "array",
        "items": {"type": "number"},
        "description": "Confidence scores for each classification"
      },
      "threat_level": {
        "type": "string",
        "description": "Overall assessed threat level: low, medium, high, critical"
      },
      "source_estimates": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Estimated signal source types or origins"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Direction Finding Calculator",
    "tool_description": "Calculates the direction and estimated location of signal sources using multiple sensor inputs and triangulation methods.",
    "parameters": {
      "sensor_locations": {
        "type": "array",
        "required": true,
        "description": "Array of sensor coordinates [latitude, longitude] pairs",
        "items": {"type": "number"},
        "minItems": 6,
        "maxItems": 20
      },
      "bearing_measurements": {
        "type": "array",
        "required": true,
        "description": "Bearing measurements from each sensor in degrees (0-360)",
        "items": {"type": "number"},
        "minItems": 3,
        "maxItems": 10
      },
      "measurement_timestamps": {
        "type": "array",
        "required": true,
        "description": "Timestamps for each bearing measurement",
        "items": {"type": "string"},
        "minItems": 3,
        "maxItems": 10
      },
      "frequency_mhz": {
        "type": "number",
        "required": true,
        "description": "Signal frequency for location calculation in MHz"
      },
      "triangulation_method": {
        "type": "string",
        "required": false,
        "description": "Triangulation algorithm: least_squares, maximum_likelihood, weighted_average",
        "default": "least_squares"
      },
      "confidence_level": {
        "type": "number",
        "required": false,
        "description": "Statistical confidence level for location estimate (50-99)",
        "default": 95
      }
    },
    "error_messages": [
      "Insufficient sensors: Need at least 3 sensor locations for triangulation (6 coordinates minimum)",
      "Mismatched array lengths: sensor_locations, bearing_measurements, and measurement_timestamps must have compatible lengths",
      "Invalid bearing values: All bearing measurements must be between 0 and 360 degrees",
      "Invalid frequency: frequency_mhz must be a positive number",
      "Unsupported triangulation method: Use one of [least_squares, maximum_likelihood, weighted_average]",
      "Invalid confidence level: confidence_level must be between 50 and 99",
      "Geometric dilution error: Sensor geometry provides poor triangulation conditions"
    ],
    "usage": "Provide sensor_locations array with coordinate pairs, bearing_measurements from each sensor, corresponding measurement_timestamps, signal frequency_mhz, and optionally specify triangulation_method and confidence_level for location calculation.",
    "output_details": {
      "estimated_location": {
        "type": "array",
        "items": {"type": "number"},
        "description": "Estimated source location [latitude, longitude]"
      },
      "location_uncertainty_m": {
        "type": "number",
        "description": "Location uncertainty radius in meters"
      },
      "confidence_ellipse": {
        "type": "array",
        "items": {"type": "number"},
        "description": "Confidence ellipse parameters [major_axis, minor_axis, orientation]"
      },
      "calculation_quality": {
        "type": "string",
        "description": "Quality assessment: excellent, good, fair, poor"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Traffic Analysis Processor",
    "tool_description": "Analyzes communication traffic patterns, volumes, and metadata to identify operational patterns and intelligence indicators.",
    "parameters": {
      "communication_logs": {
        "type": "array",
        "required": true,
        "description": "Array of communication log file identifiers",
        "items": {"type": "string"},
        "minItems": 1,
        "maxItems": 100
      },
      "analysis_timeframe_hours": {
        "type": "integer",
        "required": true,
        "description": "Timeframe for traffic analysis in hours"
      },
      "traffic_metrics": {
        "type": "array",
        "required": true,
        "description": "Metrics to analyze: volume, frequency, duration, patterns, timing",
        "items": {"type": "string"},
        "minItems": 1,
        "maxItems": 10
      },
      "baseline_period_days": {
        "type": "integer",
        "required": false,
        "description": "Baseline comparison period in days",
        "default": 7
      },
      "anomaly_threshold": {
        "type": "number",
        "required": false,
        "description": "Threshold for anomaly detection (standard deviations)",
        "default": 2.0
      },
      "pattern_sensitivity": {
        "type": "string",
        "required": false,
        "description": "Pattern detection sensitivity: low, medium, high",
        "default": "medium"
      }
    },
    "error_messages": [
      "Communication logs error: One or more log files cannot be accessed or are corrupted",
      "Invalid timeframe: analysis_timeframe_hours must be between 1 and 168 hours",
      "Unsupported metrics: traffic_metrics contains unsupported analysis types",
      "Baseline period error: baseline_period_days must be between 1 and 365 days",
      "Invalid anomaly threshold: anomaly_threshold must be between 0.5 and 5.0 standard deviations",
      "Invalid sensitivity level: pattern_sensitivity must be one of [low, medium, high]"
    ],
    "usage": "Provide communication_logs array with log file identifiers, set analysis_timeframe_hours for the analysis period, specify traffic_metrics to calculate, and optionally configure baseline_period_days, anomaly_threshold, and pattern_sensitivity for comparative analysis.",
    "output_details": {
      "traffic_volume": {
        "type": "integer",
        "description": "Total communication volume in the analysis period"
      },
      "peak_activity_times": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Times of peak communication activity"
      },
      "communication_patterns": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Identified recurring communication patterns"
      },
      "anomalies_detected": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Traffic anomalies detected compared to baseline"
      },
      "network_topology": {
        "type": "string",
        "description": "Inferred network structure and key nodes"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Anomaly Detection System",
    "tool_description": "Detects anomalous patterns in signal intelligence data by comparing current observations against established baselines and known normal behaviors.",
    "parameters": {
      "current_data_file": {
        "type": "string",
        "required": true,
        "description": "File containing current observation data for anomaly detection"
      },
      "baseline_data_file": {
        "type": "string",
        "required": true,
        "description": "File containing baseline normal behavior data"
      },
      "detection_algorithm": {
        "type": "string",
        "required": true,
        "description": "Anomaly detection algorithm: statistical, machine_learning, threshold_based"
      },
      "sensitivity_level": {
        "type": "string",
        "required": false,
        "description": "Detection sensitivity: low, medium, high, critical",
        "default": "medium"
      },
      "feature_weights": {
        "type": "array",
        "required": false,
        "description": "Relative importance weights for different signal features",
        "items": {"type": "number"},
        "default": [1.0, 1.0, 1.0, 1.0, 1.0]
      }
    },
    "error_messages": [
      "Data file access error: Cannot read current_data_file or baseline_data_file",
      "Unsupported algorithm: detection_algorithm must be one of [statistical, machine_learning, threshold_based]",
      "Invalid sensitivity level: sensitivity_level must be one of [low, medium, high, critical]",
      "Feature weights error: feature_weights array must contain positive numbers",
      "Insufficient baseline data: Baseline dataset is too small for reliable anomaly detection"
    ],
    "usage": "Specify current_data_file for new observations and baseline_data_file for normal behavior reference, choose detection_algorithm for the analysis method, and optionally set sensitivity_level and feature_weights to customize detection parameters.",
    "output_details": {
      "anomalies_found": {
        "type": "boolean",
        "description": "Whether any anomalies were detected"
      },
      "anomaly_scores": {
        "type": "array",
        "items": {"type": "number"},
        "description": "Anomaly scores for detected unusual patterns"
      },
      "anomaly_descriptions": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Descriptions of detected anomalous behaviors"
      },
      "risk_assessment": {
        "type": "string",
        "description": "Overall risk level: low, medium, high, critical"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Signal Database Manager",
    "tool_description": "Manages storage, retrieval, and organization of processed signal intelligence data with metadata and search capabilities.",
    "parameters": {
      "operation": {
        "type": "string",
        "required": true,
        "description": "Database operation: store, retrieve, search, delete, update"
      },
      "signal_data": {
        "type": "string",
        "required": false,
        "description": "Signal data or file identifier for storage operations",
        "default": null
      },
      "metadata_tags": {
        "type": "array",
        "required": false,
        "description": "Metadata tags for categorization and search",
        "items": {"type": "string"},
        "default": []
      },
      "search_criteria": {
        "type": "array",
        "required": false,
        "description": "Search parameters for retrieval operations",
        "items": {"type": "string"},
        "default": []
      },
      "time_range_start": {
        "type": "string",
        "required": false,
        "description": "Start time for temporal searches in ISO 8601 format",
        "default": null
      },
      "time_range_end": {
        "type": "string",
        "required": false,
        "description": "End time for temporal searches in ISO 8601 format",
        "default": null
      }
    },
    "error_messages": [
      "Invalid operation: operation must be one of [store, retrieve, search, delete, update]",
      "Missing signal data: signal_data is required for store and update operations",
      "Invalid time format: time_range_start and time_range_end must be in ISO 8601 format",
      "Database connection error: Cannot connect to signal intelligence database",
      "Access denied: Insufficient permissions for requested database operation
