field_name: file_systems
subfield: Directory Structure Management
task: Create and organize nested directory hierarchies with proper permissions and metadata
tool_description: |-
  **STEP 1 — Rate task difficulty**

  This task is of **medium** difficulty. It involves multiple coordinated operations (creating directories, setting permissions, managing metadata), requires handling various filesystem constraints and security considerations, and has moderate risk of errors that could affect system accessibility or data organization.

  **STEP 2 — Set a tool budget**

  Given the medium difficulty, I'll target **12 tools** within the 10-15 range to cover directory creation, permission management, metadata handling, validation, and organizational operations.

  **STEP 3 — List all tool names and dependencies**

  Tools and their data flow:
  - **Directory Path Builder** → produces structured paths → consumed by Directory Creator
  - **Directory Creator** → produces directory structures → consumed by Permission Setter, Metadata Manager
  - **Permission Setter** → consumes directory paths → produces permission confirmations
  - **Metadata Manager** → consumes directory paths → produces metadata records
  - **Directory Validator** → consumes directory paths → produces validation reports
  - **Path Analyzer** → consumes directory paths → produces path information
  - **Directory Scanner** → produces directory listings → consumed by Structure Optimizer
  - **Structure Optimizer** → consumes directory structures → produces optimization recommendations
  - **Directory Cloner** → consumes source paths → produces replicated structures
  - **Access Controller** → consumes directory paths → produces access reports
  - **Directory Archiver** → consumes directory structures → produces archive records
  - **Hierarchy Visualizer** → consumes directory structures → produces visual representations

  **STEP 4 — Multi-tool plans**

  **Simple plans:**
  1. **Basic directory creation**: Directory Path Builder → Directory Creator → Permission Setter
  2. **Quick validation**: Path Analyzer → Directory Validator

  **Medium plans:**
  1. **Standard hierarchy setup**: Directory Path Builder → Directory Creator → Permission Setter → Metadata Manager → Directory Validator
  2. **Directory analysis**: Directory Scanner → Path Analyzer → Structure Optimizer
  3. **Access management**: Directory Creator → Permission Setter → Access Controller → Directory Validator

  **Complex plans:**
  1. **Complete hierarchy deployment**: Directory Path Builder → Directory Creator → Permission Setter → Metadata Manager → Access Controller → Directory Validator → Hierarchy Visualizer
  2. **Enterprise migration**: Directory Scanner → Structure Optimizer → Directory Cloner → Permission Setter → Metadata Manager → Directory Archiver

  **STEP 5 — Produce tools**

  ```json
  {
    "tool_name": "Directory Path Builder",
    "tool_description": "Constructs standardized directory path structures based on naming conventions and hierarchy rules, ensuring proper path formatting and validation.",
    "parameters": {
      "base_path": {
        "type": "string",
        "required": true,
        "description": "Root directory path where the hierarchy will be created"
      },
      "hierarchy_levels": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "required": true,
        "description": "Ordered list of directory names for each level of the hierarchy",
        "minItems": 1,
        "maxItems": 20
      },
      "naming_convention": {
        "type": "string",
        "required": false,
        "description": "Naming pattern: lowercase, uppercase, camelCase, snake_case, kebab-case",
        "default": "lowercase"
      }
    },
    "error_messages": [
      "Invalid base path: Base path must be an absolute path starting with / or a valid Windows drive letter.",
      "Empty hierarchy levels: At least one hierarchy level must be specified.",
      "Invalid naming convention: Use one of [lowercase, uppercase, camelCase, snake_case, kebab-case].",
      "Invalid characters in path: Directory names contain unsupported characters for the filesystem."
    ],
    "usage": "Provide base_path and hierarchy_levels array, optionally specify naming_convention. The tool returns formatted directory paths ready for creation.",
    "output_details": {
      "full_paths": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Complete paths for all directories in the hierarchy"
      },
      "relative_paths": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Relative paths from the base directory"
      },
      "depth_count": {
        "type": "integer",
        "description": "Maximum depth of the directory structure"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Directory Creator",
    "tool_description": "Creates directory structures on the filesystem with support for nested hierarchies, parent directory creation, and conflict resolution.",
    "parameters": {
      "directory_paths": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "required": true,
        "description": "List of directory paths to create",
        "minItems": 1,
        "maxItems": 100
      },
      "create_parents": {
        "type": "boolean",
        "required": false,
        "description": "Whether to create parent directories if they don't exist",
        "default": true
      },
      "overwrite_existing": {
        "type": "boolean",
        "required": false,
        "description": "Whether to overwrite existing directories",
        "default": false
      }
    },
    "error_messages": [
      "Permission denied: Insufficient permissions to create directories at the specified location.",
      "Path already exists: Directory already exists and overwrite_existing is false.",
      "Invalid path format: One or more paths contain invalid characters or format.",
      "Disk space insufficient: Not enough disk space to create the directory structure.",
      "Parent directory missing: Parent directories don't exist and create_parents is false."
    ],
    "usage": "Provide directory_paths array, optionally set create_parents and overwrite_existing flags. The tool creates all specified directories and reports success status.",
    "output_details": {
      "created_directories": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of successfully created directory paths"
      },
      "failed_directories": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of directory paths that failed to create"
      },
      "creation_count": {
        "type": "integer",
        "description": "Total number of directories successfully created"
      },
      "creation_timestamp": {
        "type": "string",
        "description": "Timestamp when directory creation was completed",
        "format": "date-time"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Permission Setter",
    "tool_description": "Sets filesystem permissions on directories with support for owner, group, and other permissions, including recursive application and permission inheritance.",
    "parameters": {
      "directory_paths": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "required": true,
        "description": "List of directory paths to modify permissions for",
        "minItems": 1,
        "maxItems": 50
      },
      "owner_permissions": {
        "type": "string",
        "required": true,
        "description": "Owner permissions in rwx format (e.g., rwx, rw-, r--)"
      },
      "group_permissions": {
        "type": "string",
        "required": true,
        "description": "Group permissions in rwx format (e.g., rwx, rw-, r--)"
      },
      "other_permissions": {
        "type": "string",
        "required": true,
        "description": "Other permissions in rwx format (e.g., rwx, rw-, r--)"
      },
      "recursive": {
        "type": "boolean",
        "required": false,
        "description": "Apply permissions recursively to subdirectories",
        "default": false
      },
      "owner_user": {
        "type": "string",
        "required": false,
        "description": "Username to set as directory owner",
        "default": null
      },
      "owner_group": {
        "type": "string",
        "required": false,
        "description": "Group name to set as directory group owner",
        "default": null
      }
    },
    "error_messages": [
      "Invalid permission format: Permissions must be in rwx format (e.g., rwx, r-x, ---).",
      "Permission denied: Insufficient privileges to change permissions on specified directories.",
      "Directory not found: One or more specified directories do not exist.",
      "Invalid user or group: Specified owner_user or owner_group does not exist on the system.",
      "System error: Filesystem does not support the requested permission changes."
    ],
    "usage": "Provide directory_paths and permission strings for owner, group, and other. Optionally specify recursive flag and ownership details. The tool applies permissions and reports results.",
    "output_details": {
      "modified_directories": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of directories where permissions were successfully modified"
      },
      "failed_directories": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of directories where permission changes failed"
      },
      "applied_permissions": {
        "type": "string",
        "description": "String representation of the permissions that were applied"
      },
      "modification_count": {
        "type": "integer",
        "description": "Number of directories successfully modified"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Metadata Manager",
    "tool_description": "Manages directory metadata including custom attributes, tags, descriptions, and creation timestamps with support for bulk operations and metadata inheritance.",
    "parameters": {
      "directory_paths": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "required": true,
        "description": "List of directory paths to manage metadata for",
        "minItems": 1,
        "maxItems": 50
      },
      "metadata_operation": {
        "type": "string",
        "required": true,
        "description": "Operation type: set, get, update, delete, inherit"
      },
      "attributes": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "required": false,
        "description": "Custom attribute key-value pairs in format key=value",
        "default": null
      },
      "tags": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "required": false,
        "description": "List of tags to associate with directories",
        "default": null
      },
      "description": {
        "type": "string",
        "required": false,
        "description": "Descriptive text for the directories",
        "default": null
      },
      "inherit_from_parent": {
        "type": "boolean",
        "required": false,
        "description": "Whether to inherit metadata from parent directory",
        "default": false
      },
      "metadata_format": {
        "type": "string",
        "required": false,
        "description": "Storage format: json, xml, yaml, properties",
        "default": "json"
      }
    },
    "error_messages": [
      "Invalid operation: Use one of [set, get, update, delete, inherit] for metadata_operation.",
      "Directory not found: One or more specified directories do not exist.",
      "Invalid metadata format: Use one of [json, xml, yaml, properties] for metadata_format.",
      "Malformed attributes: Attributes must be in key=value format.",
      "Permission denied: Insufficient permissions to modify directory metadata.",
      "Parent metadata missing: Cannot inherit metadata when parent directory has no metadata."
    ],
    "usage": "Specify directory_paths and metadata_operation, then provide relevant metadata fields like attributes, tags, or description. The tool manages metadata according to the specified operation.",
    "output_details": {
      "processed_directories": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of directories where metadata operations were successful"
      },
      "metadata_records": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Retrieved or updated metadata records in specified format"
      },
      "operation_status": {
        "type": "string",
        "description": "Overall status of the metadata operation"
      },
      "processed_count": {
        "type": "integer",
        "description": "Number of directories successfully processed"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Directory Validator",
    "tool_description": "Validates directory structures against predefined rules, checks for naming conventions, permission consistency, and structural integrity.",
    "parameters": {
      "directory_paths": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "required": true,
        "description": "List of directory paths to validate",
        "minItems": 1,
        "maxItems": 100
      },
      "validation_rules": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "required": true,
        "description": "Validation rules to apply: naming, permissions, structure, metadata, accessibility"
      },
      "strict_mode": {
        "type": "boolean",
        "required": false,
        "description": "Whether to apply strict validation rules",
        "default": false
      }
    },
    "error_messages": [
      "Invalid validation rules: Use one or more of [naming, permissions, structure, metadata, accessibility].",
      "Directory not found: One or more specified directories do not exist for validation.",
      "Validation configuration error: Invalid combination of validation rules specified."
    ],
    "usage": "Provide directory_paths and validation_rules array, optionally enable strict_mode. The tool validates directories and returns detailed compliance reports.",
    "output_details": {
      "validation_summary": {
        "type": "string",
        "description": "Summary of overall validation results"
      },
      "passed_directories": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of directories that passed all validation rules"
      },
      "failed_directories": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of directories that failed validation"
      },
      "validation_errors": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Detailed list of validation errors found"
      },
      "compliance_score": {
        "type": "number",
        "description": "Overall compliance score as percentage (0-100)"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Path Analyzer",
    "tool_description": "Analyzes directory paths for structure patterns, depth analysis, naming conventions, and provides insights about path characteristics.",
    "parameters": {
      "directory_paths": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "required": true,
        "description": "List of directory paths to analyze"
      },
      "analysis_type": {
        "type": "string",
        "required": true,
        "description": "Type of analysis: structure, naming, depth, relationships, patterns"
      }
    },
    "error_messages": [
      "Invalid analysis type: Use one of [structure, naming, depth, relationships, patterns].",
      "Empty path list: At least one directory path must be provided for analysis.",
      "Invalid path format: One or more paths contain invalid formatting."
    ],
    "usage": "Provide directory_paths array and specify analysis_type. The tool analyzes the paths and returns detailed insights about their characteristics.",
    "output_details": {
      "analysis_results": {
        "type": "string",
        "description": "Detailed analysis results based on the specified analysis type"
      },
      "path_statistics": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Statistical information about the analyzed paths"
      },
      "recommendations": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Recommendations for path optimization or standardization"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Directory Scanner",
    "tool_description": "Scans existing directory structures to inventory contents, analyze hierarchy patterns, and generate comprehensive directory listings with metadata.",
    "parameters": {
      "scan_root": {
        "type": "string",
        "required": true,
        "description": "Root directory path to begin scanning from"
      },
      "scan_depth": {
        "type": "integer",
        "required": false,
        "description": "Maximum depth to scan (1-20, where 1 is immediate children only)",
        "default": 5
      },
      "include_hidden": {
        "type": "boolean",
        "required": false,
        "description": "Whether to include hidden directories in scan results",
        "default": false
      },
      "filter_pattern": {
        "type": "string",
        "required": false,
        "description": "Glob pattern to filter directory names (e.g., test*, *tmp)",
        "default": null
      },
      "collect_metadata": {
        "type": "boolean",
        "required": false,
        "description": "Whether to collect directory metadata during scan",
        "default": true
      },
      "sort_order": {
        "type": "string",
        "required": false,
        "description": "Sort order for results: name, date, size, depth",
        "default": "name"
      }
    },
    "error_messages": [
      "Access denied: Insufficient permissions to scan the specified root directory.",
      "Directory not found: The specified scan_root directory does not exist.",
      "Invalid scan depth: scan_depth must be between 1 and 20.",
      "Invalid sort order: Use one of [name, date, size, depth] for sort_order.",
      "Invalid filter pattern: The provided glob pattern is malformed."
    ],
    "usage": "Provide scan_root directory path, optionally configure scan_depth, include_hidden, filter_pattern, collect_metadata, and sort_order. The tool returns comprehensive directory inventory.",
    "output_details": {
      "scanned_directories": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of all directories found during the scan"
      },
      "directory_count": {
        "type": "integer",
        "description": "Total number of directories discovered"
      },
      "max_depth_found": {
        "type": "integer",
        "description": "Maximum depth encountered during scanning"
      },
      "scan_summary": {
        "type": "string",
        "description": "Summary of scan results and statistics"
      },
      "scan_timestamp": {
        "type": "string",
        "description": "Timestamp when the scan was completed",
        "format": "date-time"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Structure Optimizer",
    "tool_description": "Analyzes directory structures and provides optimization recommendations for better organization, performance, and maintainability.",
    "parameters": {
      "directory_structure": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "required": true,
        "description": "List of directory paths representing the current structure"
      },
      "optimization_goals": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "required": true,
        "description": "Optimization objectives: performance, organization, accessibility, maintainability, compliance"
      },
      "constraints": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "required": false,
        "description": "Constraints to consider: max_depth, naming_convention, file_limit, size_limit",
        "default": null
      }
    },
    "error_messages": [
      "Invalid optimization goals: Use one or more of [performance, organization, accessibility, maintainability, compliance].",
      "Empty structure: At least one directory path must be provided for optimization analysis.",
      "Invalid constraints: Constraints must be from [max_depth, naming_convention, file_limit, size_limit]."
    ],
    "usage": "Provide directory_structure array and optimization_goals, optionally specify constraints. The tool analyzes the structure and returns optimization recommendations.",
    "output_details": {
      "optimization_report": {
        "type": "string",
        "description": "Comprehensive report with optimization analysis and recommendations"
      },
      "recommended_changes": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Specific changes recommended to optimize the directory structure"
      },
      "efficiency_score": {
        "type": "number",
        "description": "Current efficiency score of the directory structure (0-100)"
      },
      "projected_improvement": {
        "type": "number",
        "description": "Projected efficiency improvement percentage if recommendations are applied"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Directory Cloner",
    "tool_description": "Creates identical copies of directory structures with options for selective cloning, permission preservation, and metadata replication.",
    "parameters": {
      "source_directory": {
        "type": "string",
        "required": true,
        "description": "Source directory path to clone from"
      },
      "destination_directory": {
        "type": "string",
        "required": true,
        "description": "Destination directory path where the clone will be created"
      },
      "preserve_permissions": {
        "type": "boolean",
        "required": false,
        "description": "Whether to preserve original permissions in the clone",
        "default": true
      },
      "preserve_metadata": {
        "type": "boolean",
        "required": false,
        "description": "Whether to preserve original metadata in the clone",
        "default": true
      },
      "clone_depth": {
        "type": "integer",
        "required": false,
        "description": "Maximum depth to clone (1-10)",
        "default": 10
      },
      "exclude_patterns": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "required": false,
        "description": "Glob patterns for directories to exclude from cloning",
        "default": null
      },
      "overwrite_existing": {
        "type": "boolean",
        "required": false,
        "description": "Whether to overwrite existing directories at destination",
        "default": false
      }
    },
    "error_messages": [
      "Source directory not found: The specified source_directory does not exist.",
      "Destination path invalid: The destination_directory path is invalid or inaccessible.",
      "Permission denied: Insufficient permissions to clone directory structure.",
      "Destination already exists: Directory exists at destination and overwrite_existing is false.",
      "Invalid clone depth: clone_depth must be between 1 and 10.",
      "Exclude pattern error: One or more exclude patterns are malformed."
    ],
    "usage": "Provide source_directory and destination_directory paths, optionally configure preservation settings, clone_depth, exclude_patterns, and overwrite behavior.",
    "output_details": {
      "cloned_directories": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of directories successfully cloned"
      },
      "skipped_directories": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of directories skipped due to exclusion patterns or errors"
      },
      "clone_count": {
        "type": "integer",
        "description": "Total number of directories successfully cloned"
      },
      "clone_status": {
        "type": "string",
        "description": "Overall status of the cloning operation"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Access Controller",
    "tool_description": "Manages and audits directory access controls, including user permissions, group memberships, and access logging for compliance and security.",
    "parameters": {
      "directory_paths": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "required": true,
        "description": "List of directory paths to manage access controls for"
      },
      "operation": {
        "type": "string",
        "required": true,
        "description": "Access control operation: grant, revoke, audit, list, test"
      },
      "user_list": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "required": false,
        "description": "List of usernames for access control operations",
        "default": null
      },
      "group_list": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "required": false,
        "description": "List of group names for access control operations",
        "default": null
      },
      "permission_level": {
        "type": "string",
        "required": false,
        "description": "Permission level: read, write, execute, full, none",
        "default": "read"
      },
      "recursive": {
        "type": "boolean",
        "required": false,
        "description": "Apply access control changes recursively",
        "default": false
      },
      "audit_log": {
        "type": "boolean",
        "required": false,
        "description": "Whether to generate audit logs for access control changes",
        "default": true
      }
    },
    "error_messages": [
      "Invalid operation: Use one of [grant, revoke, audit, list, test] for operation.",
      "Invalid permission level: Use one of [read, write, execute, full, none] for permission_level.",
      "User or group not found: One or more specified users or groups do not exist.",
      "Access denied: Insufficient privileges to modify access controls on specified directories.",
      "Directory not found: One or more specified directories do not exist."
    ],
    "usage": "Specify directory_paths and operation type, provide user_list or group_list as needed, set permission_level and other options. The tool manages access controls and returns operation results.",
    "output_details": {
      "access_changes": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of access control changes that were successfully applied"
      },
      "audit_results": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Audit results showing current access control status"
      },
      "operation_status": {
        "type": "string",
        "description": "Overall status of the access control operation"
      },
      "affected_directories": {
        "type": "integer",
        "description": "Number of directories where access controls were modified"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Directory Archiver",
    "tool_description": "Creates archives of directory structures with compression, encryption, and versioning capabilities for backup and distribution purposes.",
    "parameters": {
      "source_directories": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "required": true,
        "description": "List of directory paths to include in the archive"
      },
      "archive_name": {
        "type": "string",
        "required": true,
        "description": "Name for the created archive file"
      },
      "archive_format": {
        "type": "string",
        "required": false,
        "description": "Archive format: zip, tar, tar.gz, tar.bz2, 7z",
        "default": "zip"
      },
      "compression_level": {
        "type": "integer",
        "required": false,
        "description": "Compression level (0-9, where 9 is maximum compression)",
        "default": 6
      },
      "include_metadata": {
        "type": "boolean",
        "required": false,
        "description": "Whether to include directory metadata in the archive",
        "default": true
      },
      "encryption_enabled": {
        "type": "boolean",
        "required": false,
        "description": "Whether to encrypt the archive",
        "default": false
      },
      "exclude_empty": {
        "type": "boolean",
        "required": false,
        "description": "Whether to exclude empty directories from the archive",
        "default": false
      },
      "version_tag": {
        "type": "string",
        "required": false,
        "description": "Version tag to append to archive name",
        "default": null
      }
    },
    "error_messages": [
      "Invalid archive format: Use one of [zip, tar, tar.gz, tar.bz2, 7z] for archive_format.",
      "Invalid compression level: compression_level must be between 0 and 9.",
      "Source directory not found: One or more source directories do not exist.",
      "Archive creation failed: Unable to create archive due to filesystem or permission errors.",
      "Insufficient disk space: Not enough space available to create the archive."
    ],
    "usage": "Provide source_directories array and archive_name, optionally configure archive_format, compression_level, and other archiving options. The tool creates an archive and returns details.",
    "output_details": {
      "archive_path": {
        "type": "string",
        "description": "Full path to the created archive file"
      },
      "archive_size": {
        "type": "integer",
        "description": "Size of the created archive in bytes"
      },
      "compressed_directories": {
        "type": "integer",
        "description": "Number of directories included in the archive"
      },
      "compression_ratio": {
        "type": "number",
        "description": "Compression ratio achieved (original size / compressed size)"
      },
      "creation_timestamp": {
        "type": "string",
        "description": "Timestamp when the archive was created",
        "format": "date-time"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Hierarchy Visualizer",
    "tool_description": "Generates visual representations of directory hierarchies in various formats including tree diagrams, graphs, and structured text output for documentation and analysis.",
    "parameters": {
      "directory_structure": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "required": true,
        "description": "List of directory paths to visualize"
      },
      "visualization_format": {
        "type": "string",
        "required": true,
        "description": "Output format: tree, graph, json, xml, markdown, ascii"
      },
      "max_display_depth": {
        "type": "integer",
        "required": false,
        "description": "Maximum depth to display in visualization (1-15)",
        "default": 10
      },
      "show_metadata": {
        "type": "boolean",
        "required": false,
        "description": "Whether to include metadata in the visualization",
        "default": false
      },
      "collapse_empty": {
        "type": "boolean",
        "required": false,
        "description": "Whether to collapse empty directory branches",
