field_name: anti_fraud_and_risk_scoring
subfield: Transaction Monitoring and Analysis
task: Real-time transaction screening and anomaly detection
tool_description: |-
  **STEP 1 — Rate task difficulty**

  This task is **hard** due to its high scope (multiple screening criteria, real-time processing, anomaly detection algorithms), low tolerance for errors (false positives disrupt customers, false negatives enable fraud), complex dependencies between risk models and data sources, and demanding infrastructure requirements for real-time processing with low latency.

  **STEP 2 — Set a tool budget**

  Given the hard difficulty rating, I'm targeting **17 tools** to handle the complexity of real-time transaction screening, risk scoring, anomaly detection, compliance checking, and system monitoring.

  **STEP 3 — List all tool names with dependencies and affordances**

  1. **Transaction Parser** - Consumes: raw transaction data → Produces: structured transaction fields
  2. **Customer Profile Fetcher** - Consumes: customer ID → Produces: customer profile data
  3. **Historical Pattern Analyzer** - Consumes: customer ID, time window → Produces: behavioral patterns
  4. **Velocity Rule Checker** - Consumes: transaction data, time windows → Produces: velocity violations
  5. **Geographic Risk Assessor** - Consumes: location data → Produces: geographic risk scores
  6. **Amount Anomaly Detector** - Consumes: transaction amount, customer history → Produces: amount anomaly flags
  7. **Time Pattern Detector** - Consumes: transaction timestamp, customer patterns → Produces: time-based anomalies
  8. **Merchant Risk Evaluator** - Consumes: merchant data → Produces: merchant risk scores
  9. **Blacklist Matcher** - Consumes: transaction entities → Produces: blacklist matches
  10. **ML Anomaly Scorer** - Consumes: feature vectors → Produces: anomaly scores
  11. **Rule Engine Executor** - Consumes: transaction data, rule sets → Produces: rule violations
  12. **Risk Score Aggregator** - Consumes: multiple risk scores → Produces: final risk score
  13. **Alert Generator** - Consumes: risk scores, thresholds → Produces: alerts
  14. **Case Creator** - Consumes: high-risk transactions → Produces: investigation cases
  15. **Performance Monitor** - Consumes: processing metrics → Produces: system health status
  16. **Model Performance Tracker** - Consumes: predictions, outcomes → Produces: model metrics
  17. **Transaction Logger** - Consumes: transaction data, results → Produces: audit logs

  **STEP 4 — Multi-tool plans**

  **Simple Plans:**
  - Basic screening: Transaction Parser → Blacklist Matcher → Alert Generator
  - Velocity check: Transaction Parser → Customer Profile Fetcher → Velocity Rule Checker → Alert Generator

  **Medium Plans:**
  - Geographic risk assessment: Transaction Parser → Geographic Risk Assessor → Risk Score Aggregator → Alert Generator → Transaction Logger
  - Pattern-based detection: Transaction Parser → Historical Pattern Analyzer → Time Pattern Detector → Amount Anomaly Detector → Risk Score Aggregator → Case Creator

  **Complex Plans:**
  - Full anomaly detection pipeline: Transaction Parser → Customer Profile Fetcher → Historical Pattern Analyzer → ML Anomaly Scorer → Amount Anomaly Detector → Time Pattern Detector → Geographic Risk Assessor → Risk Score Aggregator → Alert Generator → Case Creator → Transaction Logger
  - Comprehensive monitoring workflow: All screening tools → Risk Score Aggregator → Alert Generator → Case Creator → Performance Monitor → Model Performance Tracker → Transaction Logger

  **STEP 5 — Produce tools**

  ```json
  {
    "tool_name": "Transaction Parser",
    "tool_description": "Parses raw transaction data into structured fields for downstream analysis and validation.",
    "parameters": {
      "raw_transaction": {
        "type": "string",
        "required": true,
        "description": "Raw transaction data string to be parsed"
      },
      "format_type": {
        "type": "string",
        "required": true,
        "description": "Expected format of the transaction data (JSON, XML, CSV, SWIFT)"
      }
    },
    "error_messages": [
      "Invalid format type: Use one of [JSON, XML, CSV, SWIFT]",
      "Malformed transaction data: The raw transaction string does not match the specified format type",
      "Missing required fields: Transaction must contain amount, timestamp, customer_id, and merchant_id"
    ],
    "usage": "Provide raw_transaction string and specify the format_type. The tool extracts and validates all transaction fields.",
    "output_details": {
      "transaction_id": {
        "type": "string",
        "description": "Unique identifier for the transaction"
      },
      "amount": {
        "type": "number",
        "description": "Transaction amount in base currency"
      },
      "currency": {
        "type": "string",
        "description": "Currency code (ISO 4217)"
      },
      "timestamp": {
        "type": "string",
        "description": "Transaction timestamp",
        "format": "date-time"
      },
      "customer_id": {
        "type": "string",
        "description": "Customer identifier"
      },
      "merchant_id": {
        "type": "string",
        "description": "Merchant identifier"
      },
      "location": {
        "type": "string",
        "description": "Transaction location (country code)"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Customer Profile Fetcher",
    "tool_description": "Retrieves comprehensive customer profile information including account details, historical behavior, and risk indicators.",
    "parameters": {
      "customer_id": {
        "type": "string",
        "required": true,
        "description": "Unique customer identifier"
      },
      "include_history": {
        "type": "boolean",
        "required": false,
        "description": "Whether to include transaction history in the profile",
        "default": true
      },
      "history_days": {
        "type": "integer",
        "required": false,
        "description": "Number of days of history to include (1-365)",
        "default": 90
      }
    },
    "error_messages": [
      "Customer not found: The provided customer_id does not exist in the system",
      "Invalid history_days: Value must be between 1 and 365",
      "Access denied: Insufficient permissions to access customer profile data"
    ],
    "usage": "Provide customer_id and optionally specify include_history and history_days. Returns comprehensive customer profile data.",
    "output_details": {
      "customer_id": {
        "type": "string",
        "description": "Customer identifier"
      },
      "account_age_days": {
        "type": "integer",
        "description": "Age of customer account in days"
      },
      "risk_level": {
        "type": "string",
        "description": "Current customer risk level (LOW, MEDIUM, HIGH)"
      },
      "avg_transaction_amount": {
        "type": "number",
        "description": "Average transaction amount over history period"
      },
      "transaction_frequency": {
        "type": "number",
        "description": "Average transactions per day"
      },
      "preferred_locations": {
        "type": "array",
        "items": {"type": "string"},
        "description": "List of frequently used transaction locations"
      },
      "kyc_status": {
        "type": "string",
        "description": "Know Your Customer verification status"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Historical Pattern Analyzer",
    "tool_description": "Analyzes customer historical transaction patterns to establish behavioral baselines for anomaly detection.",
    "parameters": {
      "customer_id": {
        "type": "string",
        "required": true,
        "description": "Customer identifier for pattern analysis"
      },
      "analysis_window_days": {
        "type": "integer",
        "required": true,
        "description": "Number of days to analyze (7-365)"
      },
      "pattern_types": {
        "type": "array",
        "required": true,
        "description": "Types of patterns to analyze",
        "items": {"type": "string"},
        "minItems": 1
      },
      "exclude_weekends": {
        "type": "boolean",
        "required": false,
        "description": "Whether to exclude weekend transactions from analysis",
        "default": false
      },
      "minimum_transactions": {
        "type": "integer",
        "required": false,
        "description": "Minimum number of transactions required for valid analysis",
        "default": 10
      }
    },
    "error_messages": [
      "Invalid analysis window: analysis_window_days must be between 7 and 365",
      "Insufficient transaction history: Customer has fewer transactions than minimum_transactions requirement",
      "Invalid pattern types: Use combinations of [amount, time, location, frequency, merchant_category]",
      "Customer not found: The provided customer_id does not exist"
    ],
    "usage": "Specify customer_id, analysis_window_days, and pattern_types array. Optionally configure exclude_weekends and minimum_transactions for refined analysis.",
    "output_details": {
      "customer_id": {
        "type": "string",
        "description": "Customer identifier"
      },
      "analysis_period": {
        "type": "string",
        "description": "Time period analyzed"
      },
      "transaction_count": {
        "type": "integer",
        "description": "Number of transactions analyzed"
      },
      "amount_patterns": {
        "type": "array",
        "items": {"type": "number"},
        "description": "Typical transaction amounts (percentiles)"
      },
      "time_patterns": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Common transaction hours and days"
      },
      "location_patterns": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Frequently used transaction locations"
      },
      "frequency_pattern": {
        "type": "number",
        "description": "Average transactions per day"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Velocity Rule Checker",
    "tool_description": "Checks transaction velocity rules to detect rapid-fire transactions that may indicate fraudulent activity.",
    "parameters": {
      "customer_id": {
        "type": "string",
        "required": true,
        "description": "Customer identifier for velocity checking"
      },
      "transaction_amount": {
        "type": "number",
        "required": true,
        "description": "Current transaction amount"
      },
      "check_windows": {
        "type": "array",
        "required": true,
        "description": "Time windows to check in minutes",
        "items": {"type": "integer"},
        "minItems": 1
      },
      "amount_threshold": {
        "type": "number",
        "required": false,
        "description": "Cumulative amount threshold for velocity check",
        "default": 10000
      },
      "count_threshold": {
        "type": "integer",
        "required": false,
        "description": "Maximum number of transactions allowed in time window",
        "default": 5
      }
    },
    "error_messages": [
      "Invalid check windows: All values must be positive integers representing minutes",
      "Invalid thresholds: amount_threshold must be positive, count_threshold must be >= 1",
      "Customer not found: The provided customer_id does not exist",
      "Invalid transaction amount: Must be a positive number"
    ],
    "usage": "Provide customer_id, transaction_amount, and check_windows array. Optionally set amount_threshold and count_threshold for custom velocity limits.",
    "output_details": {
      "customer_id": {
        "type": "string",
        "description": "Customer identifier"
      },
      "violations": {
        "type": "array",
        "items": {"type": "string"},
        "description": "List of velocity rule violations detected"
      },
      "transaction_counts": {
        "type": "array",
        "items": {"type": "integer"},
        "description": "Transaction counts for each time window"
      },
      "cumulative_amounts": {
        "type": "array",
        "items": {"type": "number"},
        "description": "Cumulative amounts for each time window"
      },
      "risk_level": {
        "type": "string",
        "description": "Velocity-based risk assessment (LOW, MEDIUM, HIGH)"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Geographic Risk Assessor",
    "tool_description": "Evaluates geographic risk factors based on transaction location, customer travel patterns, and regional risk intelligence.",
    "parameters": {
      "transaction_location": {
        "type": "string",
        "required": true,
        "description": "Transaction location (country code or city)"
      },
      "customer_home_location": {
        "type": "string",
        "required": true,
        "description": "Customer's registered home location"
      },
      "recent_locations": {
        "type": "array",
        "required": false,
        "description": "Customer's recent transaction locations",
        "items": {"type": "string"},
        "default": null
      }
    },
    "error_messages": [
      "Invalid location format: Use ISO country codes or recognized city names",
      "Location not recognized: The provided location is not in the geographic database",
      "Missing home location: Customer home location is required for risk assessment"
    ],
    "usage": "Provide transaction_location and customer_home_location. Optionally include recent_locations array for enhanced travel pattern analysis.",
    "output_details": {
      "location_risk_score": {
        "type": "number",
        "description": "Risk score for the transaction location (0-100)"
      },
      "distance_from_home": {
        "type": "number",
        "description": "Distance from customer home location in kilometers"
      },
      "country_risk_level": {
        "type": "string",
        "description": "Risk level of transaction country (LOW, MEDIUM, HIGH)"
      },
      "travel_pattern_anomaly": {
        "type": "boolean",
        "description": "Whether location represents unusual travel pattern"
      },
      "risk_factors": {
        "type": "array",
        "items": {"type": "string"},
        "description": "List of geographic risk factors identified"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Amount Anomaly Detector",
    "tool_description": "Detects anomalous transaction amounts by comparing against customer historical patterns and statistical models.",
    "parameters": {
      "customer_id": {
        "type": "string",
        "required": true,
        "description": "Customer identifier for anomaly detection"
      },
      "transaction_amount": {
        "type": "number",
        "required": true,
        "description": "Transaction amount to analyze"
      },
      "sensitivity": {
        "type": "string",
        "required": false,
        "description": "Detection sensitivity level (LOW, MEDIUM, HIGH)",
        "default": "MEDIUM"
      },
      "model_type": {
        "type": "string",
        "required": false,
        "description": "Anomaly detection model (statistical, isolation_forest, autoencoder)",
        "default": "statistical"
      }
    },
    "error_messages": [
      "Invalid sensitivity level: Use one of [LOW, MEDIUM, HIGH]",
      "Invalid model type: Use one of [statistical, isolation_forest, autoencoder]",
      "Invalid transaction amount: Must be a positive number",
      "Insufficient historical data: Customer needs at least 30 historical transactions for reliable detection"
    ],
    "usage": "Provide customer_id and transaction_amount. Optionally specify sensitivity and model_type for customized anomaly detection.",
    "output_details": {
      "anomaly_score": {
        "type": "number",
        "description": "Anomaly score for the transaction amount (0-100)"
      },
      "is_anomaly": {
        "type": "boolean",
        "description": "Whether the amount is considered anomalous"
      },
      "percentile_rank": {
        "type": "number",
        "description": "Percentile rank of amount in customer history"
      },
      "expected_range": {
        "type": "array",
        "items": {"type": "number"},
        "description": "Expected amount range [min, max] based on customer pattern"
      },
      "confidence": {
        "type": "number",
        "description": "Confidence level of the anomaly detection (0-100)"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Time Pattern Detector",
    "tool_description": "Analyzes transaction timing patterns to identify unusual time-based behaviors that may indicate fraud.",
    "parameters": {
      "customer_id": {
        "type": "string",
        "required": true,
        "description": "Customer identifier for time pattern analysis"
      },
      "transaction_timestamp": {
        "type": "string",
        "required": true,
        "description": "Transaction timestamp to analyze",
        "format": "date-time"
      },
      "timezone": {
        "type": "string",
        "required": false,
        "description": "Customer timezone for local time analysis",
        "default": "UTC"
      }
    },
    "error_messages": [
      "Invalid timestamp format: Use ISO 8601 date-time format",
      "Invalid timezone: Use standard timezone identifiers (e.g., UTC, America/New_York)",
      "Customer not found: The provided customer_id does not exist",
      "Insufficient time pattern data: Customer needs at least 14 days of transaction history"
    ],
    "usage": "Provide customer_id and transaction_timestamp. Optionally specify timezone for accurate local time analysis.",
    "output_details": {
      "time_anomaly_score": {
        "type": "number",
        "description": "Time-based anomaly score (0-100)"
      },
      "unusual_hour": {
        "type": "boolean",
        "description": "Whether transaction occurred at unusual hour for customer"
      },
      "unusual_day": {
        "type": "boolean",
        "description": "Whether transaction occurred on unusual day for customer"
      },
      "typical_hours": {
        "type": "array",
        "items": {"type": "integer"},
        "description": "Customer's typical transaction hours (0-23)"
      },
      "risk_level": {
        "type": "string",
        "description": "Time-based risk level (LOW, MEDIUM, HIGH)"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Merchant Risk Evaluator",
    "tool_description": "Evaluates merchant risk factors including reputation, category risk, and fraud history to assess transaction risk.",
    "parameters": {
      "merchant_id": {
        "type": "string",
        "required": true,
        "description": "Merchant identifier for risk evaluation"
      },
      "merchant_category": {
        "type": "string",
        "required": true,
        "description": "Merchant category code (MCC)"
      },
      "transaction_amount": {
        "type": "number",
        "required": true,
        "description": "Transaction amount for context-specific risk assessment"
      }
    },
    "error_messages": [
      "Merchant not found: The provided merchant_id does not exist in the database",
      "Invalid merchant category: MCC must be a valid 4-digit merchant category code",
      "Invalid transaction amount: Must be a positive number"
    ],
    "usage": "Provide merchant_id, merchant_category (MCC), and transaction_amount to get comprehensive merchant risk assessment.",
    "output_details": {
      "merchant_risk_score": {
        "type": "number",
        "description": "Overall merchant risk score (0-100)"
      },
      "category_risk_level": {
        "type": "string",
        "description": "Risk level for merchant category (LOW, MEDIUM, HIGH)"
      },
      "fraud_history_score": {
        "type": "number",
        "description": "Score based on merchant's fraud history (0-100)"
      },
      "reputation_score": {
        "type": "number",
        "description": "Merchant reputation score (0-100)"
      },
      "risk_factors": {
        "type": "array",
        "items": {"type": "string"},
        "description": "List of identified merchant risk factors"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Blacklist Matcher",
    "tool_description": "Matches transaction entities against various blacklists including fraudulent accounts, blocked merchants, and suspicious locations.",
    "parameters": {
      "customer_id": {
        "type": "string",
        "required": true,
        "description": "Customer identifier to check against blacklists"
      },
      "merchant_id": {
        "type": "string",
        "required": true,
        "description": "Merchant identifier to check against blacklists"
      },
      "card_number": {
        "type": "string",
        "required": false,
        "description": "Card number (masked) for blacklist checking",
        "default": null
      },
      "ip_address": {
        "type": "string",
        "required": false,
        "description": "Transaction IP address for blacklist checking",
        "default": null
      },
      "email": {
        "type": "string",
        "required": false,
        "description": "Customer email for blacklist checking",
        "default": null
      },
      "phone": {
        "type": "string",
        "required": false,
        "description": "Customer phone number for blacklist checking",
        "default": null
      },
      "check_types": {
        "type": "array",
        "required": true,
        "description": "Types of blacklists to check against",
        "items": {"type": "string"},
        "minItems": 1
      }
    },
    "error_messages": [
      "Invalid check types: Use combinations of [customer, merchant, card, ip, email, phone, location]",
      "Missing required identifiers: At least customer_id and merchant_id must be provided",
      "Invalid email format: Provide a valid email address format",
      "Invalid phone format: Use international phone number format"
    ],
    "usage": "Provide customer_id, merchant_id, and check_types array. Include optional identifiers (card_number, ip_address, email, phone) for comprehensive blacklist matching.",
    "output_details": {
      "matches_found": {
        "type": "boolean",
        "description": "Whether any blacklist matches were found"
      },
      "matched_lists": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Names of blacklists that had matches"
      },
      "match_details": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Details of what entities matched which lists"
      },
      "risk_level": {
        "type": "string",
        "description": "Risk level based on blacklist matches (LOW, MEDIUM, HIGH, CRITICAL)"
      },
      "recommended_action": {
        "type": "string",
        "description": "Recommended action based on blacklist matches"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "ML Anomaly Scorer",
    "tool_description": "Applies machine learning models to score transaction anomalies using engineered features and ensemble methods.",
    "parameters": {
      "customer_features": {
        "type": "array",
        "required": true,
        "description": "Customer-related feature values",
        "items": {"type": "number"},
        "minItems": 5,
        "maxItems": 50
      },
      "transaction_features": {
        "type": "array",
        "required": true,
        "description": "Transaction-specific feature values",
        "items": {"type": "number"},
        "minItems": 5,
        "maxItems": 50
      },
      "merchant_features": {
        "type": "array",
        "required": true,
        "description": "Merchant-related feature values",
        "items": {"type": "number"},
        "minItems": 3,
        "maxItems": 20
      },
      "model_ensemble": {
        "type": "array",
        "required": false,
        "description": "Models to include in ensemble",
        "items": {"type": "string"},
        "default": ["gradient_boost", "neural_network", "isolation_forest"]
      },
      "feature_scaling": {
        "type": "boolean",
        "required": false,
        "description": "Whether to apply feature scaling",
        "default": true
      }
    },
    "error_messages": [
      "Invalid feature dimensions: Customer features (5-50), transaction features (5-50), merchant features (3-20)",
      "Invalid model ensemble: Use combinations of [gradient_boost, neural_network, isolation_forest, svm, random_forest]",
      "Feature value errors: All feature values must be numeric and finite",
      "Model loading error: One or more specified models failed to load"
    ],
    "usage": "Provide customer_features, transaction_features, and merchant_features arrays. Optionally specify model_ensemble and feature_scaling preferences.",
    "output_details": {
      "ml_anomaly_score": {
        "type": "number",
        "description": "Combined ML anomaly score (0-100)"
      },
      "model_scores": {
        "type": "array",
        "items": {"type": "number"},
        "description": "Individual scores from each model in ensemble"
      },
      "feature_importance": {
        "type": "array",
        "items": {"type": "number"},
        "description": "Feature importance scores for top contributing features"
      },
      "confidence": {
        "type": "number",
        "description": "Confidence level of the anomaly prediction (0-100)"
      },
      "anomaly_type": {
        "type": "string",
        "description": "Predicted type of anomaly (amount, behavioral, temporal, location)"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Rule Engine Executor",
    "tool_description": "Executes configurable business rules against transaction data to identify policy violations and suspicious patterns.",
    "parameters": {
      "transaction_data": {
        "type": "array",
        "required": true,
        "description": "Transaction data fields as key-value pairs",
        "items": {"type": "string"},
        "minItems": 1
      },
      "rule_set_id": {
        "type": "string",
        "required": true,
        "description": "Identifier for the rule set to execute"
      },
      "rule_priority": {
        "type": "string",
        "required": false,
        "description": "Rule execution priority (LOW, MEDIUM, HIGH, ALL)",
        "default": "ALL"
      },
      "stop_on_first_violation": {
        "type": "boolean",
        "required": false,
        "description": "Whether to stop execution after first rule violation",
        "default": false
      }
    },
    "error_messages": [
      "Invalid rule set: The specified rule_set_id does not exist",
      "Invalid rule priority: Use one of [LOW, MEDIUM, HIGH, ALL]",
      "Transaction data format error: Provide data as array of 'key=value' strings",
      "Rule execution failed: One or more rules failed to execute properly"
    ],
    "usage": "Provide transaction_data as array of 'field=value' strings and specify rule_set_id. Configure rule_priority and stop_on_first_violation as needed.",
    "output_details": {
      "rules_executed": {
        "type": "integer",
        "description": "Number of rules executed"
      },
      "violations_found": {
        "type": "integer",
        "description": "Number of rule violations detected"
      },
      "violated_rules": {
        "type": "array",
        "items": {"type": "string"},
        "description": "List of rule names that were violated"
      },
      "rule_scores": {
        "type": "array",
        "items": {"type": "number"},
        "description": "Severity scores for each violated rule"
      },
      "overall_risk": {
        "type": "string",
        "description": "Overall risk level based on rule violations"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Risk Score Aggregator",
    "tool_description": "Combines multiple risk scores from different analysis components into a unified final risk assessment.",
    "parameters": {
      "risk_scores": {
        "type": "array",
        "required": true,
        "description": "Array of risk scores from different components",
        "items": {"type": "number"},
        "minItems": 2,
        "maxItems": 20
      },
      "score_weights": {
        "type": "array",
        "required": false,
        "description": "Weights for each risk score component",
        "items": {"type": "number"},
        "default": null
      },
      "aggregation_method": {
        "type": "string",
        "required": false,
        "description": "Method for score aggregation (weighted_average, max, ensemble)",
        "default": "weighted_average"
      },
      "score_labels": {
        "type": "array",
        "required": false,
        "description": "Labels identifying each risk score component",
        "items": {"type": "string"},
        "default": null
      }
    },
    "error_messages": [
      "Invalid score dimensions: Need 2-20 risk scores, weights array must match scores length if provided",
      "Invalid aggregation method: Use one of [weighted_average, max, ensemble]",
      "Score value errors: All risk scores must be numeric values between 0-100",
      "Weight normalization error: Score weights must be positive numbers"
    ],
    "usage": "Provide risk_scores array with 2-20 numeric scores. Optionally specify score_weights, aggregation_method, and score_labels for enhanced aggregation.",
    "output_details": {
      "final_risk_score": {
        "type": "number",
        "description": "Final aggregated risk score (0-100)"
      },
      "risk_category": {
        "type": "string",
        "description": "Risk category based on final score (LOW, MEDIUM, HIGH, CRITICAL)"
      },
      "contributing_factors": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Components that contributed most to the final score"
      },
      "score_breakdown": {
        "type": "array",
        "items": {"type": "number"},
        "description": "Weighted contribution of each input score to final result"
      },
      "confidence": {
        "type": "number",
        "description": "Confidence level of the final risk assessment (0-100)"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Alert Generator",
    "tool_description": "Generates structured alerts for suspicious transactions based on risk scores and configurable thresholds.",
    "parameters": {
      "transaction_id": {
        "type": "string",
        "required": true,
        "description": "Unique transaction identifier"
      },
      "risk_score": {
        "type": "number",
        "required": true,
        "description": "Final risk score for the transaction (0-100)"
      },
      "alert_threshold": {
        "type": "number",
        "required": false,
        "description": "Risk score threshold for generating alerts (0-100)",
        "default": 70
      },
      "
