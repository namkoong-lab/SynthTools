field_name: browser_automation
subfield: automated_testing_and_qa
task: Cross-browser compatibility testing across different browsers and versions
tool_description: |-
  **STEP 1 — Rate task difficulty**

  Cross-browser compatibility testing is a **hard** task due to its broad scope covering multiple browsers, versions, and platforms; high coordination requirements between test execution, result comparison, and environment management; significant infrastructure needs for browser provisioning; and high impact of errors that could miss critical compatibility issues affecting user experience.

  **STEP 2 — Set a tool budget**

  Given the hard difficulty rating, I'll target **17 tools** within the 15-20 range to cover test planning, browser management, execution, result analysis, and reporting workflows.

  **STEP 3 — List all tool names with dependencies and affordances**

  1. **Browser Environment Scanner** - Consumes: none → Produces: available browser/version inventory
  2. **Test Case Generator** - Consumes: test requirements → Produces: structured test cases
  3. **Browser Instance Launcher** - Consumes: browser configs → Produces: active browser sessions
  4. **Page Navigation Controller** - Consumes: URLs, browser sessions → Produces: page load confirmations
  5. **Element Inspector** - Consumes: selectors, sessions → Produces: element properties/states
  6. **Screenshot Capturer** - Consumes: browser sessions → Produces: visual snapshots
  7. **CSS Property Extractor** - Consumes: elements, sessions → Produces: computed styles
  8. **JavaScript Executor** - Consumes: scripts, sessions → Produces: execution results
  9. **Form Interaction Tester** - Consumes: form data, sessions → Produces: interaction results
  10. **Performance Metrics Collector** - Consumes: browser sessions → Produces: timing/resource data
  11. **Visual Diff Analyzer** - Consumes: screenshot pairs → Produces: difference reports
  12. **CSS Compatibility Checker** - Consumes: CSS properties → Produces: support matrices
  13. **JavaScript Feature Detector** - Consumes: feature lists → Produces: compatibility status
  14. **Cross-Browser Reporter** - Consumes: test results → Produces: formatted reports
  15. **Issue Prioritizer** - Consumes: compatibility issues → Produces: ranked issue lists
  16. **Browser Session Manager** - Consumes: session data → Produces: session lifecycle control
  17. **Test Suite Orchestrator** - Consumes: test plans → Produces: coordinated test execution

  **STEP 4 — Multi-tool plans**

  **Simple Plans:**
  1. Basic compatibility check: Browser Environment Scanner → Browser Instance Launcher → Page Navigation Controller → Screenshot Capturer → Visual Diff Analyzer
  2. CSS validation: CSS Property Extractor → CSS Compatibility Checker → Cross-Browser Reporter

  **Medium Plans:**
  1. Form testing across browsers: Test Case Generator → Browser Instance Launcher → Form Interaction Tester → Performance Metrics Collector → Issue Prioritizer → Cross-Browser Reporter
  2. Visual regression testing: Browser Session Manager → Page Navigation Controller → Screenshot Capturer → Element Inspector → Visual Diff Analyzer → Cross-Browser Reporter

  **Complex Plans:**
  1. Full compatibility suite: Test Suite Orchestrator → Browser Environment Scanner → Test Case Generator → Browser Instance Launcher → Page Navigation Controller → Element Inspector → CSS Property Extractor → JavaScript Executor → Performance Metrics Collector → Screenshot Capturer → Visual Diff Analyzer → CSS Compatibility Checker → JavaScript Feature Detector → Issue Prioritizer → Cross-Browser Reporter
  2. Comprehensive regression testing: Browser Session Manager → Test Case Generator → Browser Instance Launcher → Form Interaction Tester → JavaScript Executor → Performance Metrics Collector → Screenshot Capturer → Visual Diff Analyzer → Issue Prioritizer → Cross-Browser Reporter

  **STEP 5 — Produce tools**

  ```json
  {
    "tool_name": "Browser Environment Scanner",
    "tool_description": "Scans and inventories available browsers, versions, and platforms for compatibility testing setup.",
    "parameters": {
      "scan_type": {
        "type": "string",
        "required": true,
        "description": "Type of scan: local, remote, or cloud"
      },
      "include_mobile": {
        "type": "boolean",
        "required": false,
        "default": false,
        "description": "Whether to include mobile browsers in scan"
      }
    },
    "error_messages": [
      "Invalid scan type: Use one of [local, remote, cloud].",
      "No browsers detected: Ensure browsers are properly installed or accessible.",
      "Permission denied: Check access rights to browser installation directories."
    ],
    "usage": "Specify scan_type and optionally include_mobile to discover available browser environments for testing.",
    "output_details": {
      "total_browsers": {
        "type": "integer",
        "description": "Total number of browsers detected"
      },
      "browser_names": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of detected browser names"
      },
      "versions": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of browser versions found"
      },
      "platforms": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of supported platforms"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Test Case Generator",
    "tool_description": "Generates structured test cases for cross-browser compatibility testing based on requirements and target features.",
    "parameters": {
      "target_url": {
        "type": "string",
        "required": true,
        "description": "Primary URL to test"
      },
      "test_categories": {
        "type": "array",
        "required": true,
        "items": {
          "type": "string"
        },
        "description": "Categories to test: layout, forms, javascript, css, performance, accessibility"
      },
      "priority_level": {
        "type": "string",
        "required": false,
        "default": "medium",
        "description": "Test priority: low, medium, high"
      },
      "custom_selectors": {
        "type": "array",
        "required": false,
        "default": [],
        "items": {
          "type": "string"
        },
        "description": "Custom CSS selectors for specific elements to test"
      },
      "test_data_sets": {
        "type": "array",
        "required": false,
        "default": [],
        "items": {
          "type": "string"
        },
        "description": "Test data sets for form testing"
      }
    },
    "error_messages": [
      "Invalid URL format: Provide a valid HTTP/HTTPS URL.",
      "Invalid test category: Use one of [layout, forms, javascript, css, performance, accessibility].",
      "Invalid priority level: Use one of [low, medium, high].",
      "Invalid CSS selector: Ensure selectors follow valid CSS syntax."
    ],
    "usage": "Provide target_url and test_categories, optionally specify priority_level, custom_selectors, and test_data_sets to generate comprehensive test cases.",
    "output_details": {
      "test_case_count": {
        "type": "integer",
        "description": "Number of generated test cases"
      },
      "test_case_ids": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Unique identifiers for generated test cases"
      },
      "test_descriptions": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Human-readable descriptions of test cases"
      },
      "estimated_duration": {
        "type": "integer",
        "description": "Estimated execution time in minutes"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Browser Instance Launcher",
    "tool_description": "Launches and configures browser instances for automated testing across different browsers and versions.",
    "parameters": {
      "browser_name": {
        "type": "string",
        "required": true,
        "description": "Browser to launch: chrome, firefox, safari, edge, opera"
      },
      "browser_version": {
        "type": "string",
        "required": false,
        "default": "latest",
        "description": "Specific browser version or 'latest'"
      },
      "headless_mode": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Whether to run browser in headless mode"
      },
      "window_size": {
        "type": "string",
        "required": false,
        "default": "1920x1080",
        "description": "Browser window size in format 'widthxheight'"
      },
      "user_agent": {
        "type": "string",
        "required": false,
        "default": null,
        "description": "Custom user agent string"
      },
      "disable_extensions": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Whether to disable browser extensions"
      }
    },
    "error_messages": [
      "Unsupported browser: Use one of [chrome, firefox, safari, edge, opera].",
      "Browser not found: Specified browser version is not available.",
      "Invalid window size: Use format 'widthxheight' with numeric values.",
      "Launch timeout: Browser failed to start within timeout period.",
      "Insufficient resources: Not enough system resources to launch browser."
    ],
    "usage": "Specify browser_name and optionally configure version, display mode, and other settings to launch a browser instance for testing.",
    "output_details": {
      "session_id": {
        "type": "string",
        "description": "Unique identifier for the browser session"
      },
      "browser_info": {
        "type": "string",
        "description": "Actual browser name and version launched"
      },
      "window_dimensions": {
        "type": "string",
        "description": "Actual window size set"
      },
      "launch_time": {
        "type": "string",
        "description": "Timestamp when browser was launched"
      },
      "status": {
        "type": "string",
        "description": "Current status of the browser session"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Page Navigation Controller",
    "tool_description": "Controls page navigation and loading in browser sessions with timeout and error handling.",
    "parameters": {
      "session_id": {
        "type": "string",
        "required": true,
        "description": "Browser session identifier"
      },
      "url": {
        "type": "string",
        "required": true,
        "description": "URL to navigate to"
      },
      "timeout_seconds": {
        "type": "integer",
        "required": false,
        "default": 30,
        "description": "Page load timeout in seconds"
      },
      "wait_for_element": {
        "type": "string",
        "required": false,
        "default": null,
        "description": "CSS selector to wait for before considering page loaded"
      }
    },
    "error_messages": [
      "Invalid session: Session ID does not exist or has expired.",
      "Navigation timeout: Page failed to load within specified timeout.",
      "Network error: Unable to reach the specified URL.",
      "Invalid URL: Provide a valid HTTP/HTTPS URL.",
      "Element not found: Specified wait element was not found on page."
    ],
    "usage": "Provide session_id and url to navigate, optionally set timeout and wait conditions for reliable page loading.",
    "output_details": {
      "navigation_status": {
        "type": "string",
        "description": "Success or failure status of navigation"
      },
      "final_url": {
        "type": "string",
        "description": "Final URL after redirects"
      },
      "load_time": {
        "type": "number",
        "description": "Page load time in milliseconds"
      },
      "page_title": {
        "type": "string",
        "description": "Title of the loaded page"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Element Inspector",
    "tool_description": "Inspects DOM elements and extracts properties, attributes, and state information for compatibility analysis.",
    "parameters": {
      "session_id": {
        "type": "string",
        "required": true,
        "description": "Browser session identifier"
      },
      "css_selector": {
        "type": "string",
        "required": true,
        "description": "CSS selector for target element"
      },
      "properties_to_extract": {
        "type": "array",
        "required": false,
        "default": ["visibility", "display", "position"],
        "items": {
          "type": "string"
        },
        "description": "List of CSS properties to extract"
      },
      "include_attributes": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Whether to include HTML attributes"
      },
      "include_dimensions": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Whether to include element dimensions"
      }
    },
    "error_messages": [
      "Invalid session: Session ID does not exist or has expired.",
      "Element not found: No element matches the provided CSS selector.",
      "Invalid CSS selector: Provide a valid CSS selector syntax.",
      "Property extraction failed: Unable to extract specified properties.",
      "Multiple elements found: Selector matches multiple elements, use more specific selector."
    ],
    "usage": "Provide session_id and css_selector, optionally specify which properties and attributes to extract for element analysis.",
    "output_details": {
      "element_found": {
        "type": "boolean",
        "description": "Whether the element was found"
      },
      "tag_name": {
        "type": "string",
        "description": "HTML tag name of the element"
      },
      "css_properties": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Extracted CSS property values"
      },
      "attributes": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "HTML attributes and their values"
      },
      "dimensions": {
        "type": "string",
        "description": "Element width and height in pixels"
      },
      "visibility_status": {
        "type": "string",
        "description": "Whether element is visible, hidden, or partially visible"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Screenshot Capturer",
    "tool_description": "Captures screenshots of web pages or specific elements for visual comparison testing.",
    "parameters": {
      "session_id": {
        "type": "string",
        "required": true,
        "description": "Browser session identifier"
      },
      "capture_type": {
        "type": "string",
        "required": false,
        "default": "viewport",
        "description": "Type of capture: viewport, fullpage, or element"
      },
      "element_selector": {
        "type": "string",
        "required": false,
        "default": null,
        "description": "CSS selector for element capture (required if capture_type is element)"
      },
      "image_format": {
        "type": "string",
        "required": false,
        "default": "png",
        "description": "Image format: png or jpeg"
      }
    },
    "error_messages": [
      "Invalid session: Session ID does not exist or has expired.",
      "Element not found: Specified element selector not found (for element capture).",
      "Capture failed: Unable to capture screenshot due to browser error.",
      "Invalid capture type: Use one of [viewport, fullpage, element].",
      "Invalid image format: Use one of [png, jpeg].",
      "Missing element selector: element_selector required when capture_type is element."
    ],
    "usage": "Provide session_id and optionally specify capture_type, element_selector, and image_format to capture screenshots for visual testing.",
    "output_details": {
      "screenshot_id": {
        "type": "string",
        "description": "Unique identifier for the captured screenshot"
      },
      "image_size": {
        "type": "string",
        "description": "Image dimensions in pixels"
      },
      "file_size": {
        "type": "integer",
        "description": "File size in bytes"
      },
      "capture_timestamp": {
        "type": "string",
        "description": "When the screenshot was taken"
      },
      "browser_info": {
        "type": "string",
        "description": "Browser name and version used for capture"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "CSS Property Extractor",
    "tool_description": "Extracts computed CSS properties from elements across different browsers for compatibility analysis.",
    "parameters": {
      "session_id": {
        "type": "string",
        "required": true,
        "description": "Browser session identifier"
      },
      "element_selector": {
        "type": "string",
        "required": true,
        "description": "CSS selector for target element"
      },
      "css_properties": {
        "type": "array",
        "required": true,
        "items": {
          "type": "string"
        },
        "minItems": 1,
        "maxItems": 50,
        "description": "List of CSS properties to extract"
      },
      "include_vendor_prefixes": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Whether to check for vendor-prefixed versions"
      },
      "pseudo_element": {
        "type": "string",
        "required": false,
        "default": null,
        "description": "Pseudo-element to inspect (e.g., ::before, ::after)"
      }
    },
    "error_messages": [
      "Invalid session: Session ID does not exist or has expired.",
      "Element not found: No element matches the provided CSS selector.",
      "Invalid CSS property: One or more CSS properties are not recognized.",
      "Property extraction failed: Unable to compute CSS properties for element.",
      "Invalid pseudo-element: Pseudo-element syntax is incorrect."
    ],
    "usage": "Provide session_id, element_selector, and css_properties list to extract computed CSS values for compatibility testing.",
    "output_details": {
      "element_selector": {
        "type": "string",
        "description": "The CSS selector that was used"
      },
      "property_values": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Computed values for requested CSS properties"
      },
      "vendor_prefixed_properties": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Vendor-prefixed properties found"
      },
      "unsupported_properties": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Properties not supported in this browser"
      },
      "browser_info": {
        "type": "string",
        "description": "Browser name and version"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "JavaScript Executor",
    "tool_description": "Executes JavaScript code in browser contexts to test feature compatibility and functionality.",
    "parameters": {
      "session_id": {
        "type": "string",
        "required": true,
        "description": "Browser session identifier"
      },
      "javascript_code": {
        "type": "string",
        "required": true,
        "description": "JavaScript code to execute"
      },
      "execution_timeout": {
        "type": "integer",
        "required": false,
        "default": 10,
        "description": "Execution timeout in seconds"
      },
      "return_console_logs": {
        "type": "boolean",
        "required": false,
        "default": false,
        "description": "Whether to capture console output"
      }
    },
    "error_messages": [
      "Invalid session: Session ID does not exist or has expired.",
      "JavaScript error: Code execution failed with runtime error.",
      "Execution timeout: Code execution exceeded specified timeout.",
      "Security violation: Code execution blocked by browser security policy.",
      "Invalid JavaScript: Syntax error in provided JavaScript code."
    ],
    "usage": "Provide session_id and javascript_code to execute, optionally set timeout and console logging to test JavaScript compatibility.",
    "output_details": {
      "execution_result": {
        "type": "string",
        "description": "Result returned by the JavaScript execution"
      },
      "execution_time": {
        "type": "number",
        "description": "Execution time in milliseconds"
      },
      "console_logs": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Console output captured during execution"
      },
      "error_occurred": {
        "type": "boolean",
        "description": "Whether an error occurred during execution"
      },
      "error_message": {
        "type": "string",
        "description": "Error message if execution failed"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Form Interaction Tester",
    "tool_description": "Tests form interactions including input, validation, and submission across different browsers.",
    "parameters": {
      "session_id": {
        "type": "string",
        "required": true,
        "description": "Browser session identifier"
      },
      "form_selector": {
        "type": "string",
        "required": true,
        "description": "CSS selector for the form element"
      },
      "test_data": {
        "type": "array",
        "required": true,
        "items": {
          "type": "string"
        },
        "minItems": 1,
        "maxItems": 20,
        "description": "Test data in format 'field_selector:value'"
      },
      "submit_form": {
        "type": "boolean",
        "required": false,
        "default": false,
        "description": "Whether to submit the form after filling"
      },
      "check_validation": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Whether to check HTML5 validation"
      },
      "interaction_delay": {
        "type": "integer",
        "required": false,
        "default": 100,
        "description": "Delay between interactions in milliseconds"
      }
    },
    "error_messages": [
      "Invalid session: Session ID does not exist or has expired.",
      "Form not found: No form element matches the provided selector.",
      "Field not found: One or more form fields specified in test_data not found.",
      "Invalid test data format: Use format 'field_selector:value' for each test data item.",
      "Form submission failed: Unable to submit form or submission error occurred.",
      "Validation check failed: Unable to retrieve validation state of form fields."
    ],
    "usage": "Provide session_id, form_selector, and test_data to test form interactions, optionally configure submission and validation checking.",
    "output_details": {
      "form_found": {
        "type": "boolean",
        "description": "Whether the form was found"
      },
      "fields_filled": {
        "type": "integer",
        "description": "Number of form fields successfully filled"
      },
      "validation_errors": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "HTML5 validation errors encountered"
      },
      "submission_status": {
        "type": "string",
        "description": "Form submission result if attempted"
      },
      "interaction_time": {
        "type": "number",
        "description": "Total time for form interactions in milliseconds"
      },
      "browser_specific_issues": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Browser-specific issues detected during testing"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Performance Metrics Collector",
    "tool_description": "Collects browser performance metrics including timing, resource usage, and rendering statistics.",
    "parameters": {
      "session_id": {
        "type": "string",
        "required": true,
        "description": "Browser session identifier"
      },
      "metrics_to_collect": {
        "type": "array",
        "required": false,
        "default": ["navigation", "paint", "resource"],
        "items": {
          "type": "string"
        },
        "description": "Performance metrics to collect: navigation, paint, resource, memory"
      },
      "include_network_timing": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Whether to include network timing data"
      }
    },
    "error_messages": [
      "Invalid session: Session ID does not exist or has expired.",
      "Performance API not available: Browser does not support requested performance metrics.",
      "Metrics collection failed: Unable to retrieve performance data.",
      "Invalid metrics type: Use one of [navigation, paint, resource, memory].",
      "No performance data available: No performance entries found for current page."
    ],
    "usage": "Provide session_id and optionally specify metrics_to_collect and network timing preferences to gather performance data.",
    "output_details": {
      "navigation_timing": {
        "type": "string",
        "description": "Navigation timing metrics in milliseconds"
      },
      "paint_timing": {
        "type": "string",
        "description": "First paint and contentful paint timings"
      },
      "resource_count": {
        "type": "integer",
        "description": "Number of resources loaded"
      },
      "total_load_time": {
        "type": "number",
        "description": "Total page load time in milliseconds"
      },
      "memory_usage": {
        "type": "string",
        "description": "Browser memory usage statistics"
      },
      "largest_contentful_paint": {
        "type": "number",
        "description": "LCP metric in milliseconds"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Visual Diff Analyzer",
    "tool_description": "Compares screenshots to identify visual differences between browsers for compatibility testing.",
    "parameters": {
      "baseline_screenshot_id": {
        "type": "string",
        "required": true,
        "description": "ID of the baseline screenshot for comparison"
      },
      "comparison_screenshot_id": {
        "type": "string",
        "required": true,
        "description": "ID of the screenshot to compare against baseline"
      },
      "sensitivity_level": {
        "type": "string",
        "required": false,
        "default": "medium",
        "description": "Comparison sensitivity: low, medium, high"
      },
      "ignore_antialiasing": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Whether to ignore antialiasing differences"
      }
    },
    "error_messages": [
      "Screenshot not found: One or both screenshot IDs do not exist.",
      "Image format mismatch: Screenshots must be in compatible formats.",
      "Comparison failed: Unable to process images for comparison.",
      "Invalid sensitivity level: Use one of [low, medium, high].",
      "Image dimension mismatch: Screenshots have different dimensions and cannot be compared."
    ],
    "usage": "Provide baseline_screenshot_id and comparison_screenshot_id, optionally configure sensitivity and antialiasing settings for visual comparison.",
    "output_details": {
      "differences_found": {
        "type": "boolean",
        "description": "Whether visual differences were detected"
      },
      "difference_percentage": {
        "type": "number",
        "description": "Percentage of pixels that differ"
      },
      "diff_image_id": {
        "type": "string",
        "description": "ID of generated difference visualization image"
      },
      "major_differences": {
        "type": "integer",
        "description": "Number of major visual differences"
      },
      "minor_differences": {
        "type": "integer",
        "description": "Number of minor visual differences"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "CSS Compatibility Checker",
    "tool_description": "Checks CSS properties and values for browser compatibility using known compatibility databases.",
    "parameters": {
      "css_properties": {
        "type": "array",
        "required": true,
        "items": {
          "type": "string"
        },
        "minItems": 1,
        "maxItems": 100,
        "description": "List of CSS properties to check compatibility for"
      },
      "target_browsers": {
        "type": "array",
        "required": true,
        "items": {
          "type": "string"
        },
        "description": "Target browsers in format 'browser_name version'"
      },
      "include_prefixes": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Whether to include vendor prefix suggestions"
      }
    },
    "error_messages": [
      "Invalid CSS property: One or more properties are not recognized CSS properties.",
      "Invalid browser format: Use format 'browser_name version' (e.g., 'chrome 90', 'firefox 88').",
      "Compatibility data unavailable: Unable to retrieve compatibility information.",
      "Unsupported browser: One or more specified browsers are not supported for compatibility checking."
    ],
    "usage": "Provide css_properties list and target_browsers to check compatibility, optionally include vendor prefix suggestions.",
    "output_details": {
      "compatible_properties": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Properties supported across all target browsers"
      },
      "incompatible_properties": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Properties with compatibility issues"
      },
      "prefix_suggestions": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Vendor prefix suggestions for better compatibility"
      },
      "compatibility_score": {
        "type": "number",
        "description": "Overall compatibility score as percentage"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "JavaScript Feature Detector",
    "tool_description": "Detects JavaScript API and feature support across different browser environments.",
    "parameters": {
      "features_to_check": {
        "type": "array",
        "required": true,
        "items": {
          "type": "string"
        },
        "minItems": 1,
        "maxItems": 50,
        "description": "JavaScript features/APIs to check: fetch, promise, async-await, modules, webgl, etc."
      },
      "session_id": {
        "type": "string",
        "required": true,
        "description": "Browser session identifier for feature testing"
      },
      "include_experimental": {
        "type": "boolean",
        "required": false,
        "default": false,
        "description": "Whether to include experimental/draft features"
      }
    },
    "error_messages": [
      "Invalid session: Session ID
