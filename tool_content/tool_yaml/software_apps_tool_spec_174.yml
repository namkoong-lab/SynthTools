field_name: software_apps
subfield: Web Application Development
task: Frontend User Interface Development and Component Management
tool_description: |-
  ## STEP 1 — Rate task difficulty

  This task is **medium** difficulty. Frontend UI development involves moderate scope with multiple interconnected subproblems (component design, state management, styling, testing), some ambiguity in design decisions and user requirements, significant coordination between components and data flow, moderate risk from UI bugs affecting user experience, and standard web development infrastructure requirements.

  ## STEP 2 — Set a tool budget

  Given the medium difficulty, I'll target **12 tools** within the 10-15 range to cover the essential aspects of frontend development and component management workflows.

  ## STEP 3 — List all tool names and dependencies

  **Tools and their data flow:**
  1. **Component Generator** - Consumes: component specs → Produces: component code
  2. **Style Parser** - Consumes: CSS/style definitions → Produces: parsed styles
  3. **State Manager** - Consumes: state schema → Produces: state management code
  4. **Props Validator** - Consumes: component props → Produces: validation results
  5. **Event Handler Builder** - Consumes: event specifications → Produces: event handlers
  6. **Layout Composer** - Consumes: layout configuration → Produces: responsive layouts
  7. **Asset Optimizer** - Consumes: asset files → Produces: optimized assets
  8. **Theme Configurator** - Consumes: theme definitions → Produces: theme variables
  9. **Component Tester** - Consumes: component code → Produces: test results
  10. **Bundle Analyzer** - Consumes: build artifacts → Produces: bundle analysis
  11. **Accessibility Checker** - Consumes: component markup → Produces: accessibility report
  12. **Performance Monitor** - Consumes: component metrics → Produces: performance insights

  ## STEP 4 — Multi-tool plans

  **Simple plans:**
  1. **Basic Component Creation**: Component Generator → Props Validator → Component Tester
  2. **Asset Management**: Asset Optimizer → Bundle Analyzer

  **Medium plans:**
  1. **Styled Component Development**: Component Generator → Style Parser → Theme Configurator → Props Validator → Component Tester
  2. **Interactive Component**: Component Generator → Event Handler Builder → State Manager → Component Tester → Performance Monitor

  **Complex plans:**
  1. **Full Component Suite**: Component Generator → Props Validator → Style Parser → Theme Configurator → Event Handler Builder → State Manager → Component Tester → Accessibility Checker → Performance Monitor
  2. **Production-Ready Layout**: Layout Composer → Asset Optimizer → Theme Configurator → Bundle Analyzer → Accessibility Checker → Performance Monitor

  ## STEP 5 — Produce tools

  ```json
  {
    "tool_name": "Component Generator",
    "tool_description": "Generates React/Vue/Angular component boilerplate code with specified props, hooks, and structure based on component type and framework preferences.",
    "parameters": {
      "component_name": {
        "type": "string",
        "required": true,
        "description": "Name of the component to generate"
      },
      "framework": {
        "type": "string",
        "required": true,
        "description": "Target framework: react, vue, angular"
      },
      "component_type": {
        "type": "string",
        "required": true,
        "description": "Type of component: functional, class, stateful, stateless"
      },
      "props": {
        "type": "array",
        "required": false,
        "items": {
          "type": "string"
        },
        "description": "Array of prop names for the component",
        "default": "None"
      },
      "has_state": {
        "type": "boolean",
        "required": false,
        "description": "Whether component needs local state management",
        "default": false
      },
      "typescript": {
        "type": "boolean",
        "required": false,
        "description": "Generate TypeScript version",
        "default": false
      }
    },
    "error_messages": [
      "Invalid framework: Use one of [react, vue, angular].",
      "Invalid component type: Use one of [functional, class, stateful, stateless].",
      "Component name required: Provide a valid component name using PascalCase.",
      "Props array too large: Maximum 20 props allowed per component.",
      "Invalid prop name: Prop names must be valid JavaScript identifiers."
    ],
    "usage": "Specify component_name, framework, and component_type. Optionally add props array, set has_state flag, and enable typescript. Returns generated component code and file structure.",
    "output_details": {
      "component_code": {
        "type": "string",
        "description": "Generated component source code"
      },
      "file_extension": {
        "type": "string",
        "description": "Recommended file extension (.js, .jsx, .ts, .tsx, .vue)"
      },
      "imports_needed": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of required imports for the component"
      },
      "props_interface": {
        "type": "string",
        "description": "TypeScript interface definition for props if applicable"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Style Parser",
    "tool_description": "Parses and validates CSS, SCSS, or styled-components syntax, extracting style rules and converting between different styling formats.",
    "parameters": {
      "style_content": {
        "type": "string",
        "required": true,
        "description": "CSS/SCSS/styled-components code to parse"
      },
      "input_format": {
        "type": "string",
        "required": true,
        "description": "Input format: css, scss, styled-components, tailwind"
      },
      "output_format": {
        "type": "string",
        "required": false,
        "description": "Desired output format: css, scss, styled-components, tailwind",
        "default": "css"
      },
      "validate_only": {
        "type": "boolean",
        "required": false,
        "description": "Only validate syntax without conversion",
        "default": false
      }
    },
    "error_messages": [
      "Invalid CSS syntax: Check for missing semicolons, brackets, or invalid property values.",
      "Unsupported input format: Use one of [css, scss, styled-components, tailwind].",
      "Unsupported output format: Use one of [css, scss, styled-components, tailwind].",
      "Parse error: Unable to parse the provided style content due to syntax errors.",
      "Empty style content: Provide valid CSS/SCSS content to parse."
    ],
    "usage": "Provide style_content and input_format. Optionally specify output_format for conversion or set validate_only to true. Returns parsed styles and validation results.",
    "output_details": {
      "is_valid": {
        "type": "boolean",
        "description": "Whether the input styles are syntactically valid"
      },
      "parsed_styles": {
        "type": "string",
        "description": "Converted or validated style content"
      },
      "selectors_found": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of CSS selectors found in the styles"
      },
      "properties_count": {
        "type": "integer",
        "description": "Number of CSS properties parsed"
      },
      "validation_errors": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of validation errors if any"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "State Manager",
    "tool_description": "Generates state management code for React (Redux, Context, Zustand), Vue (Vuex, Pinia), or Angular (NgRx) based on state schema and actions.",
    "parameters": {
      "framework": {
        "type": "string",
        "required": true,
        "description": "Target framework: react, vue, angular"
      },
      "state_library": {
        "type": "string",
        "required": true,
        "description": "State management library: redux, context, zustand, vuex, pinia, ngrx"
      },
      "state_name": {
        "type": "string",
        "required": true,
        "description": "Name for the state slice or module"
      },
      "initial_state": {
        "type": "array",
        "required": true,
        "items": {
          "type": "string"
        },
        "description": "Array of state property definitions (e.g., ['count:number', 'user:object'])",
        "minItems": 1,
        "maxItems": 15
      },
      "actions": {
        "type": "array",
        "required": true,
        "items": {
          "type": "string"
        },
        "description": "Array of action names to generate",
        "minItems": 1,
        "maxItems": 20
      },
      "async_actions": {
        "type": "array",
        "required": false,
        "items": {
          "type": "string"
        },
        "description": "Array of async action names (for thunks/effects)",
        "default": "None"
      },
      "typescript": {
        "type": "boolean",
        "required": false,
        "description": "Generate TypeScript definitions",
        "default": false
      },
      "persist_state": {
        "type": "boolean",
        "required": false,
        "description": "Add persistence configuration",
        "default": false
      }
    },
    "error_messages": [
      "Invalid framework: Use one of [react, vue, angular].",
      "Incompatible state library: The selected library is not compatible with the chosen framework.",
      "Invalid state definition: State properties must follow 'name:type' format.",
      "Too many state properties: Maximum 15 state properties allowed.",
      "Too many actions: Maximum 20 actions allowed per state module.",
      "Invalid action name: Action names must be valid JavaScript identifiers.",
      "Missing required parameters: Provide framework, state_library, state_name, initial_state, and actions."
    ],
    "usage": "Specify framework, state_library, state_name, initial_state array, and actions array. Optionally add async_actions, enable typescript, and persistence. Returns complete state management setup.",
    "output_details": {
      "store_code": {
        "type": "string",
        "description": "Generated store/state management code"
      },
      "action_creators": {
        "type": "string",
        "description": "Generated action creator functions"
      },
      "reducers": {
        "type": "string",
        "description": "Generated reducer or mutation functions"
      },
      "types_definition": {
        "type": "string",
        "description": "TypeScript type definitions if enabled"
      },
      "setup_instructions": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Step-by-step setup instructions for the generated state management"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Props Validator",
    "tool_description": "Validates component props against defined schemas, generates PropTypes or TypeScript interfaces, and checks for required props.",
    "parameters": {
      "component_props": {
        "type": "array",
        "required": true,
        "items": {
          "type": "string"
        },
        "description": "Array of prop definitions in format 'name:type:required' (e.g., 'title:string:true')",
        "minItems": 1,
        "maxItems": 25
      },
      "validation_type": {
        "type": "string",
        "required": true,
        "description": "Type of validation to generate: proptypes, typescript, both"
      },
      "default_values": {
        "type": "array",
        "required": false,
        "items": {
          "type": "string"
        },
        "description": "Array of default values in format 'name:value'",
        "default": "None"
      }
    },
    "error_messages": [
      "Invalid prop definition: Use format 'name:type:required' where required is true/false.",
      "Invalid validation type: Use one of [proptypes, typescript, both].",
      "Unsupported prop type: Use valid JavaScript/TypeScript types.",
      "Too many props: Maximum 25 props allowed per component.",
      "Invalid default value format: Use 'name:value' format for default values.",
      "Default value type mismatch: Default value type doesn't match declared prop type."
    ],
    "usage": "Provide component_props array with prop definitions and validation_type. Optionally specify default_values. Returns validation code and prop documentation.",
    "output_details": {
      "proptypes_code": {
        "type": "string",
        "description": "Generated PropTypes validation code"
      },
      "typescript_interface": {
        "type": "string",
        "description": "Generated TypeScript interface for props"
      },
      "default_props": {
        "type": "string",
        "description": "Generated default props object"
      },
      "prop_documentation": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Documentation strings for each prop"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Event Handler Builder",
    "tool_description": "Generates event handler functions for DOM events, custom events, and component interactions with proper event delegation and optimization.",
    "parameters": {
      "event_type": {
        "type": "string",
        "required": true,
        "description": "Type of event: click, change, submit, hover, focus, blur, keypress, scroll, resize, custom"
      },
      "handler_name": {
        "type": "string",
        "required": true,
        "description": "Name for the event handler function"
      },
      "parameters": {
        "type": "array",
        "required": false,
        "items": {
          "type": "string"
        },
        "description": "Parameters the handler should accept beyond the event object",
        "default": "None"
      },
      "prevent_default": {
        "type": "boolean",
        "required": false,
        "description": "Whether to call preventDefault()",
        "default": false
      },
      "stop_propagation": {
        "type": "boolean",
        "required": false,
        "description": "Whether to call stopPropagation()",
        "default": false
      },
      "debounce_ms": {
        "type": "integer",
        "required": false,
        "description": "Debounce delay in milliseconds (0 = no debouncing)",
        "default": 0
      },
      "throttle_ms": {
        "type": "integer",
        "required": false,
        "description": "Throttle delay in milliseconds (0 = no throttling)",
        "default": 0
      }
    },
    "error_messages": [
      "Invalid event type: Use one of [click, change, submit, hover, focus, blur, keypress, scroll, resize, custom].",
      "Invalid handler name: Provide a valid JavaScript function name.",
      "Cannot use both debounce and throttle: Choose either debounce_ms or throttle_ms, not both.",
      "Invalid delay value: Debounce and throttle values must be non-negative integers.",
      "Too many parameters: Maximum 10 additional parameters allowed for event handlers."
    ],
    "usage": "Specify event_type and handler_name. Optionally add parameters, enable prevent_default/stop_propagation, and set debounce_ms or throttle_ms for performance optimization.",
    "output_details": {
      "handler_code": {
        "type": "string",
        "description": "Generated event handler function code"
      },
      "handler_type": {
        "type": "string",
        "description": "Type of handler generated (basic, debounced, throttled)"
      },
      "binding_example": {
        "type": "string",
        "description": "Example of how to bind the handler to a DOM element"
      },
      "cleanup_code": {
        "type": "string",
        "description": "Cleanup code for removing event listeners if needed"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Layout Composer",
    "tool_description": "Generates responsive layout code using CSS Grid, Flexbox, or CSS frameworks with breakpoints and container configurations.",
    "parameters": {
      "layout_type": {
        "type": "string",
        "required": true,
        "description": "Layout system: flexbox, grid, bootstrap, tailwind"
      },
      "container_type": {
        "type": "string",
        "required": true,
        "description": "Container type: header, sidebar, main, footer, card, modal, grid-item"
      },
      "breakpoints": {
        "type": "array",
        "required": true,
        "items": {
          "type": "string"
        },
        "description": "Breakpoint definitions (e.g., ['sm:768px', 'md:1024px', 'lg:1200px'])",
        "minItems": 1,
        "maxItems": 6
      },
      "columns": {
        "type": "integer",
        "required": false,
        "description": "Number of columns for grid layouts (1-12)",
        "default": 12
      },
      "gap": {
        "type": "string",
        "required": false,
        "description": "Gap between items (e.g., '1rem', '20px')",
        "default": "1rem"
      },
      "alignment": {
        "type": "string",
        "required": false,
        "description": "Content alignment: start, center, end, stretch, space-between, space-around",
        "default": "start"
      },
      "responsive_behavior": {
        "type": "string",
        "required": false,
        "description": "How layout adapts: stack, wrap, hide, reorder",
        "default": "wrap"
      },
      "max_width": {
        "type": "string",
        "required": false,
        "description": "Maximum container width (e.g., '1200px', '100%')",
        "default": "100%"
      },
      "padding": {
        "type": "string",
        "required": false,
        "description": "Container padding (e.g., '1rem', '20px 10px')",
        "default": "0"
      },
      "margin": {
        "type": "string",
        "required": false,
        "description": "Container margin (e.g., 'auto', '1rem 0')",
        "default": "0"
      }
    },
    "error_messages": [
      "Invalid layout type: Use one of [flexbox, grid, bootstrap, tailwind].",
      "Invalid container type: Use one of [header, sidebar, main, footer, card, modal, grid-item].",
      "Invalid breakpoint format: Use format 'size:width' (e.g., 'md:768px').",
      "Invalid columns value: Columns must be between 1 and 12.",
      "Invalid alignment: Use one of [start, center, end, stretch, space-between, space-around].",
      "Invalid responsive behavior: Use one of [stack, wrap, hide, reorder].",
      "Invalid CSS unit: Provide valid CSS units for gap, max_width, padding, and margin.",
      "Too many breakpoints: Maximum 6 breakpoints allowed."
    ],
    "usage": "Specify layout_type, container_type, and breakpoints array. Optionally configure columns, gap, alignment, responsive_behavior, max_width, padding, and margin for detailed layout control.",
    "output_details": {
      "layout_css": {
        "type": "string",
        "description": "Generated CSS code for the layout"
      },
      "html_structure": {
        "type": "string",
        "description": "Recommended HTML structure for the layout"
      },
      "responsive_rules": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of responsive CSS rules generated"
      },
      "framework_classes": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Framework-specific CSS classes if using Bootstrap or Tailwind"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Asset Optimizer",
    "tool_description": "Optimizes web assets including images, fonts, and static files for better performance and loading times with compression and format conversion.",
    "parameters": {
      "asset_type": {
        "type": "string",
        "required": true,
        "description": "Type of asset to optimize: image, font, icon, video, audio"
      },
      "input_format": {
        "type": "string",
        "required": true,
        "description": "Current format of the asset (e.g., jpg, png, woff, mp4)"
      },
      "target_format": {
        "type": "string",
        "required": false,
        "description": "Desired output format for conversion",
        "default": "None"
      },
      "quality": {
        "type": "integer",
        "required": false,
        "description": "Compression quality (1-100, higher = better quality)",
        "default": 80
      },
      "max_width": {
        "type": "integer",
        "required": false,
        "description": "Maximum width for image resizing",
        "default": "None"
      },
      "max_height": {
        "type": "integer",
        "required": false,
        "description": "Maximum height for image resizing",
        "default": "None"
      }
    },
    "error_messages": [
      "Unsupported asset type: Use one of [image, font, icon, video, audio].",
      "Unsupported input format: The provided format is not supported for the asset type.",
      "Invalid quality value: Quality must be between 1 and 100.",
      "Invalid dimensions: Width and height must be positive integers.",
      "Format conversion not supported: Cannot convert from input format to target format.",
      "Asset too large: Asset size exceeds maximum allowed size for processing."
    ],
    "usage": "Specify asset_type and input_format. Optionally set target_format for conversion, adjust quality for compression, and set max_width/max_height for resizing. Returns optimization results and file information.",
    "output_details": {
      "optimized_size": {
        "type": "integer",
        "description": "Size of optimized asset in bytes"
      },
      "original_size": {
        "type": "integer",
        "description": "Original asset size in bytes"
      },
      "compression_ratio": {
        "type": "number",
        "description": "Compression ratio achieved (0.0-1.0)"
      },
      "output_format": {
        "type": "string",
        "description": "Final format of the optimized asset"
      },
      "dimensions": {
        "type": "string",
        "description": "Final dimensions if applicable (e.g., '800x600')"
      },
      "optimization_applied": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of optimizations applied to the asset"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Theme Configurator",
    "tool_description": "Creates and manages design system themes with color palettes, typography, spacing, and component tokens for consistent UI styling.",
    "parameters": {
      "theme_name": {
        "type": "string",
        "required": true,
        "description": "Name for the theme configuration"
      },
      "primary_colors": {
        "type": "array",
        "required": true,
        "items": {
          "type": "string"
        },
        "description": "Primary color palette in hex format",
        "minItems": 1,
        "maxItems": 10
      },
      "font_families": {
        "type": "array",
        "required": true,
        "items": {
          "type": "string"
        },
        "description": "Font family stack for the theme",
        "minItems": 1,
        "maxItems": 5
      },
      "font_sizes": {
        "type": "array",
        "required": false,
        "items": {
          "type": "string"
        },
        "description": "Font size scale (e.g., ['12px', '14px', '16px', '18px'])",
        "default": "['14px', '16px', '18px', '24px', '32px']"
      },
      "spacing_scale": {
        "type": "array",
        "required": false,
        "items": {
          "type": "string"
        },
        "description": "Spacing values (e.g., ['4px', '8px', '16px', '24px'])",
        "default": "['4px', '8px', '12px', '16px', '24px', '32px']"
      },
      "border_radius": {
        "type": "array",
        "required": false,
        "items": {
          "type": "string"
        },
        "description": "Border radius values",
        "default": "['2px', '4px', '8px', '12px']"
      },
      "breakpoints": {
        "type": "array",
        "required": false,
        "items": {
          "type": "string"
        },
        "description": "Responsive breakpoints",
        "default": "['768px', '1024px', '1200px']"
      },
      "dark_mode": {
        "type": "boolean",
        "required": false,
        "description": "Generate dark mode variant",
        "default": false
      }
    },
    "error_messages": [
      "Invalid color format: Use valid hex colors (e.g., #FF5733).",
      "Invalid font family: Provide valid CSS font family names.",
      "Invalid size format: Use valid CSS units for font sizes and spacing.",
      "Too many colors: Maximum 10 primary colors allowed.",
      "Too many fonts: Maximum 5 font families allowed.",
      "Invalid breakpoint format: Use valid CSS units for breakpoints.",
      "Missing required fields: Provide theme_name, primary_colors, and font_families."
    ],
    "usage": "Specify theme_name, primary_colors, and font_families. Optionally configure font_sizes, spacing_scale, border_radius, breakpoints, and enable dark_mode. Returns complete theme configuration.",
    "output_details": {
      "css_variables": {
        "type": "string",
        "description": "Generated CSS custom properties for the theme"
      },
      "theme_object": {
        "type": "string",
        "description": "JavaScript/JSON theme object for styled-components or similar"
      },
      "color_palette": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Complete color palette including generated shades"
      },
      "typography_scale": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Complete typography scale with size and line-height"
      },
      "utility_classes": {
        "type": "string",
        "description": "Generated utility CSS classes for the theme"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Component Tester",
    "tool_description": "Generates unit tests for React/Vue/Angular components including props testing, event simulation, and snapshot testing.",
    "parameters": {
      "component_name": {
        "type": "string",
        "required": true,
        "description": "Name of the component to test"
      },
      "framework": {
        "type": "string",
        "required": true,
        "description": "Testing framework: jest, vitest, cypress, playwright"
      },
      "test_types": {
        "type": "array",
        "required": true,
        "items": {
          "type": "string"
        },
        "description": "Types of tests to generate: unit, integration, snapshot, accessibility",
        "minItems": 1,
        "maxItems": 4
      },
      "props_to_test": {
        "type": "array",
        "required": false,
        "items": {
          "type": "string"
        },
        "description": "Component props that need testing",
        "default": "None"
      },
      "events_to_test": {
        "type": "array",
        "required": false,
        "items": {
          "type": "string"
        },
        "description": "Events that need testing (e.g., onClick, onChange)",
        "default": "None"
      },
      "mock_dependencies": {
        "type": "array",
        "required": false,
        "items": {
          "type": "string"
        },
        "description": "External dependencies to mock in tests",
        "default": "None"
      }
    },
    "error_messages": [
      "Invalid testing framework: Use one of [jest, vitest, cypress, playwright].",
      "Invalid test type: Use one of [unit, integration, snapshot, accessibility].",
      "Component name required: Provide a valid component name.",
      "Too many props: Maximum 15 props can be tested per component.",
      "Invalid event name: Provide valid DOM or custom event names.",
      "Too many dependencies: Maximum 10 dependencies can be mocked per test."
    ],
    "usage": "Specify component_name, framework, and test_types array. Optionally add props_to_test, events_to_test, and mock_dependencies. Returns complete test suite with setup and assertions.",
    "output_details": {
      "test_file_content": {
        "type": "string",
        "description": "Generated test file content"
      },
      "setup_code": {
        "type": "string",
        "description": "Test setup and configuration code"
      },
      "mock_implementations": {
        "type": "string",
        "description": "Mock implementations for dependencies"
      },
      "test_count": {
        "type": "integer",
        "description": "Number of test cases generated"
      },
      "coverage_areas": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of component features covered by tests"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Bundle Analyzer",
    "tool_description": "Analyzes webpack/vite/rollup bundle output to identify large dependencies, unused code, and optimization opportunities.",
    "parameters": {
      "bundle_path": {
        "type": "string",
        "required": true,
        "description": "Path to the bundle file or build directory"
      },
      "bundler": {
        "type": "string",
        "required": true,
        "description": "Bundler used: webpack, vite, rollup, parcel"
      },
      "analysis_type": {
        "type": "string",
        "required": false,
        "description": "Type of analysis: size, dependencies, treeshaking, performance",
        "default": "size"
      },
      "threshold_kb": {
        "type": "integer",
        "required": false,
        "
