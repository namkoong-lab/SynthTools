field_name: security_and_iam_identity_and_access_management
subfield: User Authentication and Multi-Factor Authentication
task: Multi-factor authentication setup and configuration management
tool_description: |-
  **STEP 1 — Rate task difficulty**

  This task is **hard** due to its broad scope encompassing multiple authentication methods, complex security dependencies between components, high risk of security vulnerabilities from misconfigurations, and requirements for integration with various identity providers and enterprise systems.

  **STEP 2 — Set a tool budget**

  Given the hard difficulty rating, I'm targeting **17 tools** within the 15-20 range to handle the comprehensive authentication workflows, security validations, and configuration management requirements.

  **STEP 3 — List all tool names and dependencies**

  1. **User Account Validator** - Consumes: user credentials → Produces: validation status
  2. **MFA Method Configurator** - Consumes: user ID, MFA type → Produces: setup configuration
  3. **TOTP Secret Generator** - Consumes: user ID, issuer → Produces: secret key, QR code
  4. **SMS Challenge Sender** - Consumes: phone number, code → Produces: delivery status
  5. **Email Verification Sender** - Consumes: email, verification link → Produces: send status
  6. **Biometric Profile Manager** - Consumes: user ID, biometric data → Produces: profile status
  7. **Hardware Token Registrar** - Consumes: token ID, user ID → Produces: registration status
  8. **Authentication Policy Engine** - Consumes: policies, conditions → Produces: policy evaluation
  9. **Session Token Generator** - Consumes: user ID, auth factors → Produces: secure token
  10. **MFA Status Checker** - Consumes: user ID → Produces: enabled methods, status
  11. **Backup Code Generator** - Consumes: user ID → Produces: recovery codes
  12. **Risk Assessment Analyzer** - Consumes: login context → Produces: risk score
  13. **Identity Provider Connector** - Consumes: provider config, credentials → Produces: connection status
  14. **Compliance Audit Logger** - Consumes: auth events → Produces: audit trails
  15. **MFA Method Disabler** - Consumes: user ID, method type → Produces: disable status
  16. **Authentication Flow Orchestrator** - Consumes: user ID, flow type → Produces: step sequence
  17. **Security Configuration Validator** - Consumes: config parameters → Produces: validation results

  **STEP 4 — Multi-tool plans**

  **Simple Plans:**
  - **Basic TOTP Setup**: User Account Validator → TOTP Secret Generator → MFA Method Configurator
  - **SMS Verification**: User Account Validator → SMS Challenge Sender → Session Token Generator

  **Medium Plans:**
  - **Risk-Based Authentication**: User Account Validator → Risk Assessment Analyzer → Authentication Policy Engine → Authentication Flow Orchestrator → Session Token Generator
  - **Enterprise SSO Integration**: Identity Provider Connector → User Account Validator → MFA Status Checker → Authentication Flow Orchestrator

  **Complex Plans:**
  - **Full MFA Onboarding**: User Account Validator → Risk Assessment Analyzer → Authentication Policy Engine → TOTP Secret Generator → Backup Code Generator → SMS Challenge Sender → Biometric Profile Manager → MFA Method Configurator → Compliance Audit Logger
  - **Comprehensive Security Audit**: MFA Status Checker → Security Configuration Validator → Risk Assessment Analyzer → Compliance Audit Logger → Authentication Policy Engine → Identity Provider Connector

  **STEP 5 — Produce tools**

  ```json
  {
    "tool_name": "User Account Validator",
    "tool_description": "Validates user account credentials and checks account status, password strength, and eligibility for MFA setup.",
    "parameters": {
      "username": {
        "type": "string",
        "required": true,
        "description": "Username or email address to validate"
      },
      "password": {
        "type": "string",
        "required": true,
        "description": "User's current password for validation"
      },
      "check_lockout": {
        "type": "boolean",
        "required": false,
        "description": "Whether to check for account lockout status",
        "default": true
      }
    },
    "error_messages": [
      "Invalid credentials: Username or password is incorrect. Verify the credentials and try again.",
      "Account locked: Account is temporarily locked due to multiple failed attempts. Wait for lockout period to expire.",
      "Account disabled: User account has been disabled by administrator. Contact system administrator.",
      "Password expired: User password has expired and must be changed before proceeding."
    ],
    "usage": "Provide username and password to validate user credentials. Use check_lockout to verify account is not locked. Returns validation status and account information.",
    "output_details": {
      "is_valid": {
        "type": "boolean",
        "description": "Whether the credentials are valid"
      },
      "account_status": {
        "type": "string",
        "description": "Current account status (active, locked, disabled, expired)"
      },
      "user_id": {
        "type": "string",
        "description": "Unique identifier for the validated user"
      },
      "mfa_eligible": {
        "type": "boolean",
        "description": "Whether user is eligible for MFA setup"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "MFA Method Configurator",
    "tool_description": "Configures and enables specific MFA methods for a user account with security settings and backup options.",
    "parameters": {
      "user_id": {
        "type": "string",
        "required": true,
        "description": "Unique identifier of the user"
      },
      "mfa_method": {
        "type": "string",
        "required": true,
        "description": "MFA method type (totp, sms, email, biometric, hardware_token)"
      },
      "method_config": {
        "type": "string",
        "required": true,
        "description": "JSON configuration specific to the MFA method"
      },
      "is_primary": {
        "type": "boolean",
        "required": false,
        "description": "Whether this is the primary MFA method",
        "default": false
      },
      "backup_enabled": {
        "type": "boolean",
        "required": false,
        "description": "Whether backup codes should be generated",
        "default": true
      },
      "require_admin_approval": {
        "type": "boolean",
        "required": false,
        "description": "Whether admin approval is required for this method",
        "default": false
      },
      "expiry_days": {
        "type": "integer",
        "required": false,
        "description": "Number of days before method expires (1-365)",
        "default": 365
      }
    },
    "error_messages": [
      "Invalid MFA method: Method must be one of [totp, sms, email, biometric, hardware_token].",
      "Configuration error: Method configuration is invalid or incomplete for the specified MFA method.",
      "User not found: The specified user_id does not exist in the system.",
      "Method already configured: This MFA method is already configured for the user. Use update operation instead.",
      "Invalid expiry period: expiry_days must be between 1 and 365."
    ],
    "usage": "Provide user_id, mfa_method, and method_config to set up MFA. Configure primary method, backup options, and admin approval requirements as needed.",
    "output_details": {
      "configuration_id": {
        "type": "string",
        "description": "Unique identifier for the MFA configuration"
      },
      "status": {
        "type": "string",
        "description": "Configuration status (active, pending_approval, failed)"
      },
      "backup_codes_generated": {
        "type": "boolean",
        "description": "Whether backup codes were generated"
      },
      "expiry_date": {
        "type": "string",
        "description": "Expiration date for the MFA method"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "TOTP Secret Generator",
    "tool_description": "Generates time-based one-time password secrets and QR codes for authenticator app setup.",
    "parameters": {
      "user_id": {
        "type": "string",
        "required": true,
        "description": "Unique identifier of the user"
      },
      "issuer": {
        "type": "string",
        "required": true,
        "description": "Name of the service or organization"
      },
      "account_name": {
        "type": "string",
        "required": false,
        "description": "Account name displayed in authenticator app",
        "default": None
      }
    },
    "error_messages": [
      "Invalid user_id: User identifier is required and must be a valid string.",
      "Invalid issuer: Issuer name is required and must not contain special characters.",
      "Secret generation failed: Unable to generate cryptographically secure secret. Try again."
    ],
    "usage": "Provide user_id and issuer name to generate TOTP secret. Optional account_name customizes display in authenticator apps.",
    "output_details": {
      "secret_key": {
        "type": "string",
        "description": "Base32-encoded secret key for TOTP generation"
      },
      "qr_code_url": {
        "type": "string",
        "description": "QR code URL for easy authenticator app setup"
      },
      "backup_codes": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Array of backup recovery codes"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "SMS Challenge Sender",
    "tool_description": "Sends SMS verification codes to phone numbers with delivery tracking and retry capabilities.",
    "parameters": {
      "phone_number": {
        "type": "string",
        "required": true,
        "description": "Phone number in international format (+1234567890)"
      },
      "verification_code": {
        "type": "string",
        "required": true,
        "description": "6-digit numeric verification code"
      },
      "message_template": {
        "type": "string",
        "required": false,
        "description": "Custom message template with {code} placeholder",
        "default": "Your verification code is: {code}"
      },
      "expiry_minutes": {
        "type": "integer",
        "required": false,
        "description": "Code expiration time in minutes (1-15)",
        "default": 5
      },
      "retry_attempts": {
        "type": "integer",
        "required": false,
        "description": "Maximum retry attempts (1-3)",
        "default": 1
      }
    },
    "error_messages": [
      "Invalid phone number: Phone number must be in valid international format starting with +.",
      "Invalid verification code: Code must be exactly 6 digits.",
      "SMS delivery failed: Unable to deliver SMS to the provided number. Check number validity.",
      "Rate limit exceeded: Too many SMS requests. Wait before sending another code.",
      "Invalid expiry time: expiry_minutes must be between 1 and 15."
    ],
    "usage": "Provide phone_number and verification_code to send SMS. Customize message template and set expiry time as needed.",
    "output_details": {
      "delivery_status": {
        "type": "string",
        "description": "SMS delivery status (sent, delivered, failed)"
      },
      "message_id": {
        "type": "string",
        "description": "Unique identifier for tracking the SMS"
      },
      "expiry_time": {
        "type": "string",
        "description": "Expiration timestamp for the verification code"
      },
      "attempts_remaining": {
        "type": "integer",
        "description": "Number of retry attempts remaining"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Email Verification Sender",
    "tool_description": "Sends email verification messages with secure links and customizable templates for authentication workflows.",
    "parameters": {
      "email_address": {
        "type": "string",
        "required": true,
        "description": "Valid email address for verification"
      },
      "verification_token": {
        "type": "string",
        "required": true,
        "description": "Secure token for email verification"
      },
      "callback_url": {
        "type": "string",
        "required": true,
        "description": "URL where user will be redirected after verification"
      },
      "email_subject": {
        "type": "string",
        "required": false,
        "description": "Custom email subject line",
        "default": "Please verify your email address"
      },
      "template_type": {
        "type": "string",
        "required": false,
        "description": "Email template type (simple, branded, security)",
        "default": "simple"
      }
    },
    "error_messages": [
      "Invalid email address: Email must be in valid format (user@domain.com).",
      "Invalid verification token: Token must be a valid secure string.",
      "Invalid callback URL: URL must be properly formatted and use HTTPS.",
      "Email delivery failed: Unable to send email. Check email address validity.",
      "Invalid template type: Template must be one of [simple, branded, security]."
    ],
    "usage": "Provide email_address, verification_token, and callback_url to send verification email. Customize subject and template as needed.",
    "output_details": {
      "send_status": {
        "type": "string",
        "description": "Email send status (sent, queued, failed)"
      },
      "message_id": {
        "type": "string",
        "description": "Unique identifier for email tracking"
      },
      "verification_link": {
        "type": "string",
        "description": "Complete verification URL sent in email"
      },
      "expiry_time": {
        "type": "string",
        "description": "Token expiration timestamp"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Biometric Profile Manager",
    "tool_description": "Manages biometric authentication profiles including fingerprint, face recognition, and voice patterns with security validation.",
    "parameters": {
      "user_id": {
        "type": "string",
        "required": true,
        "description": "Unique identifier of the user"
      },
      "biometric_type": {
        "type": "string",
        "required": true,
        "description": "Type of biometric (fingerprint, face, voice, iris)"
      },
      "biometric_data": {
        "type": "string",
        "required": true,
        "description": "Base64-encoded biometric template data"
      },
      "quality_threshold": {
        "type": "number",
        "required": false,
        "description": "Minimum quality score (0.0-1.0)",
        "default": 0.8
      },
      "device_info": {
        "type": "string",
        "required": false,
        "description": "Device information for biometric capture",
        "default": None
      },
      "allow_multiple": {
        "type": "boolean",
        "required": false,
        "description": "Allow multiple samples of same biometric type",
        "default": false
      },
      "encryption_level": {
        "type": "string",
        "required": false,
        "description": "Encryption level (standard, high, maximum)",
        "default": "high"
      },
      "retention_days": {
        "type": "integer",
        "required": false,
        "description": "Data retention period in days (30-365)",
        "default": 90
      },
      "require_liveness": {
        "type": "boolean",
        "required": false,
        "description": "Require liveness detection for biometric",
        "default": true
      },
      "backup_storage": {
        "type": "boolean",
        "required": false,
        "description": "Enable backup storage of biometric templates",
        "default": false
      },
      "audit_logging": {
        "type": "boolean",
        "required": false,
        "description": "Enable detailed audit logging",
        "default": true
      }
    },
    "error_messages": [
      "Invalid biometric type: Type must be one of [fingerprint, face, voice, iris].",
      "Poor biometric quality: Biometric sample quality is below threshold. Recapture with better conditions.",
      "Invalid biometric data: Data must be valid base64-encoded biometric template.",
      "Duplicate biometric: This biometric is already registered for the user.",
      "Processing failed: Unable to process biometric data. Ensure proper format and device compatibility.",
      "Invalid quality threshold: Threshold must be between 0.0 and 1.0.",
      "Invalid encryption level: Level must be one of [standard, high, maximum].",
      "Invalid retention period: retention_days must be between 30 and 365."
    ],
    "usage": "Provide user_id, biometric_type, and biometric_data to register biometric profile. Configure quality thresholds, encryption, and retention policies as needed.",
    "output_details": {
      "profile_id": {
        "type": "string",
        "description": "Unique identifier for the biometric profile"
      },
      "registration_status": {
        "type": "string",
        "description": "Registration status (success, failed, pending)"
      },
      "quality_score": {
        "type": "number",
        "description": "Quality score of the biometric sample"
      },
      "template_size": {
        "type": "integer",
        "description": "Size of stored biometric template in bytes"
      },
      "expiry_date": {
        "type": "string",
        "description": "Expiration date for biometric data retention"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Hardware Token Registrar",
    "tool_description": "Registers and manages hardware authentication tokens including FIDO2, YubiKey, and smart cards with provisioning.",
    "parameters": {
      "user_id": {
        "type": "string",
        "required": true,
        "description": "Unique identifier of the user"
      },
      "token_id": {
        "type": "string",
        "required": true,
        "description": "Hardware token identifier or serial number"
      },
      "token_type": {
        "type": "string",
        "required": true,
        "description": "Type of hardware token (fido2, yubikey, smartcard, rsa)"
      },
      "public_key": {
        "type": "string",
        "required": true,
        "description": "Base64-encoded public key from the token"
      },
      "attestation_data": {
        "type": "string",
        "required": false,
        "description": "Token attestation certificate data",
        "default": None
      }
    },
    "error_messages": [
      "Invalid token type: Type must be one of [fido2, yubikey, smartcard, rsa].",
      "Token already registered: This token ID is already registered to another user.",
      "Invalid public key: Public key format is invalid or corrupted.",
      "Attestation verification failed: Token attestation could not be verified.",
      "Token not supported: This token model is not supported by the system."
    ],
    "usage": "Provide user_id, token_id, token_type, and public_key to register hardware token. Include attestation_data for enhanced security verification.",
    "output_details": {
      "registration_id": {
        "type": "string",
        "description": "Unique identifier for token registration"
      },
      "status": {
        "type": "string",
        "description": "Registration status (active, pending, failed)"
      },
      "attestation_verified": {
        "type": "boolean",
        "description": "Whether token attestation was verified"
      },
      "registration_time": {
        "type": "string",
        "description": "Timestamp of token registration"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Authentication Policy Engine",
    "tool_description": "Evaluates authentication policies and determines required MFA methods based on user context, risk factors, and organizational rules.",
    "parameters": {
      "user_id": {
        "type": "string",
        "required": true,
        "description": "Unique identifier of the user"
      },
      "user_role": {
        "type": "string",
        "required": true,
        "description": "User's role or permission level"
      },
      "resource_classification": {
        "type": "string",
        "required": true,
        "description": "Classification of resource being accessed (public, internal, confidential, restricted)"
      },
      "risk_score": {
        "type": "number",
        "required": true,
        "description": "Risk assessment score (0.0-1.0)"
      },
      "location_info": {
        "type": "string",
        "required": false,
        "description": "Geographic location or IP address information",
        "default": None
      },
      "device_trust_level": {
        "type": "string",
        "required": false,
        "description": "Device trust level (unknown, known, managed, trusted)",
        "default": "unknown"
      },
      "time_restriction": {
        "type": "boolean",
        "required": false,
        "description": "Whether time-based access restrictions apply",
        "default": false
      },
      "network_zone": {
        "type": "string",
        "required": false,
        "description": "Network zone (internal, dmz, external)",
        "default": "external"
      }
    },
    "error_messages": [
      "Invalid resource classification: Must be one of [public, internal, confidential, restricted].",
      "Invalid risk score: Score must be between 0.0 and 1.0.",
      "Invalid device trust level: Must be one of [unknown, known, managed, trusted].",
      "Invalid network zone: Must be one of [internal, dmz, external].",
      "Policy evaluation failed: Unable to evaluate policies with provided parameters."
    ],
    "usage": "Provide user_id, user_role, resource_classification, and risk_score for policy evaluation. Include location, device trust, and network information for comprehensive assessment.",
    "output_details": {
      "required_mfa_methods": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Array of required MFA methods"
      },
      "policy_decision": {
        "type": "string",
        "description": "Policy decision (allow, deny, step_up_auth)"
      },
      "authentication_strength": {
        "type": "string",
        "description": "Required authentication strength (low, medium, high, maximum)"
      },
      "session_duration": {
        "type": "integer",
        "description": "Allowed session duration in minutes"
      },
      "additional_controls": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Additional security controls required"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Session Token Generator",
    "tool_description": "Generates secure session tokens after successful multi-factor authentication with configurable expiration and claims.",
    "parameters": {
      "user_id": {
        "type": "string",
        "required": true,
        "description": "Unique identifier of the authenticated user"
      },
      "authentication_factors": {
        "type": "array",
        "required": true,
        "description": "Array of successfully completed authentication factors",
        "items": {
          "type": "string"
        },
        "minItems": 2
      },
      "session_duration": {
        "type": "integer",
        "required": false,
        "description": "Session duration in minutes (5-1440)",
        "default": 480
      }
    },
    "error_messages": [
      "Insufficient authentication factors: At least 2 authentication factors required for MFA.",
      "Invalid session duration: Duration must be between 5 and 1440 minutes (24 hours).",
      "Token generation failed: Unable to generate secure token. System error.",
      "Invalid authentication factors: One or more authentication factors are invalid or unrecognized."
    ],
    "usage": "Provide user_id and array of completed authentication_factors to generate session token. Set session_duration to control token lifetime.",
    "output_details": {
      "session_token": {
        "type": "string",
        "description": "JWT session token for authenticated access"
      },
      "token_type": {
        "type": "string",
        "description": "Type of token generated (bearer)"
      },
      "expires_at": {
        "type": "string",
        "description": "Token expiration timestamp"
      },
      "authentication_level": {
        "type": "string",
        "description": "Authentication level achieved (multi_factor)"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "MFA Status Checker",
    "tool_description": "Checks current MFA configuration status and enabled methods for a user account.",
    "parameters": {
      "user_id": {
        "type": "string",
        "required": true,
        "description": "Unique identifier of the user"
      },
      "include_details": {
        "type": "boolean",
        "required": false,
        "description": "Include detailed configuration information",
        "default": false
      }
    },
    "error_messages": [
      "User not found: The specified user_id does not exist in the system.",
      "Access denied: Insufficient permissions to check MFA status for this user.",
      "System error: Unable to retrieve MFA status information."
    ],
    "usage": "Provide user_id to check MFA status. Set include_details to true for comprehensive configuration information.",
    "output_details": {
      "mfa_enabled": {
        "type": "boolean",
        "description": "Whether MFA is enabled for the user"
      },
      "enabled_methods": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Array of currently enabled MFA methods"
      },
      "primary_method": {
        "type": "string",
        "description": "User's primary MFA method"
      },
      "backup_codes_available": {
        "type": "boolean",
        "description": "Whether backup recovery codes are available"
      },
      "last_used": {
        "type": "string",
        "description": "Timestamp of last MFA usage"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Backup Code Generator",
    "tool_description": "Generates secure backup recovery codes for MFA account recovery with usage tracking.",
    "parameters": {
      "user_id": {
        "type": "string",
        "required": true,
        "description": "Unique identifier of the user"
      },
      "code_count": {
        "type": "integer",
        "required": false,
        "description": "Number of backup codes to generate (5-20)",
        "default": 10
      },
      "replace_existing": {
        "type": "boolean",
        "required": false,
        "description": "Whether to replace existing backup codes",
        "default": false
      }
    },
    "error_messages": [
      "Invalid code count: Number of codes must be between 5 and 20.",
      "Existing codes found: User already has backup codes. Set replace_existing to true to regenerate.",
      "Generation failed: Unable to generate cryptographically secure backup codes.",
      "User not found: The specified user_id does not exist in the system."
    ],
    "usage": "Provide user_id to generate backup codes. Specify code_count and whether to replace existing codes as needed.",
    "output_details": {
      "backup_codes": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Array of generated backup recovery codes"
      },
      "generation_time": {
        "type": "string",
        "description": "Timestamp when codes were generated"
      },
      "codes_remaining": {
        "type": "integer",
        "description": "Number of unused codes available"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Risk Assessment Analyzer",
    "tool_description": "Analyzes login context and user behavior to calculate authentication risk scores for adaptive security decisions.",
    "parameters": {
      "user_id": {
        "type": "string",
        "required": true,
        "description": "Unique identifier of the user"
      },
      "ip_address": {
        "type": "string",
        "required": true,
        "description": "Source IP address of the authentication attempt"
      },
      "user_agent": {
        "type": "string",
        "required": true,
        "description": "Browser or client user agent string"
      },
      "geolocation": {
        "type": "string",
        "required": false,
        "description": "Geographic location (city, country)",
        "default": None
      },
      "device_fingerprint": {
        "type": "string",
        "required": false,
        "description": "Unique device fingerprint identifier",
        "default": None
      },
      "login_time": {
        "type": "string",
        "required": false,
        "description": "Timestamp of login attempt",
        "default": None
      },
      "previous_failures": {
        "type": "integer",
        "required": false,
        "description": "Number of recent failed login attempts",
        "default": 0
      },
      "velocity_check": {
        "type": "boolean",
        "required": false,
        "description": "Enable velocity-based risk analysis",
        "default": true
      },
      "threat_intelligence": {
        "type": "boolean",
        "required": false,
        "description": "Include threat intelligence data in analysis",
        "default": true
      },
      "behavioral_analysis": {
        "type": "boolean",
        "required": false,
        "description": "Enable behavioral pattern analysis",
        "default": true
      },
      "network_reputation": {
        "type": "boolean",
        "required": false,
        "description": "Check network and IP reputation",
        "default": true
      }
    },
    "error_messages": [
      "Invalid IP address: IP address must be in valid IPv4 or IPv6 format.",
      "Missing user agent: User agent string is required for risk analysis.",
      "Analysis failed: Unable to complete risk assessment due to system error.",
      "Invalid timestamp: login_time must be in valid ISO 8601 format.",
      "User not found: Unable to find historical data for the specified user_id."
    ],
    "usage": "Provide user_id, ip_address, and user_agent for basic risk analysis. Include additional context like geolocation and device_fingerprint for enhanced accuracy.",
    "output_details": {
      "risk_score": {
        "type": "number",
        "description": "Overall risk score from 0.0 (low risk) to 1.0 (high risk)"
      },
      "risk_level": {
        "type": "string",
        "description": "Risk level classification (low, medium, high, critical)"
      },
      "risk_factors": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Array of identified risk factors"
      },
      "recommendations": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "
