field_name: databases
subfield: Database Security and Access Control
task: Role-Based Access Control Management
tool_description: |-
  STEP 1 — Rate task difficulty
  This task is of medium difficulty. Role-Based Access Control (RBAC) management involves coordinating multiple interdependent components (users, roles, permissions, database objects), requires careful handling of security policies with significant error impact, and involves moderate complexity in permission hierarchies and audit requirements.

  STEP 2 — Set a tool budget
  Given the medium difficulty, I'll target 12 tools to handle the various aspects of RBAC management including user management, role definition, permission assignment, policy enforcement, and auditing.

  STEP 3 — List all tool names and dependencies

  Tool dependencies and affordances:
  - User Account Manager → creates user accounts → consumed by Role Assignment Tool
  - Role Definition Manager → creates roles → consumed by Role Assignment Tool, Permission Mapper
  - Permission Mapper → maps permissions to roles → consumed by Access Policy Validator
  - Role Assignment Tool → assigns roles to users → consumed by Access Control Enforcer
  - Database Object Scanner → identifies database objects → consumed by Permission Mapper
  - Access Policy Validator → validates policy consistency → consumed by Access Control Enforcer
  - Access Control Enforcer → enforces access decisions → consumed by Access Audit Logger
  - Permission Inheritance Resolver → resolves permission hierarchies → consumed by Access Control Enforcer
  - Access Audit Logger → logs access events → consumed by Compliance Reporter
  - Security Violation Detector → detects policy violations → consumed by Access Audit Logger
  - Compliance Reporter → generates compliance reports → final output
  - Role Hierarchy Manager → manages role inheritance → consumed by Permission Inheritance Resolver

  STEP 4 — Multi-tool plans

  Simple plans:
  1. Basic user setup: User Account Manager → Role Assignment Tool (create user and assign basic role)
  2. Simple audit: Access Audit Logger → Compliance Reporter (log access and generate basic report)

  Medium plans:
  1. Role creation workflow: Role Definition Manager → Permission Mapper → Access Policy Validator (define role, map permissions, validate policy)
  2. Access enforcement: Database Object Scanner → Access Control Enforcer → Access Audit Logger (scan objects, enforce access, log events)

  Complex plans:
  1. Complete RBAC setup: Database Object Scanner → Role Definition Manager → Permission Mapper → Role Hierarchy Manager → Permission Inheritance Resolver → Access Policy Validator → User Account Manager → Role Assignment Tool (full system setup)
  2. Security monitoring: Access Control Enforcer → Security Violation Detector → Access Audit Logger → Compliance Reporter (enforce access, detect violations, log events, generate compliance reports)

  STEP 5 — Produce tools

  ```json
  {
    "tool_name": "User Account Manager",
    "tool_description": "Creates, modifies, and manages user accounts in the database system with authentication credentials and basic profile information.",
    "parameters": {
      "username": {
        "type": "string",
        "required": true,
        "description": "Unique username for the account"
      },
      "password": {
        "type": "string",
        "required": true,
        "description": "Password for the user account"
      },
      "email": {
        "type": "string",
        "required": true,
        "description": "Email address for the user"
      },
      "full_name": {
        "type": "string",
        "required": true,
        "description": "Full name of the user"
      },
      "department": {
        "type": "string",
        "required": false,
        "description": "Department or organizational unit",
        "default": "None"
      },
      "action": {
        "type": "string",
        "required": false,
        "description": "Action to perform: create, update, delete, or activate",
        "default": "create"
      }
    },
    "error_messages": [
      "Username already exists: Choose a different username as this one is already taken.",
      "Invalid password: Password must be at least 8 characters with mixed case, numbers, and special characters.",
      "Invalid email format: Provide a valid email address in the format user@domain.com.",
      "Invalid action: Use one of [create, update, delete, activate].",
      "User not found: The specified username does not exist for update/delete operations."
    ],
    "usage": "Provide username, password, email, and full_name for basic user creation. Use action parameter to specify different operations. For updates, provide username and fields to modify.",
    "output_details": {
      "user_id": {
        "type": "string",
        "description": "Unique identifier for the created/modified user"
      },
      "username": {
        "type": "string",
        "description": "Username of the account"
      },
      "status": {
        "type": "string",
        "description": "Current status of the user account"
      },
      "created_timestamp": {
        "type": "string",
        "description": "When the account was created"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Role Definition Manager",
    "tool_description": "Creates and manages role definitions with their associated metadata, descriptions, and hierarchical relationships in the RBAC system.",
    "parameters": {
      "role_name": {
        "type": "string",
        "required": true,
        "description": "Unique name for the role"
      },
      "role_description": {
        "type": "string",
        "required": true,
        "description": "Detailed description of the role's purpose"
      },
      "role_level": {
        "type": "integer",
        "required": true,
        "description": "Hierarchical level of the role (1-10, where 1 is highest)"
      },
      "parent_roles": {
        "type": "array",
        "items": {"type": "string"},
        "required": false,
        "description": "List of parent roles this role inherits from",
        "default": "None"
      },
      "action": {
        "type": "string",
        "required": false,
        "description": "Action to perform: create, update, delete",
        "default": "create"
      }
    },
    "error_messages": [
      "Role name already exists: Choose a different role name as this one is already defined.",
      "Invalid role level: Role level must be an integer between 1 and 10.",
      "Parent role not found: One or more specified parent roles do not exist.",
      "Circular inheritance detected: Role hierarchy would create a circular dependency.",
      "Invalid action: Use one of [create, update, delete]."
    ],
    "usage": "Provide role_name, role_description, and role_level to create a new role. Optionally specify parent_roles for inheritance. Use action parameter for different operations.",
    "output_details": {
      "role_id": {
        "type": "string",
        "description": "Unique identifier for the role"
      },
      "role_name": {
        "type": "string",
        "description": "Name of the role"
      },
      "hierarchy_path": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Full inheritance path for the role"
      },
      "creation_timestamp": {
        "type": "string",
        "description": "When the role was created"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Permission Mapper",
    "tool_description": "Maps specific permissions to database objects and associates them with roles, managing the relationship between roles, objects, and allowed operations.",
    "parameters": {
      "role_name": {
        "type": "string",
        "required": true,
        "description": "Name of the role to assign permissions to"
      },
      "database_object": {
        "type": "string",
        "required": true,
        "description": "Database object (table, view, procedure, etc.)"
      },
      "object_type": {
        "type": "string",
        "required": true,
        "description": "Type of database object: table, view, procedure, function, schema"
      },
      "permissions": {
        "type": "array",
        "items": {"type": "string"},
        "required": true,
        "description": "List of permissions to grant: SELECT, INSERT, UPDATE, DELETE, EXECUTE, ADMIN"
      },
      "grant_option": {
        "type": "boolean",
        "required": false,
        "description": "Whether the role can grant these permissions to others",
        "default": false
      },
      "conditions": {
        "type": "array",
        "items": {"type": "string"},
        "required": false,
        "description": "Optional conditions or filters for the permissions",
        "default": "None"
      },
      "expiry_date": {
        "type": "string",
        "required": false,
        "description": "Expiration date for the permissions",
        "format": "date-time",
        "default": "None"
      },
      "action": {
        "type": "string",
        "required": false,
        "description": "Action to perform: grant, revoke, modify",
        "default": "grant"
      }
    },
    "error_messages": [
      "Role not found: The specified role does not exist in the system.",
      "Database object not found: The specified database object does not exist.",
      "Invalid object type: Use one of [table, view, procedure, function, schema].",
      "Invalid permission: Use valid permissions [SELECT, INSERT, UPDATE, DELETE, EXECUTE, ADMIN].",
      "Permission conflict: The requested permission conflicts with existing role restrictions.",
      "Invalid expiry date: Expiry date must be in the future and in ISO 8601 format.",
      "Invalid action: Use one of [grant, revoke, modify]."
    ],
    "usage": "Specify role_name, database_object, object_type, and permissions array to create permission mappings. Use grant_option for delegation rights and expiry_date for temporary permissions.",
    "output_details": {
      "mapping_id": {
        "type": "string",
        "description": "Unique identifier for the permission mapping"
      },
      "role_name": {
        "type": "string",
        "description": "Role that received the permissions"
      },
      "effective_permissions": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Final list of effective permissions after processing"
      },
      "mapping_timestamp": {
        "type": "string",
        "description": "When the permission mapping was created"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Role Assignment Tool",
    "tool_description": "Assigns roles to users and manages user-role relationships with support for temporary assignments and multiple role assignments per user.",
    "parameters": {
      "username": {
        "type": "string",
        "required": true,
        "description": "Username to assign roles to"
      },
      "role_names": {
        "type": "array",
        "items": {"type": "string"},
        "required": true,
        "description": "List of role names to assign to the user"
      },
      "assignment_type": {
        "type": "string",
        "required": false,
        "description": "Type of assignment: permanent, temporary, conditional",
        "default": "permanent"
      },
      "expiry_date": {
        "type": "string",
        "required": false,
        "description": "Expiration date for temporary assignments",
        "format": "date-time",
        "default": "None"
      },
      "justification": {
        "type": "string",
        "required": false,
        "description": "Business justification for the role assignment",
        "default": "None"
      },
      "action": {
        "type": "string",
        "required": false,
        "description": "Action to perform: assign, unassign, modify",
        "default": "assign"
      }
    },
    "error_messages": [
      "User not found: The specified username does not exist in the system.",
      "Role not found: One or more specified roles do not exist.",
      "Role conflict: User already has conflicting roles that cannot coexist.",
      "Invalid assignment type: Use one of [permanent, temporary, conditional].",
      "Missing expiry date: Temporary assignments require an expiry_date.",
      "Invalid expiry date: Expiry date must be in the future for temporary assignments.",
      "Invalid action: Use one of [assign, unassign, modify]."
    ],
    "usage": "Provide username and role_names array to assign roles. For temporary assignments, set assignment_type to 'temporary' and provide expiry_date. Include justification for audit trails.",
    "output_details": {
      "assignment_id": {
        "type": "string",
        "description": "Unique identifier for the role assignment"
      },
      "username": {
        "type": "string",
        "description": "User who received the role assignment"
      },
      "assigned_roles": {
        "type": "array",
        "items": {"type": "string"},
        "description": "List of successfully assigned roles"
      },
      "assignment_timestamp": {
        "type": "string",
        "description": "When the assignment was made"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Database Object Scanner",
    "tool_description": "Scans and catalogs database objects including tables, views, procedures, functions, and schemas to maintain an inventory for access control purposes.",
    "parameters": {
      "database_name": {
        "type": "string",
        "required": true,
        "description": "Name of the database to scan"
      },
      "object_types": {
        "type": "array",
        "items": {"type": "string"},
        "required": false,
        "description": "Types of objects to scan: table, view, procedure, function, schema, trigger",
        "default": ["table", "view", "procedure", "function"]
      },
      "schema_filter": {
        "type": "string",
        "required": false,
        "description": "Filter to scan only specific schemas (supports wildcards)",
        "default": "None"
      },
      "include_system_objects": {
        "type": "boolean",
        "required": false,
        "description": "Whether to include system/internal database objects",
        "default": false
      }
    },
    "error_messages": [
      "Database not found: The specified database does not exist or is not accessible.",
      "Invalid object type: Use valid object types [table, view, procedure, function, schema, trigger].",
      "Access denied: Insufficient privileges to scan the database objects.",
      "Connection failed: Unable to connect to the database for scanning."
    ],
    "usage": "Provide database_name to scan all objects, or specify object_types and schema_filter to limit the scan scope. Set include_system_objects to true to include system objects.",
    "output_details": {
      "scan_id": {
        "type": "string",
        "description": "Unique identifier for the scan operation"
      },
      "total_objects_found": {
        "type": "integer",
        "description": "Total number of database objects discovered"
      },
      "object_names": {
        "type": "array",
        "items": {"type": "string"},
        "description": "List of discovered object names"
      },
      "scan_timestamp": {
        "type": "string",
        "description": "When the scan was completed"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Access Policy Validator",
    "tool_description": "Validates access control policies for consistency, security best practices, and compliance with organizational rules, detecting potential conflicts and vulnerabilities.",
    "parameters": {
      "policy_scope": {
        "type": "string",
        "required": true,
        "description": "Scope of validation: user, role, database, system"
      },
      "target_identifier": {
        "type": "string",
        "required": true,
        "description": "Identifier for the target (username, role name, database name, or 'all')"
      },
      "validation_rules": {
        "type": "array",
        "items": {"type": "string"},
        "required": false,
        "description": "Specific validation rules to apply: segregation_of_duties, least_privilege, role_conflicts, permission_escalation",
        "default": ["segregation_of_duties", "least_privilege", "role_conflicts"]
      },
      "compliance_standard": {
        "type": "string",
        "required": false,
        "description": "Compliance standard to validate against: SOX, GDPR, HIPAA, PCI_DSS, custom",
        "default": "None"
      },
      "strict_mode": {
        "type": "boolean",
        "required": false,
        "description": "Whether to apply strict validation rules",
        "default": false
      },
      "generate_recommendations": {
        "type": "boolean",
        "required": false,
        "description": "Whether to generate remediation recommendations",
        "default": true
      }
    },
    "error_messages": [
      "Invalid policy scope: Use one of [user, role, database, system].",
      "Target not found: The specified target identifier does not exist.",
      "Invalid validation rule: Use valid rules [segregation_of_duties, least_privilege, role_conflicts, permission_escalation].",
      "Invalid compliance standard: Use one of [SOX, GDPR, HIPAA, PCI_DSS, custom].",
      "Validation failed: Critical policy violations detected that must be resolved."
    ],
    "usage": "Specify policy_scope and target_identifier to validate specific policies. Choose validation_rules and compliance_standard as needed. Enable strict_mode for enhanced security validation.",
    "output_details": {
      "validation_id": {
        "type": "string",
        "description": "Unique identifier for the validation run"
      },
      "validation_status": {
        "type": "string",
        "description": "Overall validation result: passed, failed, warnings"
      },
      "violations_found": {
        "type": "integer",
        "description": "Number of policy violations detected"
      },
      "recommendations": {
        "type": "array",
        "items": {"type": "string"},
        "description": "List of recommended remediation actions"
      },
      "validation_timestamp": {
        "type": "string",
        "description": "When the validation was performed"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Access Control Enforcer",
    "tool_description": "Enforces access control decisions by evaluating user permissions against requested database operations and returning allow/deny decisions with detailed reasoning.",
    "parameters": {
      "username": {
        "type": "string",
        "required": true,
        "description": "Username attempting the database operation"
      },
      "database_object": {
        "type": "string",
        "required": true,
        "description": "Target database object for the operation"
      },
      "operation": {
        "type": "string",
        "required": true,
        "description": "Requested operation: SELECT, INSERT, UPDATE, DELETE, EXECUTE, CREATE, ALTER, DROP"
      },
      "object_type": {
        "type": "string",
        "required": true,
        "description": "Type of target object: table, view, procedure, function, schema"
      },
      "session_context": {
        "type": "array",
        "items": {"type": "string"},
        "required": false,
        "description": "Additional session context information",
        "default": "None"
      },
      "ip_address": {
        "type": "string",
        "required": false,
        "description": "IP address of the client making the request",
        "default": "None"
      },
      "time_based_check": {
        "type": "boolean",
        "required": false,
        "description": "Whether to enforce time-based access restrictions",
        "default": true
      },
      "audit_mode": {
        "type": "boolean",
        "required": false,
        "description": "Whether to log the access decision for auditing",
        "default": true
      }
    },
    "error_messages": [
      "User not found: The specified username does not exist in the system.",
      "Object not found: The specified database object does not exist.",
      "Invalid operation: Use one of [SELECT, INSERT, UPDATE, DELETE, EXECUTE, CREATE, ALTER, DROP].",
      "Invalid object type: Use one of [table, view, procedure, function, schema].",
      "Session expired: User session has expired and requires re-authentication.",
      "IP restriction: Access denied due to IP address restrictions."
    ],
    "usage": "Provide username, database_object, operation, and object_type to evaluate access. Include session_context and ip_address for enhanced security checks. Enable audit_mode for compliance logging.",
    "output_details": {
      "decision": {
        "type": "string",
        "description": "Access decision: ALLOW, DENY, or CONDITIONAL"
      },
      "decision_reason": {
        "type": "string",
        "description": "Detailed explanation for the access decision"
      },
      "effective_roles": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Roles that were considered in the decision"
      },
      "decision_timestamp": {
        "type": "string",
        "description": "When the access decision was made"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Permission Inheritance Resolver",
    "tool_description": "Resolves complex permission inheritance scenarios including role hierarchies, group memberships, and nested permission structures to determine effective permissions.",
    "parameters": {
      "username": {
        "type": "string",
        "required": true,
        "description": "Username to resolve permissions for"
      },
      "target_object": {
        "type": "string",
        "required": false,
        "description": "Specific database object to resolve permissions for",
        "default": "None"
      },
      "include_inherited": {
        "type": "boolean",
        "required": false,
        "description": "Whether to include permissions inherited from parent roles",
        "default": true
      },
      "include_group_permissions": {
        "type": "boolean",
        "required": false,
        "description": "Whether to include permissions from group memberships",
        "default": true
      },
      "resolution_depth": {
        "type": "integer",
        "required": false,
        "description": "Maximum depth for inheritance resolution (1-10)",
        "default": 5
      }
    },
    "error_messages": [
      "User not found: The specified username does not exist in the system.",
      "Object not found: The specified target object does not exist.",
      "Invalid resolution depth: Resolution depth must be between 1 and 10.",
      "Circular inheritance detected: Circular dependency found in role hierarchy.",
      "Resolution timeout: Permission resolution took too long, possibly due to complex inheritance."
    ],
    "usage": "Provide username to resolve all permissions, or specify target_object for object-specific resolution. Control inheritance behavior with include_inherited and include_group_permissions flags.",
    "output_details": {
      "username": {
        "type": "string",
        "description": "User for whom permissions were resolved"
      },
      "effective_permissions": {
        "type": "array",
        "items": {"type": "string"},
        "description": "List of effective permissions after inheritance resolution"
      },
      "inheritance_chain": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Chain of inheritance that led to the effective permissions"
      },
      "resolution_timestamp": {
        "type": "string",
        "description": "When the permission resolution was completed"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Access Audit Logger",
    "tool_description": "Logs all access control events including authentication attempts, authorization decisions, permission changes, and security violations for compliance and monitoring.",
    "parameters": {
      "event_type": {
        "type": "string",
        "required": true,
        "description": "Type of event: authentication, authorization, permission_change, violation, admin_action"
      },
      "username": {
        "type": "string",
        "required": true,
        "description": "Username associated with the event"
      },
      "event_details": {
        "type": "string",
        "required": true,
        "description": "Detailed description of the event"
      },
      "object_affected": {
        "type": "string",
        "required": false,
        "description": "Database object affected by the event",
        "default": "None"
      },
      "ip_address": {
        "type": "string",
        "required": false,
        "description": "IP address associated with the event",
        "default": "None"
      },
      "session_id": {
        "type": "string",
        "required": false,
        "description": "Session identifier for the event",
        "default": "None"
      },
      "severity_level": {
        "type": "string",
        "required": false,
        "description": "Severity level: low, medium, high, critical",
        "default": "medium"
      },
      "additional_metadata": {
        "type": "array",
        "items": {"type": "string"},
        "required": false,
        "description": "Additional metadata key-value pairs",
        "default": "None"
      }
    },
    "error_messages": [
      "Invalid event type: Use one of [authentication, authorization, permission_change, violation, admin_action].",
      "Invalid severity level: Use one of [low, medium, high, critical].",
      "Missing required details: Event details must be provided and cannot be empty.",
      "Log storage full: Unable to write log entry due to storage limitations.",
      "Log format error: Event details contain invalid characters or format."
    ],
    "usage": "Specify event_type, username, and event_details for basic logging. Include object_affected, ip_address, session_id for enhanced tracking. Set appropriate severity_level for filtering and alerting.",
    "output_details": {
      "log_entry_id": {
        "type": "string",
        "description": "Unique identifier for the log entry"
      },
      "log_timestamp": {
        "type": "string",
        "description": "Timestamp when the event was logged"
      },
      "log_status": {
        "type": "string",
        "description": "Status of the logging operation: success, warning, error"
      },
      "retention_period": {
        "type": "integer",
        "description": "Number of days this log entry will be retained"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Security Violation Detector",
    "tool_description": "Detects and analyzes security violations, suspicious access patterns, and potential threats in database access attempts using pattern analysis and rule-based detection.",
    "parameters": {
      "detection_scope": {
        "type": "string",
        "required": true,
        "description": "Scope of detection: user, database, system, realtime"
      },
      "time_window": {
        "type": "integer",
        "required": false,
        "description": "Time window in minutes for pattern analysis (1-1440)",
        "default": 60
      },
      "detection_rules": {
        "type": "array",
        "items": {"type": "string"},
        "required": false,
        "description": "Detection rules: failed_login_attempts, privilege_escalation, unusual_access_patterns, data_exfiltration, concurrent_sessions",
        "default": ["failed_login_attempts", "privilege_escalation", "unusual_access_patterns"]
      },
      "threshold_multiplier": {
        "type": "number",
        "required": false,
        "description": "Multiplier for violation thresholds (0.1-5.0)",
        "default": 1.0
      },
      "target_users": {
        "type": "array",
        "items": {"type": "string"},
        "required": false,
        "description": "Specific users to monitor (empty means all users)",
        "default": "None"
      },
      "alert_severity_threshold": {
        "type": "string",
        "required": false,
        "description": "Minimum severity level for alerts: low, medium, high, critical",
        "default": "medium"
      },
      "include_false_positives": {
        "type": "boolean",
        "required": false,
        "description": "Whether to include potential false positives in results",
        "default": false
      }
    },
    "error_messages": [
      "Invalid detection scope: Use one of [user, database, system, realtime].",
      "Invalid time window: Time window must be between 1 and 1440 minutes.",
      "Invalid detection rule: Use valid rules [failed_login_attempts, privilege_escalation, unusual_access_patterns, data_exfiltration, concurrent_sessions].",
      "Invalid threshold multiplier: Threshold multiplier must be between 0.1 and 5.0.",
      "Invalid severity threshold: Use one of [low, medium, high, critical].",
      "Insufficient data: Not enough historical data available for pattern analysis."
    ],
    "usage": "Specify detection_scope and configure detection_rules for the types of violations to detect. Adjust time_window and threshold_multiplier to fine-tune sensitivity. Use target_users to focus on specific users.",
    "output_details": {
      "detection_run_id": {
        "type": "string",
        "description": "Unique identifier for the detection run"
      },
      "violations_detected": {
        "type": "integer",
        "description": "Number of security violations detected"
      },
      "violation_types": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Types of violations found"
      },
      "affected_users": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Users involved in detected violations"
      },
      "detection_timestamp": {
        "type": "string",
        "description": "When the violation detection was completed"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Compliance Reporter",
    "tool_description": "Generates comprehensive compliance reports for various regulatory standards, including access reviews, audit trails, and compliance metrics with customizable report formats.",
    "parameters": {
      "report_type": {
        "type": "string",
        "required": true,
        "description": "Type of compliance report: access_review, audit_trail, violation_summary, user_activity, permission_matrix, compliance_dashboard"
      },
      "reporting_period_start": {
        "type": "string",
        "required": true,
        "description": "Start date for the reporting period",
        "format": "date-time"
      },
      "reporting_period_end": {
        "type": "string",
        "required": true,
        "description": "End date for the reporting period",
        "format": "date-time"
      },
      "compliance_standards": {
        "type": "array",
        "items": {"type": "string"},
        "required": false,
        "description": "Compliance standards to include: SOX, GDPR, HIPAA, PCI_DSS, SOC2, ISO27001",
        "default": ["SOX"]
      },
      "include_sections": {
        "type": "array",
        "items": {"type": "string"},
        "required": false,
        "description": "Report sections to include: executive_summary, detailed_findings, recommendations, appendices",
        "default": ["executive_summary", "detailed_findings"]
      },
      "output_format": {
        "type": "string",
        "required": false,
        "description": "Output format: pdf, html, csv, json, xml",
        "default": "pdf"
