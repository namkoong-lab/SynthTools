field_name: customer_support
subfield: knowledge_base_management
task: Search and retrieve relevant knowledge base content using natural language queries
tool_description: |-
  ## STEP 1 — Rate task difficulty

  This task is **medium** difficulty. It involves complex natural language processing for query understanding, sophisticated search and ranking algorithms, context-aware content retrieval, and integration across multiple knowledge sources. The ambiguity in natural language queries and the need for accurate relevance scoring add significant complexity.

  ## STEP 2 — Set a tool budget

  Given the medium difficulty, I'll target **12 tools** within the 10-15 range. This allows for comprehensive coverage of query processing, search operations, content management, and result optimization workflows.

  ## STEP 3 — List all tool names and dependencies

  **Tools and their data flow:**
  1. **Query Parser** - Consumes: raw queries → Produces: structured query components
  2. **Query Expander** - Consumes: parsed queries → Produces: expanded query terms
  3. **Semantic Embedder** - Consumes: text content → Produces: vector embeddings
  4. **Knowledge Base Indexer** - Consumes: content documents → Produces: searchable indexes
  5. **Similarity Calculator** - Consumes: query/content embeddings → Produces: similarity scores
  6. **Keyword Matcher** - Consumes: query terms, indexed content → Produces: keyword matches
  7. **Content Ranker** - Consumes: similarity scores, keyword matches → Produces: ranked results
  8. **Result Aggregator** - Consumes: multiple search results → Produces: unified result sets
  9. **Context Analyzer** - Consumes: queries, user context → Produces: contextual insights
  10. **Content Filterer** - Consumes: search results, filter criteria → Produces: filtered results
  11. **Snippet Generator** - Consumes: full content, queries → Produces: relevant excerpts
  12. **Search Analytics** - Consumes: search operations, results → Produces: performance metrics

  ## STEP 4 — Multi-tool plans

  **Simple plans:**
  1. **Basic keyword search**: Query Parser → Keyword Matcher → Content Ranker → Snippet Generator
  2. **Direct content lookup**: Knowledge Base Indexer → Content Filterer → Result Aggregator

  **Medium plans:**
  1. **Enhanced semantic search**: Query Parser → Query Expander → Semantic Embedder → Similarity Calculator → Content Ranker → Snippet Generator
  2. **Contextual search with filtering**: Context Analyzer → Query Parser → Keyword Matcher → Content Filterer → Result Aggregator → Search Analytics

  **Complex plans:**
  1. **Full intelligent search**: Query Parser → Query Expander → Context Analyzer → Semantic Embedder → Similarity Calculator → Keyword Matcher → Content Ranker → Content Filterer → Result Aggregator → Snippet Generator → Search Analytics
  2. **Multi-modal content discovery**: Knowledge Base Indexer → Query Parser → Semantic Embedder → Similarity Calculator → Keyword Matcher → Context Analyzer → Content Ranker → Content Filterer → Snippet Generator → Search Analytics

  ## STEP 5 — Produce tools

  ```json
  {
    "tool_name": "Query Parser",
    "tool_description": "Parses natural language queries to extract key components including intent, entities, keywords, and question types for improved search processing.",
    "parameters": {
      "query_text": {
        "type": "string",
        "required": true,
        "description": "The natural language query to be parsed"
      },
      "language": {
        "type": "string",
        "required": false,
        "default": "en",
        "description": "Language code for the query (e.g., en, es, fr)"
      },
      "parse_entities": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Whether to extract named entities from the query"
      }
    },
    "error_messages": [
      "Empty query error: Query text cannot be empty or contain only whitespace.",
      "Unsupported language error: Language code must be a valid ISO 639-1 code.",
      "Query too long error: Query text exceeds maximum length of 1000 characters."
    ],
    "usage": "Provide the natural language query in query_text parameter. Optionally specify language and whether to parse entities. The tool returns structured components of the query for downstream processing.",
    "output_details": {
      "intent": {
        "type": "string",
        "description": "Detected intent of the query (search, question, command)"
      },
      "keywords": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Extracted keywords from the query"
      },
      "entities": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Named entities found in the query"
      },
      "question_type": {
        "type": "string",
        "description": "Type of question if applicable (what, how, when, where, why)"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Query Expander",
    "tool_description": "Expands queries with synonyms, related terms, and alternative phrasings to improve search coverage and recall.",
    "parameters": {
      "original_keywords": {
        "type": "array",
        "required": true,
        "description": "Original keywords from the parsed query",
        "items": {
          "type": "string"
        },
        "minItems": 1,
        "maxItems": 50
      },
      "expansion_method": {
        "type": "string",
        "required": false,
        "default": "semantic",
        "description": "Method for expansion: semantic, thesaurus, or statistical"
      },
      "max_expansions": {
        "type": "integer",
        "required": false,
        "default": 10,
        "description": "Maximum number of expansion terms to generate"
      },
      "domain": {
        "type": "string",
        "required": false,
        "default": "general",
        "description": "Domain context for specialized expansion (general, technical, medical, legal)"
      }
    },
    "error_messages": [
      "Invalid expansion method error: Method must be one of: semantic, thesaurus, statistical.",
      "Keywords array empty error: At least one keyword must be provided.",
      "Max expansions out of range error: Max expansions must be between 1 and 100.",
      "Domain not supported error: Domain must be one of: general, technical, medical, legal."
    ],
    "usage": "Provide the original keywords array from query parsing. Optionally specify expansion method, maximum expansions, and domain context. Returns expanded terms with confidence scores.",
    "output_details": {
      "expanded_terms": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Additional terms related to original keywords"
      },
      "confidence_scores": {
        "type": "array",
        "items": {
          "type": "number"
        },
        "description": "Confidence scores for each expanded term (0-1)"
      },
      "expansion_count": {
        "type": "integer",
        "description": "Total number of terms added through expansion"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Semantic Embedder",
    "tool_description": "Generates dense vector embeddings for text content using advanced language models to enable semantic similarity calculations.",
    "parameters": {
      "text_content": {
        "type": "string",
        "required": true,
        "description": "Text content to be embedded"
      },
      "model_type": {
        "type": "string",
        "required": false,
        "default": "sentence-transformer",
        "description": "Embedding model type: sentence-transformer, bert, or openai"
      },
      "normalize_embeddings": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Whether to normalize embedding vectors to unit length"
      }
    },
    "error_messages": [
      "Empty text error: Text content cannot be empty.",
      "Text too long error: Text exceeds maximum length of 8192 characters.",
      "Invalid model type error: Model type must be one of: sentence-transformer, bert, openai.",
      "Embedding generation failed error: Unable to generate embeddings for the provided text."
    ],
    "usage": "Provide text content to be embedded. Optionally specify the embedding model type and normalization preference. Returns dense vector representation of the text.",
    "output_details": {
      "embedding_vector": {
        "type": "array",
        "items": {
          "type": "number"
        },
        "description": "Dense vector representation of the input text"
      },
      "vector_dimension": {
        "type": "integer",
        "description": "Dimensionality of the embedding vector"
      },
      "model_used": {
        "type": "string",
        "description": "Name of the embedding model that was used"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Knowledge Base Indexer",
    "tool_description": "Creates searchable indexes from knowledge base documents, including full-text search indexes, metadata catalogs, and content hierarchies.",
    "parameters": {
      "document_ids": {
        "type": "array",
        "required": true,
        "description": "List of document IDs to be indexed",
        "items": {
          "type": "string"
        },
        "minItems": 1,
        "maxItems": 1000
      },
      "content_types": {
        "type": "array",
        "required": true,
        "description": "Types of content in documents",
        "items": {
          "type": "string"
        },
        "minItems": 1,
        "maxItems": 20
      },
      "index_metadata": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Whether to index document metadata"
      },
      "create_hierarchy": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Whether to create hierarchical content structure"
      },
      "language_filter": {
        "type": "string",
        "required": false,
        "default": "all",
        "description": "Language filter for indexing (all, en, es, fr, etc.)"
      },
      "update_existing": {
        "type": "boolean",
        "required": false,
        "default": false,
        "description": "Whether to update existing indexes or create new ones"
      },
      "batch_size": {
        "type": "integer",
        "required": false,
        "default": 100,
        "description": "Number of documents to process in each batch"
      },
      "include_attachments": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Whether to index document attachments"
      },
      "index_version": {
        "type": "string",
        "required": false,
        "default": "v1",
        "description": "Version identifier for the index"
      },
      "priority_weighting": {
        "type": "array",
        "required": false,
        "default": null,
        "description": "Priority weights for different content types",
        "items": {
          "type": "number"
        }
      }
    },
    "error_messages": [
      "No documents provided error: At least one document ID must be specified.",
      "Invalid content types error: Content types array cannot be empty and must contain valid types.",
      "Document access error: One or more documents could not be accessed or read.",
      "Index creation failed error: Failed to create searchable index due to system constraints.",
      "Language filter invalid error: Language filter must be 'all' or a valid ISO 639-1 code.",
      "Batch size out of range error: Batch size must be between 1 and 500.",
      "Priority weighting mismatch error: Priority weights array length must match content types array length."
    ],
    "usage": "Provide arrays of document IDs and content types to be indexed. Configure indexing options through boolean flags and specify language filtering, batch processing, and priority weighting as needed.",
    "output_details": {
      "index_id": {
        "type": "string",
        "description": "Unique identifier for the created index"
      },
      "indexed_documents": {
        "type": "integer",
        "description": "Number of documents successfully indexed"
      },
      "index_size": {
        "type": "integer",
        "description": "Size of the created index in bytes"
      },
      "content_categories": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Categories of content found during indexing"
      },
      "creation_timestamp": {
        "type": "string",
        "description": "Timestamp when index was created"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Similarity Calculator",
    "tool_description": "Calculates semantic similarity scores between query embeddings and content embeddings using various distance metrics.",
    "parameters": {
      "query_embedding": {
        "type": "array",
        "required": true,
        "description": "Vector embedding of the search query",
        "items": {
          "type": "number"
        },
        "minItems": 50,
        "maxItems": 4096
      },
      "content_embeddings": {
        "type": "array",
        "required": true,
        "description": "Vector embeddings of knowledge base content",
        "items": {
          "type": "array"
        },
        "minItems": 1,
        "maxItems": 500
      },
      "similarity_metric": {
        "type": "string",
        "required": false,
        "default": "cosine",
        "description": "Similarity metric to use: cosine, euclidean, or dot_product"
      },
      "threshold": {
        "type": "number",
        "required": false,
        "default": 0.5,
        "description": "Minimum similarity threshold for results"
      },
      "normalize_scores": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Whether to normalize similarity scores to 0-1 range"
      }
    },
    "error_messages": [
      "Embedding dimension mismatch error: Query and content embeddings must have the same dimensionality.",
      "Invalid similarity metric error: Metric must be one of: cosine, euclidean, dot_product.",
      "Empty embeddings error: Content embeddings array cannot be empty.",
      "Threshold out of range error: Threshold must be between 0 and 1.",
      "Invalid embedding format error: Embeddings must be numeric arrays."
    ],
    "usage": "Provide query embedding and array of content embeddings. Specify similarity metric, threshold, and normalization preferences. Returns similarity scores for each content item.",
    "output_details": {
      "similarity_scores": {
        "type": "array",
        "items": {
          "type": "number"
        },
        "description": "Similarity scores for each content embedding"
      },
      "top_matches": {
        "type": "array",
        "items": {
          "type": "integer"
        },
        "description": "Indices of content items sorted by similarity score"
      },
      "average_similarity": {
        "type": "number",
        "description": "Average similarity score across all content items"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Keyword Matcher",
    "tool_description": "Performs exact and fuzzy keyword matching against indexed knowledge base content with customizable matching algorithms.",
    "parameters": {
      "search_terms": {
        "type": "array",
        "required": true,
        "description": "Terms to search for in the knowledge base",
        "items": {
          "type": "string"
        },
        "minItems": 1,
        "maxItems": 100
      },
      "index_id": {
        "type": "string",
        "required": true,
        "description": "ID of the knowledge base index to search"
      },
      "match_type": {
        "type": "string",
        "required": false,
        "default": "fuzzy",
        "description": "Type of matching: exact, fuzzy, or wildcard"
      },
      "case_sensitive": {
        "type": "boolean",
        "required": false,
        "default": false,
        "description": "Whether matching should be case sensitive"
      },
      "fuzzy_distance": {
        "type": "integer",
        "required": false,
        "default": 2,
        "description": "Maximum edit distance for fuzzy matching"
      },
      "boost_exact_matches": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Whether to boost scores for exact matches"
      }
    },
    "error_messages": [
      "Index not found error: The specified index ID does not exist.",
      "Empty search terms error: At least one search term must be provided.",
      "Invalid match type error: Match type must be one of: exact, fuzzy, wildcard.",
      "Fuzzy distance out of range error: Fuzzy distance must be between 0 and 5.",
      "Search execution failed error: Unable to execute search against the index."
    ],
    "usage": "Provide search terms array and valid index ID. Configure matching behavior through match type, case sensitivity, and fuzzy distance parameters. Returns matched content with relevance scores.",
    "output_details": {
      "matched_documents": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "IDs of documents containing keyword matches"
      },
      "match_scores": {
        "type": "array",
        "items": {
          "type": "number"
        },
        "description": "Relevance scores for each matched document"
      },
      "total_matches": {
        "type": "integer",
        "description": "Total number of documents with keyword matches"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Content Ranker",
    "tool_description": "Combines multiple relevance signals to produce final rankings for search results using configurable ranking algorithms.",
    "parameters": {
      "similarity_scores": {
        "type": "array",
        "required": true,
        "description": "Semantic similarity scores from embedding comparison",
        "items": {
          "type": "number"
        },
        "minItems": 1,
        "maxItems": 1000
      },
      "keyword_scores": {
        "type": "array",
        "required": true,
        "description": "Keyword matching scores",
        "items": {
          "type": "number"
        },
        "minItems": 1,
        "maxItems": 1000
      },
      "content_ids": {
        "type": "array",
        "required": true,
        "description": "Identifiers for content items being ranked",
        "items": {
          "type": "string"
        },
        "minItems": 1,
        "maxItems": 1000
      },
      "ranking_algorithm": {
        "type": "string",
        "required": false,
        "default": "weighted_combination",
        "description": "Algorithm for combining scores: weighted_combination, multiplicative, or rank_fusion"
      },
      "semantic_weight": {
        "type": "number",
        "required": false,
        "default": 0.6,
        "description": "Weight for semantic similarity scores (0-1)"
      },
      "keyword_weight": {
        "type": "number",
        "required": false,
        "default": 0.4,
        "description": "Weight for keyword matching scores (0-1)"
      },
      "freshness_boost": {
        "type": "boolean",
        "required": false,
        "default": false,
        "description": "Whether to boost recently updated content"
      },
      "max_results": {
        "type": "integer",
        "required": false,
        "default": 50,
        "description": "Maximum number of ranked results to return"
      }
    },
    "error_messages": [
      "Score array length mismatch error: Similarity scores, keyword scores, and content IDs must have the same length.",
      "Invalid ranking algorithm error: Algorithm must be one of: weighted_combination, multiplicative, rank_fusion.",
      "Weight values invalid error: Semantic weight and keyword weight must sum to 1.0 and be between 0 and 1.",
      "Empty input arrays error: All input arrays must contain at least one element.",
      "Max results out of range error: Max results must be between 1 and 1000."
    ],
    "usage": "Provide arrays of similarity scores, keyword scores, and content IDs of equal length. Configure ranking algorithm and score weights. Optionally enable freshness boosting and set maximum results limit.",
    "output_details": {
      "ranked_content_ids": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Content IDs ordered by final ranking score"
      },
      "final_scores": {
        "type": "array",
        "items": {
          "type": "number"
        },
        "description": "Final combined ranking scores"
      },
      "ranking_method_used": {
        "type": "string",
        "description": "The ranking algorithm that was applied"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Result Aggregator",
    "tool_description": "Combines and deduplicates results from multiple search operations to create unified result sets with merged relevance scores.",
    "parameters": {
      "result_sets": {
        "type": "array",
        "required": true,
        "description": "Multiple result sets to be aggregated",
        "items": {
          "type": "array"
        },
        "minItems": 2,
        "maxItems": 10
      },
      "score_arrays": {
        "type": "array",
        "required": true,
        "description": "Corresponding score arrays for each result set",
        "items": {
          "type": "array"
        },
        "minItems": 2,
        "maxItems": 10
      },
      "aggregation_method": {
        "type": "string",
        "required": false,
        "default": "score_fusion",
        "description": "Method for combining results: score_fusion, rank_aggregation, or weighted_merge"
      },
      "remove_duplicates": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Whether to remove duplicate content from results"
      },
      "diversity_factor": {
        "type": "number",
        "required": false,
        "default": 0.3,
        "description": "Factor for promoting result diversity (0-1)"
      }
    },
    "error_messages": [
      "Mismatched input arrays error: Result sets and score arrays must have the same length.",
      "Insufficient result sets error: At least 2 result sets must be provided for aggregation.",
      "Invalid aggregation method error: Method must be one of: score_fusion, rank_aggregation, weighted_merge.",
      "Diversity factor out of range error: Diversity factor must be between 0 and 1.",
      "Empty result sets error: Result sets cannot be empty."
    ],
    "usage": "Provide multiple result sets with their corresponding score arrays. Choose aggregation method and configure duplicate removal and diversity promotion. Returns unified, ranked results.",
    "output_details": {
      "aggregated_results": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Unified and deduplicated result set"
      },
      "combined_scores": {
        "type": "array",
        "items": {
          "type": "number"
        },
        "description": "Aggregated relevance scores for unified results"
      },
      "source_counts": {
        "type": "array",
        "items": {
          "type": "integer"
        },
        "description": "Number of source result sets that contributed each item"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Context Analyzer",
    "tool_description": "Analyzes user context and query patterns to provide contextual insights for improving search relevance and personalization.",
    "parameters": {
      "query_text": {
        "type": "string",
        "required": true,
        "description": "Current search query text"
      },
      "user_id": {
        "type": "string",
        "required": false,
        "default": null,
        "description": "User identifier for personalization"
      },
      "session_history": {
        "type": "array",
        "required": false,
        "default": null,
        "description": "Previous queries in the current session",
        "items": {
          "type": "string"
        },
        "maxItems": 20
      },
      "user_role": {
        "type": "string",
        "required": false,
        "default": "general",
        "description": "User role or department for context"
      },
      "time_context": {
        "type": "string",
        "required": false,
        "default": null,
        "description": "Temporal context (business_hours, after_hours, weekend)"
      }
    },
    "error_messages": [
      "Empty query error: Query text cannot be empty for context analysis.",
      "Invalid time context error: Time context must be one of: business_hours, after_hours, weekend, or null.",
      "Session history too long error: Session history cannot exceed 20 previous queries.",
      "Context analysis failed error: Unable to analyze context due to processing constraints."
    ],
    "usage": "Provide the current query text and optional context information including user ID, session history, user role, and time context. Returns contextual insights for search enhancement.",
    "output_details": {
      "intent_confidence": {
        "type": "number",
        "description": "Confidence score for detected user intent (0-1)"
      },
      "context_keywords": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Additional keywords derived from context analysis"
      },
      "urgency_level": {
        "type": "string",
        "description": "Detected urgency level (low, medium, high)"
      },
      "suggested_filters": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Recommended content filters based on context"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Content Filterer",
    "tool_description": "Applies various filters to search results based on content attributes, user permissions, and quality criteria.",
    "parameters": {
      "content_ids": {
        "type": "array",
        "required": true,
        "description": "List of content IDs to be filtered",
        "items": {
          "type": "string"
        },
        "minItems": 1,
        "maxItems": 1000
      },
      "content_types": {
        "type": "array",
        "required": false,
        "default": null,
        "description": "Allowed content types",
        "items": {
          "type": "string"
        },
        "maxItems": 20
      },
      "user_permissions": {
        "type": "array",
        "required": false,
        "default": null,
        "description": "User permission levels",
        "items": {
          "type": "string"
        },
        "maxItems": 10
      },
      "date_range_start": {
        "type": "string",
        "required": false,
        "default": null,
        "description": "Start date for content filtering"
      },
      "date_range_end": {
        "type": "string",
        "required": false,
        "default": null,
        "description": "End date for content filtering"
      },
      "quality_threshold": {
        "type": "number",
        "required": false,
        "default": 0.0,
        "description": "Minimum quality score for content inclusion"
      },
      "language_filter": {
        "type": "string",
        "required": false,
        "default": "all",
        "description": "Language filter for content"
      },
      "exclude_archived": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Whether to exclude archived content"
      },
      "category_filters": {
        "type": "array",
        "required": false,
        "default": null,
        "description": "Content categories to include",
        "items": {
          "type": "string"
        },
        "maxItems": 15
      }
    },
    "error_messages": [
      "Empty content list error: At least one content ID must be provided.",
      "Invalid date range error: Start date must be earlier than end date, and dates must be in valid ISO 8601 format.",
      "Quality threshold out of range error: Quality threshold must be between 0 and 1.",
      "Invalid language filter error: Language filter must be 'all' or a valid ISO 639-1 code.",
      "Permission validation failed error: Unable to validate user permissions against content access rights."
    ],
    "usage": "Provide array of content IDs to be filtered. Apply various filter criteria including content types, user permissions, date ranges, quality thresholds, and category restrictions.",
    "output_details": {
      "filtered_content_ids": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Content IDs that passed all filter criteria"
      },
      "filter_summary": {
        "type": "string",
        "description": "Summary of applied filters and their effects"
      },
      "removed_count": {
        "type": "integer",
        "description": "Number of content items removed by filtering"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Snippet Generator",
    "tool_description": "Generates relevant text snippets and excerpts from knowledge base content that highlight query-relevant portions with context.",
    "parameters": {
      "content_ids": {
        "type": "array",
        "required": true,
        "description": "IDs of content items to generate snippets from",
        "items": {
          "type": "string"
        },
        "minItems": 1,
        "maxItems": 100
      },
      "query_terms": {
        "type": "array",
        "required": true,
        "description": "Search terms to highlight in snippets",
        "items": {
          "type": "string"
        },
        "minItems": 1,
        "maxItems": 50
      },
      "snippet_length": {
        "type": "integer",
        "required": false,
        "default": 200,
        "description": "Maximum length of generated snippets in characters"
      },
      "highlight_matches": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Whether to highlight matching terms in snippets"
      }
    },
    "error_messages": [
      "Content not found error: One or more specified content IDs could not be found.",
      "Empty query terms error: At least one query term must be provided for snippet generation.",
      "Snippet length out of range error: Snippet length must be between 50 and 1000 characters.",
      "Content access denied error
