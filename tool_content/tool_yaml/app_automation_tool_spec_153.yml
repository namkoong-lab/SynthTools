field_name: app_automation
subfield: mobile_app_testing
task: Functional testing automation including UI interaction, navigation flow validation, and feature verification
tool_description: |-
  **STEP 1 — Rate task difficulty**

  This task is **hard**. It involves complex coordination between UI element detection, interaction simulation, state management, and validation across multiple test scenarios. The task requires handling dynamic mobile interfaces, managing test dependencies, validating complex navigation flows, and coordinating multiple testing components with high accuracy requirements where errors can invalidate entire test suites.

  **STEP 2 — Set a tool budget**

  Given the hard difficulty rating, I'm targeting **17 tools** within the 15-20 range. This allows for comprehensive coverage of UI interaction, navigation validation, feature verification, test orchestration, and reporting components.

  **STEP 3 — Tool dependencies and affordances**

  Tools consume: app package info, UI element locators, test scenarios, navigation paths, device configurations, test data, validation criteria, screenshots, logs, and test results. Tools produce: element locations, interaction results, screenshots, test reports, validation outcomes, navigation maps, performance metrics, device states, test artifacts, and execution summaries.

  **STEP 4 — Multi-tool plans**

  **Simple plans:**
  1. Element Locator → UI Interactor → Screenshot Capturer: Basic single-screen interaction testing
  2. App Launcher → Navigation Validator → Test Reporter: Simple navigation flow verification

  **Medium plans:**
  1. Device Configurator → App Launcher → Element Locator → UI Interactor → Assertion Validator → Test Reporter: Complete single-feature test
  2. Test Data Generator → Form Filler → Navigation Validator → Screenshot Capturer → Test Artifact Manager: Form submission workflow testing

  **Complex plans:**
  1. Device Configurator → App Launcher → Test Scenario Runner → Element Locator → UI Interactor → Form Filler → Navigation Validator → Performance Monitor → Log Analyzer → Assertion Validator → Screenshot Capturer → Test Reporter → Test Artifact Manager: Full end-to-end feature testing
  2. Multi-Device Coordinator → Device Configurator → App Launcher → Test Scenario Runner → Element Locator → UI Interactor → Navigation Validator → Performance Monitor → Error Handler → Test Reporter: Multi-device compatibility testing

  **STEP 5 — Tools**

  ```json
  {
    "tool_name": "Element Locator",
    "tool_description": "Locates UI elements on mobile app screens using various locator strategies and returns element coordinates and properties.",
    "parameters": {
      "locator_strategy": {
        "type": "string",
        "required": true,
        "description": "Strategy to locate element: id, xpath, class_name, accessibility_id, text, coordinates"
      },
      "locator_value": {
        "type": "string",
        "required": true,
        "description": "Value corresponding to the locator strategy"
      },
      "timeout_seconds": {
        "type": "integer",
        "required": false,
        "default": 10,
        "description": "Maximum time to wait for element to appear"
      }
    },
    "error_messages": [
      "Element not found: The specified element could not be located within the timeout period. Verify the locator strategy and value are correct.",
      "Invalid locator strategy: Use one of [id, xpath, class_name, accessibility_id, text, coordinates].",
      "Timeout exceeded: Element search timed out. Increase timeout_seconds or verify the element exists on current screen."
    ],
    "usage": "Provide locator_strategy and locator_value to find UI elements. Optionally set timeout_seconds for custom wait times. Returns element properties and coordinates if found.",
    "output_details": {
      "element_found": {
        "type": "boolean",
        "description": "Whether the element was successfully located"
      },
      "x_coordinate": {
        "type": "number",
        "description": "X coordinate of element center"
      },
      "y_coordinate": {
        "type": "number",
        "description": "Y coordinate of element center"
      },
      "element_text": {
        "type": "string",
        "description": "Text content of the element"
      },
      "element_enabled": {
        "type": "boolean",
        "description": "Whether the element is enabled for interaction"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "UI Interactor",
    "tool_description": "Performs UI interactions like tap, swipe, scroll, and long press on mobile app elements using coordinates or element properties.",
    "parameters": {
      "interaction_type": {
        "type": "string",
        "required": true,
        "description": "Type of interaction: tap, double_tap, long_press, swipe, scroll, pinch"
      },
      "x_coordinate": {
        "type": "number",
        "required": true,
        "description": "X coordinate for interaction"
      },
      "y_coordinate": {
        "type": "number",
        "required": true,
        "description": "Y coordinate for interaction"
      },
      "swipe_end_x": {
        "type": "number",
        "required": false,
        "default": null,
        "description": "End X coordinate for swipe actions"
      },
      "swipe_end_y": {
        "type": "number",
        "required": false,
        "default": null,
        "description": "End Y coordinate for swipe actions"
      },
      "duration_ms": {
        "type": "integer",
        "required": false,
        "default": 1000,
        "description": "Duration of interaction in milliseconds"
      }
    },
    "error_messages": [
      "Invalid interaction type: Use one of [tap, double_tap, long_press, swipe, scroll, pinch].",
      "Invalid coordinates: Coordinates must be positive numbers within screen bounds.",
      "Missing swipe coordinates: swipe_end_x and swipe_end_y are required for swipe interactions.",
      "Interaction failed: The interaction could not be completed. Ensure element is interactable and coordinates are correct."
    ],
    "usage": "Specify interaction_type and coordinates (x_coordinate, y_coordinate). For swipe actions, also provide swipe_end_x and swipe_end_y. Optionally set duration_ms for custom interaction timing.",
    "output_details": {
      "interaction_success": {
        "type": "boolean",
        "description": "Whether the interaction was successfully executed"
      },
      "execution_time_ms": {
        "type": "integer",
        "description": "Time taken to execute the interaction in milliseconds"
      },
      "error_details": {
        "type": "string",
        "description": "Error details if interaction failed"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Navigation Validator",
    "tool_description": "Validates navigation flows by tracking screen transitions and verifying expected navigation paths are followed correctly.",
    "parameters": {
      "expected_screens": {
        "type": "array",
        "required": true,
        "items": {
          "type": "string"
        },
        "description": "Ordered list of expected screen identifiers in navigation flow"
      },
      "current_screen": {
        "type": "string",
        "required": true,
        "description": "Current screen identifier to validate"
      },
      "navigation_timeout": {
        "type": "integer",
        "required": false,
        "default": 15,
        "description": "Maximum time to wait for navigation completion in seconds"
      },
      "allow_intermediate_screens": {
        "type": "boolean",
        "required": false,
        "default": false,
        "description": "Whether to allow intermediate screens not in expected_screens list"
      }
    },
    "error_messages": [
      "Navigation path mismatch: Current screen does not match expected navigation flow. Verify navigation logic and expected_screens order.",
      "Navigation timeout: Screen transition took longer than expected. Increase navigation_timeout or check for blocking elements.",
      "Empty navigation path: expected_screens array cannot be empty. Provide at least one expected screen.",
      "Invalid screen identifier: Ensure current_screen and all items in expected_screens are valid screen identifiers."
    ],
    "usage": "Provide expected_screens array and current_screen to validate navigation flow. Set allow_intermediate_screens to true if intermediate screens are acceptable. Optionally adjust navigation_timeout for slower transitions.",
    "output_details": {
      "navigation_valid": {
        "type": "boolean",
        "description": "Whether the navigation flow matches expectations"
      },
      "current_step": {
        "type": "integer",
        "description": "Current position in the expected navigation flow"
      },
      "total_steps": {
        "type": "integer",
        "description": "Total number of steps in expected navigation flow"
      },
      "validation_message": {
        "type": "string",
        "description": "Detailed validation result message"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Screenshot Capturer",
    "tool_description": "Captures screenshots of the mobile app screen for visual verification and test documentation purposes.",
    "parameters": {
      "screenshot_name": {
        "type": "string",
        "required": true,
        "description": "Name for the screenshot file"
      },
      "include_timestamp": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Whether to include timestamp in screenshot filename"
      },
      "quality": {
        "type": "integer",
        "required": false,
        "default": 90,
        "description": "Screenshot quality percentage (50-100)"
      }
    },
    "error_messages": [
      "Screenshot capture failed: Unable to capture screenshot. Ensure device is connected and app is running.",
      "Invalid quality setting: Quality must be between 50 and 100.",
      "Invalid filename: screenshot_name cannot be empty and must contain only valid filename characters."
    ],
    "usage": "Provide screenshot_name to capture current screen. Optionally set include_timestamp to false to exclude timestamp from filename and adjust quality for file size optimization.",
    "output_details": {
      "screenshot_path": {
        "type": "string",
        "description": "File path where screenshot was saved"
      },
      "file_size_kb": {
        "type": "number",
        "description": "Size of screenshot file in kilobytes"
      },
      "capture_timestamp": {
        "type": "string",
        "description": "Timestamp when screenshot was captured"
      },
      "capture_success": {
        "type": "boolean",
        "description": "Whether screenshot was successfully captured"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "App Launcher",
    "tool_description": "Launches mobile applications and manages app lifecycle states including start, stop, restart, and background operations.",
    "parameters": {
      "package_name": {
        "type": "string",
        "required": true,
        "description": "Application package identifier"
      },
      "activity_name": {
        "type": "string",
        "required": false,
        "default": null,
        "description": "Specific activity to launch within the app"
      },
      "launch_action": {
        "type": "string",
        "required": false,
        "default": "start",
        "description": "Launch action: start, restart, stop, background, foreground"
      },
      "wait_for_launch": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Whether to wait for app to fully launch before returning"
      },
      "launch_timeout": {
        "type": "integer",
        "required": false,
        "default": 30,
        "description": "Maximum time to wait for app launch in seconds"
      }
    },
    "error_messages": [
      "App not found: The specified package_name could not be found on the device. Verify the app is installed.",
      "Launch failed: Application failed to launch. Check if app is compatible with current device.",
      "Invalid launch action: Use one of [start, restart, stop, background, foreground].",
      "Launch timeout: App took longer than launch_timeout to start. Increase timeout or check app performance."
    ],
    "usage": "Provide package_name to launch the app. Optionally specify activity_name for specific screens, set launch_action for different lifecycle operations, and configure wait_for_launch and launch_timeout as needed.",
    "output_details": {
      "launch_success": {
        "type": "boolean",
        "description": "Whether the app launch was successful"
      },
      "launch_time_ms": {
        "type": "integer",
        "description": "Time taken to launch app in milliseconds"
      },
      "app_state": {
        "type": "string",
        "description": "Current state of the application"
      },
      "pid": {
        "type": "integer",
        "description": "Process ID of the launched application"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Form Filler",
    "tool_description": "Automatically fills out forms by entering text into input fields, selecting dropdown options, and handling various form controls.",
    "parameters": {
      "form_data": {
        "type": "array",
        "required": true,
        "items": {
          "type": "string"
        },
        "description": "Array of field_identifier:value pairs to fill in the form"
      },
      "field_locator_strategy": {
        "type": "string",
        "required": false,
        "default": "id",
        "description": "Default strategy to locate form fields: id, xpath, accessibility_id, class_name"
      },
      "submit_form": {
        "type": "boolean",
        "required": false,
        "default": false,
        "description": "Whether to submit the form after filling"
      },
      "clear_before_input": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Whether to clear existing text before entering new text"
      },
      "validation_delay_ms": {
        "type": "integer",
        "required": false,
        "default": 500,
        "description": "Delay between field entries to allow for validation"
      }
    },
    "error_messages": [
      "Form data format error: form_data must contain field_identifier:value pairs separated by colons.",
      "Field not found: One or more form fields could not be located. Verify field identifiers and locator strategy.",
      "Input failed: Failed to enter data into form field. Ensure field is enabled and accepts text input.",
      "Invalid locator strategy: Use one of [id, xpath, accessibility_id, class_name]."
    ],
    "usage": "Provide form_data array with field_identifier:value pairs. Optionally set field_locator_strategy for field location method, submit_form to auto-submit, and other timing parameters.",
    "output_details": {
      "fields_filled": {
        "type": "integer",
        "description": "Number of form fields successfully filled"
      },
      "total_fields": {
        "type": "integer",
        "description": "Total number of fields attempted to fill"
      },
      "form_submitted": {
        "type": "boolean",
        "description": "Whether the form was successfully submitted"
      },
      "failed_fields": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of field identifiers that failed to fill"
      },
      "completion_time_ms": {
        "type": "integer",
        "description": "Total time taken to fill form in milliseconds"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Device Configurator",
    "tool_description": "Configures mobile device settings including orientation, network conditions, permissions, and system preferences for testing.",
    "parameters": {
      "device_id": {
        "type": "string",
        "required": true,
        "description": "Unique identifier of the target device"
      },
      "orientation": {
        "type": "string",
        "required": false,
        "default": null,
        "description": "Device orientation: portrait, landscape, auto"
      },
      "network_condition": {
        "type": "string",
        "required": false,
        "default": null,
        "description": "Network simulation: wifi, 4g, 3g, 2g, offline"
      },
      "location_enabled": {
        "type": "boolean",
        "required": false,
        "default": null,
        "description": "Whether to enable location services"
      },
      "airplane_mode": {
        "type": "boolean",
        "required": false,
        "default": null,
        "description": "Whether to enable airplane mode"
      },
      "permissions_to_grant": {
        "type": "array",
        "required": false,
        "default": null,
        "items": {
          "type": "string"
        },
        "description": "List of permissions to grant to the app"
      },
      "system_language": {
        "type": "string",
        "required": false,
        "default": null,
        "description": "System language code (e.g., en-US, es-ES)"
      },
      "timezone": {
        "type": "string",
        "required": false,
        "default": null,
        "description": "Timezone to set (e.g., America/New_York, Europe/London)"
      },
      "battery_level": {
        "type": "integer",
        "required": false,
        "default": null,
        "description": "Battery level percentage (0-100) for testing low battery scenarios"
      },
      "screen_brightness": {
        "type": "integer",
        "required": false,
        "default": null,
        "description": "Screen brightness percentage (0-100)"
      },
      "wifi_enabled": {
        "type": "boolean",
        "required": false,
        "default": null,
        "description": "Whether WiFi should be enabled"
      },
      "mobile_data_enabled": {
        "type": "boolean",
        "required": false,
        "default": null,
        "description": "Whether mobile data should be enabled"
      }
    },
    "error_messages": [
      "Device not found: The specified device_id could not be found or is not connected.",
      "Invalid orientation: Use one of [portrait, landscape, auto].",
      "Invalid network condition: Use one of [wifi, 4g, 3g, 2g, offline].",
      "Permission grant failed: One or more permissions could not be granted. Verify permission names are correct.",
      "Configuration failed: Device configuration could not be applied. Check device compatibility and settings.",
      "Invalid battery level: Battery level must be between 0 and 100.",
      "Invalid brightness level: Screen brightness must be between 0 and 100."
    ],
    "usage": "Provide device_id and optionally configure various device settings. Only specified parameters will be changed, others remain at current values. Useful for testing app behavior under different device conditions.",
    "output_details": {
      "configuration_success": {
        "type": "boolean",
        "description": "Whether all requested configurations were successfully applied"
      },
      "applied_settings": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of settings that were successfully applied"
      },
      "failed_settings": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of settings that failed to apply"
      },
      "device_state": {
        "type": "string",
        "description": "Current overall state of the device after configuration"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Assertion Validator",
    "tool_description": "Validates test assertions by comparing expected values with actual results from UI elements, text content, and app states.",
    "parameters": {
      "assertion_type": {
        "type": "string",
        "required": true,
        "description": "Type of assertion: equals, contains, not_equals, not_contains, exists, not_exists, greater_than, less_than"
      },
      "expected_value": {
        "type": "string",
        "required": true,
        "description": "Expected value for the assertion"
      },
      "actual_value": {
        "type": "string",
        "required": true,
        "description": "Actual value obtained from the app"
      },
      "case_sensitive": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Whether string comparisons should be case sensitive"
      }
    },
    "error_messages": [
      "Invalid assertion type: Use one of [equals, contains, not_equals, not_contains, exists, not_exists, greater_than, less_than].",
      "Assertion failed: The assertion did not pass. Check expected_value and actual_value for correctness.",
      "Value conversion error: Could not convert values for numeric comparison. Ensure values are properly formatted for the assertion type."
    ],
    "usage": "Provide assertion_type, expected_value, and actual_value to validate test conditions. Set case_sensitive to false for case-insensitive string comparisons. Returns detailed validation results.",
    "output_details": {
      "assertion_passed": {
        "type": "boolean",
        "description": "Whether the assertion passed successfully"
      },
      "comparison_result": {
        "type": "string",
        "description": "Detailed result of the comparison"
      },
      "expected": {
        "type": "string",
        "description": "The expected value used in assertion"
      },
      "actual": {
        "type": "string",
        "description": "The actual value used in assertion"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Test Scenario Runner",
    "tool_description": "Orchestrates execution of complete test scenarios by coordinating multiple test steps and managing test flow control.",
    "parameters": {
      "scenario_name": {
        "type": "string",
        "required": true,
        "description": "Name of the test scenario to execute"
      },
      "test_steps": {
        "type": "array",
        "required": true,
        "items": {
          "type": "string"
        },
        "description": "Ordered list of test step identifiers to execute"
      },
      "continue_on_failure": {
        "type": "boolean",
        "required": false,
        "default": false,
        "description": "Whether to continue execution when a step fails"
      },
      "step_delay_ms": {
        "type": "integer",
        "required": false,
        "default": 1000,
        "description": "Delay between test steps in milliseconds"
      },
      "max_execution_time": {
        "type": "integer",
        "required": false,
        "default": 300,
        "description": "Maximum scenario execution time in seconds"
      },
      "cleanup_on_failure": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Whether to run cleanup steps if scenario fails"
      }
    },
    "error_messages": [
      "Empty test steps: test_steps array cannot be empty. Provide at least one test step.",
      "Scenario execution failed: One or more test steps failed and continue_on_failure is false.",
      "Execution timeout: Scenario exceeded max_execution_time. Increase timeout or optimize test steps.",
      "Invalid step identifier: One or more test step identifiers are not recognized."
    ],
    "usage": "Provide scenario_name and test_steps array to execute a complete test scenario. Configure continue_on_failure, step_delay_ms, and other execution parameters as needed for your testing requirements.",
    "output_details": {
      "scenario_status": {
        "type": "string",
        "description": "Overall scenario execution status: passed, failed, timeout"
      },
      "steps_executed": {
        "type": "integer",
        "description": "Number of test steps successfully executed"
      },
      "total_steps": {
        "type": "integer",
        "description": "Total number of test steps in scenario"
      },
      "execution_time_ms": {
        "type": "integer",
        "description": "Total scenario execution time in milliseconds"
      },
      "failed_steps": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of test step identifiers that failed"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Performance Monitor",
    "tool_description": "Monitors app performance metrics including CPU usage, memory consumption, network activity, and response times during test execution.",
    "parameters": {
      "package_name": {
        "type": "string",
        "required": true,
        "description": "Package name of the app to monitor"
      },
      "monitoring_duration": {
        "type": "integer",
        "required": false,
        "default": 60,
        "description": "Duration to monitor performance in seconds"
      },
      "sampling_interval": {
        "type": "integer",
        "required": false,
        "default": 5,
        "description": "Interval between performance samples in seconds"
      },
      "include_cpu": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Whether to monitor CPU usage"
      },
      "include_memory": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Whether to monitor memory usage"
      },
      "include_network": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Whether to monitor network activity"
      },
      "include_battery": {
        "type": "boolean",
        "required": false,
        "default": false,
        "description": "Whether to monitor battery consumption"
      }
    },
    "error_messages": [
      "App not running: The specified app is not currently running. Launch the app before monitoring.",
      "Invalid monitoring duration: monitoring_duration must be greater than 0.",
      "Invalid sampling interval: sampling_interval must be greater than 0 and less than monitoring_duration.",
      "Monitoring failed: Could not collect performance data. Ensure app is accessible and device permissions are granted."
    ],
    "usage": "Provide package_name of the app to monitor. Configure monitoring_duration and sampling_interval for data collection timing. Enable specific metrics using include_* parameters based on testing needs.",
    "output_details": {
      "monitoring_success": {
        "type": "boolean",
        "description": "Whether performance monitoring completed successfully"
      },
      "avg_cpu_percent": {
        "type": "number",
        "description": "Average CPU usage percentage during monitoring"
      },
      "max_memory_mb": {
        "type": "number",
        "description": "Maximum memory usage in megabytes"
      },
      "total_network_kb": {
        "type": "number",
        "description": "Total network data transferred in kilobytes"
      },
      "battery_drain_percent": {
        "type": "number",
        "description": "Battery percentage consumed during monitoring"
      },
      "samples_collected": {
        "type": "integer",
        "description": "Number of performance samples successfully collected"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Log Analyzer",
    "tool_description": "Analyzes app logs and system logs to identify errors, warnings, crashes, and performance issues during test execution.",
    "parameters": {
      "log_source": {
        "type": "string",
        "required": true,
        "description": "Source of logs to analyze: app, system, crash, all"
      },
      "package_name": {
        "type": "string",
        "required": false,
        "default": null,
        "description": "Package name to filter logs (required for app logs)"
      },
      "log_level": {
        "type": "string",
        "required": false,
        "default": "all",
        "description": "Minimum log level to analyze: verbose, debug, info, warn, error, fatal, all"
      },
      "time_range_start": {
        "type": "string",
        "required": false,
        "default": null,
        "description": "Start time for log analysis in ISO 8601 format"
      },
      "time_range_end": {
        "type": "string",
        "required": false,
        "default": null,
        "description": "End time for log analysis in ISO 8601 format"
      },
      "search_patterns": {
        "type": "array",
        "required": false,
        "default": null,
        "items": {
          "type": "string"
        },
        "description": "Specific patterns or keywords to search for in logs"
      }
    },
    "error_messages": [
      "Invalid log source: Use one of [app, system, crash, all].",
      "Invalid log level: Use one of [verbose, debug, info, warn, error, fatal, all].",
      "Package name required: package_name is required when log_source is 'app'.",
      "Invalid time range: Ensure time_range_start is before time_range_end and both use ISO 8601 format.",
      "Log access failed: Could not access logs. Ensure proper permissions and device connectivity."
    ],
    "usage": "Specify log_source to analyze. For app logs, provide package_name. Optionally filter by log_level, time range, and search_patterns. Returns categorized log analysis with error counts and critical issues.",
    "output_details": {
      "analysis_success": {
        "type": "boolean",
        "description": "Whether log analysis completed successfully"
      },
      "total_log_entries": {
        "type": "integer",
        "description": "Total number of log entries analyzed"
      },
      "error_count": {
        "type": "integer",
        "description": "Number of error-level log entries found"
      },
      "warning_count": {
        "type": "integer",
        "description": "Number of warning-level log entries found"
      },
      "crash_detected": {
        "type": "boolean",
        "description": "Whether any crash indicators were found in logs"
      },
      "critical_issues": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of critical issues identified in logs"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Test Data Generator",
    "tool_description": "Generates test data including random strings, numbers, email addresses, and other formatted data for form filling and input testing.",
    "parameters": {
      "data_type": {
        "type": "string",
        "required": true,
        "description": "Type of data to generate: string, number, email, phone, date, name, address, credit_card, password"
      },
      "count": {
        "type": "integer",
        "required": false,
        "default": 1,
        "description": "Number of data items to generate"
      },
      "string_length": {
        "type": "integer",
        "required": false,
        "default": 10,
        "description": "Length of generated strings"
      },
      "number_min": {
        "type": "number",
        "required": false,
        "default": 0,
        "description": "Minimum value for generated numbers"
      },
      "number_max": {
        "type": "number",
        "required": false,
        "default": 100,
        "description": "Maximum value for generated numbers"
      },
      "locale
