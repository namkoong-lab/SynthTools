field_name: databases
subfield: Database Schema Design and Modeling
task: Analyze existing database structures and generate schema documentation
tool_description: |-
  **STEP 1 — Rate task difficulty**

  This task has medium difficulty. It requires understanding complex database structures, relationships, and constraints across multiple tables, while generating comprehensive documentation that accurately represents the schema's design and dependencies.

  **STEP 2 — Set a tool budget**

  Based on medium complexity, I'll target 12 tools to cover database connection, structure analysis, relationship mapping, constraint detection, documentation generation, and validation workflows.

  **STEP 3 — List all tool names with dependencies and affordances**

  1. **Database Connection Validator** - Consumes: connection parameters → Produces: connection status
  2. **Table Structure Analyzer** - Consumes: database connection → Produces: table metadata
  3. **Column Metadata Extractor** - Consumes: table names → Produces: column details and types
  4. **Primary Key Detector** - Consumes: table metadata → Produces: primary key information
  5. **Foreign Key Relationship Mapper** - Consumes: table structures → Produces: relationship mappings
  6. **Index Analyzer** - Consumes: table metadata → Produces: index configurations
  7. **Constraint Validator** - Consumes: table structures → Produces: constraint definitions
  8. **Schema Dependency Graph Generator** - Consumes: relationships and constraints → Produces: dependency graphs
  9. **Documentation Template Generator** - Consumes: schema metadata → Produces: structured documentation
  10. **Schema Comparison Tool** - Consumes: multiple schemas → Produces: difference reports
  11. **Data Type Compatibility Checker** - Consumes: column metadata → Produces: compatibility analysis
  12. **Schema Export Formatter** - Consumes: documentation data → Produces: formatted exports

  **STEP 4 — Multi-tool plans**

  **Simple Plans:**
  - Basic Schema Overview: Database Connection Validator → Table Structure Analyzer → Documentation Template Generator
  - Column Analysis: Column Metadata Extractor → Data Type Compatibility Checker → Schema Export Formatter

  **Medium Plans:**
  - Relationship Mapping: Table Structure Analyzer → Foreign Key Relationship Mapper → Schema Dependency Graph Generator → Documentation Template Generator
  - Constraint Analysis: Column Metadata Extractor → Primary Key Detector → Constraint Validator → Documentation Template Generator

  **Complex Plans:**
  - Complete Schema Analysis: Database Connection Validator → Table Structure Analyzer → Column Metadata Extractor → Primary Key Detector → Foreign Key Relationship Mapper → Index Analyzer → Constraint Validator → Schema Dependency Graph Generator → Documentation Template Generator → Schema Export Formatter
  - Schema Comparison Workflow: Multiple instances of (Database Connection Validator → Table Structure Analyzer → Column Metadata Extractor) → Schema Comparison Tool → Documentation Template Generator → Schema Export Formatter

  **STEP 5 — Produce tools**

  ```json
  {
    "tool_name": "Database Connection Validator",
    "tool_description": "Validates database connection parameters and tests connectivity to ensure the target database is accessible for schema analysis.",
    "parameters": {
      "host": {
        "type": "string",
        "required": true,
        "description": "Database server hostname or IP address"
      },
      "port": {
        "type": "integer",
        "required": true,
        "description": "Database server port number"
      },
      "database_name": {
        "type": "string",
        "required": true,
        "description": "Name of the target database"
      },
      "username": {
        "type": "string",
        "required": true,
        "description": "Database username for authentication"
      },
      "password": {
        "type": "string",
        "required": true,
        "description": "Database password for authentication"
      }
    },
    "error_messages": [
      "Connection timeout: Database server is unreachable. Verify host and port are correct and server is running.",
      "Authentication failed: Invalid username or password. Check credentials and user permissions.",
      "Database not found: Specified database does not exist. Verify database name spelling and existence.",
      "Invalid port: Port number must be between 1 and 65535.",
      "Network error: Unable to establish network connection. Check firewall settings and network connectivity."
    ],
    "usage": "Provide database connection parameters including host, port, database_name, username, and password. The tool will attempt to connect and return connection status.",
    "output_details": {
      "connection_status": {
        "type": "string",
        "description": "Status of connection attempt: 'success' or 'failed'"
      },
      "database_type": {
        "type": "string",
        "description": "Detected database management system type"
      },
      "version": {
        "type": "string",
        "description": "Database server version information"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Table Structure Analyzer",
    "tool_description": "Analyzes database structure to identify all tables, views, and their basic properties for comprehensive schema documentation.",
    "parameters": {
      "host": {
        "type": "string",
        "required": true,
        "description": "Database server hostname or IP address"
      },
      "port": {
        "type": "integer",
        "required": true,
        "description": "Database server port number"
      },
      "database_name": {
        "type": "string",
        "required": true,
        "description": "Name of the target database"
      },
      "username": {
        "type": "string",
        "required": true,
        "description": "Database username for authentication"
      },
      "password": {
        "type": "string",
        "required": true,
        "description": "Database password for authentication"
      },
      "include_views": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Whether to include database views in analysis"
      },
      "schema_filter": {
        "type": "array",
        "required": false,
        "default": "None",
        "items": {"type": "string"},
        "description": "List of specific schemas to analyze (empty means all schemas)"
      }
    },
    "error_messages": [
      "Database connection failed: Unable to connect to database. Verify connection parameters.",
      "Insufficient privileges: User lacks permission to read table metadata. Grant SELECT privileges on information schema.",
      "Invalid schema filter: One or more specified schemas do not exist in the database.",
      "Query execution error: Failed to retrieve table information. Check database accessibility and permissions."
    ],
    "usage": "Provide database connection details and optionally specify whether to include views and which schemas to analyze. Returns comprehensive table structure information.",
    "output_details": {
      "table_count": {
        "type": "integer",
        "description": "Total number of tables found"
      },
      "view_count": {
        "type": "integer",
        "description": "Total number of views found"
      },
      "table_names": {
        "type": "array",
        "items": {"type": "string"},
        "description": "List of all table names in the database"
      },
      "view_names": {
        "type": "array",
        "items": {"type": "string"},
        "description": "List of all view names in the database"
      },
      "schemas": {
        "type": "array",
        "items": {"type": "string"},
        "description": "List of schema names containing the analyzed objects"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Column Metadata Extractor",
    "tool_description": "Extracts detailed column information including data types, nullability, defaults, and other metadata for specified tables.",
    "parameters": {
      "host": {
        "type": "string",
        "required": true,
        "description": "Database server hostname or IP address"
      },
      "port": {
        "type": "integer",
        "required": true,
        "description": "Database server port number"
      },
      "database_name": {
        "type": "string",
        "required": true,
        "description": "Name of the target database"
      },
      "username": {
        "type": "string",
        "required": true,
        "description": "Database username for authentication"
      },
      "password": {
        "type": "string",
        "required": true,
        "description": "Database password for authentication"
      },
      "table_names": {
        "type": "array",
        "required": true,
        "items": {"type": "string"},
        "description": "List of table names to analyze for column metadata"
      },
      "include_computed": {
        "type": "boolean",
        "required": false,
        "default": false,
        "description": "Whether to include computed columns in the analysis"
      }
    },
    "error_messages": [
      "Database connection failed: Unable to connect to database. Verify connection parameters.",
      "Table not found: One or more specified tables do not exist in the database.",
      "Access denied: Insufficient permissions to read column metadata from specified tables.",
      "Invalid table name format: Table names must be non-empty strings.",
      "Empty table list: At least one table name must be provided."
    ],
    "usage": "Provide database connection details and a list of table names to analyze. Optionally include computed columns. Returns detailed column metadata for all specified tables.",
    "output_details": {
      "tables_analyzed": {
        "type": "integer",
        "description": "Number of tables successfully analyzed"
      },
      "total_columns": {
        "type": "integer",
        "description": "Total number of columns across all analyzed tables"
      },
      "column_details": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Detailed information for each column including table, name, type, nullability, and defaults"
      },
      "data_types_found": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Unique list of data types discovered across all columns"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Primary Key Detector",
    "tool_description": "Identifies and analyzes primary key constraints across database tables, including composite keys and their properties.",
    "parameters": {
      "host": {
        "type": "string",
        "required": true,
        "description": "Database server hostname or IP address"
      },
      "port": {
        "type": "integer",
        "required": true,
        "description": "Database server port number"
      },
      "database_name": {
        "type": "string",
        "required": true,
        "description": "Name of the target database"
      },
      "username": {
        "type": "string",
        "required": true,
        "description": "Database username for authentication"
      },
      "password": {
        "type": "string",
        "required": true,
        "description": "Database password for authentication"
      }
    },
    "error_messages": [
      "Database connection failed: Unable to connect to database. Verify connection parameters.",
      "Insufficient privileges: User lacks permission to read constraint information. Grant appropriate system privileges.",
      "Metadata query failed: Unable to retrieve primary key information from system catalog.",
      "Connection timeout: Database query timed out. Try again or check database performance."
    ],
    "usage": "Provide database connection details to scan all tables and identify primary key constraints. Returns comprehensive primary key information including composite keys.",
    "output_details": {
      "tables_with_pk": {
        "type": "integer",
        "description": "Number of tables that have primary keys"
      },
      "tables_without_pk": {
        "type": "integer",
        "description": "Number of tables that lack primary keys"
      },
      "pk_details": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Details of primary keys including table name, constraint name, and column names"
      },
      "composite_keys": {
        "type": "array",
        "items": {"type": "string"},
        "description": "List of tables with composite primary keys"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Foreign Key Relationship Mapper",
    "tool_description": "Maps foreign key relationships between tables to understand data dependencies and referential integrity constraints.",
    "parameters": {
      "host": {
        "type": "string",
        "required": true,
        "description": "Database server hostname or IP address"
      },
      "port": {
        "type": "integer",
        "required": true,
        "description": "Database server port number"
      },
      "database_name": {
        "type": "string",
        "required": true,
        "description": "Name of the target database"
      },
      "username": {
        "type": "string",
        "required": true,
        "description": "Database username for authentication"
      },
      "password": {
        "type": "string",
        "required": true,
        "description": "Database password for authentication"
      },
      "include_cascade_info": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Whether to include CASCADE/RESTRICT information for foreign keys"
      }
    },
    "error_messages": [
      "Database connection failed: Unable to connect to database. Verify connection parameters.",
      "Permission denied: User lacks privileges to read foreign key constraint information.",
      "Constraint query failed: Unable to retrieve foreign key relationships from system tables.",
      "Invalid constraint data: Foreign key metadata is corrupted or inaccessible."
    ],
    "usage": "Provide database connection details to analyze all foreign key relationships. Optionally include cascade behavior information. Returns comprehensive relationship mapping.",
    "output_details": {
      "total_foreign_keys": {
        "type": "integer",
        "description": "Total number of foreign key constraints found"
      },
      "relationship_count": {
        "type": "integer",
        "description": "Number of unique table-to-table relationships"
      },
      "fk_relationships": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Detailed foreign key relationships including source, target, and column mappings"
      },
      "orphaned_tables": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Tables with no foreign key relationships (neither referencing nor referenced)"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Index Analyzer",
    "tool_description": "Analyzes database indexes including clustered, non-clustered, unique, and composite indexes to document performance optimization structures.",
    "parameters": {
      "host": {
        "type": "string",
        "required": true,
        "description": "Database server hostname or IP address"
      },
      "port": {
        "type": "integer",
        "required": true,
        "description": "Database server port number"
      },
      "database_name": {
        "type": "string",
        "required": true,
        "description": "Name of the target database"
      },
      "username": {
        "type": "string",
        "required": true,
        "description": "Database username for authentication"
      },
      "password": {
        "type": "string",
        "required": true,
        "description": "Database password for authentication"
      },
      "include_system_indexes": {
        "type": "boolean",
        "required": false,
        "default": false,
        "description": "Whether to include system-generated indexes in analysis"
      },
      "table_filter": {
        "type": "array",
        "required": false,
        "default": "None",
        "items": {"type": "string"},
        "description": "Specific tables to analyze (empty means all tables)"
      }
    },
    "error_messages": [
      "Database connection failed: Unable to connect to database. Verify connection parameters.",
      "Index metadata access denied: User lacks privileges to read index information from system catalog.",
      "Table filter error: One or more specified tables in filter do not exist.",
      "Index query timeout: Query to retrieve index information exceeded time limit.",
      "Malformed index data: System catalog contains corrupted index metadata."
    ],
    "usage": "Provide database connection details and optionally filter by specific tables. Choose whether to include system indexes. Returns comprehensive index analysis.",
    "output_details": {
      "total_indexes": {
        "type": "integer",
        "description": "Total number of indexes found"
      },
      "clustered_indexes": {
        "type": "integer",
        "description": "Number of clustered indexes"
      },
      "unique_indexes": {
        "type": "integer",
        "description": "Number of unique indexes"
      },
      "composite_indexes": {
        "type": "integer",
        "description": "Number of indexes spanning multiple columns"
      },
      "index_details": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Detailed index information including name, type, columns, and properties"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Constraint Validator",
    "tool_description": "Identifies and validates all database constraints including check constraints, unique constraints, and custom business rules.",
    "parameters": {
      "host": {
        "type": "string",
        "required": true,
        "description": "Database server hostname or IP address"
      },
      "port": {
        "type": "integer",
        "required": true,
        "description": "Database server port number"
      },
      "database_name": {
        "type": "string",
        "required": true,
        "description": "Name of the target database"
      },
      "username": {
        "type": "string",
        "required": true,
        "description": "Database username for authentication"
      },
      "password": {
        "type": "string",
        "required": true,
        "description": "Database password for authentication"
      },
      "constraint_types": {
        "type": "array",
        "required": false,
        "default": "None",
        "items": {"type": "string"},
        "description": "Specific constraint types to analyze: CHECK, UNIQUE, NOT NULL, DEFAULT"
      },
      "validate_data": {
        "type": "boolean",
        "required": false,
        "default": false,
        "description": "Whether to validate existing data against constraints"
      }
    },
    "error_messages": [
      "Database connection failed: Unable to connect to database. Verify connection parameters.",
      "Constraint access denied: User lacks privileges to read constraint definitions.",
      "Invalid constraint type: Specified constraint type is not supported. Use CHECK, UNIQUE, NOT NULL, or DEFAULT.",
      "Data validation failed: Existing data violates one or more constraints during validation check.",
      "Constraint definition error: Unable to parse constraint definition from system catalog."
    ],
    "usage": "Provide database connection details and optionally specify constraint types to analyze. Choose whether to validate existing data. Returns comprehensive constraint information.",
    "output_details": {
      "total_constraints": {
        "type": "integer",
        "description": "Total number of constraints found"
      },
      "constraint_types_found": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Types of constraints discovered in the database"
      },
      "constraint_details": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Detailed constraint information including name, type, table, and definition"
      },
      "validation_results": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Results of data validation against constraints (if validation was requested)"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Schema Dependency Graph Generator",
    "tool_description": "Creates a dependency graph showing relationships between database objects to visualize schema structure and identify circular dependencies.",
    "parameters": {
      "relationships": {
        "type": "array",
        "required": true,
        "items": {"type": "string"},
        "description": "Foreign key relationships in format 'source_table.column->target_table.column'"
      },
      "constraints": {
        "type": "array",
        "required": true,
        "items": {"type": "string"},
        "description": "Constraint definitions affecting table dependencies"
      },
      "table_names": {
        "type": "array",
        "required": true,
        "items": {"type": "string"},
        "description": "All table names to include in the dependency graph"
      },
      "include_views": {
        "type": "boolean",
        "required": false,
        "default": false,
        "description": "Whether to include views in the dependency analysis"
      },
      "detect_cycles": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Whether to detect and report circular dependencies"
      }
    },
    "error_messages": [
      "Invalid relationship format: Relationships must be in format 'source_table.column->target_table.column'.",
      "Missing table reference: Relationship references table not found in table_names list.",
      "Empty input data: At least one table name must be provided to generate dependency graph.",
      "Malformed constraint definition: Unable to parse constraint information for dependency analysis.",
      "Graph generation failed: Unable to construct dependency graph from provided data."
    ],
    "usage": "Provide foreign key relationships, constraints, and table names. Optionally include views and enable cycle detection. Returns dependency graph and analysis.",
    "output_details": {
      "dependency_levels": {
        "type": "integer",
        "description": "Number of dependency levels in the graph"
      },
      "circular_dependencies": {
        "type": "array",
        "items": {"type": "string"},
        "description": "List of circular dependency chains found"
      },
      "root_tables": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Tables with no dependencies (at the root of the graph)"
      },
      "leaf_tables": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Tables that no other tables depend on"
      },
      "dependency_graph": {
        "type": "string",
        "description": "Text representation of the dependency graph structure"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Documentation Template Generator",
    "tool_description": "Generates structured documentation templates from database schema metadata in various formats suitable for technical documentation.",
    "parameters": {
      "table_metadata": {
        "type": "array",
        "required": true,
        "items": {"type": "string"},
        "description": "Table structure and metadata information"
      },
      "column_metadata": {
        "type": "array",
        "required": true,
        "items": {"type": "string"},
        "description": "Column details including types, constraints, and properties"
      },
      "relationships": {
        "type": "array",
        "required": true,
        "items": {"type": "string"},
        "description": "Foreign key relationships between tables"
      },
      "constraints": {
        "type": "array",
        "required": false,
        "default": "None",
        "items": {"type": "string"},
        "description": "Database constraints and business rules"
      },
      "indexes": {
        "type": "array",
        "required": false,
        "default": "None",
        "items": {"type": "string"},
        "description": "Index information for performance documentation"
      },
      "template_style": {
        "type": "string",
        "required": false,
        "default": "comprehensive",
        "description": "Documentation style: minimal, standard, comprehensive, or technical"
      },
      "include_examples": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Whether to include usage examples in documentation"
      },
      "include_diagrams": {
        "type": "boolean",
        "required": false,
        "default": false,
        "description": "Whether to include textual diagram representations"
      }
    },
    "error_messages": [
      "Missing required metadata: table_metadata, column_metadata, and relationships are required.",
      "Invalid template style: Use one of [minimal, standard, comprehensive, technical].",
      "Metadata format error: Unable to parse provided metadata. Ensure proper formatting.",
      "Inconsistent data: Column metadata references tables not found in table metadata.",
      "Relationship validation failed: Foreign key relationships reference non-existent tables or columns."
    ],
    "usage": "Provide table metadata, column metadata, and relationships. Optionally include constraints, indexes, and specify documentation style. Returns structured documentation.",
    "output_details": {
      "documentation_sections": {
        "type": "integer",
        "description": "Number of documentation sections generated"
      },
      "tables_documented": {
        "type": "integer",
        "description": "Number of tables included in documentation"
      },
      "documentation_content": {
        "type": "string",
        "description": "Generated documentation content in structured format"
      },
      "summary_stats": {
        "type": "string",
        "description": "Summary statistics about the documented schema"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Schema Comparison Tool",
    "tool_description": "Compares two database schemas to identify differences in structure, constraints, and relationships for migration or synchronization analysis.",
    "parameters": {
      "source_tables": {
        "type": "array",
        "required": true,
        "items": {"type": "string"},
        "description": "Table metadata from source schema"
      },
      "target_tables": {
        "type": "array",
        "required": true,
        "items": {"type": "string"},
        "description": "Table metadata from target schema"
      },
      "source_columns": {
        "type": "array",
        "required": true,
        "items": {"type": "string"},
        "description": "Column metadata from source schema"
      },
      "target_columns": {
        "type": "array",
        "required": true,
        "items": {"type": "string"},
        "description": "Column metadata from target schema"
      },
      "source_constraints": {
        "type": "array",
        "required": false,
        "default": "None",
        "items": {"type": "string"},
        "description": "Constraint information from source schema"
      },
      "target_constraints": {
        "type": "array",
        "required": false,
        "default": "None",
        "items": {"type": "string"},
        "description": "Constraint information from target schema"
      },
      "comparison_level": {
        "type": "string",
        "required": false,
        "default": "detailed",
        "description": "Comparison depth: basic, detailed, or comprehensive"
      }
    },
    "error_messages": [
      "Invalid metadata format: Unable to parse source or target schema metadata.",
      "Missing required data: Both source and target table and column metadata are required.",
      "Comparison level error: Use one of [basic, detailed, comprehensive].",
      "Data consistency error: Column metadata references tables not found in table metadata.",
      "Processing error: Unable to complete schema comparison due to data inconsistencies."
    ],
    "usage": "Provide source and target schema metadata including tables and columns. Optionally include constraints and set comparison level. Returns detailed difference analysis.",
    "output_details": {
      "tables_added": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Tables present in target but not in source"
      },
      "tables_removed": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Tables present in source but not in target"
      },
      "columns_modified": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Columns with different properties between schemas"
      },
      "constraint_differences": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Differences in constraints between schemas"
      },
      "compatibility_score": {
        "type": "number",
        "description": "Compatibility percentage between the two schemas"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Data Type Compatibility Checker",
    "tool_description": "Analyzes column data types for compatibility issues, migration concerns, and standardization opportunities across database platforms.",
    "parameters": {
      "column_metadata": {
        "type": "array",
        "required": true,
        "items": {"type": "string"},
        "description": "Column metadata including data types and constraints"
      },
      "target_database_type": {
        "type": "string",
        "required": false,
        "default": "generic",
        "description": "Target database platform for compatibility checking: mysql, postgresql, sqlserver, oracle, generic"
      }
    },
    "error_messages": [
      "Invalid column metadata: Unable to parse column information. Ensure proper formatting.",
      "Unsupported database type: Use one of [mysql, postgresql, sqlserver, oracle, generic].",
      "Empty metadata: Column metadata array cannot be empty.",
      "Data type parsing error: Unable to extract data type information from column metadata."
    ],
    "usage": "Provide column metadata and optionally specify target database type for compatibility analysis. Returns data type analysis and compatibility recommendations.",
    "output_details": {
      "compatible_types": {
        "type": "integer",
        "description": "Number of data types that are fully compatible"
      },
      "incompatible_types": {
        "type": "integer",
        "description": "Number of data types with compatibility issues"
      },
      "type_recommendations": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Recommendations for resolving data type compatibility issues"
      },
      "migration_warnings": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Warnings about potential data loss or conversion issues"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Schema Export Formatter",
    "tool_description": "Formats and exports database schema documentation in multiple output formats including markdown, HTML, JSON, and plain text.",
    "parameters": {
      "documentation_content": {
        "type": "string",
        "required": true,
        "description": "Generated documentation content to format and export"
      },
      "output_format": {
        "type": "string",
        "required": true,
        "description": "Desired output format: markdown, html, json, text, pdf"
      },
      "include_toc": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Whether to include table of contents in formatted output"
      },
      "include_metadata": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Whether to include generation metadata and timestamps"
      },
      "template_name": {
        "type": "string",
        "required": false,
        "default": "standard",
        "description": "Template name for formatting: minimal, standard, detailed, custom"
      }
    },
    "error_messages": [
      "Invalid output format: Use one of [markdown, html, json, text, pdf].",
      "Empty documentation content: Documentation content cannot be empty.",
      "Template not found: Specified template name is not available. Use minimal, standard, detailed, or custom.",
      "Formatting error: Unable to apply selected format to documentation content.",
      "Export generation failed: Unable to generate final export due to formatting issues."
    ],
    "usage": "Provide documentation content and specify desired output format. Optionally configure table of contents, metadata inclusion,
