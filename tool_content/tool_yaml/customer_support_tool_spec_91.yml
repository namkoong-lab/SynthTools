field_name: customer_support
subfield: knowledge_base_management
task: Analyze knowledge base usage patterns and identify content gaps or outdated information
tool_description: |-
  ## STEP 1 — Rate task difficulty

  This task is **medium** difficulty. It requires analyzing diverse data sources (usage logs, content metadata, user feedback), identifying patterns through statistical analysis, and making content recommendations. The coordination between usage analytics and content quality assessment adds complexity, along with the need to handle various content types and user interaction patterns.

  ## STEP 2 — Set a tool budget

  Given the medium difficulty, I'll target **12 tools** within the 10-15 range to cover usage analytics, content analysis, gap identification, and reporting workflows.

  ## STEP 3 — List all tool names with dependencies and affordances

  1. **KB Usage Data Extractor** - Consumes: time ranges, filters → Produces: raw usage metrics
  2. **Content Inventory Analyzer** - Consumes: KB structure → Produces: content metadata, categorization
  3. **Usage Pattern Detector** - Consumes: usage data → Produces: access patterns, trends
  4. **Content Freshness Auditor** - Consumes: content metadata → Produces: staleness indicators
  5. **Search Query Analyzer** - Consumes: search logs → Produces: query patterns, success rates
  6. **Gap Identification Engine** - Consumes: usage patterns, content inventory → Produces: content gaps
  7. **User Feedback Aggregator** - Consumes: feedback data → Produces: satisfaction metrics, issues
  8. **Content Performance Scorer** - Consumes: usage data, feedback → Produces: performance scores
  9. **Outdated Content Detector** - Consumes: content metadata, usage patterns → Produces: obsolescence candidates
  10. **Trending Topics Identifier** - Consumes: search queries, usage patterns → Produces: emerging topics
  11. **Content Recommendation Generator** - Consumes: gaps, trends, performance data → Produces: actionable recommendations
  12. **Knowledge Base Health Reporter** - Consumes: all analysis outputs → Produces: comprehensive reports

  ## STEP 4 — Multi-tool plans

  **Simple plans:**
  - Basic usage analysis: KB Usage Data Extractor → Usage Pattern Detector → Knowledge Base Health Reporter
  - Content freshness check: Content Inventory Analyzer → Content Freshness Auditor → Outdated Content Detector

  **Medium plans:**
  - Search effectiveness analysis: Search Query Analyzer → Usage Pattern Detector → Gap Identification Engine → Content Recommendation Generator
  - Performance assessment: KB Usage Data Extractor → Content Performance Scorer → User Feedback Aggregator → Knowledge Base Health Reporter

  **Complex plans:**
  - Comprehensive gap analysis: KB Usage Data Extractor → Content Inventory Analyzer → Usage Pattern Detector → Search Query Analyzer → Gap Identification Engine → Content Recommendation Generator
  - Full KB health assessment: All tools in sequence ending with Knowledge Base Health Reporter for complete analysis and recommendations

  ## STEP 5 — Produce tools

  ```json
  {
    "tool_name": "KB Usage Data Extractor",
    "tool_description": "Extracts comprehensive usage statistics from knowledge base systems, including article views, search queries, user sessions, and interaction metrics within specified time ranges.",
    "parameters": {
      "start_date": {
        "type": "string",
        "required": true,
        "description": "Start date for data extraction in ISO 8601 format",
        "format": "date-time"
      },
      "end_date": {
        "type": "string",
        "required": true,
        "description": "End date for data extraction in ISO 8601 format",
        "format": "date-time"
      },
      "include_search_data": {
        "type": "boolean",
        "required": false,
        "description": "Whether to include search query data in extraction",
        "default": true
      }
    },
    "error_messages": [
      "Invalid date range: Start date must be before end date and both must be valid ISO 8601 timestamps",
      "Date range too large: Maximum allowed range is 2 years",
      "No data available: No usage data found for the specified time period"
    ],
    "usage": "Specify start_date and end_date to define the analysis period. Optionally disable search data inclusion. Returns detailed usage metrics for further analysis.",
    "output_details": {
      "total_sessions": {
        "type": "integer",
        "description": "Total number of user sessions in the period"
      },
      "article_views": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of article IDs with their view counts"
      },
      "search_queries": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of search queries performed"
      },
      "unique_users": {
        "type": "integer",
        "description": "Number of unique users accessing the knowledge base"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Content Inventory Analyzer",
    "tool_description": "Analyzes the complete knowledge base content structure, categorizing articles by type, topic, creation date, last modified date, author, and content complexity metrics.",
    "parameters": {
      "kb_source_path": {
        "type": "string",
        "required": true,
        "description": "Path or identifier for the knowledge base source"
      },
      "content_types": {
        "type": "array",
        "required": false,
        "description": "Specific content types to analyze",
        "items": {
          "type": "string"
        },
        "default": ["article", "faq", "tutorial", "troubleshooting"]
      },
      "include_metadata": {
        "type": "boolean",
        "required": false,
        "description": "Whether to include detailed metadata analysis",
        "default": true
      },
      "analyze_content_complexity": {
        "type": "boolean",
        "required": false,
        "description": "Whether to perform content complexity analysis",
        "default": false
      }
    },
    "error_messages": [
      "Invalid source path: Knowledge base source not found or inaccessible",
      "Empty content types: At least one content type must be specified",
      "Analysis failed: Unable to process knowledge base content structure"
    ],
    "usage": "Provide kb_source_path to analyze content inventory. Optionally specify content_types array, enable metadata analysis, and content complexity scoring.",
    "output_details": {
      "total_articles": {
        "type": "integer",
        "description": "Total number of articles in the knowledge base"
      },
      "content_categories": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of identified content categories"
      },
      "creation_dates": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Article creation dates in ISO format"
      },
      "last_modified_dates": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Last modification dates in ISO format"
      },
      "authors": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of content authors"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Usage Pattern Detector",
    "tool_description": "Analyzes usage data to identify patterns, trends, peak usage times, popular content paths, and user behavior flows within the knowledge base system.",
    "parameters": {
      "usage_data": {
        "type": "array",
        "required": true,
        "description": "Raw usage data from KB Usage Data Extractor",
        "items": {
          "type": "string"
        }
      },
      "pattern_types": {
        "type": "array",
        "required": false,
        "description": "Types of patterns to detect",
        "items": {
          "type": "string"
        },
        "default": ["temporal", "content", "user_flow"]
      },
      "min_frequency": {
        "type": "integer",
        "required": false,
        "description": "Minimum frequency threshold for pattern detection",
        "default": 5
      },
      "time_granularity": {
        "type": "string",
        "required": false,
        "description": "Time granularity for temporal analysis",
        "default": "daily"
      }
    },
    "error_messages": [
      "Empty usage data: Usage data array cannot be empty",
      "Invalid pattern types: Pattern types must be from [temporal, content, user_flow, search]",
      "Invalid frequency threshold: min_frequency must be a positive integer",
      "Invalid time granularity: Must be one of [hourly, daily, weekly, monthly]"
    ],
    "usage": "Input usage_data array from previous extraction. Specify pattern_types to focus analysis, set min_frequency threshold, and choose time_granularity for temporal patterns.",
    "output_details": {
      "peak_usage_hours": {
        "type": "array",
        "items": {
          "type": "integer"
        },
        "description": "Hours of day with highest usage"
      },
      "popular_content_paths": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Most common content navigation sequences"
      },
      "usage_trends": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Identified usage trend descriptions"
      },
      "pattern_confidence": {
        "type": "number",
        "description": "Overall confidence score for detected patterns"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Content Freshness Auditor",
    "tool_description": "Evaluates content freshness by analyzing creation dates, modification dates, and content lifecycle indicators to identify potentially outdated information.",
    "parameters": {
      "content_metadata": {
        "type": "array",
        "required": true,
        "description": "Content metadata from inventory analysis",
        "items": {
          "type": "string"
        }
      },
      "freshness_threshold_days": {
        "type": "integer",
        "required": false,
        "description": "Number of days after which content is considered potentially stale",
        "default": 365
      }
    },
    "error_messages": [
      "Empty metadata: Content metadata cannot be empty",
      "Invalid threshold: freshness_threshold_days must be a positive integer between 30 and 3650",
      "Malformed metadata: Content metadata format is invalid or corrupted"
    ],
    "usage": "Provide content_metadata from Content Inventory Analyzer. Set freshness_threshold_days to define staleness criteria. Returns freshness assessment for all content.",
    "output_details": {
      "fresh_content_count": {
        "type": "integer",
        "description": "Number of articles considered fresh"
      },
      "stale_content_ids": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "IDs of articles that may be outdated"
      },
      "average_content_age_days": {
        "type": "number",
        "description": "Average age of all content in days"
      },
      "freshness_score": {
        "type": "number",
        "description": "Overall freshness score from 0-100"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Search Query Analyzer",
    "tool_description": "Analyzes search query patterns, success rates, failed searches, and query clustering to understand user information needs and search effectiveness.",
    "parameters": {
      "search_queries": {
        "type": "array",
        "required": true,
        "description": "List of search queries from usage data",
        "items": {
          "type": "string"
        },
        "minItems": 1
      },
      "search_results": {
        "type": "array",
        "required": true,
        "description": "Corresponding search results for each query",
        "items": {
          "type": "string"
        }
      },
      "cluster_similar_queries": {
        "type": "boolean",
        "required": false,
        "description": "Whether to group similar queries together",
        "default": true
      },
      "min_query_frequency": {
        "type": "integer",
        "required": false,
        "description": "Minimum frequency for query analysis",
        "default": 2
      },
      "analyze_intent": {
        "type": "boolean",
        "required": false,
        "description": "Whether to perform search intent analysis",
        "default": false
      }
    },
    "error_messages": [
      "Query-result mismatch: search_queries and search_results arrays must have the same length",
      "Empty queries: search_queries array cannot be empty",
      "Invalid frequency: min_query_frequency must be a positive integer",
      "Processing failed: Unable to analyze search query patterns"
    ],
    "usage": "Input search_queries and corresponding search_results arrays. Enable cluster_similar_queries for grouping, set min_query_frequency threshold, and optionally enable intent analysis.",
    "output_details": {
      "total_queries": {
        "type": "integer",
        "description": "Total number of search queries analyzed"
      },
      "successful_queries": {
        "type": "integer",
        "description": "Number of queries that returned results"
      },
      "failed_queries": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Queries that returned no results"
      },
      "top_query_terms": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Most frequently searched terms"
      },
      "search_success_rate": {
        "type": "number",
        "description": "Percentage of successful searches"
      },
      "query_clusters": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Identified groups of similar queries"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Gap Identification Engine",
    "tool_description": "Identifies content gaps by comparing user search patterns, failed queries, and popular topics against existing knowledge base content inventory.",
    "parameters": {
      "usage_patterns": {
        "type": "array",
        "required": true,
        "description": "Usage patterns from pattern detection analysis",
        "items": {
          "type": "string"
        }
      },
      "content_inventory": {
        "type": "array",
        "required": true,
        "description": "Content inventory from content analysis",
        "items": {
          "type": "string"
        }
      },
      "failed_searches": {
        "type": "array",
        "required": true,
        "description": "Failed search queries indicating missing content",
        "items": {
          "type": "string"
        }
      },
      "gap_confidence_threshold": {
        "type": "number",
        "required": false,
        "description": "Confidence threshold for gap identification (0-1)",
        "default": 0.7
      }
    },
    "error_messages": [
      "Empty input data: All input arrays must contain at least one item",
      "Invalid confidence threshold: gap_confidence_threshold must be between 0 and 1",
      "Analysis failed: Unable to process gap identification due to data format issues"
    ],
    "usage": "Provide usage_patterns, content_inventory, and failed_searches from previous analyses. Set gap_confidence_threshold to control sensitivity of gap detection.",
    "output_details": {
      "identified_gaps": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Specific content gaps identified"
      },
      "gap_priority_scores": {
        "type": "array",
        "items": {
          "type": "number"
        },
        "description": "Priority scores for each identified gap"
      },
      "missing_topics": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Topic areas with insufficient coverage"
      },
      "gap_count": {
        "type": "integer",
        "description": "Total number of content gaps identified"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "User Feedback Aggregator",
    "tool_description": "Aggregates and analyzes user feedback including ratings, comments, helpfulness votes, and support ticket data to assess content quality and user satisfaction.",
    "parameters": {
      "feedback_source": {
        "type": "string",
        "required": true,
        "description": "Source path or identifier for feedback data"
      },
      "feedback_types": {
        "type": "array",
        "required": false,
        "description": "Types of feedback to include in analysis",
        "items": {
          "type": "string"
        },
        "default": ["ratings", "comments", "votes", "tickets"]
      },
      "date_range_start": {
        "type": "string",
        "required": false,
        "description": "Start date for feedback analysis",
        "format": "date-time",
        "default": null
      },
      "date_range_end": {
        "type": "string",
        "required": false,
        "description": "End date for feedback analysis",
        "format": "date-time",
        "default": null
      },
      "sentiment_analysis": {
        "type": "boolean",
        "required": false,
        "description": "Whether to perform sentiment analysis on text feedback",
        "default": true
      },
      "min_feedback_count": {
        "type": "integer",
        "required": false,
        "description": "Minimum feedback count required for content analysis",
        "default": 3
      }
    },
    "error_messages": [
      "Invalid feedback source: Feedback data source not found or inaccessible",
      "Invalid date range: Start date must be before end date when both are provided",
      "Unsupported feedback types: All feedback types must be from [ratings, comments, votes, tickets, surveys]",
      "Invalid minimum count: min_feedback_count must be a positive integer"
    ],
    "usage": "Specify feedback_source path and optionally filter by feedback_types and date ranges. Enable sentiment_analysis for text feedback and set min_feedback_count for statistical significance.",
    "output_details": {
      "average_rating": {
        "type": "number",
        "description": "Average user rating across all content"
      },
      "total_feedback_items": {
        "type": "integer",
        "description": "Total number of feedback items processed"
      },
      "sentiment_distribution": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Distribution of sentiment categories"
      },
      "low_rated_content": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Content IDs with below-average ratings"
      },
      "common_complaints": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Most frequently mentioned issues"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Content Performance Scorer",
    "tool_description": "Calculates comprehensive performance scores for knowledge base content by combining usage metrics, user feedback, search performance, and engagement indicators.",
    "parameters": {
      "usage_data": {
        "type": "array",
        "required": true,
        "description": "Usage metrics for content scoring",
        "items": {
          "type": "string"
        }
      },
      "feedback_data": {
        "type": "array",
        "required": true,
        "description": "User feedback data for content scoring",
        "items": {
          "type": "string"
        }
      },
      "weight_usage": {
        "type": "number",
        "required": false,
        "description": "Weight for usage metrics in scoring (0-1)",
        "default": 0.4
      },
      "weight_feedback": {
        "type": "number",
        "required": false,
        "description": "Weight for feedback metrics in scoring (0-1)",
        "default": 0.6
      }
    },
    "error_messages": [
      "Empty input data: Both usage_data and feedback_data must contain at least one item",
      "Invalid weights: weight_usage and weight_feedback must be between 0 and 1, and their sum must equal 1",
      "Data format error: Input data format is incompatible with scoring algorithm"
    ],
    "usage": "Provide usage_data and feedback_data from previous analyses. Adjust weight_usage and weight_feedback to balance scoring factors (must sum to 1).",
    "output_details": {
      "content_scores": {
        "type": "array",
        "items": {
          "type": "number"
        },
        "description": "Performance scores for each content item"
      },
      "top_performing_content": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "IDs of highest-scoring content"
      },
      "underperforming_content": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "IDs of lowest-scoring content"
      },
      "average_score": {
        "type": "number",
        "description": "Average performance score across all content"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Outdated Content Detector",
    "tool_description": "Identifies outdated content by analyzing modification dates, usage patterns, user feedback, and content relevance indicators to flag content requiring updates.",
    "parameters": {
      "content_metadata": {
        "type": "array",
        "required": true,
        "description": "Content metadata including dates and attributes",
        "items": {
          "type": "string"
        }
      },
      "usage_patterns": {
        "type": "array",
        "required": true,
        "description": "Usage patterns showing content engagement over time",
        "items": {
          "type": "string"
        }
      },
      "staleness_threshold_days": {
        "type": "integer",
        "required": false,
        "description": "Days since last update to consider content stale",
        "default": 180
      },
      "usage_decline_threshold": {
        "type": "number",
        "required": false,
        "description": "Percentage decline in usage indicating obsolescence",
        "default": 0.5
      }
    },
    "error_messages": [
      "Empty metadata: content_metadata cannot be empty",
      "Missing usage patterns: usage_patterns array must contain valid data",
      "Invalid staleness threshold: staleness_threshold_days must be between 30 and 1825",
      "Invalid decline threshold: usage_decline_threshold must be between 0.1 and 1.0"
    ],
    "usage": "Input content_metadata and usage_patterns from previous analyses. Set staleness_threshold_days and usage_decline_threshold to control detection sensitivity.",
    "output_details": {
      "outdated_content_ids": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "IDs of content identified as outdated"
      },
      "update_priority_scores": {
        "type": "array",
        "items": {
          "type": "number"
        },
        "description": "Priority scores for updating each outdated item"
      },
      "obsolescence_reasons": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Reasons why content was flagged as outdated"
      },
      "total_outdated_count": {
        "type": "integer",
        "description": "Total number of outdated content items"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Trending Topics Identifier",
    "tool_description": "Identifies emerging topics and trending subjects based on search query analysis, usage pattern changes, and temporal analysis of user information needs.",
    "parameters": {
      "search_queries": {
        "type": "array",
        "required": true,
        "description": "Recent search queries for trend analysis",
        "items": {
          "type": "string"
        }
      },
      "usage_patterns": {
        "type": "array",
        "required": true,
        "description": "Usage patterns with temporal information",
        "items": {
          "type": "string"
        }
      },
      "analysis_window_days": {
        "type": "integer",
        "required": false,
        "description": "Number of days to analyze for trending topics",
        "default": 30
      },
      "trend_sensitivity": {
        "type": "number",
        "required": false,
        "description": "Sensitivity threshold for trend detection (0-1)",
        "default": 0.3
      },
      "min_topic_frequency": {
        "type": "integer",
        "required": false,
        "description": "Minimum frequency required to identify a trending topic",
        "default": 10
      }
    },
    "error_messages": [
      "Insufficient data: Both search_queries and usage_patterns must contain sufficient data points",
      "Invalid analysis window: analysis_window_days must be between 7 and 365",
      "Invalid sensitivity: trend_sensitivity must be between 0.1 and 1.0",
      "Invalid frequency threshold: min_topic_frequency must be a positive integer"
    ],
    "usage": "Provide search_queries and usage_patterns arrays. Set analysis_window_days for trend period, adjust trend_sensitivity for detection threshold, and set min_topic_frequency for statistical significance.",
    "output_details": {
      "trending_topics": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Identified trending topics or subjects"
      },
      "trend_scores": {
        "type": "array",
        "items": {
          "type": "number"
        },
        "description": "Trend strength scores for each topic"
      },
      "emerging_keywords": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "New keywords appearing in searches"
      },
      "trend_confidence": {
        "type": "number",
        "description": "Overall confidence in trend analysis"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Content Recommendation Generator",
    "tool_description": "Generates actionable content recommendations including new content creation, updates, improvements, and deletions based on comprehensive knowledge base analysis results.",
    "parameters": {
      "content_gaps": {
        "type": "array",
        "required": true,
        "description": "Identified content gaps from gap analysis",
        "items": {
          "type": "string"
        }
      },
      "trending_topics": {
        "type": "array",
        "required": true,
        "description": "Trending topics from trend analysis",
        "items": {
          "type": "string"
        }
      },
      "performance_scores": {
        "type": "array",
        "required": true,
        "description": "Content performance scores",
        "items": {
          "type": "string"
        }
      },
      "outdated_content": {
        "type": "array",
        "required": true,
        "description": "Outdated content identification results",
        "items": {
          "type": "string"
        }
      },
      "user_feedback": {
        "type": "array",
        "required": true,
        "description": "Aggregated user feedback data",
        "items": {
          "type": "string"
        }
      },
      "recommendation_priority": {
        "type": "string",
        "required": false,
        "description": "Priority focus for recommendations",
        "default": "balanced"
      },
      "max_recommendations": {
        "type": "integer",
        "required": false,
        "description": "Maximum number of recommendations to generate",
        "default": 20
      },
      "include_deletion_recommendations": {
        "type": "boolean",
        "required": false,
        "description": "Whether to include content deletion recommendations",
        "default": false
      }
    },
    "error_messages": [
      "Empty input arrays: All required input arrays must contain at least one item",
      "Invalid priority: recommendation_priority must be one of [gaps, trends, performance, balanced]",
      "Invalid max recommendations: max_recommendations must be between 1 and 100",
      "Processing failed: Unable to generate recommendations due to insufficient or incompatible input data"
    ],
    "usage": "Provide all analysis results from previous tools. Set recommendation_priority to focus on specific aspects, limit output with max_recommendations, and optionally enable deletion recommendations.",
    "output_details": {
      "create_content_recommendations": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Recommendations for new content creation"
      },
      "update_content_recommendations": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Recommendations for updating existing content"
      },
      "improve_content_recommendations": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Recommendations for content improvements"
      },
      "delete_content_recommendations": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Recommendations for content deletion"
      },
      "priority_scores": {
        "type": "array",
        "items": {
          "type": "number"
        },
        "description": "Priority scores for each recommendation"
      },
      "total_recommendations": {
        "type": "integer",
        "description": "Total number of recommendations generated"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Knowledge Base Health Reporter",
    "tool_description": "Generates comprehensive reports summarizing knowledge base health including usage analytics, content quality assessment, identified issues, recommendations, and executive summaries for stakeholders.",
    "parameters": {
      "usage_analysis_results": {
        "type": "array",
        "required": true,
        "description": "Results from usage pattern and analytics tools",
        "items": {
          "type": "string"
        }
      },
      "content_analysis_results": {
        "type": "array",
        "required": true,
        "description": "Results from content inventory and quality analysis",
        "items": {
          "type": "string"
        }
      },
      "gap_analysis_results": {
        "type": "array",
        "required": true,
        "description": "Results from gap identification analysis",
        "items": {
          "type": "string"
        }
      },
      "performance_results": {
        "type": "array",
        "required": true,
        "description": "Results from performance scoring and feedback analysis",
        "items": {
          "type": "string"
        }
      },
      "recommendations": {
        "type": "array",
        "required": true,
        "description": "Content recommendations from recommendation generator",
        "items": {
