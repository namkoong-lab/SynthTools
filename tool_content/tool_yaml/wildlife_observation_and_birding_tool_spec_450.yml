field_name: wildlife_observation_and_birding
subfield: bird_identification_and_classification
task: Audio-based bird identification from recordings and sound analysis
tool_description: |-
  **STEP 1 — Rate task difficulty**

  This task is **hard** due to the complex acoustic analysis required, extensive species databases, environmental noise filtering, temporal pattern recognition, and the high accuracy demands for scientific validity. Multiple interdependent analysis steps and sophisticated signal processing make this a challenging domain.

  **STEP 2 — Set a tool budget**

  Given the hard difficulty rating, I'm targeting **17 tools** within the 15-20 range. This allows for comprehensive coverage of audio preprocessing, feature extraction, classification, validation, and reporting workflows.

  **STEP 3 — List all tool names and dependencies**

  Tools and their flow:
  1. Audio File Validator → validates input files
  2. Background Noise Reducer → consumes raw audio, produces cleaned audio
  3. Audio Segment Extractor → consumes audio, produces time-stamped segments
  4. Spectral Feature Extractor → consumes audio segments, produces frequency features
  5. Temporal Pattern Analyzer → consumes audio segments, produces rhythm/timing features
  6. Call Type Classifier → consumes features, produces call classifications
  7. Species Database Query → consumes location/time, produces candidate species
  8. Acoustic Similarity Matcher → consumes features + candidates, produces similarity scores
  9. Multi-Call Aggregator → consumes multiple classifications, produces consensus
  10. Confidence Score Calculator → consumes classifications, produces confidence metrics
  11. Species Habitat Validator → consumes species + location, produces habitat compatibility
  12. Audio Quality Assessor → consumes audio, produces quality metrics
  13. False Positive Filter → consumes classifications + context, produces filtered results
  14. Geographic Range Validator → consumes species + coordinates, produces range validation
  15. Identification Report Generator → consumes all analyses, produces structured report
  16. Audio Annotation Exporter → consumes results + audio, produces annotated files
  17. Batch Processing Manager → orchestrates multiple file processing

  **STEP 4 — Multi-tool plans**

  **Simple Plans:**
  1. Basic single-file ID: Audio File Validator → Background Noise Reducer → Spectral Feature Extractor → Call Type Classifier → Species Database Query → Identification Report Generator
  2. Quality assessment: Audio File Validator → Audio Quality Assessor → Background Noise Reducer → Spectral Feature Extractor → Confidence Score Calculator

  **Medium Plans:**
  1. Enhanced identification: Audio File Validator → Audio Segment Extractor → Background Noise Reducer → Spectral Feature Extractor + Temporal Pattern Analyzer → Acoustic Similarity Matcher → Species Habitat Validator → Multi-Call Aggregator → Identification Report Generator
  2. Filtered analysis: Audio Quality Assessor → Background Noise Reducer → Call Type Classifier → Geographic Range Validator → False Positive Filter → Audio Annotation Exporter

  **Complex Plans:**
  1. Complete scientific workflow: Audio File Validator → Audio Quality Assessor → Audio Segment Extractor → Background Noise Reducer → Spectral Feature Extractor + Temporal Pattern Analyzer → Species Database Query → Acoustic Similarity Matcher → Multi-Call Aggregator → Confidence Score Calculator → Species Habitat Validator → Geographic Range Validator → False Positive Filter → Identification Report Generator → Audio Annotation Exporter
  2. Batch research processing: Batch Processing Manager orchestrating all tools for multiple recordings with cross-validation and comprehensive reporting

  **STEP 5 — Produce tools**

  ```json
  {
    "tool_name": "Audio File Validator",
    "tool_description": "Validates audio file format, duration, sample rate, and basic properties for bird identification analysis.",
    "parameters": {
      "file_path": {
        "type": "string",
        "required": true,
        "description": "Path to the audio file to validate"
      },
      "min_duration_seconds": {
        "type": "number",
        "required": false,
        "description": "Minimum required duration in seconds",
        "default": 1.0
      }
    },
    "error_messages": [
      "File not found: The specified audio file path does not exist. Check the file path and ensure the file is accessible.",
      "Unsupported format: Audio file must be in WAV, MP3, FLAC, or M4A format. Convert the file to a supported format.",
      "Invalid sample rate: Sample rate must be at least 8kHz for bird identification. Use audio with higher sample rate.",
      "File too short: Audio duration is below minimum threshold. Provide longer recordings for reliable identification."
    ],
    "usage": "Provide the file_path parameter and optionally set min_duration_seconds. This tool should be used first to ensure audio files are suitable for analysis.",
    "output_details": {
      "is_valid": {
        "type": "boolean",
        "description": "Whether the file passes validation"
      },
      "file_format": {
        "type": "string",
        "description": "Detected audio format"
      },
      "duration_seconds": {
        "type": "number",
        "description": "Audio duration in seconds"
      },
      "sample_rate": {
        "type": "integer",
        "description": "Audio sample rate in Hz"
      },
      "channels": {
        "type": "integer",
        "description": "Number of audio channels"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Background Noise Reducer",
    "tool_description": "Removes background noise from audio recordings using spectral subtraction and adaptive filtering to enhance bird call clarity.",
    "parameters": {
      "file_path": {
        "type": "string",
        "required": true,
        "description": "Path to the input audio file"
      },
      "noise_reduction_level": {
        "type": "string",
        "required": false,
        "description": "Noise reduction intensity: light, moderate, aggressive",
        "default": "moderate"
      },
      "preserve_frequencies": {
        "type": "array",
        "required": false,
        "description": "Frequency ranges to preserve in Hz",
        "items": {"type": "integer"},
        "default": null
      },
      "output_path": {
        "type": "string",
        "required": false,
        "description": "Path for cleaned audio output",
        "default": null
      }
    },
    "error_messages": [
      "Audio processing failed: Unable to process the audio file. Ensure the file is not corrupted and has valid audio data.",
      "Invalid noise reduction level: Use 'light', 'moderate', or 'aggressive' for noise_reduction_level parameter.",
      "Frequency range error: preserve_frequencies values must be positive integers within the audio's frequency range.",
      "Output path error: Cannot write to the specified output path. Check write permissions and available disk space."
    ],
    "usage": "Provide file_path and optionally configure noise_reduction_level and preserve_frequencies. Use after audio validation and before feature extraction.",
    "output_details": {
      "processed_file_path": {
        "type": "string",
        "description": "Path to the noise-reduced audio file"
      },
      "noise_reduction_db": {
        "type": "number",
        "description": "Amount of noise reduced in decibels"
      },
      "processing_time": {
        "type": "number",
        "description": "Time taken to process in seconds"
      },
      "quality_improvement": {
        "type": "number",
        "description": "Signal-to-noise ratio improvement"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Audio Segment Extractor",
    "tool_description": "Identifies and extracts individual bird call segments from continuous audio recordings using amplitude and frequency analysis.",
    "parameters": {
      "file_path": {
        "type": "string",
        "required": true,
        "description": "Path to the audio file to segment"
      },
      "min_call_duration": {
        "type": "number",
        "required": false,
        "description": "Minimum call duration in seconds",
        "default": 0.1
      },
      "max_call_duration": {
        "type": "number",
        "required": false,
        "description": "Maximum call duration in seconds",
        "default": 10.0
      },
      "amplitude_threshold": {
        "type": "number",
        "required": false,
        "description": "Minimum amplitude threshold for detection (0-1)",
        "default": 0.1
      },
      "gap_tolerance": {
        "type": "number",
        "required": false,
        "description": "Maximum gap within a call in seconds",
        "default": 0.2
      }
    },
    "error_messages": [
      "Segmentation failed: Unable to identify call segments. Check amplitude_threshold and duration parameters.",
      "Invalid duration range: min_call_duration must be less than max_call_duration and both must be positive.",
      "Threshold out of range: amplitude_threshold must be between 0 and 1.",
      "No segments found: No audio segments meet the specified criteria. Try adjusting threshold and duration parameters."
    ],
    "usage": "Provide file_path and adjust detection parameters as needed. Use on noise-reduced audio for better segment detection accuracy.",
    "output_details": {
      "segment_count": {
        "type": "integer",
        "description": "Number of segments extracted"
      },
      "segment_start_times": {
        "type": "array",
        "items": {"type": "number"},
        "description": "Start times of each segment in seconds"
      },
      "segment_durations": {
        "type": "array",
        "items": {"type": "number"},
        "description": "Duration of each segment in seconds"
      },
      "segment_file_paths": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Paths to extracted segment audio files"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Spectral Feature Extractor",
    "tool_description": "Extracts frequency-domain features from audio including MFCC, spectral centroid, bandwidth, and harmonic content for bird call analysis.",
    "parameters": {
      "file_path": {
        "type": "string",
        "required": true,
        "description": "Path to audio file or segment"
      },
      "window_size": {
        "type": "number",
        "required": false,
        "description": "Analysis window size in seconds",
        "default": 0.025
      },
      "hop_length": {
        "type": "number",
        "required": false,
        "description": "Hop length between windows in seconds",
        "default": 0.01
      },
      "freq_min": {
        "type": "integer",
        "required": false,
        "description": "Minimum frequency for analysis in Hz",
        "default": 500
      },
      "freq_max": {
        "type": "integer",
        "required": false,
        "description": "Maximum frequency for analysis in Hz",
        "default": 8000
      },
      "mfcc_coefficients": {
        "type": "integer",
        "required": false,
        "description": "Number of MFCC coefficients to extract",
        "default": 13
      },
      "include_harmonics": {
        "type": "boolean",
        "required": false,
        "description": "Whether to include harmonic analysis",
        "default": true
      },
      "feature_types": {
        "type": "array",
        "required": false,
        "description": "Specific features to extract",
        "items": {"type": "string"},
        "default": null
      }
    },
    "error_messages": [
      "Feature extraction failed: Unable to process audio for feature extraction. Ensure the file contains valid audio data.",
      "Invalid frequency range: freq_min must be less than freq_max and both must be positive integers within the audio's range.",
      "Window size error: window_size and hop_length must be positive numbers with window_size > hop_length.",
      "MFCC coefficient error: mfcc_coefficients must be a positive integer between 1 and 20.",
      "Unknown feature type: feature_types must contain valid feature names like 'mfcc', 'spectral_centroid', 'bandwidth', 'rolloff'."
    ],
    "usage": "Provide file_path and configure frequency range and feature parameters. Use on clean audio segments for optimal feature quality.",
    "output_details": {
      "mfcc_features": {
        "type": "array",
        "items": {"type": "number"},
        "description": "Mel-frequency cepstral coefficients"
      },
      "spectral_centroid": {
        "type": "number",
        "description": "Average spectral centroid in Hz"
      },
      "spectral_bandwidth": {
        "type": "number",
        "description": "Spectral bandwidth in Hz"
      },
      "fundamental_frequency": {
        "type": "number",
        "description": "Estimated fundamental frequency in Hz"
      },
      "harmonic_ratio": {
        "type": "number",
        "description": "Ratio of harmonic to total energy"
      },
      "feature_vector": {
        "type": "array",
        "items": {"type": "number"},
        "description": "Combined feature vector for classification"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Temporal Pattern Analyzer",
    "tool_description": "Analyzes temporal characteristics of bird calls including rhythm, repetition patterns, inter-call intervals, and call sequence structure.",
    "parameters": {
      "file_path": {
        "type": "string",
        "required": true,
        "description": "Path to audio file or segment"
      },
      "analysis_window": {
        "type": "number",
        "required": false,
        "description": "Analysis window duration in seconds",
        "default": 5.0
      },
      "detect_repetitions": {
        "type": "boolean",
        "required": false,
        "description": "Whether to detect repeated call patterns",
        "default": true
      },
      "rhythm_sensitivity": {
        "type": "string",
        "required": false,
        "description": "Rhythm detection sensitivity: low, medium, high",
        "default": "medium"
      }
    },
    "error_messages": [
      "Temporal analysis failed: Unable to analyze temporal patterns. Ensure the audio contains clear bird calls.",
      "Window size error: analysis_window must be a positive number greater than 1 second.",
      "Invalid sensitivity level: rhythm_sensitivity must be 'low', 'medium', or 'high'.",
      "Insufficient audio data: Audio duration is too short for temporal pattern analysis."
    ],
    "usage": "Provide file_path and configure analysis parameters. Best used on audio with multiple calls or extended bird vocalizations.",
    "output_details": {
      "call_rate": {
        "type": "number",
        "description": "Calls per minute"
      },
      "rhythm_score": {
        "type": "number",
        "description": "Rhythmic regularity score (0-1)"
      },
      "repetition_detected": {
        "type": "boolean",
        "description": "Whether repetitive patterns were found"
      },
      "inter_call_intervals": {
        "type": "array",
        "items": {"type": "number"},
        "description": "Intervals between calls in seconds"
      },
      "pattern_complexity": {
        "type": "number",
        "description": "Complexity score of temporal patterns"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Call Type Classifier",
    "tool_description": "Classifies bird vocalizations into types such as song, alarm, contact, or territorial calls using acoustic features and machine learning models.",
    "parameters": {
      "feature_vector": {
        "type": "array",
        "required": true,
        "description": "Combined acoustic feature vector",
        "items": {"type": "number"},
        "minItems": 5,
        "maxItems": 100
      },
      "temporal_features": {
        "type": "array",
        "required": false,
        "description": "Temporal pattern features",
        "items": {"type": "number"},
        "default": null
      },
      "model_type": {
        "type": "string",
        "required": false,
        "description": "Classification model: neural_network, random_forest, svm",
        "default": "neural_network"
      },
      "confidence_threshold": {
        "type": "number",
        "required": false,
        "description": "Minimum confidence for classification (0-1)",
        "default": 0.7
      }
    },
    "error_messages": [
      "Classification failed: Unable to classify the call type. Check that feature_vector contains valid numeric data.",
      "Invalid feature vector: feature_vector must contain between 5 and 100 numeric values.",
      "Unknown model type: model_type must be 'neural_network', 'random_forest', or 'svm'.",
      "Confidence threshold error: confidence_threshold must be between 0 and 1."
    ],
    "usage": "Provide feature_vector from spectral analysis and optionally include temporal_features. Configure model_type and confidence_threshold as needed.",
    "output_details": {
      "call_type": {
        "type": "string",
        "description": "Classified call type (song, alarm, contact, territorial, other)"
      },
      "confidence": {
        "type": "number",
        "description": "Classification confidence score (0-1)"
      },
      "type_probabilities": {
        "type": "array",
        "items": {"type": "number"},
        "description": "Probability scores for each call type"
      },
      "model_used": {
        "type": "string",
        "description": "Classification model that was used"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Species Database Query",
    "tool_description": "Queries comprehensive bird species database to retrieve candidate species based on geographic location, date, habitat, and seasonal occurrence patterns.",
    "parameters": {
      "latitude": {
        "type": "number",
        "required": true,
        "description": "Latitude coordinate of recording location"
      },
      "longitude": {
        "type": "number",
        "required": true,
        "description": "Longitude coordinate of recording location"
      },
      "recording_date": {
        "type": "string",
        "required": true,
        "description": "Date of recording in ISO format",
        "format": "date-time"
      },
      "habitat_type": {
        "type": "string",
        "required": false,
        "description": "Habitat type: forest, grassland, wetland, urban, coastal",
        "default": null
      },
      "elevation_meters": {
        "type": "integer",
        "required": false,
        "description": "Elevation of recording location in meters",
        "default": null
      },
      "search_radius_km": {
        "type": "number",
        "required": false,
        "description": "Search radius around coordinates in kilometers",
        "default": 50.0
      },
      "include_rare_species": {
        "type": "boolean",
        "required": false,
        "description": "Whether to include rarely observed species",
        "default": false
      },
      "migration_season": {
        "type": "boolean",
        "required": false,
        "description": "Consider migration patterns for date",
        "default": true
      },
      "max_results": {
        "type": "integer",
        "required": false,
        "description": "Maximum number of candidate species to return",
        "default": 50
      }
    },
    "error_messages": [
      "Invalid coordinates: Latitude must be between -90 and 90, longitude between -180 and 180.",
      "Date format error: recording_date must be in valid ISO date-time format (YYYY-MM-DDTHH:mm:ss).",
      "Unknown habitat type: habitat_type must be one of 'forest', 'grassland', 'wetland', 'urban', or 'coastal'.",
      "Search radius error: search_radius_km must be a positive number between 1 and 1000.",
      "Results limit error: max_results must be a positive integer between 1 and 500."
    ],
    "usage": "Provide latitude, longitude, and recording_date as required parameters. Add habitat_type and other location details for more targeted results.",
    "output_details": {
      "candidate_species": {
        "type": "array",
        "items": {"type": "string"},
        "description": "List of candidate bird species names"
      },
      "species_codes": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Standard species identification codes"
      },
      "occurrence_probabilities": {
        "type": "array",
        "items": {"type": "number"},
        "description": "Probability of each species occurring at location/time"
      },
      "seasonal_status": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Seasonal occurrence status for each species"
      },
      "query_location": {
        "type": "string",
        "description": "Formatted location description"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Acoustic Similarity Matcher",
    "tool_description": "Matches extracted acoustic features against reference call patterns from known species using similarity algorithms and pattern matching techniques.",
    "parameters": {
      "query_features": {
        "type": "array",
        "required": true,
        "description": "Feature vector of unknown call",
        "items": {"type": "number"},
        "minItems": 5,
        "maxItems": 100
      },
      "candidate_species": {
        "type": "array",
        "required": true,
        "description": "List of candidate species to compare against",
        "items": {"type": "string"},
        "minItems": 1,
        "maxItems": 100
      },
      "call_type": {
        "type": "string",
        "required": false,
        "description": "Type of call to match: song, alarm, contact, territorial",
        "default": null
      },
      "similarity_method": {
        "type": "string",
        "required": false,
        "description": "Similarity calculation method: cosine, euclidean, dtw",
        "default": "cosine"
      },
      "match_threshold": {
        "type": "number",
        "required": false,
        "description": "Minimum similarity score for matches (0-1)",
        "default": 0.6
      }
    },
    "error_messages": [
      "Feature matching failed: Unable to compute similarities. Ensure query_features contains valid numeric data.",
      "Invalid feature vector: query_features must contain between 5 and 100 numeric values.",
      "No candidate species: candidate_species list cannot be empty and must contain valid species names.",
      "Unknown similarity method: similarity_method must be 'cosine', 'euclidean', or 'dtw'.",
      "Invalid threshold: match_threshold must be between 0 and 1."
    ],
    "usage": "Provide query_features from feature extraction and candidate_species from database query. Configure similarity_method and match_threshold for desired matching sensitivity.",
    "output_details": {
      "matched_species": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Species with similarity above threshold"
      },
      "similarity_scores": {
        "type": "array",
        "items": {"type": "number"},
        "description": "Similarity scores for each matched species"
      },
      "best_match": {
        "type": "string",
        "description": "Species with highest similarity score"
      },
      "best_match_score": {
        "type": "number",
        "description": "Highest similarity score achieved"
      },
      "reference_call_ids": {
        "type": "array",
        "items": {"type": "string"},
        "description": "IDs of reference calls used for matching"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Multi-Call Aggregator",
    "tool_description": "Aggregates multiple call identifications from the same recording or time period to produce consensus species identification with weighted confidence scoring.",
    "parameters": {
      "identification_results": {
        "type": "array",
        "required": true,
        "description": "List of individual call identification results",
        "items": {"type": "string"},
        "minItems": 2,
        "maxItems": 50
      },
      "confidence_scores": {
        "type": "array",
        "required": true,
        "description": "Confidence scores for each identification",
        "items": {"type": "number"},
        "minItems": 2,
        "maxItems": 50
      },
      "time_stamps": {
        "type": "array",
        "required": false,
        "description": "Timestamps for each identification",
        "items": {"type": "string"},
        "default": null
      },
      "aggregation_method": {
        "type": "string",
        "required": false,
        "description": "Aggregation method: majority_vote, weighted_average, confidence_threshold",
        "default": "weighted_average"
      },
      "consensus_threshold": {
        "type": "number",
        "required": false,
        "description": "Minimum agreement ratio for consensus (0-1)",
        "default": 0.5
      }
    },
    "error_messages": [
      "Aggregation failed: Unable to aggregate results. Ensure identification_results and confidence_scores have matching lengths.",
      "Insufficient data: Need at least 2 identification results for aggregation.",
      "Mismatched arrays: identification_results and confidence_scores must have the same number of items.",
      "Invalid aggregation method: aggregation_method must be 'majority_vote', 'weighted_average', or 'confidence_threshold'.",
      "Invalid threshold: consensus_threshold must be between 0 and 1."
    ],
    "usage": "Provide identification_results and confidence_scores arrays with matching lengths. Configure aggregation_method and consensus_threshold for desired consensus criteria.",
    "output_details": {
      "consensus_species": {
        "type": "string",
        "description": "Final consensus species identification"
      },
      "consensus_confidence": {
        "type": "number",
        "description": "Aggregated confidence score (0-1)"
      },
      "agreement_ratio": {
        "type": "number",
        "description": "Proportion of calls agreeing with consensus"
      },
      "alternative_species": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Other species identified with lower confidence"
      },
      "total_calls_analyzed": {
        "type": "integer",
        "description": "Number of individual calls processed"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Confidence Score Calculator",
    "tool_description": "Calculates overall confidence metrics for bird identification results based on acoustic quality, feature reliability, and match consistency.",
    "parameters": {
      "acoustic_features": {
        "type": "array",
        "required": true,
        "description": "Acoustic feature quality metrics",
        "items": {"type": "number"}
      },
      "similarity_score": {
        "type": "number",
        "required": true,
        "description": "Best acoustic similarity match score"
      },
      "consensus_agreement": {
        "type": "number",
        "required": false,
        "description": "Agreement ratio from multi-call analysis",
        "default": null
      },
      "audio_quality": {
        "type": "number",
        "required": false,
        "description": "Audio quality assessment score (0-1)",
        "default": null
      }
    },
    "error_messages": [
      "Confidence calculation failed: Unable to calculate confidence metrics. Check that all input scores are valid numbers.",
      "Invalid similarity score: similarity_score must be between 0 and 1.",
      "Invalid consensus agreement: consensus_agreement must be between 0 and 1 when provided.",
      "Invalid audio quality: audio_quality must be between 0 and 1 when provided."
    ],
    "usage": "Provide acoustic_features array and similarity_score. Include consensus_agreement and audio_quality when available for more accurate confidence assessment.",
    "output_details": {
      "overall_confidence": {
        "type": "number",
        "description": "Overall identification confidence (0-1)"
      },
      "feature_reliability": {
        "type": "number",
        "description": "Acoustic feature quality score (0-1)"
      },
      "match_strength": {
        "type": "number",
        "description": "Pattern matching strength score (0-1)"
      },
      "consistency_score": {
        "type": "number",
        "description": "Cross-validation consistency score (0-1)"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Species Habitat Validator",
    "tool_description": "Validates species identification against known habitat preferences and ecological requirements using environmental and geographic data.",
    "parameters": {
      "species_name": {
        "type": "string",
        "required": true,
        "description": "Bird species name to validate"
      },
      "habitat_type": {
        "type": "string",
        "required": true,
        "description": "Observed habitat type at recording location"
      },
      "elevation": {
        "type": "integer",
        "required": false,
        "description": "Elevation at recording location in meters",
        "default": null
      },
      "vegetation_type": {
        "type": "string",
        "required": false,
        "description": "Primary vegetation type observed",
        "default": null
      },
      "water_proximity": {
        "type": "boolean",
        "required": false,
        "description": "Whether water body is nearby",
        "default": null
      }
    },
    "error_messages": [
      "Habitat validation failed: Unable to validate habitat compatibility for the specified species.",
      "Unknown species: The provided species_name is not found in the habitat database.",
      "Invalid habitat type: habitat_type must be a recognized habitat classification.",
      "Elevation out of range: elevation must be a reasonable value between -500 and 9000 meters."
    ],
    "usage": "Provide species_name and habitat_type as minimum requirements. Include elevation, vegetation_type, and water_proximity for more detailed validation.",
    "output_details": {
      "habitat_match": {
        "type": "boolean",
        "description": "Whether habitat matches species preferences"
      },
      "compatibility_score": {
        "type": "number",
        "description": "Habitat compatibility score (0-1)"
      },
      "preferred_habitats": {
        "type": "array",
        "items": {"type": "string"},
        "description": "List of species preferred habitats"
      },
      "elevation_match": {
        "type": "boolean",
        "description": "Whether elevation is within species range"
      },
      "validation_notes": {
        "type": "string",
        "description": "Additional validation notes or warnings"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Audio Quality Assessor",
    "tool_description": "Evaluates audio recording quality including signal-to-noise ratio, frequency response, clipping, and overall suitability for bird identification analysis.",
    "parameters": {
      "file_path": {
        "type": "string",
        "required": true,
        "description": "Path to audio file for quality assessment"
      },
      "target_frequency_range": {
        "type": "array",
        "required": false,
        "description": "Target
