field_name: ecommerce_and_retail
subfield: Price Management and Dynamic Pricing
task: Competitive price monitoring and analysis across multiple retailers and platforms
tool_description: |-
  **STEP 1 — Rate task difficulty**

  This task is **hard** due to its broad scope across multiple retailers/platforms, high coordination requirements between data collection and analysis components, significant data infrastructure needs for real-time monitoring, and high impact of pricing errors on business competitiveness.

  **STEP 2 — Set a tool budget**

  Given the hard difficulty rating, I'll target **17 tools** within the 15-20 range to handle the complex workflows of data collection, processing, analysis, and reporting across multiple retail channels.

  **STEP 3 — List all tool names and dependencies**

  **Data Collection Tools:**
  - Retailer Price Scraper (produces: raw price data)
  - Product Matcher (consumes: product catalogs, produces: matched product IDs)
  - Price History Tracker (consumes: current prices, produces: historical trends)

  **Data Processing Tools:**
  - Price Data Validator (consumes: raw price data, produces: validated datasets)
  - Currency Converter (consumes: multi-currency prices, produces: normalized prices)
  - Promotion Detector (consumes: price data, produces: promotion flags)

  **Analysis Tools:**
  - Competitive Position Analyzer (consumes: normalized prices, produces: market positioning)
  - Price Gap Calculator (consumes: competitor prices, produces: gap analysis)
  - Market Share Estimator (consumes: pricing/sales data, produces: share estimates)
  - Price Elasticity Calculator (consumes: price/demand data, produces: elasticity metrics)
  - Dynamic Pricing Optimizer (consumes: market data, produces: optimal prices)

  **Monitoring & Alerting:**
  - Price Change Monitor (consumes: price streams, produces: change alerts)
  - Competitor Alert System (consumes: market data, produces: competitive alerts)
  - Price Threshold Checker (consumes: prices/rules, produces: threshold violations)

  **Reporting Tools:**
  - Competitive Dashboard Generator (consumes: analyzed data, produces: dashboards)
  - Price Report Builder (consumes: analysis results, produces: formatted reports)
  - Market Intelligence Summarizer (consumes: multi-source data, produces: insights)

  **STEP 4 — Multi-tool plans**

  **Simple Plans:**
  1. **Basic Price Comparison**: Retailer Price Scraper → Price Data Validator → Price Gap Calculator (compare prices across 2-3 retailers)
  2. **Currency Normalization**: Retailer Price Scraper → Currency Converter → Price Report Builder (standardize international pricing)

  **Medium Plans:**
  1. **Competitive Monitoring**: Retailer Price Scraper → Product Matcher → Price History Tracker → Price Change Monitor → Competitor Alert System (track competitor price changes)
  2. **Promotion Analysis**: Retailer Price Scraper → Promotion Detector → Competitive Position Analyzer → Competitive Dashboard Generator (analyze promotional strategies)

  **Complex Plans:**
  1. **Full Market Intelligence**: Retailer Price Scraper → Product Matcher → Price Data Validator → Currency Converter → Promotion Detector → Competitive Position Analyzer → Market Share Estimator → Price Elasticity Calculator → Market Intelligence Summarizer (comprehensive market analysis)
  2. **Dynamic Pricing Strategy**: Price History Tracker → Price Gap Calculator → Market Share Estimator → Price Elasticity Calculator → Dynamic Pricing Optimizer → Price Threshold Checker → Competitive Dashboard Generator (optimize pricing strategy based on competitive intelligence)

  **STEP 5 — Produce tools**

  ```json
  {
    "tool_name": "Retailer Price Scraper",
    "tool_description": "Scrapes product prices and metadata from specified retail websites and platforms, handling different site structures and data formats.",
    "parameters": {
      "retailer_urls": {
        "type": "array",
        "items": {"type": "string"},
        "required": true,
        "description": "List of retailer website URLs to scrape",
        "minItems": 1,
        "maxItems": 50
      },
      "product_identifiers": {
        "type": "array",
        "items": {"type": "string"},
        "required": true,
        "description": "Product SKUs, UPCs, or search terms to find",
        "minItems": 1,
        "maxItems": 1000
      },
      "scraping_frequency": {
        "type": "string",
        "required": false,
        "description": "How often to scrape: hourly, daily, weekly",
        "default": "daily"
      }
    },
    "error_messages": [
      "Invalid URL format: Ensure all retailer URLs are properly formatted with http/https protocol.",
      "Site access blocked: Some retailers may block automated scraping - consider rate limiting or proxy rotation.",
      "Product not found: One or more product identifiers could not be located on the specified retailers.",
      "Rate limit exceeded: Reduce scraping frequency or number of concurrent requests to avoid being blocked."
    ],
    "usage": "Provide retailer URLs and product identifiers to scrape. Optionally set scraping frequency. Returns raw price data with timestamps and source information.",
    "output_details": {
      "scraped_data": {
        "type": "array",
        "items": {"type": "string"},
        "description": "JSON strings containing price, product info, and retailer details"
      },
      "scrape_timestamp": {
        "type": "string",
        "description": "When the scraping was performed",
        "format": "date-time"
      },
      "success_count": {
        "type": "integer",
        "description": "Number of products successfully scraped"
      },
      "failed_products": {
        "type": "array",
        "items": {"type": "string"},
        "description": "List of product identifiers that failed to scrape"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Product Matcher",
    "tool_description": "Matches products across different retailers by analyzing product attributes, descriptions, and identifiers to ensure price comparisons are for identical items.",
    "parameters": {
      "primary_catalog": {
        "type": "array",
        "items": {"type": "string"},
        "required": true,
        "description": "Reference product catalog entries as JSON strings",
        "minItems": 1,
        "maxItems": 10000
      },
      "comparison_catalogs": {
        "type": "array",
        "items": {"type": "string"},
        "required": true,
        "description": "Competitor product catalogs to match against",
        "minItems": 1,
        "maxItems": 10000
      },
      "matching_threshold": {
        "type": "number",
        "required": false,
        "description": "Similarity threshold for matching (0.0-1.0)",
        "default": 0.85
      },
      "match_criteria": {
        "type": "array",
        "items": {"type": "string"},
        "required": false,
        "description": "Attributes to use for matching: brand, model, sku, description",
        "default": ["brand", "model", "sku"]
      }
    },
    "error_messages": [
      "Invalid catalog format: Ensure catalog entries are valid JSON strings with required fields (id, name, brand, price).",
      "Matching threshold out of range: Threshold must be between 0.0 and 1.0.",
      "Invalid match criteria: Use only supported criteria: brand, model, sku, description.",
      "Insufficient data for matching: Products must have at least one matching criterion field populated."
    ],
    "usage": "Provide primary and comparison product catalogs with matching criteria. The tool returns matched product pairs with confidence scores.",
    "output_details": {
      "matched_products": {
        "type": "array",
        "items": {"type": "string"},
        "description": "JSON strings of matched product pairs with IDs and confidence scores"
      },
      "unmatched_products": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Product IDs that could not be matched"
      },
      "match_confidence_avg": {
        "type": "number",
        "description": "Average confidence score of all matches"
      },
      "total_matches": {
        "type": "integer",
        "description": "Number of successful product matches found"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Price History Tracker",
    "tool_description": "Maintains historical price records for products across retailers, tracking price changes over time and identifying trends.",
    "parameters": {
      "current_prices": {
        "type": "array",
        "items": {"type": "string"},
        "required": true,
        "description": "Current price data entries as JSON strings",
        "minItems": 1,
        "maxItems": 5000
      },
      "lookback_period": {
        "type": "integer",
        "required": false,
        "description": "Number of days to maintain in history",
        "default": 90
      }
    },
    "error_messages": [
      "Invalid price data format: Ensure price entries contain product_id, retailer_id, price, and timestamp fields.",
      "Duplicate entries detected: Remove duplicate price entries for the same product-retailer-timestamp combination.",
      "Invalid lookback period: Lookback period must be between 1 and 365 days."
    ],
    "usage": "Submit current price data to add to historical records. Specify lookback period for how long to maintain history.",
    "output_details": {
      "updated_records": {
        "type": "integer",
        "description": "Number of price records updated"
      },
      "new_records": {
        "type": "integer",
        "description": "Number of new price records added"
      },
      "price_changes_detected": {
        "type": "integer",
        "description": "Number of price changes identified"
      },
      "historical_summary": {
        "type": "string",
        "description": "Summary of historical price trends"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Price Data Validator",
    "tool_description": "Validates scraped price data for accuracy, completeness, and consistency, flagging potential errors or anomalies.",
    "parameters": {
      "raw_price_data": {
        "type": "array",
        "items": {"type": "string"},
        "required": true,
        "description": "Raw price data entries to validate",
        "minItems": 1,
        "maxItems": 10000
      },
      "validation_rules": {
        "type": "array",
        "items": {"type": "string"},
        "required": false,
        "description": "Validation rules: price_range, currency_format, required_fields, outlier_detection",
        "default": ["price_range", "required_fields", "outlier_detection"]
      },
      "price_min": {
        "type": "number",
        "required": false,
        "description": "Minimum acceptable price value",
        "default": 0.01
      },
      "price_max": {
        "type": "number",
        "required": false,
        "description": "Maximum acceptable price value",
        "default": 100000
      }
    },
    "error_messages": [
      "Invalid data structure: Raw price data must be JSON strings with required fields (product_id, price, retailer, timestamp).",
      "Price out of range: Prices must be between specified minimum and maximum values.",
      "Missing required fields: All entries must contain product_id, price, retailer, and timestamp.",
      "Invalid validation rules: Use only supported rules: price_range, currency_format, required_fields, outlier_detection."
    ],
    "usage": "Submit raw price data with validation rules and acceptable price ranges. Returns validated data and error reports.",
    "output_details": {
      "valid_records": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Validated price data entries that passed all checks"
      },
      "invalid_records": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Data entries that failed validation with error reasons"
      },
      "validation_summary": {
        "type": "string",
        "description": "Summary of validation results and issues found"
      },
      "pass_rate": {
        "type": "number",
        "description": "Percentage of records that passed validation"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Currency Converter",
    "tool_description": "Converts prices from multiple currencies to a base currency using current exchange rates for consistent price comparisons.",
    "parameters": {
      "price_data": {
        "type": "array",
        "items": {"type": "string"},
        "required": true,
        "description": "Price entries with currency information",
        "minItems": 1,
        "maxItems": 5000
      },
      "base_currency": {
        "type": "string",
        "required": true,
        "description": "Target currency code (e.g., USD, EUR, GBP)"
      },
      "exchange_rate_source": {
        "type": "string",
        "required": false,
        "description": "Exchange rate provider: live, cached, manual",
        "default": "live"
      }
    },
    "error_messages": [
      "Invalid currency code: Ensure all currency codes are valid ISO 4217 format (e.g., USD, EUR).",
      "Exchange rate unavailable: Could not retrieve exchange rate for specified currency pair.",
      "Invalid price data: Price entries must contain price and currency fields.",
      "Unsupported exchange rate source: Use live, cached, or manual."
    ],
    "usage": "Provide price data with currency information and specify the base currency for conversion. Returns prices normalized to the base currency.",
    "output_details": {
      "converted_prices": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Price entries converted to base currency"
      },
      "exchange_rates_used": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Currency pairs and rates used for conversion"
      },
      "conversion_timestamp": {
        "type": "string",
        "description": "When currency conversion was performed",
        "format": "date-time"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Promotion Detector",
    "tool_description": "Identifies promotional pricing, discounts, and special offers by analyzing price patterns and promotional indicators.",
    "parameters": {
      "price_data": {
        "type": "array",
        "items": {"type": "string"},
        "required": true,
        "description": "Current and historical price data",
        "minItems": 1,
        "maxItems": 5000
      },
      "promotion_indicators": {
        "type": "array",
        "items": {"type": "string"},
        "required": false,
        "description": "Text indicators of promotions: sale, discount, clearance, special",
        "default": ["sale", "discount", "clearance"]
      },
      "discount_threshold": {
        "type": "number",
        "required": false,
        "description": "Minimum discount percentage to flag as promotion",
        "default": 10.0
      },
      "lookback_days": {
        "type": "integer",
        "required": false,
        "description": "Days to look back for baseline price comparison",
        "default": 30
      }
    },
    "error_messages": [
      "Insufficient historical data: Need at least 7 days of price history for promotion detection.",
      "Invalid discount threshold: Threshold must be between 1.0 and 99.0 percent.",
      "Invalid lookback period: Lookback days must be between 7 and 365.",
      "Missing price history: Cannot detect promotions without baseline price data."
    ],
    "usage": "Submit current and historical price data with promotion detection parameters. Returns identified promotions and discount levels.",
    "output_details": {
      "promotions_detected": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Products currently on promotion with discount details"
      },
      "promotion_count": {
        "type": "integer",
        "description": "Total number of promotions detected"
      },
      "average_discount": {
        "type": "number",
        "description": "Average discount percentage across all promotions"
      },
      "promotion_summary": {
        "type": "string",
        "description": "Summary of promotional activity patterns"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Competitive Position Analyzer",
    "tool_description": "Analyzes competitive positioning by comparing prices across retailers and determining market position rankings.",
    "parameters": {
      "normalized_prices": {
        "type": "array",
        "items": {"type": "string"},
        "required": true,
        "description": "Normalized price data across retailers",
        "minItems": 2,
        "maxItems": 10000
      },
      "your_retailer_id": {
        "type": "string",
        "required": true,
        "description": "Identifier for your retailer in the price data"
      },
      "analysis_metrics": {
        "type": "array",
        "items": {"type": "string"},
        "required": false,
        "description": "Metrics to calculate: price_rank, price_gap, market_position, competitiveness",
        "default": ["price_rank", "price_gap", "market_position"]
      },
      "category_filter": {
        "type": "string",
        "required": false,
        "description": "Product category to focus analysis on",
        "default": "all"
      },
      "competitor_set": {
        "type": "array",
        "items": {"type": "string"},
        "required": false,
        "description": "Specific competitor retailer IDs to include in analysis",
        "default": null
      }
    },
    "error_messages": [
      "Your retailer not found: The specified retailer_id does not exist in the price data.",
      "Insufficient competitor data: Need at least 2 retailers for competitive analysis.",
      "Invalid analysis metrics: Use only supported metrics: price_rank, price_gap, market_position, competitiveness.",
      "Category not found: The specified category filter does not match any products in the data."
    ],
    "usage": "Provide normalized price data and your retailer ID. Optionally specify analysis metrics, category filter, and competitor set for focused analysis.",
    "output_details": {
      "market_position_summary": {
        "type": "string",
        "description": "Overall competitive position summary"
      },
      "price_rankings": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Product-level price rankings compared to competitors"
      },
      "competitive_gaps": {
        "type": "array",
        "items": {"type": "number"},
        "description": "Price differences vs competitors by product"
      },
      "position_score": {
        "type": "number",
        "description": "Overall competitive position score (0-100)"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Price Gap Calculator",
    "tool_description": "Calculates price differences and gaps between your prices and competitor prices across products and categories.",
    "parameters": {
      "your_prices": {
        "type": "array",
        "items": {"type": "string"},
        "required": true,
        "description": "Your retailer's price data",
        "minItems": 1,
        "maxItems": 5000
      },
      "competitor_prices": {
        "type": "array",
        "items": {"type": "string"},
        "required": true,
        "description": "Competitor price data for comparison",
        "minItems": 1,
        "maxItems": 5000
      },
      "gap_calculation_method": {
        "type": "string",
        "required": false,
        "description": "Method for calculating gaps: percentage, absolute, both",
        "default": "both"
      }
    },
    "error_messages": [
      "Price data mismatch: Cannot find matching products between your prices and competitor prices.",
      "Invalid calculation method: Use percentage, absolute, or both.",
      "Insufficient price data: Need at least one matching product for gap calculation."
    ],
    "usage": "Provide your prices and competitor prices for the same products. Specify calculation method to get price gap analysis.",
    "output_details": {
      "price_gaps": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Product-level price gap calculations"
      },
      "average_gap_percentage": {
        "type": "number",
        "description": "Average percentage price difference"
      },
      "average_gap_absolute": {
        "type": "number",
        "description": "Average absolute price difference"
      },
      "products_higher_priced": {
        "type": "integer",
        "description": "Count of products where you are more expensive"
      },
      "products_lower_priced": {
        "type": "integer",
        "description": "Count of products where you are less expensive"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Market Share Estimator",
    "tool_description": "Estimates market share based on pricing data, sales volumes, and competitive positioning across retailers.",
    "parameters": {
      "pricing_data": {
        "type": "array",
        "items": {"type": "string"},
        "required": true,
        "description": "Multi-retailer pricing information",
        "minItems": 2,
        "maxItems": 10000
      },
      "sales_data": {
        "type": "array",
        "items": {"type": "string"},
        "required": false,
        "description": "Available sales volume data",
        "default": null
      },
      "estimation_method": {
        "type": "string",
        "required": false,
        "description": "Estimation approach: price_based, volume_based, hybrid",
        "default": "hybrid"
      },
      "market_definition": {
        "type": "string",
        "required": false,
        "description": "Market scope: category, brand, geographic, total",
        "default": "category"
      },
      "time_period": {
        "type": "string",
        "required": false,
        "description": "Analysis time frame: weekly, monthly, quarterly",
        "default": "monthly"
      }
    },
    "error_messages": [
      "Insufficient retailer coverage: Need data from at least 3 retailers for reliable market share estimation.",
      "Invalid estimation method: Use price_based, volume_based, or hybrid.",
      "Missing sales data for volume_based method: Sales data required when using volume_based estimation.",
      "Invalid market definition: Use category, brand, geographic, or total.",
      "Invalid time period: Use weekly, monthly, or quarterly."
    ],
    "usage": "Provide pricing data from multiple retailers. Optionally include sales data and specify estimation method and market definition for more accurate estimates.",
    "output_details": {
      "market_share_estimates": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Retailer market share percentages"
      },
      "estimation_confidence": {
        "type": "number",
        "description": "Confidence level in the estimates (0-100)"
      },
      "market_size_estimate": {
        "type": "number",
        "description": "Estimated total market size"
      },
      "share_trends": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Market share trend analysis"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Price Elasticity Calculator",
    "tool_description": "Calculates price elasticity of demand by analyzing the relationship between price changes and demand/sales changes.",
    "parameters": {
      "price_history": {
        "type": "array",
        "items": {"type": "string"},
        "required": true,
        "description": "Historical price data with timestamps",
        "minItems": 10,
        "maxItems": 10000
      },
      "demand_data": {
        "type": "array",
        "items": {"type": "string"},
        "required": true,
        "description": "Sales or demand data corresponding to price points",
        "minItems": 10,
        "maxItems": 10000
      },
      "calculation_method": {
        "type": "string",
        "required": false,
        "description": "Elasticity calculation method: arc, point, regression",
        "default": "regression"
      },
      "product_categories": {
        "type": "array",
        "items": {"type": "string"},
        "required": false,
        "description": "Product categories to analyze separately",
        "default": null
      },
      "seasonal_adjustment": {
        "type": "boolean",
        "required": false,
        "description": "Whether to adjust for seasonal effects",
        "default": true
      },
      "confidence_level": {
        "type": "number",
        "required": false,
        "description": "Statistical confidence level (0.90, 0.95, 0.99)",
        "default": 0.95
      }
    },
    "error_messages": [
      "Insufficient data points: Need at least 10 price-demand pairs for reliable elasticity calculation.",
      "Price-demand data mismatch: Price and demand arrays must have corresponding entries.",
      "Invalid calculation method: Use arc, point, or regression.",
      "Invalid confidence level: Use 0.90, 0.95, or 0.99.",
      "Insufficient price variation: Need sufficient price changes to calculate meaningful elasticity."
    ],
    "usage": "Provide historical price and demand data with timestamps. Specify calculation method and optional parameters for detailed elasticity analysis.",
    "output_details": {
      "elasticity_coefficients": {
        "type": "array",
        "items": {"type": "number"},
        "description": "Price elasticity values by product/category"
      },
      "elasticity_interpretation": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Interpretation of elasticity values (elastic, inelastic, etc.)"
      },
      "statistical_significance": {
        "type": "array",
        "items": {"type": "boolean"},
        "description": "Whether each elasticity coefficient is statistically significant"
      },
      "demand_sensitivity_summary": {
        "type": "string",
        "description": "Overall summary of price sensitivity findings"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Dynamic Pricing Optimizer",
    "tool_description": "Optimizes pricing strategies based on competitive intelligence, demand elasticity, and business objectives to maximize revenue or market share.",
    "parameters": {
      "current_market_data": {
        "type": "array",
        "items": {"type": "string"},
        "required": true,
        "description": "Current competitive pricing and market conditions",
        "minItems": 1,
        "maxItems": 5000
      },
      "elasticity_data": {
        "type": "array",
        "items": {"type": "string"},
        "required": true,
        "description": "Price elasticity coefficients for products",
        "minItems": 1,
        "maxItems": 5000
      },
      "business_objective": {
        "type": "string",
        "required": true,
        "description": "Primary objective: maximize_revenue, maximize_profit, gain_market_share, maintain_position"
      },
      "pricing_constraints": {
        "type": "array",
        "items": {"type": "string"},
        "required": false,
        "description": "Constraints: min_margin, max_discount, competitor_matching",
        "default": ["min_margin"]
      },
      "minimum_margin_pct": {
        "type": "number",
        "required": false,
        "description": "Minimum profit margin percentage to maintain",
        "default": 15.0
      },
      "maximum_price_change_pct": {
        "type": "number",
        "required": false,
        "description": "Maximum allowable price change percentage",
        "default": 20.0
      },
      "optimization_horizon": {
        "type": "string",
        "required": false,
        "description": "Time horizon for optimization: short_term, medium_term, long_term",
        "default": "medium_term"
      },
      "competitor_response_model": {
        "type": "string",
        "required": false,
        "description": "Expected competitor response: aggressive, moderate, passive",
        "default": "moderate"
      },
      "demand_forecast": {
        "type": "array",
        "items": {"type": "string"},
        "required": false,
        "description": "Forward-looking demand projections",
        "default": null
      },
      "seasonal_factors": {
        "type": "array",
        "items": {"type": "number"},
        "required": false,
        "description": "Seasonal adjustment factors by month",
        "default": null
      }
    },
    "error_messages": [
      "Invalid business objective: Use maximize_revenue, maximize_profit, gain_market_share, or maintain_position.",
      "Conflicting constraints: Specified constraints cannot be satisfied simultaneously.",
      "Invalid margin percentage: Minimum margin must be between 0 and 100 percent.",
      "Invalid price change limit: Maximum price change must be between 1 and 50 percent.",
      "Insufficient elasticity data: Need elasticity coefficients for price optimization.",
      "Invalid optimization horizon: Use short_term, medium_term, or long_term.",
      "Invalid competitor response model: Use aggressive, moderate, or passive."
    ],
    "usage": "Provide current market data, elasticity information, and business objective. Specify constraints and optimization parameters to get recommended pricing strategies.",
    "output_details": {
      "optimized_prices": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Recommended prices by product with rationale"
      },
      "expected_impact": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Projected revenue, profit, and market share impacts"
      },
      "optimization_summary": {
        "type": "string",
        "description": "Summary of optimization results and key insights"
      },
      "risk_assessment": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Identified risks and mitigation strategies"
      },
      "implementation_timeline": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Suggested timeline for price changes"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Price Change Monitor",
    "tool_description": "Monitors real-time price changes across retailers and generates alerts when significant price movements occur.",
    "parameters": {
      "price_stream": {
        "type": "array",
        "items": {"type": "string"},
        "required": true,
        "description": "Real-time or batch price data feed",
        "minItems": 1,
        "maxItems": 10000
      },
      "change_threshold_pct": {
        "type": "number",
        "required": false,
        "description": "Minimum percentage change to trigger alert",
        "default": 5.0
      },
      "monitoring_frequency": {
        "type": "string",
        "required": false,
        "description": "How often to check for changes: continuous, hourly, daily",
        "default": "hourly"
      }
    },
    "error_messages": [
      "Invalid price stream format: Price data must include product_id, retailer_i
