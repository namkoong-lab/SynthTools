field_name: ecommerce_and_retail
subfield: Product Search and Discovery
task: Product categorization and taxonomy management with automated classification
tool_description: |-
  **STEP 1 — Rate task difficulty**

  This task involves building and maintaining hierarchical product taxonomies while implementing automated classification systems. The difficulty is **medium** due to the need to handle diverse product catalogs, maintain consistency across categories, manage taxonomy evolution, and implement machine learning classification with acceptable accuracy thresholds.

  **STEP 2 — Set a tool budget**

  Given the medium complexity, I'll target **12 tools** to cover taxonomy creation, product classification, data management, validation, and performance monitoring workflows.

  **STEP 3 — List all tool names and dependencies**

  1. **Taxonomy Builder** - Consumes: category definitions, hierarchy rules → Produces: structured taxonomy
  2. **Product Data Validator** - Consumes: product records → Produces: validation reports
  3. **Feature Extractor** - Consumes: product data → Produces: feature vectors
  4. **Classification Model Trainer** - Consumes: training data, features → Produces: trained models
  5. **Batch Product Classifier** - Consumes: product data, models → Produces: category predictions
  6. **Taxonomy Analyzer** - Consumes: taxonomy structure → Produces: hierarchy metrics
  7. **Category Performance Monitor** - Consumes: classification results → Produces: performance metrics
  8. **Product Data Enricher** - Consumes: raw product data → Produces: enriched product records
  9. **Taxonomy Merger** - Consumes: multiple taxonomies → Produces: unified taxonomy
  10. **Classification Confidence Scorer** - Consumes: predictions → Produces: confidence scores
  11. **Category Mapping Generator** - Consumes: source/target taxonomies → Produces: mapping rules
  12. **Taxonomy Export Manager** - Consumes: taxonomy data → Produces: formatted exports

  **STEP 4 — Multi-tool plans**

  **Simple Plans:**
  1. **Basic Product Classification**: Product Data Validator → Feature Extractor → Batch Product Classifier
  2. **Taxonomy Creation**: Taxonomy Builder → Taxonomy Analyzer → Taxonomy Export Manager

  **Medium Plans:**
  1. **Model Training Pipeline**: Product Data Validator → Product Data Enricher → Feature Extractor → Classification Model Trainer → Category Performance Monitor
  2. **Taxonomy Integration**: Taxonomy Analyzer → Category Mapping Generator → Taxonomy Merger → Taxonomy Export Manager

  **Complex Plans:**
  1. **Complete Classification System**: Product Data Validator → Product Data Enricher → Feature Extractor → Classification Model Trainer → Batch Product Classifier → Classification Confidence Scorer → Category Performance Monitor
  2. **Full Taxonomy Management**: Taxonomy Builder → Taxonomy Analyzer → Category Mapping Generator → Taxonomy Merger → Product Data Enricher → Feature Extractor → Classification Model Trainer → Batch Product Classifier → Category Performance Monitor → Taxonomy Export Manager

  **STEP 5 — Produce tools**

  ```json
  {
    "tool_name": "Taxonomy Builder",
    "tool_description": "Creates hierarchical product taxonomies with customizable depth levels and category relationships, supporting both manual definition and rule-based generation.",
    "parameters": {
      "taxonomy_name": {
        "type": "string",
        "required": true,
        "description": "Name identifier for the taxonomy being created"
      },
      "root_categories": {
        "type": "array",
        "required": true,
        "description": "Top-level category names",
        "items": {"type": "string"},
        "minItems": 1,
        "maxItems": 50
      },
      "max_depth": {
        "type": "integer",
        "required": false,
        "description": "Maximum hierarchy depth (1-10)",
        "default": 5
      },
      "allow_multi_parent": {
        "type": "boolean",
        "required": false,
        "description": "Whether categories can have multiple parent categories",
        "default": false
      }
    },
    "error_messages": [
      "Invalid taxonomy name: Name must be non-empty and contain only alphanumeric characters and underscores",
      "Empty root categories: At least one root category must be provided",
      "Invalid max_depth: Depth must be between 1 and 10",
      "Duplicate category names: All category names must be unique within the taxonomy"
    ],
    "usage": "Provide taxonomy_name and root_categories, optionally set max_depth and allow_multi_parent. The tool creates a structured taxonomy framework ready for product classification.",
    "output_details": {
      "taxonomy_id": {
        "type": "string",
        "description": "Unique identifier for the created taxonomy"
      },
      "total_categories": {
        "type": "integer",
        "description": "Total number of categories in the taxonomy"
      },
      "hierarchy_levels": {
        "type": "integer",
        "description": "Number of hierarchy levels created"
      },
      "category_paths": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Array of full category paths in the taxonomy"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Product Data Validator",
    "tool_description": "Validates product data quality by checking required fields, data formats, and identifying potential issues before classification processing.",
    "parameters": {
      "product_data": {
        "type": "array",
        "required": true,
        "description": "Array of product identifiers or data records to validate",
        "items": {"type": "string"},
        "minItems": 1,
        "maxItems": 10000
      },
      "required_fields": {
        "type": "array",
        "required": true,
        "description": "List of required field names for validation",
        "items": {"type": "string"},
        "minItems": 1,
        "maxItems": 20
      },
      "strict_mode": {
        "type": "boolean",
        "required": false,
        "description": "Whether to enforce strict validation rules",
        "default": true
      }
    },
    "error_messages": [
      "Empty product data: At least one product record must be provided for validation",
      "Invalid required fields: Required fields list cannot be empty",
      "Data format error: Product data must be in the expected format with proper field types"
    ],
    "usage": "Provide product_data and required_fields, optionally set strict_mode. The tool returns validation results and identifies data quality issues.",
    "output_details": {
      "validation_summary": {
        "type": "string",
        "description": "Overall validation status and summary"
      },
      "total_products": {
        "type": "integer",
        "description": "Total number of products validated"
      },
      "valid_products": {
        "type": "integer",
        "description": "Number of products that passed validation"
      },
      "invalid_products": {
        "type": "integer",
        "description": "Number of products that failed validation"
      },
      "error_types": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Types of validation errors found"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Feature Extractor",
    "tool_description": "Extracts and transforms product attributes into numerical features suitable for machine learning classification models.",
    "parameters": {
      "product_ids": {
        "type": "array",
        "required": true,
        "description": "Array of product identifiers to extract features from",
        "items": {"type": "string"},
        "minItems": 1,
        "maxItems": 5000
      },
      "text_fields": {
        "type": "array",
        "required": true,
        "description": "Text fields to process for feature extraction",
        "items": {"type": "string"},
        "minItems": 1,
        "maxItems": 15
      },
      "numerical_fields": {
        "type": "array",
        "required": false,
        "description": "Numerical fields to include as features",
        "items": {"type": "string"},
        "default": []
      },
      "max_features": {
        "type": "integer",
        "required": false,
        "description": "Maximum number of text features to extract (100-10000)",
        "default": 1000
      },
      "include_ngrams": {
        "type": "boolean",
        "required": false,
        "description": "Whether to include n-gram features from text",
        "default": true
      },
      "normalize_features": {
        "type": "boolean",
        "required": false,
        "description": "Whether to normalize feature vectors",
        "default": true
      }
    },
    "error_messages": [
      "Empty product list: At least one product ID must be provided",
      "Invalid text fields: At least one text field must be specified for extraction",
      "Invalid max_features: Value must be between 100 and 10000",
      "Feature extraction failed: Unable to process specified fields for given products"
    ],
    "usage": "Provide product_ids and text_fields, optionally specify numerical_fields and tuning parameters. The tool returns structured feature vectors for classification.",
    "output_details": {
      "extraction_summary": {
        "type": "string",
        "description": "Summary of feature extraction process"
      },
      "total_features": {
        "type": "integer",
        "description": "Total number of features extracted per product"
      },
      "text_features": {
        "type": "integer",
        "description": "Number of text-derived features"
      },
      "numerical_features": {
        "type": "integer",
        "description": "Number of numerical features included"
      },
      "feature_names": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Names of all extracted features"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Classification Model Trainer",
    "tool_description": "Trains machine learning models for automated product classification using extracted features and labeled training data.",
    "parameters": {
      "training_data_source": {
        "type": "string",
        "required": true,
        "description": "Source identifier for labeled training data"
      },
      "model_type": {
        "type": "string",
        "required": true,
        "description": "Type of classification model: random_forest, gradient_boosting, svm, neural_network, or naive_bayes"
      },
      "feature_set_id": {
        "type": "string",
        "required": true,
        "description": "Identifier for the feature set to use for training"
      },
      "validation_split": {
        "type": "number",
        "required": false,
        "description": "Fraction of data to use for validation (0.1-0.4)",
        "default": 0.2
      },
      "max_iterations": {
        "type": "integer",
        "required": false,
        "description": "Maximum training iterations (10-1000)",
        "default": 100
      },
      "early_stopping": {
        "type": "boolean",
        "required": false,
        "description": "Whether to use early stopping during training",
        "default": true
      },
      "class_balancing": {
        "type": "string",
        "required": false,
        "description": "Class balancing method: none, undersample, oversample, or weighted",
        "default": "weighted"
      },
      "hyperparameter_tuning": {
        "type": "boolean",
        "required": false,
        "description": "Whether to perform automated hyperparameter optimization",
        "default": false
      },
      "cross_validation_folds": {
        "type": "integer",
        "required": false,
        "description": "Number of cross-validation folds (3-10)",
        "default": 5
      },
      "random_seed": {
        "type": "integer",
        "required": false,
        "description": "Random seed for reproducible results",
        "default": 42
      }
    },
    "error_messages": [
      "Invalid training data source: Unable to access or load the specified training data",
      "Unsupported model type: Use one of [random_forest, gradient_boosting, svm, neural_network, naive_bayes]",
      "Invalid feature set: The specified feature set ID does not exist or is inaccessible",
      "Invalid validation split: Value must be between 0.1 and 0.4",
      "Invalid max_iterations: Value must be between 10 and 1000",
      "Invalid class balancing method: Use one of [none, undersample, oversample, weighted]",
      "Invalid cross_validation_folds: Value must be between 3 and 10",
      "Insufficient training data: Not enough labeled samples for reliable model training"
    ],
    "usage": "Provide training_data_source, model_type, and feature_set_id; optionally configure validation_split, training parameters, and optimization settings. The tool trains a classification model and returns performance metrics.",
    "output_details": {
      "model_id": {
        "type": "string",
        "description": "Unique identifier for the trained model"
      },
      "training_accuracy": {
        "type": "number",
        "description": "Accuracy score on training data"
      },
      "validation_accuracy": {
        "type": "number",
        "description": "Accuracy score on validation data"
      },
      "f1_score": {
        "type": "number",
        "description": "F1 score on validation data"
      },
      "training_time_seconds": {
        "type": "number",
        "description": "Total time spent training the model"
      },
      "feature_importance": {
        "type": "array",
        "items": {"type": "number"},
        "description": "Feature importance scores from the model"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Batch Product Classifier",
    "tool_description": "Applies trained classification models to predict categories for large batches of products efficiently.",
    "parameters": {
      "model_id": {
        "type": "string",
        "required": true,
        "description": "Identifier of the trained classification model to use"
      },
      "product_batch": {
        "type": "array",
        "required": true,
        "description": "Array of product identifiers to classify",
        "items": {"type": "string"},
        "minItems": 1,
        "maxItems": 10000
      },
      "confidence_threshold": {
        "type": "number",
        "required": false,
        "description": "Minimum confidence score for predictions (0.1-0.95)",
        "default": 0.5
      },
      "return_probabilities": {
        "type": "boolean",
        "required": false,
        "description": "Whether to return prediction probabilities for all categories",
        "default": false
      },
      "batch_size": {
        "type": "integer",
        "required": false,
        "description": "Processing batch size for large datasets (100-2000)",
        "default": 500
      }
    },
    "error_messages": [
      "Invalid model ID: The specified model does not exist or is not accessible",
      "Empty product batch: At least one product must be provided for classification",
      "Invalid confidence threshold: Value must be between 0.1 and 0.95",
      "Invalid batch size: Value must be between 100 and 2000",
      "Classification failed: Unable to process products with the specified model"
    ],
    "usage": "Provide model_id and product_batch, optionally set confidence_threshold and processing parameters. The tool returns category predictions for all products.",
    "output_details": {
      "classification_summary": {
        "type": "string",
        "description": "Summary of classification results"
      },
      "total_classified": {
        "type": "integer",
        "description": "Total number of products classified"
      },
      "high_confidence": {
        "type": "integer",
        "description": "Number of predictions above confidence threshold"
      },
      "low_confidence": {
        "type": "integer",
        "description": "Number of predictions below confidence threshold"
      },
      "predicted_categories": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Array of predicted category names for each product"
      },
      "confidence_scores": {
        "type": "array",
        "items": {"type": "number"},
        "description": "Confidence scores for each prediction"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Taxonomy Analyzer",
    "tool_description": "Analyzes taxonomy structure and provides insights on hierarchy balance, category distribution, and potential optimization opportunities.",
    "parameters": {
      "taxonomy_id": {
        "type": "string",
        "required": true,
        "description": "Identifier of the taxonomy to analyze"
      },
      "include_product_counts": {
        "type": "boolean",
        "required": false,
        "description": "Whether to include product count statistics per category",
        "default": true
      },
      "depth_analysis": {
        "type": "boolean",
        "required": false,
        "description": "Whether to perform detailed depth and balance analysis",
        "default": true
      }
    },
    "error_messages": [
      "Invalid taxonomy ID: The specified taxonomy does not exist or is not accessible",
      "Analysis failed: Unable to process the taxonomy structure",
      "Empty taxonomy: The taxonomy contains no categories to analyze"
    ],
    "usage": "Provide taxonomy_id and optionally enable detailed analysis options. The tool returns comprehensive taxonomy metrics and recommendations.",
    "output_details": {
      "analysis_summary": {
        "type": "string",
        "description": "Overall analysis summary and key findings"
      },
      "total_categories": {
        "type": "integer",
        "description": "Total number of categories in taxonomy"
      },
      "max_depth": {
        "type": "integer",
        "description": "Maximum depth of the taxonomy hierarchy"
      },
      "avg_depth": {
        "type": "number",
        "description": "Average depth across all leaf categories"
      },
      "balance_score": {
        "type": "number",
        "description": "Balance score indicating hierarchy evenness (0-1)"
      },
      "leaf_categories": {
        "type": "integer",
        "description": "Number of leaf (terminal) categories"
      },
      "recommendations": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Optimization recommendations for the taxonomy"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Category Performance Monitor",
    "tool_description": "Monitors and evaluates classification performance across different product categories, identifying problematic categories and performance trends.",
    "parameters": {
      "model_id": {
        "type": "string",
        "required": true,
        "description": "Identifier of the classification model to monitor"
      },
      "evaluation_period_days": {
        "type": "integer",
        "required": false,
        "description": "Number of days to include in performance analysis (1-365)",
        "default": 30
      },
      "minimum_samples": {
        "type": "integer",
        "required": false,
        "description": "Minimum number of samples required per category for analysis (10-1000)",
        "default": 50
      },
      "performance_threshold": {
        "type": "number",
        "required": false,
        "description": "Performance threshold below which categories are flagged (0.1-0.9)",
        "default": 0.7
      }
    },
    "error_messages": [
      "Invalid model ID: The specified model does not exist or is not accessible",
      "Invalid evaluation period: Period must be between 1 and 365 days",
      "Invalid minimum samples: Value must be between 10 and 1000",
      "Invalid performance threshold: Value must be between 0.1 and 0.9",
      "Insufficient data: Not enough classification results available for analysis"
    ],
    "usage": "Provide model_id and optionally configure analysis parameters. The tool returns detailed performance metrics and identifies categories needing attention.",
    "output_details": {
      "monitoring_summary": {
        "type": "string",
        "description": "Summary of performance monitoring results"
      },
      "overall_accuracy": {
        "type": "number",
        "description": "Overall model accuracy across all categories"
      },
      "categories_analyzed": {
        "type": "integer",
        "description": "Number of categories included in analysis"
      },
      "underperforming_categories": {
        "type": "integer",
        "description": "Number of categories below performance threshold"
      },
      "top_performing_categories": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Names of best performing categories"
      },
      "problem_categories": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Names of categories requiring attention"
      },
      "performance_trend": {
        "type": "string",
        "description": "Overall performance trend: improving, stable, or declining"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Product Data Enricher",
    "tool_description": "Enriches raw product data by cleaning text fields, standardizing formats, extracting additional attributes, and preparing data for classification.",
    "parameters": {
      "product_ids": {
        "type": "array",
        "required": true,
        "description": "Array of product identifiers to enrich",
        "items": {"type": "string"},
        "minItems": 1,
        "maxItems": 5000
      },
      "text_cleaning": {
        "type": "boolean",
        "required": false,
        "description": "Whether to apply text cleaning and normalization",
        "default": true
      },
      "extract_brand": {
        "type": "boolean",
        "required": false,
        "description": "Whether to attempt brand name extraction",
        "default": true
      },
      "extract_color": {
        "type": "boolean",
        "required": false,
        "description": "Whether to attempt color extraction from descriptions",
        "default": true
      },
      "extract_size": {
        "type": "boolean",
        "required": false,
        "description": "Whether to attempt size information extraction",
        "default": true
      },
      "standardize_units": {
        "type": "boolean",
        "required": false,
        "description": "Whether to standardize measurement units",
        "default": true
      },
      "language_detection": {
        "type": "boolean",
        "required": false,
        "description": "Whether to detect and standardize language of text fields",
        "default": false
      }
    },
    "error_messages": [
      "Empty product list: At least one product ID must be provided for enrichment",
      "Enrichment failed: Unable to process the specified products",
      "Invalid product data: Some products have corrupted or inaccessible data"
    ],
    "usage": "Provide product_ids and configure enrichment options. The tool processes and enhances product data quality for better classification results.",
    "output_details": {
      "enrichment_summary": {
        "type": "string",
        "description": "Summary of data enrichment process"
      },
      "products_processed": {
        "type": "integer",
        "description": "Number of products successfully processed"
      },
      "brands_extracted": {
        "type": "integer",
        "description": "Number of products with extracted brand information"
      },
      "colors_extracted": {
        "type": "integer",
        "description": "Number of products with extracted color information"
      },
      "sizes_extracted": {
        "type": "integer",
        "description": "Number of products with extracted size information"
      },
      "text_fields_cleaned": {
        "type": "integer",
        "description": "Number of text fields that were cleaned"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Taxonomy Merger",
    "tool_description": "Merges multiple taxonomies into a unified structure, resolving conflicts and maintaining hierarchy consistency.",
    "parameters": {
      "source_taxonomies": {
        "type": "array",
        "required": true,
        "description": "Array of taxonomy identifiers to merge",
        "items": {"type": "string"},
        "minItems": 2,
        "maxItems": 10
      },
      "merge_strategy": {
        "type": "string",
        "required": true,
        "description": "Merge strategy: union, intersection, or priority_based"
      },
      "conflict_resolution": {
        "type": "string",
        "required": false,
        "description": "How to resolve category conflicts: prefer_first, prefer_last, or manual",
        "default": "prefer_first"
      },
      "target_taxonomy_name": {
        "type": "string",
        "required": true,
        "description": "Name for the resulting merged taxonomy"
      }
    },
    "error_messages": [
      "Insufficient taxonomies: At least 2 taxonomies are required for merging",
      "Invalid taxonomy IDs: One or more specified taxonomies do not exist",
      "Invalid merge strategy: Use one of [union, intersection, priority_based]",
      "Invalid conflict resolution: Use one of [prefer_first, prefer_last, manual]",
      "Merge failed: Unable to resolve conflicts between taxonomies",
      "Empty result: The merge operation resulted in an empty taxonomy"
    ],
    "usage": "Provide source_taxonomies, merge_strategy, and target_taxonomy_name, optionally configure conflict_resolution. The tool creates a unified taxonomy from multiple sources.",
    "output_details": {
      "merged_taxonomy_id": {
        "type": "string",
        "description": "Identifier of the newly created merged taxonomy"
      },
      "merge_summary": {
        "type": "string",
        "description": "Summary of the merge operation"
      },
      "total_categories": {
        "type": "integer",
        "description": "Total categories in the merged taxonomy"
      },
      "conflicts_resolved": {
        "type": "integer",
        "description": "Number of conflicts that were resolved during merge"
      },
      "source_contributions": {
        "type": "array",
        "items": {"type": "integer"},
        "description": "Number of categories contributed by each source taxonomy"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Classification Confidence Scorer",
    "tool_description": "Analyzes classification predictions and assigns confidence scores based on model certainty, feature consistency, and historical performance.",
    "parameters": {
      "prediction_batch": {
        "type": "array",
        "required": true,
        "description": "Array of product identifiers with predictions to score",
        "items": {"type": "string"},
        "minItems": 1,
        "maxItems": 5000
      },
      "model_id": {
        "type": "string",
        "required": true,
        "description": "Identifier of the classification model used for predictions"
      },
      "scoring_method": {
        "type": "string",
        "required": false,
        "description": "Confidence scoring method: probability_based, ensemble, or hybrid",
        "default": "hybrid"
      }
    },
    "error_messages": [
      "Empty prediction batch: At least one prediction must be provided for scoring",
      "Invalid model ID: The specified model does not exist or is not accessible",
      "Invalid scoring method: Use one of [probability_based, ensemble, hybrid]",
      "Scoring failed: Unable to calculate confidence scores for the predictions"
    ],
    "usage": "Provide prediction_batch and model_id, optionally specify scoring_method. The tool returns detailed confidence analysis for each prediction.",
    "output_details": {
      "scoring_summary": {
        "type": "string",
        "description": "Summary of confidence scoring results"
      },
      "predictions_scored": {
        "type": "integer",
        "description": "Number of predictions that received confidence scores"
      },
      "average_confidence": {
        "type": "number",
        "description": "Average confidence score across all predictions"
      },
      "high_confidence_count": {
        "type": "integer",
        "description": "Number of predictions with high confidence (>0.8)"
      },
      "low_confidence_count": {
        "type": "integer",
        "description": "Number of predictions with low confidence (<0.5)"
      },
      "confidence_scores": {
        "type": "array",
        "items": {"type": "number"},
        "description": "Individual confidence scores for each prediction"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Category Mapping Generator",
    "tool_description": "Creates mapping rules between different taxonomy structures to enable category translation and data migration between classification systems.",
    "parameters": {
      "source_taxonomy_id": {
        "type": "string",
        "required": true,
        "description": "Identifier of the source taxonomy to map from"
      },
      "target_taxonomy_id": {
        "type": "string",
        "required": true,
        "description": "Identifier of the target taxonomy to map to"
      },
      "mapping_approach": {
        "type": "string",
        "required": false,
        "description": "Mapping generation approach: automatic, similarity_based, or keyword_matching",
        "default": "similarity_based"
      },
      "similarity_threshold": {
        "type": "number",
        "required": false,
        "description": "Minimum similarity score for automatic mappings (0.1-0.9)",
        "default": 0.7
      },
      "allow_many_to_one": {
        "type": "boolean",
        "required": false,
        "description": "Whether to allow multiple source categories to map to one target category",
        "default": true
      }
    },
    "error_messages": [
      "Invalid source taxonomy: The specified source taxonomy does not exist",
      "Invalid target taxonomy: The specified target taxonomy does not exist",
      "Invalid mapping approach: Use one of [automatic, similarity_based, keyword_matching]",
      "Invalid similarity threshold: Value must be between 0.1 and 0.9",
      "Mapping generation failed: Unable to generate meaningful mappings between taxonomies"
    ],
    "usage": "Provide source_taxonomy_id and target_taxonomy_id, optionally configure mapping_approach and parameters. The tool generates category mapping rules for taxonomy translation.",
    "output_details": {
      "mapping_summary": {
        "type": "string",
        "description": "Summary of mapping generation results"
      },
      "total_mappings": {
        "type": "integer",
        "description": "Total number of category mappings created"
      },
      "automatic_mappings": {
        "type": "integer",
        "description": "Number of mappings generated automatically"
      },
      "unmapped_categories": {
        "type": "integer",
        "description": "Number of source categories without mappings"
      },
      "confidence_distribution": {
        "type": "array",
        "items": {"type": "number"},
        "description": "Distribution of mapping confidence scores"
      },
      "mapping_coverage": {
        "type": "number",
        "description": "Percentage of source categories successfully mapped"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Taxonomy Export Manager",
    "tool_description": "Exports taxonomy data in various formats for integration with external systems, reporting, and backup purposes.",
    "parameters": {
      "taxonomy_id": {
        "type": "string",
        "required": true,
        "description": "Identifier of the taxonomy to export"
      },
      "export_format":
