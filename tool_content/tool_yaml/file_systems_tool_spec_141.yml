field_name: file_systems
subfield: File Storage and Retrieval
task: Search and query files by name, type, content, tags, and metadata
tool_description: |-
  **STEP 1 — Rate task difficulty**

  This task involves complex file system operations with multiple search criteria, metadata handling, content indexing, and query optimization. The scope includes diverse file types, multiple search dimensions, and potential performance considerations for large datasets, making this a medium difficulty task.

  **STEP 2 — Set a tool budget**

  Given the medium complexity, I'll target 12 tools to cover the various aspects of file search, metadata management, content analysis, and query execution while maintaining composability.

  **STEP 3 — List all tool names and dependencies**

  1. **File Metadata Extractor** - Consumes: file paths → Produces: metadata records
  2. **Content Indexer** - Consumes: file paths, content → Produces: searchable indexes
  3. **Tag Manager** - Consumes: file paths, tags → Produces: tag associations
  4. **File Type Classifier** - Consumes: file paths → Produces: file type classifications
  5. **Name Pattern Matcher** - Consumes: search patterns, file names → Produces: matching results
  6. **Content Search Engine** - Consumes: search queries, indexes → Produces: content matches
  7. **Metadata Query Processor** - Consumes: metadata filters → Produces: filtered file lists
  8. **Advanced File Scanner** - Consumes: directory paths, filters → Produces: file inventories
  9. **Tag Query Engine** - Consumes: tag queries → Produces: tagged file lists
  10. **Search Result Merger** - Consumes: multiple result sets → Produces: unified results
  11. **File Permission Checker** - Consumes: file paths, user context → Produces: access status
  12. **Query Result Ranker** - Consumes: search results, ranking criteria → Produces: sorted results

  **STEP 4 — List multi-tool plans**

  **Simple Plans:**
  - Basic name search: File Permission Checker → Name Pattern Matcher → Query Result Ranker
  - File type filtering: Advanced File Scanner → File Type Classifier → Search Result Merger

  **Medium Plans:**
  - Metadata-based search: Advanced File Scanner → File Metadata Extractor → Metadata Query Processor → Query Result Ranker
  - Tag-based discovery: Tag Manager → Tag Query Engine → File Permission Checker → Search Result Merger
  - Content search with ranking: Content Indexer → Content Search Engine → Query Result Ranker

  **Complex Plans:**
  - Multi-criteria search: Advanced File Scanner → File Type Classifier → File Metadata Extractor → Tag Manager → Content Indexer → Name Pattern Matcher → Content Search Engine → Metadata Query Processor → Tag Query Engine → Search Result Merger → Query Result Ranker
  - Comprehensive file analysis: Advanced File Scanner → File Type Classifier → File Metadata Extractor → Tag Manager → Content Indexer → File Permission Checker → Search Result Merger

  **STEP 5 — Produce tools**

  ```json
  {
    "tool_name": "File Metadata Extractor",
    "tool_description": "Extracts comprehensive metadata information from files including size, timestamps, permissions, and format-specific properties.",
    "parameters": {
      "file_paths": {
        "type": "array",
        "items": {"type": "string"},
        "required": true,
        "description": "Array of file paths to extract metadata from",
        "minItems": 1,
        "maxItems": 1000
      },
      "include_checksums": {
        "type": "boolean",
        "required": false,
        "description": "Whether to calculate file checksums",
        "default": false
      }
    },
    "error_messages": [
      "File not found: One or more specified file paths do not exist. Verify file paths are correct and accessible.",
      "Permission denied: Insufficient permissions to access file metadata. Ensure read permissions are granted.",
      "Invalid file path format: File paths must be valid absolute or relative paths. Check path syntax and encoding."
    ],
    "usage": "Provide an array of file paths to extract metadata. Optionally enable checksum calculation for file integrity verification.",
    "output_details": {
      "metadata_records": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Array of JSON-encoded metadata records for each file"
      },
      "extraction_count": {
        "type": "integer",
        "description": "Number of files successfully processed"
      },
      "failed_files": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Array of file paths that failed metadata extraction"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Content Indexer",
    "tool_description": "Creates searchable indexes of file content supporting multiple file formats and content types for fast retrieval.",
    "parameters": {
      "file_paths": {
        "type": "array",
        "items": {"type": "string"},
        "required": true,
        "description": "Array of file paths to index",
        "minItems": 1,
        "maxItems": 5000
      },
      "supported_formats": {
        "type": "array",
        "items": {"type": "string"},
        "required": false,
        "description": "File formats to index (txt, pdf, doc, docx, html, xml, json, csv)",
        "default": ["txt", "pdf", "doc", "docx"]
      },
      "index_name": {
        "type": "string",
        "required": true,
        "description": "Name for the created index"
      },
      "max_file_size_mb": {
        "type": "integer",
        "required": false,
        "description": "Maximum file size to index in megabytes",
        "default": 100
      },
      "extract_metadata": {
        "type": "boolean",
        "required": false,
        "description": "Whether to extract and index file metadata",
        "default": true
      },
      "language": {
        "type": "string",
        "required": false,
        "description": "Content language for text processing (en, es, fr, de, etc.)",
        "default": "en"
      }
    },
    "error_messages": [
      "Unsupported file format: One or more files have formats not included in supported_formats. Add the format or filter files.",
      "File too large: File exceeds max_file_size_mb limit. Increase limit or exclude large files.",
      "Index creation failed: Unable to create index with specified name. Ensure index name is unique and valid.",
      "Content extraction error: Failed to extract text content from file. Verify file is not corrupted.",
      "Insufficient disk space: Not enough storage available for index creation. Free up disk space.",
      "Invalid language code: Language parameter must be a valid ISO 639-1 language code."
    ],
    "usage": "Provide file paths and index name. Optionally specify supported formats, size limits, and language. The tool creates a searchable content index.",
    "output_details": {
      "index_id": {
        "type": "string",
        "description": "Unique identifier for the created index"
      },
      "indexed_files_count": {
        "type": "integer",
        "description": "Number of files successfully indexed"
      },
      "total_documents": {
        "type": "integer",
        "description": "Total number of searchable documents in index"
      },
      "index_size_mb": {
        "type": "number",
        "description": "Size of the created index in megabytes"
      },
      "failed_files": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Array of file paths that failed indexing"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Tag Manager",
    "tool_description": "Manages file tags including creation, assignment, removal, and tag hierarchy operations for organizing files.",
    "parameters": {
      "operation": {
        "type": "string",
        "required": true,
        "description": "Operation type: add_tags, remove_tags, list_tags, create_hierarchy"
      },
      "file_paths": {
        "type": "array",
        "items": {"type": "string"},
        "required": false,
        "description": "Array of file paths to operate on",
        "default": null
      },
      "tags": {
        "type": "array",
        "items": {"type": "string"},
        "required": false,
        "description": "Array of tag names to add or remove",
        "default": null
      },
      "tag_namespace": {
        "type": "string",
        "required": false,
        "description": "Namespace for organizing tags",
        "default": "default"
      }
    },
    "error_messages": [
      "Invalid operation: Operation must be one of [add_tags, remove_tags, list_tags, create_hierarchy].",
      "Missing required parameters: add_tags and remove_tags operations require both file_paths and tags parameters.",
      "Tag name invalid: Tag names must be alphanumeric with underscores and hyphens only. Avoid special characters.",
      "File not found: One or more specified files do not exist or are not accessible.",
      "Tag already exists: Cannot create tag that already exists in the specified namespace."
    ],
    "usage": "Specify operation type and provide required parameters based on operation. Use add_tags/remove_tags with file_paths and tags arrays.",
    "output_details": {
      "operation_success": {
        "type": "boolean",
        "description": "Whether the operation completed successfully"
      },
      "affected_files_count": {
        "type": "integer",
        "description": "Number of files affected by the operation"
      },
      "tags_processed": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Array of tags that were processed"
      },
      "errors": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Array of error messages for failed operations"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "File Type Classifier",
    "tool_description": "Classifies files by type using file extensions, magic numbers, and content analysis to determine accurate file categories.",
    "parameters": {
      "file_paths": {
        "type": "array",
        "items": {"type": "string"},
        "required": true,
        "description": "Array of file paths to classify",
        "minItems": 1,
        "maxItems": 2000
      },
      "classification_method": {
        "type": "string",
        "required": false,
        "description": "Method to use: extension, magic_number, content_analysis, or combined",
        "default": "combined"
      },
      "detailed_categories": {
        "type": "boolean",
        "required": false,
        "description": "Whether to return detailed subcategories",
        "default": false
      }
    },
    "error_messages": [
      "Invalid classification method: Method must be one of [extension, magic_number, content_analysis, combined].",
      "File not accessible: One or more files cannot be read. Check file permissions and existence.",
      "Classification failed: Unable to determine file type. File may be corrupted or in unknown format.",
      "Too many files: Number of files exceeds maximum limit. Process files in smaller batches."
    ],
    "usage": "Provide file paths array and optionally specify classification method and detail level. Tool returns file type classifications.",
    "output_details": {
      "classifications": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Array of file type classifications in JSON format"
      },
      "classified_count": {
        "type": "integer",
        "description": "Number of files successfully classified"
      },
      "unknown_types": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Array of file paths with unknown types"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Name Pattern Matcher",
    "tool_description": "Matches file names against patterns using wildcards, regex, and fuzzy matching to find files by naming conventions.",
    "parameters": {
      "search_pattern": {
        "type": "string",
        "required": true,
        "description": "Search pattern using wildcards (* ?), regex, or literal text"
      },
      "file_names": {
        "type": "array",
        "items": {"type": "string"},
        "required": true,
        "description": "Array of file names or paths to search through",
        "minItems": 1,
        "maxItems": 10000
      },
      "pattern_type": {
        "type": "string",
        "required": false,
        "description": "Pattern type: wildcard, regex, fuzzy, or literal",
        "default": "wildcard"
      },
      "case_sensitive": {
        "type": "boolean",
        "required": false,
        "description": "Whether matching should be case sensitive",
        "default": false
      },
      "fuzzy_threshold": {
        "type": "number",
        "required": false,
        "description": "Similarity threshold for fuzzy matching (0.0 to 1.0)",
        "default": 0.8
      }
    },
    "error_messages": [
      "Invalid pattern type: Pattern type must be one of [wildcard, regex, fuzzy, literal].",
      "Invalid regex pattern: Regular expression syntax is invalid. Check regex pattern syntax.",
      "Fuzzy threshold out of range: Fuzzy threshold must be between 0.0 and 1.0.",
      "Empty search pattern: Search pattern cannot be empty or null.",
      "Pattern too complex: Search pattern is too complex and may cause performance issues. Simplify pattern."
    ],
    "usage": "Provide search pattern and file names array. Specify pattern type and matching options. Tool returns matching file names.",
    "output_details": {
      "matches": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Array of file names that match the pattern"
      },
      "match_count": {
        "type": "integer",
        "description": "Total number of matching files"
      },
      "similarity_scores": {
        "type": "array",
        "items": {"type": "number"},
        "description": "Array of similarity scores for fuzzy matches"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Content Search Engine",
    "tool_description": "Searches through indexed file content using full-text search capabilities with ranking and filtering options.",
    "parameters": {
      "query": {
        "type": "string",
        "required": true,
        "description": "Search query text with optional operators (AND, OR, NOT, quotes)"
      },
      "index_id": {
        "type": "string",
        "required": true,
        "description": "Index identifier to search within"
      },
      "max_results": {
        "type": "integer",
        "required": false,
        "description": "Maximum number of results to return",
        "default": 100
      },
      "result_offset": {
        "type": "integer",
        "required": false,
        "description": "Number of results to skip for pagination",
        "default": 0
      },
      "include_snippets": {
        "type": "boolean",
        "required": false,
        "description": "Whether to include text snippets in results",
        "default": true
      },
      "file_type_filter": {
        "type": "array",
        "items": {"type": "string"},
        "required": false,
        "description": "Array of file types to filter results",
        "default": null
      },
      "date_range_start": {
        "type": "string",
        "required": false,
        "description": "Start date for filtering results (ISO 8601 format)",
        "format": "date-time",
        "default": null
      },
      "date_range_end": {
        "type": "string",
        "required": false,
        "description": "End date for filtering results (ISO 8601 format)",
        "format": "date-time",
        "default": null
      }
    },
    "error_messages": [
      "Index not found: Specified index_id does not exist. Verify index was created successfully.",
      "Invalid query syntax: Search query contains invalid operators or syntax. Check query format.",
      "Invalid date format: Date parameters must be in ISO 8601 format (YYYY-MM-DDTHH:MM:SSZ).",
      "Result limit exceeded: max_results exceeds system maximum. Reduce limit or use pagination.",
      "Search timeout: Query took too long to execute. Simplify query or increase timeout settings.",
      "Index corrupted: Search index is corrupted or inaccessible. Rebuild index.",
      "Invalid file type filter: One or more file types in filter are not recognized.",
      "Invalid offset: result_offset must be non-negative and less than total results."
    ],
    "usage": "Provide search query and index_id. Optionally set result limits, filters, and pagination. Tool returns ranked search results with metadata.",
    "output_details": {
      "results": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Array of search result objects in JSON format"
      },
      "total_matches": {
        "type": "integer",
        "description": "Total number of matching documents"
      },
      "search_time_ms": {
        "type": "number",
        "description": "Time taken to execute search in milliseconds"
      },
      "has_more_results": {
        "type": "boolean",
        "description": "Whether more results are available for pagination"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Metadata Query Processor",
    "tool_description": "Processes complex metadata queries with filtering, sorting, and aggregation capabilities to find files based on metadata criteria.",
    "parameters": {
      "metadata_source": {
        "type": "string",
        "required": true,
        "description": "Source of metadata: database, index, or file_system"
      },
      "filter_criteria": {
        "type": "array",
        "items": {"type": "string"},
        "required": true,
        "description": "Array of filter expressions in format 'field:operator:value'",
        "minItems": 1,
        "maxItems": 20
      },
      "sort_fields": {
        "type": "array",
        "items": {"type": "string"},
        "required": false,
        "description": "Array of fields to sort by with optional direction (field:asc/desc)",
        "default": ["modified_time:desc"]
      },
      "output_fields": {
        "type": "array",
        "items": {"type": "string"},
        "required": false,
        "description": "Array of metadata fields to include in output",
        "default": ["path", "size", "modified_time", "type"]
      },
      "limit": {
        "type": "integer",
        "required": false,
        "description": "Maximum number of results to return",
        "default": 1000
      },
      "enable_aggregation": {
        "type": "boolean",
        "required": false,
        "description": "Whether to include aggregation statistics",
        "default": false
      }
    },
    "error_messages": [
      "Invalid metadata source: Source must be one of [database, index, file_system].",
      "Invalid filter expression: Filter criteria must follow format 'field:operator:value'. Check syntax.",
      "Unsupported operator: Use supported operators [eq, ne, gt, lt, gte, lte, contains, starts_with, ends_with].",
      "Unknown metadata field: One or more specified fields do not exist in metadata schema.",
      "Invalid sort direction: Sort direction must be 'asc' or 'desc'.",
      "Query too complex: Reduce number of filter criteria or simplify expressions.",
      "Metadata source unavailable: Cannot access specified metadata source. Check connection.",
      "Result limit exceeded: Requested limit exceeds maximum allowed. Reduce limit value."
    ],
    "usage": "Specify metadata source and filter criteria array. Optionally configure sorting, output fields, and limits. Tool returns filtered file metadata.",
    "output_details": {
      "filtered_files": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Array of file metadata objects matching criteria"
      },
      "result_count": {
        "type": "integer",
        "description": "Number of files matching the query"
      },
      "aggregations": {
        "type": "string",
        "description": "JSON string containing aggregation statistics if enabled"
      },
      "query_execution_time": {
        "type": "number",
        "description": "Time taken to execute query in milliseconds"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Advanced File Scanner",
    "tool_description": "Scans directories and file systems with advanced filtering, depth control, and selective scanning capabilities for comprehensive file discovery.",
    "parameters": {
      "root_paths": {
        "type": "array",
        "items": {"type": "string"},
        "required": true,
        "description": "Array of root directory paths to scan",
        "minItems": 1,
        "maxItems": 10
      },
      "max_depth": {
        "type": "integer",
        "required": false,
        "description": "Maximum directory depth to scan (-1 for unlimited)",
        "default": -1
      },
      "include_hidden": {
        "type": "boolean",
        "required": false,
        "description": "Whether to include hidden files and directories",
        "default": false
      },
      "file_size_min": {
        "type": "integer",
        "required": false,
        "description": "Minimum file size in bytes",
        "default": null
      },
      "file_size_max": {
        "type": "integer",
        "required": false,
        "description": "Maximum file size in bytes",
        "default": null
      },
      "modified_after": {
        "type": "string",
        "required": false,
        "description": "Include files modified after this date (ISO 8601 format)",
        "format": "date-time",
        "default": null
      },
      "modified_before": {
        "type": "string",
        "required": false,
        "description": "Include files modified before this date (ISO 8601 format)",
        "format": "date-time",
        "default": null
      },
      "exclude_patterns": {
        "type": "array",
        "items": {"type": "string"},
        "required": false,
        "description": "Array of file/directory patterns to exclude",
        "default": null
      },
      "include_patterns": {
        "type": "array",
        "items": {"type": "string"},
        "required": false,
        "description": "Array of file/directory patterns to include",
        "default": null
      },
      "follow_symlinks": {
        "type": "boolean",
        "required": false,
        "description": "Whether to follow symbolic links",
        "default": false
      },
      "scan_timeout_seconds": {
        "type": "integer",
        "required": false,
        "description": "Maximum time to spend scanning in seconds",
        "default": 300
      },
      "collect_metadata": {
        "type": "boolean",
        "required": false,
        "description": "Whether to collect basic file metadata during scan",
        "default": true
      }
    },
    "error_messages": [
      "Invalid root path: One or more root paths do not exist or are not accessible.",
      "Permission denied: Insufficient permissions to scan specified directories.",
      "Invalid date format: Date parameters must be in ISO 8601 format (YYYY-MM-DDTHH:MM:SSZ).",
      "Scan timeout exceeded: Directory scanning took longer than specified timeout. Increase timeout or reduce scope.",
      "Invalid size parameters: file_size_min must be less than file_size_max when both are specified.",
      "Pattern syntax error: Include or exclude patterns contain invalid regular expression syntax.",
      "Symbolic link loop detected: Circular symbolic link reference found. Disable follow_symlinks to avoid.",
      "Insufficient disk space: Not enough space to store scan results. Free up disk space.",
      "Max depth invalid: max_depth must be -1 (unlimited) or a positive integer.",
      "Too many files: Scan would return too many files. Add filters to reduce result set.",
      "Network path timeout: Network location is unreachable or taking too long to respond.",
      "File system error: Error accessing file system. Check disk health and permissions."
    ],
    "usage": "Provide root paths array and configure filtering options like size limits, date ranges, and patterns. Tool performs comprehensive directory scanning.",
    "output_details": {
      "discovered_files": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Array of discovered file paths"
      },
      "total_files_found": {
        "type": "integer",
        "description": "Total number of files discovered"
      },
      "directories_scanned": {
        "type": "integer",
        "description": "Number of directories processed"
      },
      "scan_duration_seconds": {
        "type": "number",
        "description": "Time taken to complete the scan"
      },
      "metadata_collected": {
        "type": "boolean",
        "description": "Whether metadata was collected for discovered files"
      },
      "excluded_files_count": {
        "type": "integer",
        "description": "Number of files excluded by filters"
      },
      "errors_encountered": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Array of error messages for files that could not be accessed"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Tag Query Engine",
    "tool_description": "Executes complex tag-based queries with boolean logic, hierarchical tag support, and tag relationship analysis.",
    "parameters": {
      "query_expression": {
        "type": "string",
        "required": true,
        "description": "Tag query using boolean operators (AND, OR, NOT) and parentheses"
      },
      "tag_namespace": {
        "type": "string",
        "required": false,
        "description": "Namespace to search within",
        "default": "default"
      },
      "include_hierarchy": {
        "type": "boolean",
        "required": false,
        "description": "Whether to include files with child tags",
        "default": true
      }
    },
    "error_messages": [
      "Invalid query syntax: Query expression contains invalid boolean operators or parentheses. Use AND, OR, NOT operators.",
      "Tag not found: One or more tags in query do not exist in specified namespace.",
      "Query too complex: Query expression is too complex to process efficiently. Simplify the query.",
      "Namespace not found: Specified tag namespace does not exist.",
      "Empty query: Query expression cannot be empty."
    ],
    "usage": "Provide tag query expression with boolean logic. Optionally specify namespace and hierarchy options. Tool returns files matching tag criteria.",
    "output_details": {
      "matching_files": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Array of file paths matching the tag query"
      },
      "match_count": {
        "type": "integer",
        "description": "Number of files matching the query"
      },
      "tags_used": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Array of tags that were evaluated in the query"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Search Result Merger",
    "tool_description": "Merges and deduplicates multiple search result sets from different search operations with configurable merge strategies.",
    "parameters": {
      "result_sets": {
        "type": "array",
        "items": {"type": "string"},
        "required": true,
        "description": "Array of JSON-encoded search result sets to merge",
        "minItems": 2,
        "maxItems": 10
      },
      "merge_strategy": {
        "type": "string",
        "required": false,
        "description": "Strategy for merging: union, intersection, or weighted_union",
        "default": "union"
      }
    },
    "error_messages": [
      "Invalid merge strategy: Strategy must be one of [union, intersection, weighted_union].",
      "Invalid result set format: One or more result sets are not in valid JSON format.",
      "Incompatible result sets: Result sets have incompatible schemas and cannot be merged.",
      "Insufficient result sets: At least two result sets are required for merging."
    ],
    "usage": "Provide array of JSON-encoded result sets and specify merge strategy. Tool combines results according to chosen strategy.",
    "output_details": {
      "merged_results": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Array of merged and deduplicated search results"
      },
      "total_unique_results": {
        "type": "integer",
        "description": "Number of unique results after merging"
      },
      "duplicates_removed": {
        "type": "integer",
        "description": "Number of duplicate entries that were removed"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "File Permission Checker",
    "tool_description": "Validates file access permissions and security constraints to ensure files can be accessed by the requesting user or system.",
    "parameters": {
      "file_paths": {
        "type": "array",
        "items": {"type": "string"},
        "required": true,
        "description": "Array of file paths to check permissions for",
        "minItems": 1,
        "maxItems": 5000
      },
      "required_permissions": {
        "type": "array",
        "items": {"type": "string"},
        "required": false,
        "description": "Array of required permissions: read, write, execute, delete",
        "default": ["read"]
      },
      "user_context": {
        "type": "string",
        "required": false,
        "description": "User context to check permissions for (current user if not specified)",
        "default": null
      }
    },
    "error_messages": [
      "Invalid permission type: Permissions must be one of [read, write, execute, delete].",
      "User context not found: Specified user context does not exist or is not accessible.",
      "File not found: One or more file paths do not exist.",
      "System error: Unable to retrieve permission information due to system error."
    ],
    "usage": "Provide file paths array and specify required permissions. Optionally set user context for permission checking.",
    "output_details": {
      "accessible_files": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Array of file paths that meet permission requirements"
      },
      "restricted_files": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Array of file paths with insufficient permissions"
      },
      "permission_details": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Array of detailed permission information for each file"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Query Result Ranker",
    "tool_description": "Ranks and sorts search results using multiple scoring algorithms and user-defined criteria for optimal result ordering.",
    "parameters": {
      "search_results": {
        "type": "array",
        "items": {"type": "string"},
        "required": true,
        "description": "Array of search result
