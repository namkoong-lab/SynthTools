field_name: document_scanning_and_ocr
subfield: invoice_and_receipt_processing
task: Validate invoice authenticity and detect potential fraud or duplicate submissions
tool_description: |-
  **STEP 1 — Rate task difficulty**

  This task is **hard** due to the complex scope requiring multiple fraud detection techniques, high ambiguity in defining fraudulent patterns, critical coordination between validation steps, severe impact of false positives/negatives, and substantial infrastructure needs for document processing and reference databases.

  **STEP 2 — Set a tool budget**

  Given the hard difficulty rating, I'm targeting **17 tools** within the 15-20 range to cover document extraction, validation workflows, fraud detection algorithms, and duplicate analysis comprehensively.

  **STEP 3 — List all tool names and dependencies**

  1. **OCR Text Extractor** - Consumes: raw document image; Produces: extracted text fields
  2. **Document Format Validator** - Consumes: document image; Produces: format compliance status
  3. **Invoice Field Parser** - Consumes: extracted text; Produces: structured invoice data
  4. **Vendor Database Checker** - Consumes: vendor details; Produces: vendor verification status
  5. **Tax ID Validator** - Consumes: tax identification numbers; Produces: validation results
  6. **Amount Consistency Checker** - Consumes: invoice amounts/calculations; Produces: mathematical validation
  7. **Date Logic Validator** - Consumes: invoice dates; Produces: chronological validation
  8. **Digital Signature Verifier** - Consumes: document signatures; Produces: signature authenticity
  9. **Metadata Analyzer** - Consumes: document metadata; Produces: creation/modification analysis
  10. **Font Inconsistency Detector** - Consumes: document image; Produces: font analysis results
  11. **Duplicate Content Scanner** - Consumes: invoice data + reference database; Produces: duplicate matches
  12. **Sequential Number Checker** - Consumes: invoice numbers; Produces: sequence validation
  13. **Pattern Anomaly Detector** - Consumes: invoice patterns; Produces: anomaly scores
  14. **Cross Reference Validator** - Consumes: purchase orders + invoices; Produces: matching validation
  15. **Risk Score Calculator** - Consumes: multiple validation results; Produces: overall fraud risk score
  16. **Audit Trail Generator** - Consumes: all validation results; Produces: comprehensive audit report
  17. **Fraud Alert Manager** - Consumes: risk scores; Produces: alert classifications and recommendations

  **STEP 4 — Multi-tool plans**

  **Simple Plans:**
  - Basic authenticity check: OCR Text Extractor → Invoice Field Parser → Vendor Database Checker → Risk Score Calculator
  - Quick duplicate scan: OCR Text Extractor → Invoice Field Parser → Duplicate Content Scanner → Fraud Alert Manager

  **Medium Plans:**
  - Standard validation workflow: OCR Text Extractor → Invoice Field Parser → Amount Consistency Checker → Date Logic Validator → Vendor Database Checker → Risk Score Calculator → Audit Trail Generator
  - Format compliance check: Document Format Validator → OCR Text Extractor → Font Inconsistency Detector → Digital Signature Verifier → Risk Score Calculator → Fraud Alert Manager

  **Complex Plans:**
  - Comprehensive fraud detection: OCR Text Extractor → Invoice Field Parser → Amount Consistency Checker → Date Logic Validator → Vendor Database Checker → Tax ID Validator → Digital Signature Verifier → Metadata Analyzer → Pattern Anomaly Detector → Sequential Number Checker → Duplicate Content Scanner → Cross Reference Validator → Risk Score Calculator → Audit Trail Generator → Fraud Alert Manager
  - Advanced duplicate analysis: OCR Text Extractor → Invoice Field Parser → Duplicate Content Scanner → Sequential Number Checker → Pattern Anomaly Detector → Font Inconsistency Detector → Metadata Analyzer → Risk Score Calculator → Fraud Alert Manager

  **STEP 5 — Produce tools**

  ```json
  {
    "tool_name": "OCR Text Extractor",
    "tool_description": "Extracts text content from invoice/receipt images using optical character recognition, handling various document formats and image qualities.",
    "parameters": {
      "image_data": {
        "type": "string",
        "required": true,
        "description": "Base64 encoded image data of the document"
      },
      "image_format": {
        "type": "string",
        "required": true,
        "description": "Image format (PNG, JPG, JPEG, PDF, TIFF)"
      },
      "ocr_engine": {
        "type": "string",
        "required": false,
        "description": "OCR engine to use (tesseract, paddle, easyocr)",
        "default": "tesseract"
      },
      "language": {
        "type": "string",
        "required": false,
        "description": "Document language code (en, es, fr, de, etc.)",
        "default": "en"
      },
      "confidence_threshold": {
        "type": "number",
        "required": false,
        "description": "Minimum confidence score for text extraction (0.0-1.0)",
        "default": 0.7
      }
    },
    "error_messages": [
      "Invalid image format: Supported formats are PNG, JPG, JPEG, PDF, TIFF only.",
      "Image data corrupted: Base64 encoded image data is malformed or corrupted.",
      "OCR engine not supported: Use tesseract, paddle, or easyocr.",
      "Language not supported: Provide a valid ISO 639-1 language code.",
      "Confidence threshold out of range: Value must be between 0.0 and 1.0.",
      "Image quality too poor: Document image resolution or quality insufficient for OCR processing."
    ],
    "usage": "Provide base64 encoded image data and format. Optionally specify OCR engine, language, and confidence threshold for better accuracy.",
    "output_details": {
      "extracted_text": {
        "type": "string",
        "description": "Raw text content extracted from the document"
      },
      "confidence_score": {
        "type": "number",
        "description": "Overall confidence score of the extraction process"
      },
      "processing_time": {
        "type": "number",
        "description": "Time taken for OCR processing in seconds"
      },
      "text_regions": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Individual text regions identified in the document"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Document Format Validator",
    "tool_description": "Validates document format compliance, checks image quality, resolution, and structural integrity of invoice/receipt documents.",
    "parameters": {
      "image_data": {
        "type": "string",
        "required": true,
        "description": "Base64 encoded image data of the document"
      },
      "expected_format": {
        "type": "string",
        "required": true,
        "description": "Expected document format (invoice, receipt, credit_note, purchase_order)"
      },
      "min_resolution": {
        "type": "integer",
        "required": false,
        "description": "Minimum required resolution in DPI",
        "default": 150
      }
    },
    "error_messages": [
      "Invalid document format: Expected format must be invoice, receipt, credit_note, or purchase_order.",
      "Resolution too low: Document resolution below minimum required DPI threshold.",
      "Image data corrupted: Base64 encoded image data is malformed.",
      "Document structure invalid: Document does not conform to expected format structure."
    ],
    "usage": "Provide document image data and expected format type. Tool validates format compliance and image quality standards.",
    "output_details": {
      "format_valid": {
        "type": "boolean",
        "description": "Whether document format is valid"
      },
      "resolution": {
        "type": "integer",
        "description": "Detected document resolution in DPI"
      },
      "quality_score": {
        "type": "number",
        "description": "Document quality score from 0.0 to 1.0"
      },
      "validation_issues": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of format validation issues found"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Invoice Field Parser",
    "tool_description": "Parses extracted text to identify and structure specific invoice fields like vendor details, amounts, dates, and line items.",
    "parameters": {
      "raw_text": {
        "type": "string",
        "required": true,
        "description": "Raw text extracted from the document"
      },
      "document_type": {
        "type": "string",
        "required": true,
        "description": "Type of document (invoice, receipt, credit_note)"
      },
      "parsing_template": {
        "type": "string",
        "required": false,
        "description": "Specific parsing template to use (standard, custom, adaptive)",
        "default": "standard"
      },
      "currency_code": {
        "type": "string",
        "required": false,
        "description": "Expected currency code (USD, EUR, GBP, etc.)",
        "default": "USD"
      },
      "date_format": {
        "type": "string",
        "required": false,
        "description": "Expected date format (MM/DD/YYYY, DD/MM/YYYY, YYYY-MM-DD)",
        "default": "MM/DD/YYYY"
      },
      "extract_line_items": {
        "type": "boolean",
        "required": false,
        "description": "Whether to extract individual line items",
        "default": true
      },
      "require_vendor_info": {
        "type": "boolean",
        "required": false,
        "description": "Whether vendor information is required",
        "default": true
      },
      "confidence_threshold": {
        "type": "number",
        "required": false,
        "description": "Minimum confidence for field extraction (0.0-1.0)",
        "default": 0.8
      }
    },
    "error_messages": [
      "Invalid document type: Must be invoice, receipt, or credit_note.",
      "Parsing template not found: Use standard, custom, or adaptive.",
      "Currency code invalid: Provide valid 3-letter ISO currency code.",
      "Date format not supported: Use MM/DD/YYYY, DD/MM/YYYY, or YYYY-MM-DD.",
      "Insufficient text data: Raw text too short or empty for parsing.",
      "Field extraction failed: Unable to identify required fields with sufficient confidence."
    ],
    "usage": "Provide raw extracted text and document type. Configure parsing options like template, currency, and date format for accurate field extraction.",
    "output_details": {
      "vendor_name": {
        "type": "string",
        "description": "Extracted vendor/company name"
      },
      "vendor_address": {
        "type": "string",
        "description": "Vendor address information"
      },
      "invoice_number": {
        "type": "string",
        "description": "Invoice or receipt number"
      },
      "invoice_date": {
        "type": "string",
        "description": "Invoice date in ISO format"
      },
      "due_date": {
        "type": "string",
        "description": "Payment due date in ISO format"
      },
      "total_amount": {
        "type": "number",
        "description": "Total invoice amount"
      },
      "subtotal": {
        "type": "number",
        "description": "Subtotal before taxes"
      },
      "tax_amount": {
        "type": "number",
        "description": "Total tax amount"
      },
      "currency": {
        "type": "string",
        "description": "Currency code used"
      },
      "line_items": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Individual line items with descriptions and amounts"
      },
      "parsing_confidence": {
        "type": "number",
        "description": "Overall confidence score of parsing results"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Vendor Database Checker",
    "tool_description": "Validates vendor information against known vendor databases and blacklists to detect suspicious or unknown vendors.",
    "parameters": {
      "vendor_name": {
        "type": "string",
        "required": true,
        "description": "Vendor name to validate"
      },
      "vendor_address": {
        "type": "string",
        "required": false,
        "description": "Vendor address for additional validation",
        "default": "None"
      },
      "tax_id": {
        "type": "string",
        "required": false,
        "description": "Vendor tax ID or registration number",
        "default": "None"
      },
      "check_blacklist": {
        "type": "boolean",
        "required": false,
        "description": "Whether to check against fraud blacklist",
        "default": true
      },
      "fuzzy_matching": {
        "type": "boolean",
        "required": false,
        "description": "Enable fuzzy name matching for variations",
        "default": true
      }
    },
    "error_messages": [
      "Vendor name empty: Provide a valid vendor name for validation.",
      "Database connection failed: Unable to connect to vendor validation database.",
      "Invalid tax ID format: Tax ID format does not match expected pattern.",
      "Blacklist check unavailable: Fraud blacklist database temporarily unavailable."
    ],
    "usage": "Provide vendor name and optionally address and tax ID. Enable blacklist checking and fuzzy matching for comprehensive vendor validation.",
    "output_details": {
      "vendor_exists": {
        "type": "boolean",
        "description": "Whether vendor exists in known database"
      },
      "is_blacklisted": {
        "type": "boolean",
        "description": "Whether vendor appears on fraud blacklist"
      },
      "match_confidence": {
        "type": "number",
        "description": "Confidence score of vendor match (0.0-1.0)"
      },
      "vendor_status": {
        "type": "string",
        "description": "Vendor status (verified, suspicious, unknown, blacklisted)"
      },
      "registration_date": {
        "type": "string",
        "description": "Vendor registration date if available"
      },
      "risk_flags": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of risk factors associated with vendor"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Tax ID Validator",
    "tool_description": "Validates tax identification numbers and business registration numbers against official databases and format requirements.",
    "parameters": {
      "tax_id": {
        "type": "string",
        "required": true,
        "description": "Tax identification number to validate"
      },
      "country_code": {
        "type": "string",
        "required": true,
        "description": "Country code for tax ID format (US, CA, UK, DE, etc.)"
      },
      "id_type": {
        "type": "string",
        "required": false,
        "description": "Type of ID (EIN, SSN, VAT, GST, etc.)",
        "default": "EIN"
      }
    },
    "error_messages": [
      "Invalid tax ID format: Tax ID does not match required format for specified country.",
      "Country code not supported: Provide valid ISO 2-letter country code.",
      "Tax ID type invalid: Specify valid tax ID type for the country.",
      "Validation service unavailable: Official tax validation service temporarily unavailable.",
      "Tax ID not found: Tax ID not found in official records."
    ],
    "usage": "Provide tax ID, country code, and ID type. Tool validates format and checks against official tax databases where available.",
    "output_details": {
      "is_valid": {
        "type": "boolean",
        "description": "Whether tax ID is valid"
      },
      "format_correct": {
        "type": "boolean",
        "description": "Whether tax ID format is correct"
      },
      "official_status": {
        "type": "string",
        "description": "Official status (active, inactive, invalid, unknown)"
      },
      "business_name": {
        "type": "string",
        "description": "Associated business name if available"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Amount Consistency Checker",
    "tool_description": "Validates mathematical consistency of invoice amounts, checking subtotals, taxes, discounts, and total calculations for accuracy.",
    "parameters": {
      "subtotal": {
        "type": "number",
        "required": true,
        "description": "Invoice subtotal amount"
      },
      "tax_rate": {
        "type": "number",
        "required": true,
        "description": "Tax rate as percentage (e.g., 8.25 for 8.25%)"
      },
      "tax_amount": {
        "type": "number",
        "required": true,
        "description": "Tax amount charged"
      },
      "total_amount": {
        "type": "number",
        "required": true,
        "description": "Final total amount"
      },
      "discount_amount": {
        "type": "number",
        "required": false,
        "description": "Discount amount applied",
        "default": 0.0
      },
      "line_item_amounts": {
        "type": "array",
        "items": {
          "type": "number"
        },
        "required": false,
        "description": "Individual line item amounts",
        "default": "None"
      },
      "tolerance": {
        "type": "number",
        "required": false,
        "description": "Acceptable calculation tolerance for rounding",
        "default": 0.02
      }
    },
    "error_messages": [
      "Negative amounts not allowed: All amount values must be non-negative.",
      "Tax rate out of range: Tax rate must be between 0 and 100 percent.",
      "Tolerance too high: Tolerance must be between 0.00 and 1.00.",
      "Inconsistent calculations: Mathematical inconsistencies detected in amount calculations.",
      "Line items don't sum to subtotal: Individual line items don't match subtotal within tolerance."
    ],
    "usage": "Provide all invoice amounts including subtotal, tax rate, tax amount, and total. Optionally include line item amounts and set calculation tolerance.",
    "output_details": {
      "is_consistent": {
        "type": "boolean",
        "description": "Whether all calculations are mathematically consistent"
      },
      "calculated_tax": {
        "type": "number",
        "description": "Expected tax amount based on subtotal and rate"
      },
      "calculated_total": {
        "type": "number",
        "description": "Expected total amount based on calculations"
      },
      "discrepancies": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of calculation discrepancies found"
      },
      "variance_amount": {
        "type": "number",
        "description": "Total variance between expected and actual amounts"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Date Logic Validator",
    "tool_description": "Validates chronological consistency and logic of invoice dates, including issue date, due date, service dates, and payment terms.",
    "parameters": {
      "invoice_date": {
        "type": "string",
        "required": true,
        "description": "Invoice issue date in ISO 8601 format"
      },
      "due_date": {
        "type": "string",
        "required": false,
        "description": "Payment due date in ISO 8601 format",
        "default": "None"
      },
      "service_start_date": {
        "type": "string",
        "required": false,
        "description": "Service period start date in ISO 8601 format",
        "default": "None"
      },
      "service_end_date": {
        "type": "string",
        "required": false,
        "description": "Service period end date in ISO 8601 format",
        "default": "None"
      },
      "payment_terms": {
        "type": "integer",
        "required": false,
        "description": "Payment terms in days (e.g., 30 for Net 30)",
        "default": 30
      },
      "allow_future_dates": {
        "type": "boolean",
        "required": false,
        "description": "Whether to allow future invoice dates",
        "default": false
      }
    },
    "error_messages": [
      "Invalid date format: All dates must be in ISO 8601 format (YYYY-MM-DD).",
      "Future invoice date not allowed: Invoice date cannot be in the future unless explicitly allowed.",
      "Due date before invoice date: Due date must be after invoice date.",
      "Service dates invalid: Service end date must be after service start date.",
      "Payment terms out of range: Payment terms must be between 0 and 365 days.",
      "Chronological inconsistency: Date sequence violates logical business rules."
    ],
    "usage": "Provide invoice date and optionally other dates. Set payment terms and future date policy. Tool validates chronological consistency and business logic.",
    "output_details": {
      "dates_valid": {
        "type": "boolean",
        "description": "Whether all date logic is valid"
      },
      "expected_due_date": {
        "type": "string",
        "description": "Calculated due date based on invoice date and payment terms"
      },
      "days_to_due": {
        "type": "integer",
        "description": "Days between invoice date and due date"
      },
      "service_period_days": {
        "type": "integer",
        "description": "Length of service period in days if applicable"
      },
      "date_issues": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of date validation issues found"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Digital Signature Verifier",
    "tool_description": "Verifies digital signatures and certificates on documents, checking authenticity, validity, and certificate chain integrity.",
    "parameters": {
      "document_data": {
        "type": "string",
        "required": true,
        "description": "Base64 encoded document with embedded signature"
      },
      "signature_type": {
        "type": "string",
        "required": false,
        "description": "Expected signature type (PDF, XML, PKCS7)",
        "default": "PDF"
      },
      "check_certificate_chain": {
        "type": "boolean",
        "required": false,
        "description": "Whether to verify full certificate chain",
        "default": true
      }
    },
    "error_messages": [
      "No signature found: Document does not contain any digital signature.",
      "Invalid signature format: Signature format not supported or corrupted.",
      "Certificate expired: Signing certificate has expired.",
      "Certificate chain invalid: Certificate chain cannot be verified.",
      "Signature verification failed: Digital signature verification failed.",
      "Document modified: Document has been modified after signing."
    ],
    "usage": "Provide document with embedded digital signature. Specify signature type and certificate chain verification preferences.",
    "output_details": {
      "signature_valid": {
        "type": "boolean",
        "description": "Whether digital signature is valid"
      },
      "signer_name": {
        "type": "string",
        "description": "Name of the document signer"
      },
      "signing_date": {
        "type": "string",
        "description": "Date when document was signed"
      },
      "certificate_valid": {
        "type": "boolean",
        "description": "Whether signing certificate is valid"
      },
      "certificate_issuer": {
        "type": "string",
        "description": "Certificate issuing authority"
      },
      "document_integrity": {
        "type": "boolean",
        "description": "Whether document integrity is maintained"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Metadata Analyzer",
    "tool_description": "Analyzes document metadata including creation date, modification history, software used, and file properties to detect suspicious patterns.",
    "parameters": {
      "document_data": {
        "type": "string",
        "required": true,
        "description": "Base64 encoded document for metadata analysis"
      },
      "check_creation_software": {
        "type": "boolean",
        "required": false,
        "description": "Whether to analyze document creation software",
        "default": true
      },
      "check_modification_history": {
        "type": "boolean",
        "required": false,
        "description": "Whether to examine modification history",
        "default": true
      },
      "expected_creation_date": {
        "type": "string",
        "required": false,
        "description": "Expected document creation date for comparison",
        "default": "None"
      }
    },
    "error_messages": [
      "Metadata extraction failed: Unable to extract metadata from document.",
      "Document corrupted: Document file appears to be corrupted.",
      "Unsupported file type: Document type not supported for metadata analysis.",
      "Invalid expected date: Expected creation date must be in ISO 8601 format."
    ],
    "usage": "Provide document for metadata analysis. Enable software and modification history checking. Optionally specify expected creation date for comparison.",
    "output_details": {
      "creation_date": {
        "type": "string",
        "description": "Document creation timestamp"
      },
      "modification_date": {
        "type": "string",
        "description": "Last modification timestamp"
      },
      "creation_software": {
        "type": "string",
        "description": "Software used to create the document"
      },
      "modification_count": {
        "type": "integer",
        "description": "Number of times document was modified"
      },
      "suspicious_patterns": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of suspicious metadata patterns detected"
      },
      "metadata_consistent": {
        "type": "boolean",
        "description": "Whether metadata appears consistent and authentic"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Font Inconsistency Detector",
    "tool_description": "Analyzes document fonts, text styles, and formatting to detect inconsistencies that may indicate document tampering or fabrication.",
    "parameters": {
      "document_image": {
        "type": "string",
        "required": true,
        "description": "Base64 encoded document image for font analysis"
      },
      "sensitivity_level": {
        "type": "string",
        "required": false,
        "description": "Detection sensitivity (low, medium, high)",
        "default": "medium"
      },
      "check_font_families": {
        "type": "boolean",
        "required": false,
        "description": "Whether to analyze font family consistency",
        "default": true
      },
      "check_font_sizes": {
        "type": "boolean",
        "required": false,
        "description": "Whether to analyze font size patterns",
        "default": true
      },
      "check_character_spacing": {
        "type": "boolean",
        "required": false,
        "description": "Whether to check character spacing consistency",
        "default": true
      }
    },
    "error_messages": [
      "Image quality insufficient: Image resolution too low for font analysis.",
      "Invalid sensitivity level: Use low, medium, or high sensitivity.",
      "Font analysis failed: Unable to extract font information from document.",
      "No text detected: Document image contains no readable text for analysis."
    ],
    "usage": "Provide document image and configure analysis parameters. Set sensitivity level and enable specific font checks for comprehensive analysis.",
    "output_details": {
      "inconsistencies_found": {
        "type": "boolean",
        "description": "Whether font inconsistencies were detected"
      },
      "font_families_detected": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of different font families found"
      },
      "inconsistency_regions": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Text regions with font inconsistencies"
      },
      "suspicion_score": {
        "type": "number",
        "description": "Font inconsistency suspicion score (0.0-1.0)"
      },
      "analysis_details": {
        "type": "string",
        "description": "Detailed analysis of font patterns and inconsistencies"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Duplicate Content Scanner",
    "tool_description": "Scans for duplicate or near-duplicate invoices by comparing content, amounts, dates, and vendor information against historical records.",
    "parameters": {
      "invoice_number": {
        "type": "string",
        "required": true,
        "description": "Invoice number to check for duplicates"
      },
      "vendor_name": {
        "type": "string",
        "required": true,
        "description": "Vendor name for duplicate checking"
      },
      "total_amount": {
        "type": "number",
        "required": true,
        "description": "Invoice total amount"
      },
      "invoice_date": {
        "type": "string",
        "required": true,
        "description": "Invoice date in ISO 8601 format"
      },
      "search_days_back": {
        "type": "integer",
        "required": false,
        "description": "Number of days to search back for duplicates",
        "default": 90
      },
      "amount_tolerance": {
        "type": "number",
        "required": false,
        "description": "Acceptable amount variance for near-duplicates",
        "default": 0.01
      },
      "fuzzy_match_threshold": {
        "type": "number",
        "required": false,
        "description": "Similarity threshold for fuzzy matching (0.0-1.0)",
        "default": 0.9
      },
      "check_partial_duplicates": {
        "type": "boolean",
        "required": false,
        "description": "Whether to check for partial content duplicates",
        "default": true
      },
      "database_connection_string": {
        "type": "string",
        "required": true,
        "description": "Database connection string for historical records"
      }
    },
    "error_messages": [
      "Database connection failed: Unable to connect to historical invoice database.",
      "Invalid search period: Search days back must be between 1 and 730.",
      "Amount tolerance invalid: Tolerance must be between 0.00 and 100.00.",
      "Fuzzy match threshold invalid: Threshold must be between 0.0 and 1.0.",
      "Invoice date invalid: Provide valid ISO 8601 date format.",
      "Query timeout: Database query exceeded maximum execution time."
    ],
    "usage": "Provide invoice details and database connection. Configure search parameters, tolerance levels, and duplicate detection sensitivity for comprehensive scanning.",
    "output_details": {
      "duplicates_found": {
        "type": "boolean",
        "description": "Whether potential duplicates were found"
      },
      "duplicate_count": {
        "type": "integer",
        "description": "Number of potential duplicates identified"
      },
      "exact_matches": {
        "type": "array",
        "items": {
