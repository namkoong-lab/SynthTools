field_name: developer_tools
subfield: Integrated Development Environments and Code Editors
task: Project structure and file organization
tool_description: |-
  ## STEP 1 — Rate task difficulty

  This task involves medium complexity due to the need to handle diverse project types, multiple programming languages, and various organizational patterns. It requires understanding of best practices across different ecosystems, dependency management, and coordination between multiple file operations, but doesn't involve high-risk deployment scenarios.

  ## STEP 2 — Set a tool budget

  Based on the medium difficulty assessment, I'll target 12 tools to cover the breadth of project structure and file organization needs across different development environments and project types.

  ## STEP 3 — List all tool names and dependencies

  **Tools and their flow:**
  1. **Project Template Generator** - Creates initial project structure → produces directory layout
  2. **File Structure Analyzer** - Consumes existing project paths → produces structure insights
  3. **Directory Creator** - Consumes path specifications → produces directory structure
  4. **File Organizer** - Consumes file lists and patterns → produces organized file layout
  5. **Config File Generator** - Consumes project metadata → produces configuration files
  6. **Dependency Mapper** - Consumes project files → produces dependency relationships
  7. **Naming Convention Validator** - Consumes file/folder names → produces validation results
  8. **Project Restructurer** - Consumes current structure and target layout → produces restructuring plan
  9. **File Pattern Detector** - Consumes file collections → produces pattern classifications
  10. **Documentation Structure Generator** - Consumes project info → produces documentation layout
  11. **Build Structure Creator** - Consumes build requirements → produces build configuration
  12. **Asset Organizer** - Consumes asset files and categories → produces organized asset structure

  ## STEP 4 — Multi-tool plans

  **Simple plans:**
  - **New project setup**: Project Template Generator → Directory Creator → Config File Generator
  - **File cleanup**: File Pattern Detector → File Organizer → Naming Convention Validator

  **Medium plans:**
  - **Legacy project modernization**: File Structure Analyzer → Project Restructurer → Directory Creator → File Organizer
  - **Documentation setup**: Documentation Structure Generator → Directory Creator → Asset Organizer → Config File Generator

  **Complex plans:**
  - **Complete project reorganization**: File Structure Analyzer → Dependency Mapper → File Pattern Detector → Project Restructurer → Directory Creator → File Organizer → Naming Convention Validator → Build Structure Creator
  - **Multi-module project setup**: Project Template Generator → Directory Creator → Config File Generator → Build Structure Creator → Documentation Structure Generator → Asset Organizer

  ## STEP 5 — Produce tools

  ```json
  {
    "tool_name": "Project Template Generator",
    "tool_description": "Generates standardized project templates with appropriate directory structures, configuration files, and boilerplate code based on project type and technology stack.",
    "parameters": {
      "project_type": {
        "type": "string",
        "required": true,
        "description": "Type of project: web_app, mobile_app, desktop_app, library, api, data_science, game, cli_tool"
      },
      "technology_stack": {
        "type": "array",
        "required": true,
        "description": "Technologies to include in the template",
        "items": {"type": "string"},
        "minItems": 1,
        "maxItems": 10
      },
      "project_name": {
        "type": "string",
        "required": true,
        "description": "Name of the project for template customization"
      },
      "include_tests": {
        "type": "boolean",
        "required": false,
        "description": "Whether to include test directory structure",
        "default": true
      },
      "include_docs": {
        "type": "boolean",
        "required": false,
        "description": "Whether to include documentation structure",
        "default": true
      }
    },
    "error_messages": [
      "Unsupported project type: Use one of [web_app, mobile_app, desktop_app, library, api, data_science, game, cli_tool]",
      "Invalid technology stack: Ensure all technologies are supported and compatible",
      "Invalid project name: Project name must be alphanumeric with underscores or hyphens only",
      "Empty technology stack: At least one technology must be specified"
    ],
    "usage": "Specify project_type, technology_stack array, and project_name. Optionally set include_tests and include_docs flags. Returns a complete project template structure.",
    "output_details": {
      "template_name": {
        "type": "string",
        "description": "Generated template identifier"
      },
      "directory_structure": {
        "type": "array",
        "items": {"type": "string"},
        "description": "List of directories to create"
      },
      "config_files": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Configuration files included in template"
      },
      "boilerplate_files": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Generated boilerplate code files"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "File Structure Analyzer",
    "tool_description": "Analyzes existing project directory structure to identify patterns, detect issues, and provide insights about file organization and project health.",
    "parameters": {
      "root_path": {
        "type": "string",
        "required": true,
        "description": "Root directory path of the project to analyze"
      },
      "max_depth": {
        "type": "integer",
        "required": false,
        "description": "Maximum directory depth to scan (1-10)",
        "default": 5
      },
      "exclude_patterns": {
        "type": "array",
        "required": false,
        "description": "File or directory patterns to exclude from analysis",
        "items": {"type": "string"},
        "default": [".git", "node_modules", "__pycache__"]
      },
      "include_hidden": {
        "type": "boolean",
        "required": false,
        "description": "Whether to include hidden files and directories",
        "default": false
      }
    },
    "error_messages": [
      "Path not found: The specified root_path does not exist or is not accessible",
      "Invalid max_depth: Value must be between 1 and 10",
      "Permission denied: Insufficient permissions to read directory contents",
      "Invalid exclude patterns: Ensure patterns are valid regex expressions"
    ],
    "usage": "Provide root_path of the project to analyze. Optionally set max_depth, exclude_patterns array, and include_hidden flag. Returns comprehensive structure analysis.",
    "output_details": {
      "total_files": {
        "type": "integer",
        "description": "Total number of files found"
      },
      "total_directories": {
        "type": "integer",
        "description": "Total number of directories found"
      },
      "file_types": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Unique file extensions detected"
      },
      "structure_issues": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Identified organizational issues"
      },
      "directory_tree": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Hierarchical directory structure representation"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Directory Creator",
    "tool_description": "Creates directory structures based on specified paths, with support for nested directories, permission setting, and validation.",
    "parameters": {
      "directories": {
        "type": "array",
        "required": true,
        "description": "List of directory paths to create",
        "items": {"type": "string"},
        "minItems": 1,
        "maxItems": 50
      },
      "base_path": {
        "type": "string",
        "required": false,
        "description": "Base path for relative directory creation",
        "default": "."
      },
      "create_parents": {
        "type": "boolean",
        "required": false,
        "description": "Create parent directories if they don't exist",
        "default": true
      }
    },
    "error_messages": [
      "Invalid directory path: One or more paths contain invalid characters or are malformed",
      "Permission denied: Insufficient permissions to create directories at specified location",
      "Path already exists: Directory already exists and cannot be overwritten",
      "Base path not found: Specified base_path does not exist"
    ],
    "usage": "Provide directories array with paths to create. Optionally set base_path and create_parents flag. Creates all specified directories.",
    "output_details": {
      "created_directories": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Successfully created directory paths"
      },
      "skipped_directories": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Directories that already existed"
      },
      "failed_directories": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Directories that failed to create"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "File Organizer",
    "tool_description": "Organizes files into appropriate directories based on file types, naming patterns, and custom rules, with options for moving or copying files.",
    "parameters": {
      "source_directory": {
        "type": "string",
        "required": true,
        "description": "Source directory containing files to organize"
      },
      "organization_strategy": {
        "type": "string",
        "required": true,
        "description": "Strategy for organization: by_type, by_date, by_size, by_pattern, custom"
      },
      "custom_rules": {
        "type": "array",
        "required": false,
        "description": "Custom organization rules in format 'pattern:destination'",
        "items": {"type": "string"},
        "default": []
      },
      "operation_mode": {
        "type": "string",
        "required": false,
        "description": "Whether to move or copy files: move, copy",
        "default": "move"
      },
      "create_subdirs": {
        "type": "boolean",
        "required": false,
        "description": "Create subdirectories for organization",
        "default": true
      },
      "file_extensions": {
        "type": "array",
        "required": false,
        "description": "Specific file extensions to organize (empty means all)",
        "items": {"type": "string"},
        "default": []
      },
      "exclude_files": {
        "type": "array",
        "required": false,
        "description": "File patterns to exclude from organization",
        "items": {"type": "string"},
        "default": []
      }
    },
    "error_messages": [
      "Source directory not found: The specified source_directory does not exist",
      "Invalid organization strategy: Use one of [by_type, by_date, by_size, by_pattern, custom]",
      "Invalid operation mode: Use either 'move' or 'copy'",
      "Invalid custom rules: Rules must be in format 'pattern:destination'",
      "Permission denied: Insufficient permissions to organize files in the directory"
    ],
    "usage": "Specify source_directory and organization_strategy. For custom strategy, provide custom_rules array. Set operation_mode, file_extensions filter, and exclude_files as needed.",
    "output_details": {
      "organized_files": {
        "type": "integer",
        "description": "Number of files successfully organized"
      },
      "created_directories": {
        "type": "array",
        "items": {"type": "string"},
        "description": "New directories created during organization"
      },
      "organization_summary": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Summary of organization actions performed"
      },
      "failed_operations": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Files that failed to organize"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Config File Generator",
    "tool_description": "Generates configuration files for various development tools, build systems, and project settings based on project requirements and technology stack.",
    "parameters": {
      "config_types": {
        "type": "array",
        "required": true,
        "description": "Types of config files to generate",
        "items": {"type": "string"},
        "minItems": 1,
        "maxItems": 15
      },
      "project_language": {
        "type": "string",
        "required": true,
        "description": "Primary programming language: javascript, python, java, csharp, cpp, rust, go, php, ruby"
      },
      "framework": {
        "type": "string",
        "required": false,
        "description": "Framework being used (if applicable)",
        "default": "none"
      },
      "build_tool": {
        "type": "string",
        "required": false,
        "description": "Build tool: maven, gradle, npm, pip, cargo, make, cmake",
        "default": "none"
      },
      "environment_configs": {
        "type": "array",
        "required": false,
        "description": "Environment-specific configs to generate",
        "items": {"type": "string"},
        "default": ["development", "production"]
      },
      "include_linting": {
        "type": "boolean",
        "required": false,
        "description": "Include linting configuration files",
        "default": true
      },
      "include_formatting": {
        "type": "boolean",
        "required": false,
        "description": "Include code formatting configuration",
        "default": true
      },
      "include_testing": {
        "type": "boolean",
        "required": false,
        "description": "Include testing framework configuration",
        "default": true
      },
      "include_ci_cd": {
        "type": "boolean",
        "required": false,
        "description": "Include CI/CD configuration files",
        "default": false
      },
      "custom_settings": {
        "type": "array",
        "required": false,
        "description": "Custom configuration key-value pairs in format 'key=value'",
        "items": {"type": "string"},
        "default": []
      }
    },
    "error_messages": [
      "Unsupported config type: One or more config_types are not supported for the specified language",
      "Invalid project language: Use one of [javascript, python, java, csharp, cpp, rust, go, php, ruby]",
      "Incompatible framework and language: The specified framework is not compatible with the project language",
      "Invalid build tool: Use one of [maven, gradle, npm, pip, cargo, make, cmake] or 'none'",
      "Invalid custom settings format: Custom settings must be in 'key=value' format"
    ],
    "usage": "Specify config_types array and project_language. Optionally set framework, build_tool, and various include flags. Add custom_settings for additional configuration options.",
    "output_details": {
      "generated_configs": {
        "type": "array",
        "items": {"type": "string"},
        "description": "List of configuration files generated"
      },
      "config_locations": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Recommended locations for each config file"
      },
      "setup_instructions": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Additional setup steps required"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Dependency Mapper",
    "tool_description": "Analyzes project files to map dependencies, imports, and relationships between modules, creating a dependency graph and identifying potential issues.",
    "parameters": {
      "project_path": {
        "type": "string",
        "required": true,
        "description": "Root path of the project to analyze"
      },
      "language": {
        "type": "string",
        "required": true,
        "description": "Programming language: javascript, typescript, python, java, csharp, cpp, rust, go"
      },
      "include_external": {
        "type": "boolean",
        "required": false,
        "description": "Include external/third-party dependencies",
        "default": true
      },
      "exclude_test_files": {
        "type": "boolean",
        "required": false,
        "description": "Exclude test files from dependency mapping",
        "default": false
      }
    },
    "error_messages": [
      "Project path not found: The specified project_path does not exist or is not accessible",
      "Unsupported language: Use one of [javascript, typescript, python, java, csharp, cpp, rust, go]",
      "No source files found: No files with the specified language extension found in project",
      "Parse error: Unable to parse dependency information from source files"
    ],
    "usage": "Provide project_path and language. Set include_external and exclude_test_files flags as needed. Returns comprehensive dependency mapping and analysis.",
    "output_details": {
      "dependency_count": {
        "type": "integer",
        "description": "Total number of dependencies found"
      },
      "internal_dependencies": {
        "type": "array",
        "items": {"type": "string"},
        "description": "List of internal module dependencies"
      },
      "external_dependencies": {
        "type": "array",
        "items": {"type": "string"},
        "description": "List of external package dependencies"
      },
      "circular_dependencies": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Detected circular dependency chains"
      },
      "unused_dependencies": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Dependencies that appear unused"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Naming Convention Validator",
    "tool_description": "Validates file and directory names against established naming conventions for different programming languages and project types, providing suggestions for improvements.",
    "parameters": {
      "target_path": {
        "type": "string",
        "required": true,
        "description": "Path to validate (file or directory)"
      },
      "convention_style": {
        "type": "string",
        "required": true,
        "description": "Naming convention: camelCase, snake_case, kebab-case, PascalCase, UPPER_CASE"
      },
      "language_context": {
        "type": "string",
        "required": false,
        "description": "Programming language context for validation",
        "default": "generic"
      }
    },
    "error_messages": [
      "Target path not found: The specified target_path does not exist",
      "Invalid convention style: Use one of [camelCase, snake_case, kebab-case, PascalCase, UPPER_CASE]",
      "Unsupported language context: Language not supported for naming validation"
    ],
    "usage": "Provide target_path and convention_style. Optionally specify language_context for language-specific validation rules. Returns validation results and suggestions.",
    "output_details": {
      "is_valid": {
        "type": "boolean",
        "description": "Whether the naming follows the specified convention"
      },
      "violations": {
        "type": "array",
        "items": {"type": "string"},
        "description": "List of naming convention violations"
      },
      "suggestions": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Suggested alternative names"
      },
      "validation_summary": {
        "type": "string",
        "description": "Summary of validation results"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Project Restructurer",
    "tool_description": "Creates a comprehensive plan for restructuring existing projects to follow best practices, including file movement, directory reorganization, and dependency updates.",
    "parameters": {
      "current_structure_path": {
        "type": "string",
        "required": true,
        "description": "Path to current project structure"
      },
      "target_structure": {
        "type": "string",
        "required": true,
        "description": "Target structure type: standard, microservices, monorepo, layered, mvc, clean_architecture"
      },
      "project_type": {
        "type": "string",
        "required": true,
        "description": "Type of project being restructured"
      },
      "preserve_history": {
        "type": "boolean",
        "required": false,
        "description": "Attempt to preserve version control history during restructuring",
        "default": true
      },
      "backup_original": {
        "type": "boolean",
        "required": false,
        "description": "Create backup of original structure",
        "default": true
      },
      "dry_run": {
        "type": "boolean",
        "required": false,
        "description": "Generate plan without executing changes",
        "default": true
      },
      "custom_mappings": {
        "type": "array",
        "required": false,
        "description": "Custom file/directory mappings in format 'source:target'",
        "items": {"type": "string"},
        "default": []
      },
      "exclude_paths": {
        "type": "array",
        "required": false,
        "description": "Paths to exclude from restructuring",
        "items": {"type": "string"},
        "default": [".git", "node_modules", "__pycache__"]
      },
      "migration_strategy": {
        "type": "string",
        "required": false,
        "description": "How to handle file conflicts: overwrite, skip, merge, rename",
        "default": "rename"
      },
      "update_imports": {
        "type": "boolean",
        "required": false,
        "description": "Automatically update import statements after restructuring",
        "default": true
      },
      "validate_after": {
        "type": "boolean",
        "required": false,
        "description": "Validate project structure after restructuring",
        "default": true
      }
    },
    "error_messages": [
      "Current structure path not found: The specified path does not exist or is not accessible",
      "Invalid target structure: Use one of [standard, microservices, monorepo, layered, mvc, clean_architecture]",
      "Invalid migration strategy: Use one of [overwrite, skip, merge, rename]",
      "Custom mappings format error: Mappings must be in 'source:target' format",
      "Insufficient permissions: Cannot perform restructuring operations on the specified path"
    ],
    "usage": "Specify current_structure_path, target_structure, and project_type. Configure options like preserve_history, backup_original, and migration_strategy. Use dry_run=true to preview changes first.",
    "output_details": {
      "restructure_plan": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Step-by-step restructuring plan"
      },
      "affected_files": {
        "type": "integer",
        "description": "Number of files that will be affected"
      },
      "new_directories": {
        "type": "array",
        "items": {"type": "string"},
        "description": "New directories to be created"
      },
      "file_movements": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Files to be moved and their destinations"
      },
      "import_updates": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Import statements that need updating"
      },
      "estimated_time": {
        "type": "string",
        "description": "Estimated time for restructuring completion"
      },
      "warnings": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Warnings about potential issues"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "File Pattern Detector",
    "tool_description": "Detects and classifies file patterns in projects to identify file types, organizational structures, and suggest improvements for better project organization.",
    "parameters": {
      "scan_path": {
        "type": "string",
        "required": true,
        "description": "Directory path to scan for file patterns"
      },
      "pattern_types": {
        "type": "array",
        "required": false,
        "description": "Types of patterns to detect",
        "items": {"type": "string"},
        "default": ["extension", "naming", "size", "location"]
      },
      "min_occurrences": {
        "type": "integer",
        "required": false,
        "description": "Minimum occurrences to consider a pattern significant",
        "default": 3
      }
    },
    "error_messages": [
      "Scan path not found: The specified scan_path does not exist or is not accessible",
      "Invalid pattern types: Use combinations of [extension, naming, size, location]",
      "Invalid min_occurrences: Value must be greater than 0"
    ],
    "usage": "Provide scan_path to analyze. Optionally specify pattern_types array and min_occurrences threshold. Returns detected patterns and organization suggestions.",
    "output_details": {
      "detected_patterns": {
        "type": "array",
        "items": {"type": "string"},
        "description": "List of detected file patterns"
      },
      "pattern_confidence": {
        "type": "array",
        "items": {"type": "number"},
        "description": "Confidence scores for each detected pattern"
      },
      "organization_suggestions": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Suggested organizational improvements based on patterns"
      },
      "anomalies": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Files that don't fit detected patterns"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Documentation Structure Generator",
    "tool_description": "Generates comprehensive documentation structure and templates for projects, including README files, API docs, user guides, and developer documentation.",
    "parameters": {
      "project_info": {
        "type": "string",
        "required": true,
        "description": "Basic project information and description"
      },
      "doc_types": {
        "type": "array",
        "required": true,
        "description": "Types of documentation to generate",
        "items": {"type": "string"},
        "minItems": 1,
        "maxItems": 10
      },
      "project_language": {
        "type": "string",
        "required": true,
        "description": "Primary programming language for code examples"
      },
      "include_api_docs": {
        "type": "boolean",
        "required": false,
        "description": "Include API documentation structure",
        "default": false
      },
      "doc_format": {
        "type": "string",
        "required": false,
        "description": "Documentation format: markdown, rst, html, asciidoc",
        "default": "markdown"
      }
    },
    "error_messages": [
      "Invalid documentation types: One or more doc_types are not supported",
      "Unsupported project language: Language not supported for documentation generation",
      "Invalid documentation format: Use one of [markdown, rst, html, asciidoc]",
      "Empty project info: Project information cannot be empty"
    ],
    "usage": "Provide project_info, doc_types array, and project_language. Set include_api_docs and doc_format as needed. Generates comprehensive documentation structure.",
    "output_details": {
      "doc_files": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Generated documentation files"
      },
      "doc_structure": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Recommended documentation directory structure"
      },
      "templates": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Documentation templates created"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Build Structure Creator",
    "tool_description": "Creates build system structure and configuration files for various build tools, including scripts, dependency management, and deployment configurations.",
    "parameters": {
      "build_system": {
        "type": "string",
        "required": true,
        "description": "Build system type: maven, gradle, npm, webpack, cmake, make, cargo, msbuild"
      },
      "project_language": {
        "type": "string",
        "required": true,
        "description": "Primary programming language"
      },
      "build_targets": {
        "type": "array",
        "required": false,
        "description": "Build targets to configure",
        "items": {"type": "string"},
        "default": ["development", "production"]
      },
      "include_testing": {
        "type": "boolean",
        "required": false,
        "description": "Include test build configurations",
        "default": true
      },
      "include_deployment": {
        "type": "boolean",
        "required": false,
        "description": "Include deployment build configurations",
        "default": false
      }
    },
    "error_messages": [
      "Unsupported build system: Use one of [maven, gradle, npm, webpack, cmake, make, cargo, msbuild]",
      "Invalid project language for build system: Language not compatible with specified build system",
      "Invalid build targets: Build targets must be non-empty strings"
    ],
    "usage": "Specify build_system and project_language. Configure build_targets array and include flags for testing and deployment. Creates complete build system structure.",
    "output_details": {
      "build_files": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Generated build configuration files"
      },
      "build_scripts": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Generated build scripts"
      },
      "directory_structure": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Required build directory structure"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Asset Organizer",
    "tool_description": "Organizes project assets like images, fonts, stylesheets, and other resources into appropriate directory structures with optimization and categorization.",
    "parameters": {
      "assets_path": {
        "type": "string",
        "required": true,
        "description": "Path containing assets to organize"
      },
      "asset_categories": {
        "type": "array",
        "required": true,
        "description": "Categories for asset organization",
        "items": {"type": "string"},
        "minItems": 1,
        "maxItems": 20
      },
      "organize_by_type": {
        "type": "boolean",
        "required": false,
        "description": "Organize assets by file type",
        "default": true
      },
      "create_index": {
        "type": "boolean",
        "required": false,
        "description": "Create index files for asset categories",
        "default": false
      }
    },
    "error_messages": [
      "Assets path not found: The specified assets_path does not exist",
      "Invalid asset categories: Categories must be non-empty strings",
      "No
