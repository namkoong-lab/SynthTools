field_name: ecommerce_and_retail
subfield: Product Search and Discovery
task: Product comparison and specification analysis across different brands and models
tool_description: |-
  **STEP 1 — Rate task difficulty**

  This task is **medium** difficulty. It involves coordinating multiple data sources, handling product variations across brands, standardizing different specification formats, and performing meaningful comparisons. The challenge lies in data normalization, feature extraction, and handling missing or inconsistent product information across different vendors.

  **STEP 2 — Set a tool budget**

  For a medium difficulty task, I'll target **12 tools** to cover product data retrieval, specification parsing, comparison logic, and analysis workflows.

  **STEP 3 — List all tool names with dependencies and affordances**

  1. **Product_Search_Tool** - Consumes: search queries → Produces: product lists
  2. **Product_Details_Extractor** - Consumes: product identifiers → Produces: detailed specifications
  3. **Specification_Parser** - Consumes: raw spec data → Produces: structured attributes
  4. **Brand_Normalizer** - Consumes: product data → Produces: standardized brand info
  5. **Feature_Mapper** - Consumes: diverse specs → Produces: unified feature schema
  6. **Price_Analyzer** - Consumes: pricing data → Produces: price insights and trends
  7. **Specification_Comparator** - Consumes: normalized specs → Produces: comparison matrices
  8. **Review_Aggregator** - Consumes: product IDs → Produces: review summaries
  9. **Compatibility_Checker** - Consumes: product specs → Produces: compatibility reports
  10. **Recommendation_Engine** - Consumes: user preferences + comparisons → Produces: ranked recommendations
  11. **Report_Generator** - Consumes: analysis results → Produces: formatted reports
  12. **Data_Quality_Validator** - Consumes: product data → Produces: quality scores

  **STEP 4 — Multi-tool plans**

  **Simple Plans:**
  1. **Basic Product Search**: Product_Search_Tool → Product_Details_Extractor → Report_Generator (find and display basic product info)
  2. **Price Analysis**: Product_Search_Tool → Price_Analyzer → Report_Generator (analyze pricing trends)

  **Medium Plans:**
  1. **Feature Comparison**: Product_Search_Tool → Product_Details_Extractor → Specification_Parser → Feature_Mapper → Specification_Comparator → Report_Generator (compare key features across products)
  2. **Quality Assessment**: Product_Search_Tool → Product_Details_Extractor → Review_Aggregator → Data_Quality_Validator → Report_Generator (assess product quality and data reliability)

  **Complex Plans:**
  1. **Full Product Analysis**: Product_Search_Tool → Product_Details_Extractor → Specification_Parser → Brand_Normalizer → Feature_Mapper → Price_Analyzer → Review_Aggregator → Specification_Comparator → Recommendation_Engine → Report_Generator (comprehensive analysis and recommendations)
  2. **Compatibility-Focused Comparison**: Product_Search_Tool → Product_Details_Extractor → Specification_Parser → Feature_Mapper → Compatibility_Checker → Specification_Comparator → Recommendation_Engine → Report_Generator (focus on product compatibility and fit)

  **STEP 5 — Produce tools**

  ```json
  {
    "tool_name": "Product_Search_Tool",
    "tool_description": "Searches for products across multiple brands and retailers using keywords, categories, and filters to return a list of matching products with basic information.",
    "parameters": {
      "search_query": {
        "type": "string",
        "required": true,
        "description": "Keywords or product name to search for"
      },
      "category": {
        "type": "string",
        "required": false,
        "description": "Product category filter (electronics, clothing, home, etc.)",
        "default": "None"
      },
      "price_min": {
        "type": "number",
        "required": false,
        "description": "Minimum price filter",
        "default": "None"
      },
      "price_max": {
        "type": "number",
        "required": false,
        "description": "Maximum price filter",
        "default": "None"
      },
      "brands": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "required": false,
        "description": "List of specific brands to include in search",
        "default": "None"
      }
    },
    "error_messages": [
      "Empty search query: Provide a non-empty search_query parameter.",
      "Invalid price range: Ensure price_min is less than price_max when both are specified.",
      "Category not found: The specified category does not exist in the product database.",
      "No products found: No products match the specified search criteria."
    ],
    "usage": "Provide a search_query and optionally specify category, price range, and brand filters. Returns a list of products with basic information for further analysis.",
    "output_details": {
      "total_results": {
        "type": "integer",
        "description": "Total number of products found"
      },
      "product_ids": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of unique product identifiers"
      },
      "product_names": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of product names"
      },
      "brands": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of product brands"
      },
      "prices": {
        "type": "array",
        "items": {
          "type": "number"
        },
        "description": "List of product prices"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Product_Details_Extractor",
    "tool_description": "Extracts comprehensive product details including specifications, descriptions, images, and metadata for given product identifiers.",
    "parameters": {
      "product_ids": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "required": true,
        "description": "List of product identifiers to extract details for",
        "minItems": 1,
        "maxItems": 50
      },
      "include_images": {
        "type": "boolean",
        "required": false,
        "description": "Whether to include product image URLs",
        "default": true
      },
      "include_reviews": {
        "type": "boolean",
        "required": false,
        "description": "Whether to include review counts and ratings",
        "default": true
      }
    },
    "error_messages": [
      "Product not found: One or more product IDs do not exist in the database.",
      "Too many products: Reduce the number of product_ids to 50 or fewer.",
      "Access denied: Unable to retrieve product details due to retailer restrictions.",
      "Data unavailable: Product details are temporarily unavailable."
    ],
    "usage": "Provide an array of product_ids obtained from search results. Optionally control whether to include images and reviews. Returns detailed product information for analysis.",
    "output_details": {
      "product_details": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Array of JSON-formatted product detail strings"
      },
      "extracted_count": {
        "type": "integer",
        "description": "Number of products successfully extracted"
      },
      "failed_extractions": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of product IDs that failed extraction"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Specification_Parser",
    "tool_description": "Parses raw product specifications from various formats and sources into structured attribute-value pairs with data type classification.",
    "parameters": {
      "product_data": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "required": true,
        "description": "Array of raw product specification strings to parse",
        "minItems": 1,
        "maxItems": 100
      },
      "specification_format": {
        "type": "string",
        "required": false,
        "description": "Expected format of specifications (json, xml, html, text)",
        "default": "auto"
      },
      "extract_units": {
        "type": "boolean",
        "required": false,
        "description": "Whether to extract and separate units from values",
        "default": true
      },
      "normalize_names": {
        "type": "boolean",
        "required": false,
        "description": "Whether to normalize attribute names",
        "default": true
      }
    },
    "error_messages": [
      "Invalid format: Unable to parse the specified specification format.",
      "Parsing failed: One or more product specifications could not be parsed.",
      "Empty specifications: Product data contains no parseable specifications.",
      "Format mismatch: Specification format does not match the provided data."
    ],
    "usage": "Provide raw product specification data and optionally specify the format and parsing options. Returns structured specifications ready for comparison and analysis.",
    "output_details": {
      "parsed_specifications": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Array of structured specification objects as JSON strings"
      },
      "attribute_names": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of all unique attribute names found"
      },
      "parsing_success_rate": {
        "type": "number",
        "description": "Percentage of successfully parsed specifications"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Brand_Normalizer",
    "tool_description": "Standardizes brand names, handles aliases and variations, and enriches products with consistent brand metadata for accurate cross-brand comparisons.",
    "parameters": {
      "product_brands": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "required": true,
        "description": "List of brand names to normalize",
        "minItems": 1
      },
      "resolve_aliases": {
        "type": "boolean",
        "required": false,
        "description": "Whether to resolve brand aliases and variations",
        "default": true
      }
    },
    "error_messages": [
      "Empty brand list: Provide at least one brand name to normalize.",
      "Brand not recognized: One or more brand names are not found in the brand database.",
      "Normalization failed: Unable to normalize brand names due to data conflicts."
    ],
    "usage": "Provide a list of brand names from product data. The tool will return standardized brand names and metadata for consistent analysis across different brands.",
    "output_details": {
      "normalized_brands": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of standardized brand names"
      },
      "brand_categories": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of brand categories or tiers"
      },
      "aliases_resolved": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of brand aliases that were resolved"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Feature_Mapper",
    "tool_description": "Maps diverse product specifications to a unified feature schema, handling different naming conventions and measurement units across brands to enable meaningful comparisons.",
    "parameters": {
      "specifications": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "required": true,
        "description": "Array of parsed specification objects to map",
        "minItems": 1,
        "maxItems": 200
      },
      "product_category": {
        "type": "string",
        "required": true,
        "description": "Product category to determine appropriate feature schema"
      },
      "target_schema": {
        "type": "string",
        "required": false,
        "description": "Specific schema version to use for mapping",
        "default": "latest"
      },
      "convert_units": {
        "type": "boolean",
        "required": false,
        "description": "Whether to convert measurements to standard units",
        "default": true
      },
      "include_confidence": {
        "type": "boolean",
        "required": false,
        "description": "Whether to include mapping confidence scores",
        "default": false
      },
      "fuzzy_matching": {
        "type": "boolean",
        "required": false,
        "description": "Whether to use fuzzy matching for attribute names",
        "default": true
      },
      "merge_similar": {
        "type": "boolean",
        "required": false,
        "description": "Whether to merge similar attributes",
        "default": true
      },
      "preserve_original": {
        "type": "boolean",
        "required": false,
        "description": "Whether to preserve original attribute names",
        "default": false
      },
      "quality_threshold": {
        "type": "number",
        "required": false,
        "description": "Minimum quality threshold for mappings (0-1)",
        "default": 0.7
      },
      "custom_mappings": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "required": false,
        "description": "Array of custom attribute mappings",
        "default": "None"
      },
      "exclude_attributes": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "required": false,
        "description": "List of attributes to exclude from mapping",
        "default": "None"
      },
      "validation_mode": {
        "type": "string",
        "required": false,
        "description": "Validation strictness level (strict, normal, lenient)",
        "default": "normal"
      }
    },
    "error_messages": [
      "Invalid product category: The specified category is not supported for feature mapping.",
      "Schema not found: The target schema version does not exist.",
      "Mapping failed: Unable to map specifications to the unified schema.",
      "Quality threshold not met: Mapped features do not meet the specified quality threshold.",
      "Unit conversion error: Unable to convert measurements to standard units.",
      "Invalid custom mappings: One or more custom mappings are incorrectly formatted."
    ],
    "usage": "Provide parsed specifications and product category. Optionally configure mapping parameters like unit conversion and quality thresholds. Returns specifications mapped to a unified schema for comparison.",
    "output_details": {
      "mapped_features": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Array of feature objects mapped to unified schema"
      },
      "mapping_success_rate": {
        "type": "number",
        "description": "Percentage of successfully mapped features"
      },
      "unmapped_attributes": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of attributes that could not be mapped"
      },
      "schema_coverage": {
        "type": "number",
        "description": "Percentage of schema fields covered by mapped features"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Price_Analyzer",
    "tool_description": "Analyzes pricing data across products and brands to identify trends, value propositions, and pricing strategies with statistical insights.",
    "parameters": {
      "product_prices": {
        "type": "array",
        "items": {
          "type": "number"
        },
        "required": true,
        "description": "Array of product prices to analyze",
        "minItems": 2
      },
      "product_names": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "required": true,
        "description": "Array of corresponding product names"
      },
      "brands": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "required": true,
        "description": "Array of corresponding brand names"
      },
      "include_outliers": {
        "type": "boolean",
        "required": false,
        "description": "Whether to include outlier analysis",
        "default": true
      },
      "currency": {
        "type": "string",
        "required": false,
        "description": "Currency code for price analysis",
        "default": "USD"
      }
    },
    "error_messages": [
      "Mismatched arrays: product_prices, product_names, and brands arrays must have the same length.",
      "Insufficient data: Need at least 2 products for meaningful price analysis.",
      "Invalid prices: All prices must be positive numbers.",
      "Currency not supported: The specified currency code is not supported."
    ],
    "usage": "Provide arrays of product prices, names, and brands of equal length. Optionally configure outlier detection and currency. Returns comprehensive pricing analysis and insights.",
    "output_details": {
      "price_statistics": {
        "type": "string",
        "description": "JSON string containing min, max, mean, median, and standard deviation"
      },
      "brand_price_ranges": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Price range analysis for each brand"
      },
      "value_recommendations": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Products identified as best value propositions"
      },
      "price_outliers": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Products identified as price outliers"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Specification_Comparator",
    "tool_description": "Performs detailed comparisons of product specifications across multiple products, generating comparison matrices and highlighting key differences.",
    "parameters": {
      "mapped_specifications": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "required": true,
        "description": "Array of mapped specification objects to compare",
        "minItems": 2,
        "maxItems": 20
      },
      "comparison_criteria": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "required": false,
        "description": "Specific features to focus comparison on",
        "default": "None"
      },
      "include_scoring": {
        "type": "boolean",
        "required": false,
        "description": "Whether to generate comparative scores",
        "default": true
      },
      "weight_features": {
        "type": "boolean",
        "required": false,
        "description": "Whether to apply feature importance weighting",
        "default": false
      }
    },
    "error_messages": [
      "Insufficient products: Need at least 2 products for comparison.",
      "Too many products: Cannot compare more than 20 products simultaneously.",
      "Invalid specifications: One or more specification objects are malformed.",
      "No common features: Products have no comparable features in common.",
      "Comparison criteria not found: Specified comparison criteria do not exist in the specifications."
    ],
    "usage": "Provide mapped specifications from Feature_Mapper tool and optionally specify comparison criteria and scoring preferences. Returns detailed comparison analysis and matrices.",
    "output_details": {
      "comparison_matrix": {
        "type": "string",
        "description": "JSON string containing the full comparison matrix"
      },
      "key_differences": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of most significant differences between products"
      },
      "similarity_scores": {
        "type": "array",
        "items": {
          "type": "number"
        },
        "description": "Similarity scores between product pairs"
      },
      "feature_coverage": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Coverage analysis showing which products have which features"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Review_Aggregator",
    "tool_description": "Aggregates and analyzes customer reviews across multiple products to extract sentiment, common themes, and quality indicators.",
    "parameters": {
      "product_ids": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "required": true,
        "description": "List of product IDs to aggregate reviews for",
        "minItems": 1,
        "maxItems": 50
      },
      "sentiment_analysis": {
        "type": "boolean",
        "required": false,
        "description": "Whether to perform sentiment analysis on reviews",
        "default": true
      },
      "theme_extraction": {
        "type": "boolean",
        "required": false,
        "description": "Whether to extract common themes from reviews",
        "default": true
      }
    },
    "error_messages": [
      "Product reviews not found: One or more products have no available reviews.",
      "Review access denied: Unable to access reviews due to rate limiting or restrictions.",
      "Too many products: Reduce the number of product_ids to 50 or fewer.",
      "Analysis failed: Unable to perform sentiment or theme analysis on the reviews."
    ],
    "usage": "Provide product IDs and configure analysis options. Returns aggregated review insights including ratings, sentiment, and common themes for product comparison.",
    "output_details": {
      "review_summaries": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Summary of reviews for each product"
      },
      "average_ratings": {
        "type": "array",
        "items": {
          "type": "number"
        },
        "description": "Average rating for each product"
      },
      "sentiment_scores": {
        "type": "array",
        "items": {
          "type": "number"
        },
        "description": "Overall sentiment scores for each product"
      },
      "common_themes": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Common themes mentioned across reviews"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Compatibility_Checker",
    "tool_description": "Analyzes product specifications to determine compatibility between products, accessories, and user requirements or existing systems.",
    "parameters": {
      "primary_product": {
        "type": "string",
        "required": true,
        "description": "Primary product specification object as JSON string"
      },
      "compatibility_targets": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "required": true,
        "description": "Array of product specs or requirements to check compatibility against",
        "minItems": 1
      },
      "compatibility_type": {
        "type": "string",
        "required": false,
        "description": "Type of compatibility check (technical, accessory, system, user_requirements)",
        "default": "technical"
      }
    },
    "error_messages": [
      "Invalid primary product: Primary product specification is malformed or empty.",
      "Invalid compatibility targets: One or more compatibility targets are malformed.",
      "Unsupported compatibility type: Use one of [technical, accessory, system, user_requirements].",
      "Insufficient specification data: Products lack necessary specifications for compatibility analysis."
    ],
    "usage": "Provide a primary product specification and an array of compatibility targets. Specify the type of compatibility check needed. Returns detailed compatibility analysis and recommendations.",
    "output_details": {
      "compatibility_results": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Compatibility status for each target (compatible, incompatible, partial)"
      },
      "compatibility_details": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Detailed explanations for each compatibility result"
      },
      "recommendations": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Recommendations for resolving compatibility issues"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Recommendation_Engine",
    "tool_description": "Generates personalized product recommendations based on user preferences, comparison results, and analysis insights using multiple recommendation algorithms.",
    "parameters": {
      "user_preferences": {
        "type": "string",
        "required": true,
        "description": "User preferences and requirements as JSON string"
      },
      "comparison_results": {
        "type": "string",
        "required": true,
        "description": "Comparison matrix and analysis results from Specification_Comparator"
      },
      "price_analysis": {
        "type": "string",
        "required": false,
        "description": "Price analysis results from Price_Analyzer",
        "default": "None"
      },
      "review_insights": {
        "type": "string",
        "required": false,
        "description": "Review aggregation results",
        "default": "None"
      },
      "compatibility_results": {
        "type": "string",
        "required": false,
        "description": "Compatibility analysis results",
        "default": "None"
      },
      "recommendation_count": {
        "type": "integer",
        "required": false,
        "description": "Number of top recommendations to return",
        "default": 5
      },
      "algorithm": {
        "type": "string",
        "required": false,
        "description": "Recommendation algorithm to use (weighted_score, collaborative, content_based, hybrid)",
        "default": "hybrid"
      }
    },
    "error_messages": [
      "Invalid user preferences: User preferences must be a valid JSON string.",
      "Invalid comparison results: Comparison results are malformed or incomplete.",
      "Algorithm not supported: Use one of [weighted_score, collaborative, content_based, hybrid].",
      "Insufficient data: Not enough data available to generate meaningful recommendations.",
      "Recommendation count invalid: recommendation_count must be between 1 and 20."
    ],
    "usage": "Provide user preferences and comparison results, along with optional analysis inputs. Configure the recommendation algorithm and count. Returns ranked product recommendations with explanations.",
    "output_details": {
      "recommended_products": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of recommended product IDs in ranked order"
      },
      "recommendation_scores": {
        "type": "array",
        "items": {
          "type": "number"
        },
        "description": "Recommendation confidence scores for each product"
      },
      "recommendation_reasons": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Explanation for why each product was recommended"
      },
      "alternative_suggestions": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Alternative products that were considered"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Report_Generator",
    "tool_description": "Generates comprehensive, formatted reports combining all analysis results into readable documents with charts, tables, and executive summaries.",
    "parameters": {
      "analysis_results": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "required": true,
        "description": "Array of analysis result objects from various tools",
        "minItems": 1
      },
      "report_format": {
        "type": "string",
        "required": false,
        "description": "Output format for the report (html, pdf, markdown, json)",
        "default": "html"
      },
      "include_charts": {
        "type": "boolean",
        "required": false,
        "description": "Whether to include data visualizations",
        "default": true
      },
      "executive_summary": {
        "type": "boolean",
        "required": false,
        "description": "Whether to include an executive summary",
        "default": true
      },
      "detail_level": {
        "type": "string",
        "required": false,
        "description": "Level of detail in the report (summary, detailed, comprehensive)",
        "default": "detailed"
      }
    },
    "error_messages": [
      "No analysis results: Provide at least one analysis result object.",
      "Invalid report format: Use one of [html, pdf, markdown, json].",
      "Analysis results malformed: One or more analysis result objects are invalid.",
      "Report generation failed: Unable to generate report due to formatting errors.",
      "Invalid detail level: Use one of [summary, detailed, comprehensive]."
    ],
    "usage": "Provide analysis results from other tools and configure report format and options. Returns a formatted report combining all analysis insights into a cohesive document.",
    "output_details": {
      "report_content": {
        "type": "string",
        "description": "Generated report content in the specified format"
      },
      "report_sections": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of sections included in the report"
      },
      "generation_metadata": {
        "type": "string",
        "description": "Metadata about report generation including timestamp and data sources"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Data_Quality_Validator",
    "tool_description": "Validates the quality and completeness of product data, identifying missing information, inconsistencies, and reliability scores for analysis confidence.",
    "parameters": {
      "product_data": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "required": true,
        "description": "Array of product data objects to validate",
        "minItems": 1
      },
      "validation_rules": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "required": false,
        "description": "Custom validation rules to apply",
        "default": "None"
      }
    },
    "error_messages": [
      "Empty product data: Provide at least one product data object for validation.",
      "Invalid data format: One or more product data objects are not properly formatted.",
      "Validation rules malformed: Custom validation rules contain syntax errors.",
      "Validation failed: Unable to complete data quality validation."
    ],
    "usage": "Provide product data objects and optionally specify custom validation rules. Returns quality scores and detailed findings about data completeness and reliability.",
    "output_details": {
      "overall_quality_score": {
        "type": "number",
        "description": "Overall data quality score from 0 to 1"
      },
      "individual_scores": {
        "type": "array",
        "items": {
          "type": "number"
        },
        "description": "Quality scores for each individual product"
      },
      "missing_data_report": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of missing or incomplete data fields"
      },
      "incons
