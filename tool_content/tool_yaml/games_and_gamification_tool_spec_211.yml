field_name: games_and_gamification
subfield: Player Analytics and Behavior Tracking
task: In-Game Performance and Progression Tracking
tool_description: |-
  STEP 1 — Rate task difficulty

  This task involves tracking and analyzing complex player behaviors across multiple game sessions, requiring real-time data processing, statistical analysis, and behavioral pattern recognition. The scope includes performance metrics, progression systems, achievement tracking, and predictive analytics. Medium difficulty due to moderate coordination between tracking systems, data analysis requirements, and the need for actionable insights from player behavior patterns.

  STEP 2 — Set a tool budget

  Given the medium difficulty assessment, I'll target 12 tools to cover the various aspects of player analytics, performance tracking, progression monitoring, and behavioral analysis.

  STEP 3 — List all tool names and dependencies

  1. Session Data Collector - Consumes: raw game events → Produces: structured session data
  2. Performance Metrics Calculator - Consumes: session data → Produces: performance statistics
  3. Progression Tracker - Consumes: player actions, level data → Produces: progression status
  4. Achievement Monitor - Consumes: player actions, achievement criteria → Produces: achievement status
  5. Skill Level Analyzer - Consumes: performance metrics → Produces: skill assessments
  6. Playtime Analytics - Consumes: session timestamps → Produces: engagement metrics
  7. Difficulty Curve Analyzer - Consumes: performance data, game levels → Produces: difficulty insights
  8. Player Segmentation Tool - Consumes: behavior data → Produces: player segments
  9. Retention Predictor - Consumes: engagement metrics → Produces: retention forecasts
  10. Behavioral Pattern Detector - Consumes: action sequences → Produces: behavior patterns
  11. Leaderboard Generator - Consumes: performance metrics → Produces: ranking data
  12. Progress Report Builder - Consumes: all analytics data → Produces: comprehensive reports

  STEP 4 — Multi-tool plans

  Simple plans:
  - Basic tracking: Session Data Collector + Performance Metrics Calculator + Progress Report Builder
  - Achievement system: Achievement Monitor + Progression Tracker + Leaderboard Generator

  Medium plans:
  - Player assessment: Session Data Collector + Performance Metrics Calculator + Skill Level Analyzer + Player Segmentation Tool + Progress Report Builder
  - Engagement analysis: Playtime Analytics + Behavioral Pattern Detector + Retention Predictor + Progress Report Builder

  Complex plans:
  - Complete analytics pipeline: Session Data Collector + Performance Metrics Calculator + Progression Tracker + Achievement Monitor + Skill Level Analyzer + Playtime Analytics + Player Segmentation Tool + Progress Report Builder
  - Advanced behavioral analysis: Session Data Collector + Behavioral Pattern Detector + Difficulty Curve Analyzer + Retention Predictor + Player Segmentation Tool + Leaderboard Generator + Progress Report Builder

  STEP 5 — Produce tools

  ```json
  {
    "tool_name": "Session Data Collector",
    "tool_description": "Collects and structures raw game event data from player sessions into organized datasets for analysis.",
    "parameters": {
      "player_id": {
        "type": "string",
        "required": true,
        "description": "Unique identifier for the player"
      },
      "session_id": {
        "type": "string",
        "required": true,
        "description": "Unique identifier for the gaming session"
      },
      "game_events": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "required": true,
        "description": "Array of raw game event strings",
        "minItems": 1,
        "maxItems": 10000
      },
      "session_start": {
        "type": "string",
        "required": true,
        "description": "Session start timestamp in ISO 8601 format",
        "format": "date-time"
      },
      "session_end": {
        "type": "string",
        "required": true,
        "description": "Session end timestamp in ISO 8601 format",
        "format": "date-time"
      }
    },
    "error_messages": [
      "Invalid player_id: Player ID must be a non-empty string",
      "Invalid session_id: Session ID must be a non-empty string",
      "Empty game_events: At least one game event must be provided",
      "Invalid timestamp format: Use ISO 8601 format for session_start and session_end",
      "Invalid time range: session_end must be after session_start"
    ],
    "usage": "Provide player_id, session_id, game_events array, session_start, and session_end timestamps. The tool processes raw events and returns structured session data.",
    "output_details": {
      "session_summary": {
        "type": "string",
        "description": "Summary of the processed session data"
      },
      "event_count": {
        "type": "integer",
        "description": "Total number of events processed"
      },
      "session_duration": {
        "type": "number",
        "description": "Duration of the session in minutes"
      },
      "structured_events": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Array of processed and structured event data"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Performance Metrics Calculator",
    "tool_description": "Calculates comprehensive performance metrics from structured session data including accuracy, speed, efficiency, and skill-based measurements.",
    "parameters": {
      "player_id": {
        "type": "string",
        "required": true,
        "description": "Unique identifier for the player"
      },
      "structured_events": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "required": true,
        "description": "Array of structured event data from session",
        "minItems": 1,
        "maxItems": 5000
      },
      "game_mode": {
        "type": "string",
        "required": true,
        "description": "Type of game mode (competitive, casual, tutorial, challenge)"
      },
      "difficulty_level": {
        "type": "integer",
        "required": true,
        "description": "Difficulty level of the session (1-10 scale)"
      },
      "baseline_metrics": {
        "type": "array",
        "items": {
          "type": "number"
        },
        "required": false,
        "description": "Previous performance baseline for comparison",
        "default": "None"
      },
      "weight_accuracy": {
        "type": "number",
        "required": false,
        "description": "Weight for accuracy in overall score (0.0-1.0)",
        "default": 0.4
      },
      "weight_speed": {
        "type": "number",
        "required": false,
        "description": "Weight for speed in overall score (0.0-1.0)",
        "default": 0.3
      },
      "weight_efficiency": {
        "type": "number",
        "required": false,
        "description": "Weight for efficiency in overall score (0.0-1.0)",
        "default": 0.3
      }
    },
    "error_messages": [
      "Invalid player_id: Player ID must be a non-empty string",
      "Empty structured_events: At least one structured event must be provided",
      "Invalid game_mode: Must be one of [competitive, casual, tutorial, challenge]",
      "Invalid difficulty_level: Must be an integer between 1 and 10",
      "Invalid weights: All weight parameters must be between 0.0 and 1.0 and sum to 1.0"
    ],
    "usage": "Provide player_id, structured_events, game_mode, and difficulty_level. Optionally adjust weights for different performance aspects. Returns comprehensive performance metrics.",
    "output_details": {
      "overall_score": {
        "type": "number",
        "description": "Weighted overall performance score (0-100)"
      },
      "accuracy_score": {
        "type": "number",
        "description": "Accuracy percentage (0-100)"
      },
      "speed_score": {
        "type": "number",
        "description": "Speed performance score (0-100)"
      },
      "efficiency_score": {
        "type": "number",
        "description": "Efficiency performance score (0-100)"
      },
      "improvement_rate": {
        "type": "number",
        "description": "Performance improvement compared to baseline"
      },
      "performance_category": {
        "type": "string",
        "description": "Performance classification (novice, intermediate, advanced, expert)"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Progression Tracker",
    "tool_description": "Tracks player progression through game levels, unlocks, and skill development milestones.",
    "parameters": {
      "player_id": {
        "type": "string",
        "required": true,
        "description": "Unique identifier for the player"
      },
      "current_level": {
        "type": "integer",
        "required": true,
        "description": "Current level of the player"
      },
      "experience_points": {
        "type": "integer",
        "required": true,
        "description": "Current experience points"
      },
      "completed_objectives": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "required": true,
        "description": "List of completed objectives or milestones"
      },
      "unlocked_features": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "required": false,
        "description": "List of unlocked game features",
        "default": "None"
      }
    },
    "error_messages": [
      "Invalid player_id: Player ID must be a non-empty string",
      "Invalid current_level: Level must be a positive integer",
      "Invalid experience_points: Experience points must be a non-negative integer",
      "Empty completed_objectives: At least one objective must be provided"
    ],
    "usage": "Provide player_id, current_level, experience_points, and completed_objectives. Optionally include unlocked_features. Returns progression status and recommendations.",
    "output_details": {
      "progression_percentage": {
        "type": "number",
        "description": "Overall game progression as percentage"
      },
      "next_milestone": {
        "type": "string",
        "description": "Description of the next progression milestone"
      },
      "points_to_next_level": {
        "type": "integer",
        "description": "Experience points needed for next level"
      },
      "completion_status": {
        "type": "string",
        "description": "Current completion status category"
      },
      "recommended_objectives": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Suggested next objectives to pursue"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Achievement Monitor",
    "tool_description": "Monitors player actions against achievement criteria and tracks achievement progress and unlocks.",
    "parameters": {
      "player_id": {
        "type": "string",
        "required": true,
        "description": "Unique identifier for the player"
      },
      "player_actions": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "required": true,
        "description": "Recent player actions to evaluate",
        "minItems": 1
      },
      "achievement_criteria": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "required": true,
        "description": "Achievement criteria definitions",
        "minItems": 1
      },
      "current_progress": {
        "type": "array",
        "items": {
          "type": "number"
        },
        "required": false,
        "description": "Current progress values for tracked achievements",
        "default": "None"
      }
    },
    "error_messages": [
      "Invalid player_id: Player ID must be a non-empty string",
      "Empty player_actions: At least one player action must be provided",
      "Empty achievement_criteria: At least one achievement criterion must be provided",
      "Mismatched arrays: current_progress length must match achievement_criteria length if provided"
    ],
    "usage": "Provide player_id, player_actions, and achievement_criteria. Optionally include current_progress for incremental tracking. Returns achievement status updates.",
    "output_details": {
      "newly_unlocked": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of newly unlocked achievements"
      },
      "progress_updates": {
        "type": "array",
        "items": {
          "type": "number"
        },
        "description": "Updated progress values for all tracked achievements"
      },
      "completion_percentage": {
        "type": "number",
        "description": "Overall achievement completion percentage"
      },
      "next_achievable": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Achievements closest to completion"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Skill Level Analyzer",
    "tool_description": "Analyzes performance metrics to assess player skill levels across different game competencies.",
    "parameters": {
      "performance_metrics": {
        "type": "array",
        "items": {
          "type": "number"
        },
        "required": true,
        "description": "Array of performance metric values",
        "minItems": 3
      },
      "skill_categories": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "required": true,
        "description": "Skill categories to analyze (e.g., reflexes, strategy, accuracy)"
      },
      "historical_data": {
        "type": "array",
        "items": {
          "type": "number"
        },
        "required": false,
        "description": "Historical performance data for trend analysis",
        "default": "None"
      }
    },
    "error_messages": [
      "Insufficient performance_metrics: At least 3 performance metrics must be provided",
      "Mismatched arrays: performance_metrics and skill_categories must have the same length",
      "Invalid skill_categories: All skill categories must be non-empty strings",
      "Invalid historical_data: Historical data values must be numeric"
    ],
    "usage": "Provide performance_metrics and corresponding skill_categories. Optionally include historical_data for trend analysis. Returns detailed skill assessments.",
    "output_details": {
      "skill_levels": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Skill level classifications for each category"
      },
      "overall_skill_rating": {
        "type": "number",
        "description": "Overall skill rating score (0-100)"
      },
      "improvement_trends": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Trend analysis for each skill category"
      },
      "strengths": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Identified player strengths"
      },
      "areas_for_improvement": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Areas needing improvement"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Playtime Analytics",
    "tool_description": "Analyzes player engagement patterns from session timestamps and duration data.",
    "parameters": {
      "session_timestamps": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "required": true,
        "description": "Array of session start timestamps",
        "minItems": 1
      },
      "session_durations": {
        "type": "array",
        "items": {
          "type": "number"
        },
        "required": true,
        "description": "Array of session durations in minutes"
      },
      "analysis_period_days": {
        "type": "integer",
        "required": false,
        "description": "Number of days to analyze (default 30)",
        "default": 30
      }
    },
    "error_messages": [
      "Empty session_timestamps: At least one session timestamp must be provided",
      "Mismatched arrays: session_timestamps and session_durations must have the same length",
      "Invalid timestamp format: All timestamps must be in ISO 8601 format",
      "Invalid session_durations: All durations must be positive numbers",
      "Invalid analysis_period_days: Must be a positive integer"
    ],
    "usage": "Provide session_timestamps and session_durations arrays. Optionally set analysis_period_days for the lookback period. Returns comprehensive engagement analytics.",
    "output_details": {
      "total_playtime": {
        "type": "number",
        "description": "Total playtime in hours"
      },
      "average_session_length": {
        "type": "number",
        "description": "Average session length in minutes"
      },
      "sessions_per_day": {
        "type": "number",
        "description": "Average number of sessions per day"
      },
      "peak_activity_hours": {
        "type": "array",
        "items": {
          "type": "integer"
        },
        "description": "Hours of day with highest activity"
      },
      "engagement_level": {
        "type": "string",
        "description": "Engagement classification (low, medium, high, very high)"
      },
      "activity_pattern": {
        "type": "string",
        "description": "Identified activity pattern (casual, regular, intensive, sporadic)"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Difficulty Curve Analyzer",
    "tool_description": "Analyzes performance data across game levels to evaluate difficulty progression and identify potential bottlenecks.",
    "parameters": {
      "level_performance_data": {
        "type": "array",
        "items": {
          "type": "number"
        },
        "required": true,
        "description": "Performance scores for each level played",
        "minItems": 3
      },
      "level_numbers": {
        "type": "array",
        "items": {
          "type": "integer"
        },
        "required": true,
        "description": "Corresponding level numbers"
      },
      "completion_times": {
        "type": "array",
        "items": {
          "type": "number"
        },
        "required": true,
        "description": "Time taken to complete each level in minutes"
      },
      "retry_counts": {
        "type": "array",
        "items": {
          "type": "integer"
        },
        "required": false,
        "description": "Number of retries for each level",
        "default": "None"
      },
      "difficulty_threshold": {
        "type": "number",
        "required": false,
        "description": "Performance drop threshold to identify difficult levels (0.1-0.5)",
        "default": 0.2
      }
    },
    "error_messages": [
      "Insufficient data: At least 3 levels of performance data must be provided",
      "Mismatched arrays: level_performance_data, level_numbers, and completion_times must have the same length",
      "Invalid performance data: All performance values must be between 0 and 100",
      "Invalid completion times: All completion times must be positive numbers",
      "Invalid difficulty_threshold: Must be between 0.1 and 0.5"
    ],
    "usage": "Provide level_performance_data, level_numbers, and completion_times. Optionally include retry_counts and adjust difficulty_threshold. Returns difficulty analysis results.",
    "output_details": {
      "difficulty_spike_levels": {
        "type": "array",
        "items": {
          "type": "integer"
        },
        "description": "Levels identified as difficulty spikes"
      },
      "average_difficulty_progression": {
        "type": "number",
        "description": "Average difficulty increase per level"
      },
      "problematic_levels": {
        "type": "array",
        "items": {
          "type": "integer"
        },
        "description": "Levels that may need rebalancing"
      },
      "completion_trend": {
        "type": "string",
        "description": "Overall completion time trend (improving, stable, declining)"
      },
      "recommended_adjustments": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Suggested difficulty adjustments"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Player Segmentation Tool",
    "tool_description": "Segments players into behavioral groups based on gameplay patterns, engagement, and performance metrics.",
    "parameters": {
      "player_behavior_data": {
        "type": "array",
        "items": {
          "type": "number"
        },
        "required": true,
        "description": "Array of behavioral metric values",
        "minItems": 5
      },
      "engagement_metrics": {
        "type": "array",
        "items": {
          "type": "number"
        },
        "required": true,
        "description": "Engagement measurement values"
      },
      "performance_scores": {
        "type": "array",
        "items": {
          "type": "number"
        },
        "required": true,
        "description": "Performance scores for segmentation"
      },
      "spending_data": {
        "type": "array",
        "items": {
          "type": "number"
        },
        "required": false,
        "description": "In-game purchase amounts",
        "default": "None"
      },
      "segmentation_method": {
        "type": "string",
        "required": false,
        "description": "Segmentation approach (behavioral, performance, engagement, hybrid)",
        "default": "hybrid"
      }
    },
    "error_messages": [
      "Insufficient behavior data: At least 5 behavioral metrics must be provided",
      "Mismatched data lengths: All metric arrays must have the same length",
      "Invalid engagement_metrics: All values must be non-negative numbers",
      "Invalid performance_scores: All scores must be between 0 and 100",
      "Invalid segmentation_method: Must be one of [behavioral, performance, engagement, hybrid]"
    ],
    "usage": "Provide player_behavior_data, engagement_metrics, and performance_scores. Optionally include spending_data and specify segmentation_method. Returns player segment classification.",
    "output_details": {
      "player_segment": {
        "type": "string",
        "description": "Assigned player segment (casual, core, hardcore, whale, at-risk, etc.)"
      },
      "segment_confidence": {
        "type": "number",
        "description": "Confidence score for segment assignment (0-1)"
      },
      "key_characteristics": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Key behavioral characteristics of the segment"
      },
      "retention_risk": {
        "type": "string",
        "description": "Retention risk level (low, medium, high)"
      },
      "personalization_recommendations": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Recommended personalization strategies"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Retention Predictor",
    "tool_description": "Predicts player retention probability based on engagement metrics and behavioral patterns.",
    "parameters": {
      "engagement_history": {
        "type": "array",
        "items": {
          "type": "number"
        },
        "required": true,
        "description": "Historical engagement scores",
        "minItems": 7
      },
      "session_frequency": {
        "type": "number",
        "required": true,
        "description": "Average sessions per week"
      },
      "last_session_days_ago": {
        "type": "integer",
        "required": true,
        "description": "Days since last session"
      },
      "achievement_rate": {
        "type": "number",
        "required": true,
        "description": "Rate of achievement completion (0-1)"
      },
      "social_connections": {
        "type": "integer",
        "required": false,
        "description": "Number of in-game social connections",
        "default": 0
      },
      "prediction_horizon_days": {
        "type": "integer",
        "required": false,
        "description": "Days ahead to predict retention (7, 14, or 30)",
        "default": 14
      }
    },
    "error_messages": [
      "Insufficient engagement history: At least 7 engagement scores must be provided",
      "Invalid session_frequency: Must be a non-negative number",
      "Invalid last_session_days_ago: Must be a non-negative integer",
      "Invalid achievement_rate: Must be between 0 and 1",
      "Invalid prediction_horizon_days: Must be 7, 14, or 30",
      "Invalid social_connections: Must be a non-negative integer"
    ],
    "usage": "Provide engagement_history, session_frequency, last_session_days_ago, and achievement_rate. Optionally set social_connections and prediction_horizon_days. Returns retention predictions.",
    "output_details": {
      "retention_probability": {
        "type": "number",
        "description": "Predicted retention probability (0-1)"
      },
      "risk_level": {
        "type": "string",
        "description": "Risk classification (low, medium, high, critical)"
      },
      "key_risk_factors": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Primary factors contributing to churn risk"
      },
      "intervention_recommendations": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Suggested retention interventions"
      },
      "confidence_score": {
        "type": "number",
        "description": "Prediction confidence level (0-1)"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Behavioral Pattern Detector",
    "tool_description": "Detects and analyzes behavioral patterns from sequences of player actions to identify play styles and preferences.",
    "parameters": {
      "action_sequences": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "required": true,
        "description": "Chronological sequence of player actions",
        "minItems": 10
      },
      "time_windows": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "required": true,
        "description": "Timestamps for each action in ISO 8601 format"
      },
      "pattern_types": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "required": false,
        "description": "Types of patterns to detect (sequential, cyclical, preference, strategic)",
        "default": ["sequential", "preference"]
      }
    },
    "error_messages": [
      "Insufficient action data: At least 10 actions must be provided for pattern detection",
      "Mismatched arrays: action_sequences and time_windows must have the same length",
      "Invalid timestamp format: All time_windows must be in ISO 8601 format",
      "Invalid pattern_types: Must include only [sequential, cyclical, preference, strategic]",
      "Empty action_sequences: All actions must be non-empty strings"
    ],
    "usage": "Provide action_sequences and corresponding time_windows. Optionally specify pattern_types to focus detection. Returns identified behavioral patterns and insights.",
    "output_details": {
      "detected_patterns": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of detected behavioral patterns"
      },
      "pattern_confidence": {
        "type": "array",
        "items": {
          "type": "number"
        },
        "description": "Confidence scores for each detected pattern"
      },
      "play_style": {
        "type": "string",
        "description": "Identified overall play style"
      },
      "action_preferences": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Preferred action types and sequences"
      },
      "behavioral_insights": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Key insights about player behavior"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Leaderboard Generator",
    "tool_description": "Generates ranked leaderboards from performance metrics with various ranking criteria and time periods.",
    "parameters": {
      "player_scores": {
        "type": "array",
        "items": {
          "type": "number"
        },
        "required": true,
        "description": "Performance scores for ranking",
        "minItems": 1
      },
      "player_names": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "required": true,
        "description": "Player names corresponding to scores"
      },
      "ranking_criteria": {
        "type": "string",
        "required": false,
        "description": "Ranking method (score, time, achievement_count, level_reached)",
        "default": "score"
      },
      "time_period": {
        "type": "string",
        "required": false,
        "description": "Leaderboard time period (daily, weekly, monthly, all_time)",
        "default": "weekly"
      },
      "max_entries": {
        "type": "integer",
        "required": false,
        "description": "Maximum number of leaderboard entries to return",
        "default": 100
      }
    ],
    "error_messages": [
      "Empty score data: At least one player score must be provided",
      "Mismatched arrays: player_scores and player_names must have the same length",
      "Invalid ranking_criteria: Must be one of [score, time, achievement_count, level_reached]",
      "Invalid time_period: Must be one of [daily, weekly, monthly, all_time]",
      "Invalid max_entries: Must be a positive integer between 1 and 1000",
      "Invalid player scores: All scores must be numeric values"
    ],
    "usage": "Provide player_scores and player_names arrays. Optionally set ranking_criteria, time_period, and max_entries. Returns formatted leaderboard data.",
    "output_details": {
      "leaderboard_entries": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Formatted leaderboard entries with rank, name, and score"
      },
      "total_participants": {
        "type": "integer",
        "description": "Total number of players in the leaderboard"
      },
      "top_score": {
        "type": "number",
        "description": "Highest score in the leaderboard"
      },
      "average_
