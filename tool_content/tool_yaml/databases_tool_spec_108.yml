field_name: databases
subfield: Database Migration and Data Transfer
task: Schema analysis and compatibility assessment between source and target databases
tool_description: |-
  **STEP 1 — Rate task difficulty**

  This task is of medium difficulty. It involves analyzing complex database schemas across different systems, identifying data type mappings, constraint compatibility, and potential migration issues. The scope includes handling multiple database engines with varying features, assessing referential integrity, and providing actionable migration guidance.

  **STEP 2 — Set a tool budget**

  Given the medium complexity, I'll target 12 tools to cover schema extraction, analysis, comparison, compatibility assessment, and migration planning workflows.

  **STEP 3 — List all tool names and dependencies**

  1. **Schema Extractor** - Consumes: database connection details → Produces: structured schema metadata
  2. **Data Type Mapper** - Consumes: source/target schema types → Produces: type compatibility mappings
  3. **Constraint Analyzer** - Consumes: schema metadata → Produces: constraint analysis report
  4. **Index Compatibility Checker** - Consumes: index definitions → Produces: index migration assessment
  5. **Foreign Key Validator** - Consumes: relationship data → Produces: referential integrity report
  6. **Schema Comparator** - Consumes: two schema objects → Produces: difference analysis
  7. **Migration Risk Assessor** - Consumes: compatibility data → Produces: risk evaluation report
  8. **Data Volume Estimator** - Consumes: table metadata → Produces: migration size estimates
  9. **Performance Impact Analyzer** - Consumes: schema and volume data → Produces: performance predictions
  10. **Migration Script Generator** - Consumes: compatibility assessments → Produces: DDL migration scripts
  11. **Rollback Plan Creator** - Consumes: migration scripts → Produces: rollback procedures
  12. **Compatibility Report Builder** - Consumes: all analysis results → Produces: comprehensive migration report

  **STEP 4 — Multi-tool plans**

  **Simple Plans:**
  1. **Basic Schema Comparison**: Schema Extractor → Schema Comparator → Compatibility Report Builder (3 tools) - Compare schemas between two similar database systems
  2. **Data Type Assessment**: Schema Extractor → Data Type Mapper → Migration Risk Assessor (3 tools) - Evaluate data type compatibility for migration

  **Medium Plans:**
  1. **Constraint Migration Analysis**: Schema Extractor → Constraint Analyzer → Foreign Key Validator → Index Compatibility Checker → Migration Risk Assessor (5 tools) - Comprehensive constraint compatibility assessment
  2. **Migration Planning**: Schema Extractor → Data Volume Estimator → Performance Impact Analyzer → Migration Script Generator → Rollback Plan Creator (5 tools) - Create detailed migration execution plan

  **Complex Plans:**
  1. **Full Migration Assessment**: Schema Extractor → Data Type Mapper → Constraint Analyzer → Foreign Key Validator → Index Compatibility Checker → Schema Comparator → Migration Risk Assessor → Compatibility Report Builder (8 tools) - Complete compatibility analysis
  2. **End-to-End Migration Preparation**: All 12 tools in sequence - Comprehensive schema analysis, risk assessment, script generation, and rollback planning for enterprise migration

  **STEP 5 — Produce tools**

  ```json
  {
    "tool_name": "Schema Extractor",
    "tool_description": "Extracts comprehensive schema metadata from source and target databases including tables, columns, data types, constraints, indexes, and relationships.",
    "parameters": {
      "database_type": {
        "type": "string",
        "required": true,
        "description": "Type of database system (mysql, postgresql, oracle, sqlserver, sqlite)"
      },
      "connection_string": {
        "type": "string",
        "required": true,
        "description": "Database connection string with credentials"
      },
      "schema_name": {
        "type": "string",
        "required": false,
        "description": "Specific schema/database name to extract",
        "default": "None"
      }
    },
    "error_messages": [
      "Connection failed: Verify connection string format and database accessibility.",
      "Authentication error: Check username and password in connection string.",
      "Schema not found: Verify schema_name exists in the database.",
      "Unsupported database type: Use one of [mysql, postgresql, oracle, sqlserver, sqlite].",
      "Permission denied: Ensure user has read access to schema metadata tables."
    ],
    "usage": "Provide database_type and connection_string to extract schema metadata. Optionally specify schema_name for targeted extraction. Returns structured metadata for all database objects.",
    "output_details": {
      "schema_id": {
        "type": "string",
        "description": "Unique identifier for the extracted schema"
      },
      "database_type": {
        "type": "string",
        "description": "Type of source database"
      },
      "table_count": {
        "type": "integer",
        "description": "Total number of tables extracted"
      },
      "extraction_timestamp": {
        "type": "string",
        "description": "When the schema was extracted"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Data Type Mapper",
    "tool_description": "Maps data types between source and target database systems, identifying compatible types and potential conversion issues.",
    "parameters": {
      "source_schema_id": {
        "type": "string",
        "required": true,
        "description": "Identifier of source schema from Schema Extractor"
      },
      "target_database_type": {
        "type": "string",
        "required": true,
        "description": "Target database type for migration"
      },
      "strict_mode": {
        "type": "boolean",
        "required": false,
        "description": "Whether to apply strict type compatibility rules",
        "default": false
      }
    },
    "error_messages": [
      "Schema not found: Verify source_schema_id exists from previous extraction.",
      "Unsupported target database: Use supported database type for migration target.",
      "Type mapping failed: Some source types cannot be mapped to target database."
    ],
    "usage": "Provide source_schema_id and target_database_type to generate type mappings. Enable strict_mode for conservative compatibility checking.",
    "output_details": {
      "mapping_id": {
        "type": "string",
        "description": "Unique identifier for this mapping result"
      },
      "compatible_types": {
        "type": "integer",
        "description": "Number of directly compatible data types"
      },
      "convertible_types": {
        "type": "integer",
        "description": "Number of types requiring conversion"
      },
      "incompatible_types": {
        "type": "integer",
        "description": "Number of incompatible data types"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Constraint Analyzer",
    "tool_description": "Analyzes database constraints including primary keys, unique constraints, check constraints, and NOT NULL constraints for migration compatibility.",
    "parameters": {
      "source_schema_id": {
        "type": "string",
        "required": true,
        "description": "Source schema identifier from extraction"
      },
      "target_database_type": {
        "type": "string",
        "required": true,
        "description": "Target database system type"
      },
      "include_check_constraints": {
        "type": "boolean",
        "required": false,
        "description": "Whether to analyze check constraints",
        "default": true
      },
      "include_unique_constraints": {
        "type": "boolean",
        "required": false,
        "description": "Whether to analyze unique constraints",
        "default": true
      }
    },
    "error_messages": [
      "Invalid schema_id: Source schema not found in system.",
      "Constraint analysis failed: Unable to parse constraint definitions.",
      "Target database unsupported: Constraint compatibility cannot be determined."
    ],
    "usage": "Provide source_schema_id and target_database_type to analyze constraint compatibility. Use boolean flags to include/exclude specific constraint types.",
    "output_details": {
      "analysis_id": {
        "type": "string",
        "description": "Unique identifier for constraint analysis"
      },
      "total_constraints": {
        "type": "integer",
        "description": "Total number of constraints analyzed"
      },
      "compatible_constraints": {
        "type": "integer",
        "description": "Number of fully compatible constraints"
      },
      "warning_constraints": {
        "type": "integer",
        "description": "Number of constraints with compatibility warnings"
      },
      "incompatible_constraints": {
        "type": "integer",
        "description": "Number of incompatible constraints"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Index Compatibility Checker",
    "tool_description": "Evaluates database indexes for migration compatibility, analyzing index types, expressions, and performance implications.",
    "parameters": {
      "source_schema_id": {
        "type": "string",
        "required": true,
        "description": "Source schema identifier"
      },
      "target_database_type": {
        "type": "string",
        "required": true,
        "description": "Target database type"
      },
      "check_performance_impact": {
        "type": "boolean",
        "required": false,
        "description": "Whether to assess performance impact of index changes",
        "default": true
      }
    },
    "error_messages": [
      "Schema not found: Invalid source_schema_id provided.",
      "Index analysis error: Unable to parse index definitions from source.",
      "Performance analysis failed: Cannot determine performance impact for target database."
    ],
    "usage": "Provide source_schema_id and target_database_type to check index compatibility. Enable check_performance_impact for detailed performance analysis.",
    "output_details": {
      "check_id": {
        "type": "string",
        "description": "Unique identifier for index compatibility check"
      },
      "total_indexes": {
        "type": "integer",
        "description": "Total number of indexes analyzed"
      },
      "compatible_indexes": {
        "type": "integer",
        "description": "Number of directly compatible indexes"
      },
      "needs_modification": {
        "type": "integer",
        "description": "Number of indexes requiring modification"
      },
      "unsupported_indexes": {
        "type": "integer",
        "description": "Number of unsupported index types"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Foreign Key Validator",
    "tool_description": "Validates foreign key relationships and referential integrity constraints for cross-database migration compatibility.",
    "parameters": {
      "source_schema_id": {
        "type": "string",
        "required": true,
        "description": "Source schema identifier"
      },
      "target_database_type": {
        "type": "string",
        "required": true,
        "description": "Target database system"
      },
      "validate_cascading_rules": {
        "type": "boolean",
        "required": false,
        "description": "Whether to validate CASCADE/RESTRICT rules",
        "default": true
      },
      "check_circular_references": {
        "type": "boolean",
        "required": false,
        "description": "Whether to detect circular foreign key references",
        "default": true
      }
    },
    "error_messages": [
      "Invalid schema reference: Source schema_id not found.",
      "Foreign key validation failed: Unable to parse relationship definitions.",
      "Circular reference detected: Foreign key relationships form circular dependencies.",
      "Cascading rule incompatibility: Target database doesn't support specified cascading actions."
    ],
    "usage": "Provide source_schema_id and target_database_type to validate foreign key compatibility. Use boolean parameters to control specific validation checks.",
    "output_details": {
      "validation_id": {
        "type": "string",
        "description": "Unique identifier for validation result"
      },
      "total_foreign_keys": {
        "type": "integer",
        "description": "Total number of foreign keys validated"
      },
      "valid_relationships": {
        "type": "integer",
        "description": "Number of valid foreign key relationships"
      },
      "problematic_relationships": {
        "type": "integer",
        "description": "Number of relationships with issues"
      },
      "circular_dependencies": {
        "type": "boolean",
        "description": "Whether circular dependencies were found"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Schema Comparator",
    "tool_description": "Performs detailed comparison between two database schemas, identifying structural differences, missing objects, and data model variations.",
    "parameters": {
      "source_schema_id": {
        "type": "string",
        "required": true,
        "description": "First schema for comparison"
      },
      "target_schema_id": {
        "type": "string",
        "required": true,
        "description": "Second schema for comparison"
      },
      "comparison_depth": {
        "type": "string",
        "required": false,
        "description": "Depth of comparison: surface, detailed, or comprehensive",
        "default": "detailed"
      },
      "ignore_naming_case": {
        "type": "boolean",
        "required": false,
        "description": "Whether to ignore case differences in object names",
        "default": false
      },
      "compare_data_samples": {
        "type": "boolean",
        "required": false,
        "description": "Whether to compare sample data for validation",
        "default": false
      }
    },
    "error_messages": [
      "Schema not found: One or both schema identifiers are invalid.",
      "Comparison failed: Unable to perform schema comparison due to access issues.",
      "Invalid comparison depth: Use surface, detailed, or comprehensive.",
      "Data sampling error: Unable to access sample data for comparison."
    ],
    "usage": "Provide source_schema_id and target_schema_id for comparison. Set comparison_depth and boolean options to control comparison scope and behavior.",
    "output_details": {
      "comparison_id": {
        "type": "string",
        "description": "Unique identifier for comparison result"
      },
      "similarity_score": {
        "type": "number",
        "description": "Overall schema similarity percentage (0-100)"
      },
      "structural_differences": {
        "type": "integer",
        "description": "Number of structural differences found"
      },
      "missing_objects_source": {
        "type": "integer",
        "description": "Objects present in target but missing in source"
      },
      "missing_objects_target": {
        "type": "integer",
        "description": "Objects present in source but missing in target"
      },
      "data_type_mismatches": {
        "type": "integer",
        "description": "Number of data type mismatches between schemas"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Migration Risk Assessor",
    "tool_description": "Evaluates migration risks by analyzing compatibility results, data complexity, and potential failure points to provide risk ratings and mitigation recommendations.",
    "parameters": {
      "compatibility_results": {
        "type": "array",
        "required": true,
        "description": "Array of analysis result IDs from previous compatibility checks",
        "items": {
          "type": "string"
        },
        "minItems": 1,
        "maxItems": 20
      },
      "migration_timeline": {
        "type": "string",
        "required": true,
        "description": "Target migration timeline in days"
      },
      "business_criticality": {
        "type": "string",
        "required": false,
        "description": "Business criticality level: low, medium, high, critical",
        "default": "medium"
      },
      "downtime_tolerance": {
        "type": "number",
        "required": false,
        "description": "Maximum acceptable downtime in hours",
        "default": 4
      },
      "rollback_requirement": {
        "type": "boolean",
        "required": false,
        "description": "Whether rollback capability is required",
        "default": true
      },
      "data_validation_level": {
        "type": "string",
        "required": false,
        "description": "Required validation level: basic, thorough, comprehensive",
        "default": "thorough"
      },
      "team_experience": {
        "type": "string",
        "required": false,
        "description": "Team experience level: novice, intermediate, expert",
        "default": "intermediate"
      },
      "testing_environment": {
        "type": "boolean",
        "required": false,
        "description": "Whether testing environment is available",
        "default": true
      }
    },
    "error_messages": [
      "Invalid compatibility results: One or more result IDs not found.",
      "Invalid timeline: Migration timeline must be a positive number.",
      "Invalid criticality level: Use low, medium, high, or critical.",
      "Invalid validation level: Use basic, thorough, or comprehensive.",
      "Invalid experience level: Use novice, intermediate, or expert.",
      "Risk assessment failed: Unable to calculate risk scores from provided data."
    ],
    "usage": "Provide array of compatibility_results IDs and migration_timeline. Set optional parameters to customize risk assessment based on business requirements and constraints.",
    "output_details": {
      "assessment_id": {
        "type": "string",
        "description": "Unique identifier for risk assessment"
      },
      "overall_risk_score": {
        "type": "number",
        "description": "Overall migration risk score (0-10, higher is riskier)"
      },
      "risk_category": {
        "type": "string",
        "description": "Risk category: low, medium, high, or critical"
      },
      "technical_risks": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of identified technical risks"
      },
      "business_risks": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of identified business risks"
      },
      "mitigation_recommendations": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Recommended risk mitigation strategies"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Data Volume Estimator",
    "tool_description": "Estimates data migration volumes, transfer times, and storage requirements based on table sizes and network capacity.",
    "parameters": {
      "source_schema_id": {
        "type": "string",
        "required": true,
        "description": "Source schema identifier"
      },
      "network_bandwidth_mbps": {
        "type": "number",
        "required": false,
        "description": "Available network bandwidth in Mbps",
        "default": 100
      },
      "compression_ratio": {
        "type": "number",
        "required": false,
        "description": "Expected compression ratio (0.1-1.0)",
        "default": 0.7
      }
    },
    "error_messages": [
      "Schema not found: Invalid source_schema_id provided.",
      "Invalid bandwidth: Network bandwidth must be greater than 0.",
      "Invalid compression ratio: Value must be between 0.1 and 1.0.",
      "Volume estimation failed: Unable to calculate table sizes."
    ],
    "usage": "Provide source_schema_id to estimate migration data volumes. Optionally specify network_bandwidth_mbps and compression_ratio for transfer time calculations.",
    "output_details": {
      "estimation_id": {
        "type": "string",
        "description": "Unique identifier for volume estimation"
      },
      "total_data_size_gb": {
        "type": "number",
        "description": "Total estimated data size in gigabytes"
      },
      "largest_table_size_gb": {
        "type": "number",
        "description": "Size of largest table in gigabytes"
      },
      "estimated_transfer_hours": {
        "type": "number",
        "description": "Estimated transfer time in hours"
      },
      "storage_overhead_gb": {
        "type": "number",
        "description": "Additional storage needed for migration process"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Performance Impact Analyzer",
    "tool_description": "Analyzes potential performance impacts of schema migration on application queries and database operations.",
    "parameters": {
      "source_schema_id": {
        "type": "string",
        "required": true,
        "description": "Source schema identifier"
      },
      "target_database_type": {
        "type": "string",
        "required": true,
        "description": "Target database system type"
      },
      "query_patterns": {
        "type": "array",
        "required": false,
        "description": "Common query patterns to analyze",
        "items": {
          "type": "string"
        },
        "default": "None"
      },
      "expected_load_factor": {
        "type": "number",
        "required": false,
        "description": "Expected load increase factor (1.0 = same load)",
        "default": 1.0
      }
    },
    "error_messages": [
      "Schema not found: Invalid source_schema_id provided.",
      "Invalid database type: Target database type not supported for performance analysis.",
      "Query analysis failed: Unable to parse provided query patterns.",
      "Invalid load factor: Expected load factor must be greater than 0."
    ],
    "usage": "Provide source_schema_id and target_database_type for performance analysis. Optionally include query_patterns and expected_load_factor for detailed impact assessment.",
    "output_details": {
      "analysis_id": {
        "type": "string",
        "description": "Unique identifier for performance analysis"
      },
      "performance_impact_score": {
        "type": "number",
        "description": "Performance impact score (-10 to +10, negative is worse)"
      },
      "query_performance_changes": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Expected query performance changes"
      },
      "optimization_recommendations": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Performance optimization recommendations"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Migration Script Generator",
    "tool_description": "Generates database migration scripts including DDL statements, data transfer commands, and index creation based on compatibility analysis results.",
    "parameters": {
      "source_schema_id": {
        "type": "string",
        "required": true,
        "description": "Source schema identifier"
      },
      "target_database_type": {
        "type": "string",
        "required": true,
        "description": "Target database system type"
      },
      "migration_approach": {
        "type": "string",
        "required": true,
        "description": "Migration approach: full_offline, incremental, or online"
      },
      "include_data_migration": {
        "type": "boolean",
        "required": false,
        "description": "Whether to include data migration scripts",
        "default": true
      },
      "batch_size": {
        "type": "integer",
        "required": false,
        "description": "Batch size for data migration (1-10000)",
        "default": 1000
      }
    },
    "error_messages": [
      "Schema not found: Invalid source_schema_id provided.",
      "Unsupported migration approach: Use full_offline, incremental, or online.",
      "Script generation failed: Unable to generate migration scripts.",
      "Invalid batch size: Batch size must be between 1 and 10000."
    ],
    "usage": "Provide source_schema_id, target_database_type, and migration_approach to generate migration scripts. Set include_data_migration and batch_size as needed.",
    "output_details": {
      "script_id": {
        "type": "string",
        "description": "Unique identifier for generated scripts"
      },
      "ddl_script_lines": {
        "type": "integer",
        "description": "Number of DDL script lines generated"
      },
      "data_script_lines": {
        "type": "integer",
        "description": "Number of data migration script lines generated"
      },
      "estimated_execution_minutes": {
        "type": "number",
        "description": "Estimated script execution time in minutes"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Rollback Plan Creator",
    "tool_description": "Creates comprehensive rollback procedures and recovery scripts to reverse migration changes in case of failure.",
    "parameters": {
      "migration_script_id": {
        "type": "string",
        "required": true,
        "description": "Migration script identifier from Script Generator"
      },
      "backup_strategy": {
        "type": "string",
        "required": true,
        "description": "Backup strategy: full_backup, incremental_backup, or snapshot"
      },
      "rollback_time_limit": {
        "type": "number",
        "required": false,
        "description": "Maximum rollback time in hours",
        "default": 2
      }
    },
    "error_messages": [
      "Migration script not found: Invalid migration_script_id provided.",
      "Invalid backup strategy: Use full_backup, incremental_backup, or snapshot.",
      "Rollback plan generation failed: Unable to create rollback procedures.",
      "Invalid time limit: Rollback time limit must be greater than 0."
    ],
    "usage": "Provide migration_script_id and backup_strategy to create rollback plan. Set rollback_time_limit to constrain rollback procedures.",
    "output_details": {
      "rollback_plan_id": {
        "type": "string",
        "description": "Unique identifier for rollback plan"
      },
      "rollback_steps": {
        "type": "integer",
        "description": "Number of rollback steps created"
      },
      "estimated_rollback_minutes": {
        "type": "number",
        "description": "Estimated rollback execution time in minutes"
      },
      "verification_checks": {
        "type": "integer",
        "description": "Number of verification checks included"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Compatibility Report Builder",
    "tool_description": "Compiles all analysis results into a comprehensive migration compatibility report with executive summary, technical details, and actionable recommendations.",
    "parameters": {
      "analysis_result_ids": {
        "type": "array",
        "required": true,
        "description": "Array of all analysis result IDs to include in report",
        "items": {
          "type": "string"
        },
        "minItems": 2,
        "maxItems": 25
      },
      "report_format": {
        "type": "string",
        "required": false,
        "description": "Report format: executive, technical, or comprehensive",
        "default": "comprehensive"
      },
      "include_recommendations": {
        "type": "boolean",
        "required": false,
        "description": "Whether to include actionable recommendations",
        "default": true
      },
      "stakeholder_level": {
        "type": "string",
        "required": false,
        "description": "Target stakeholder level: technical, management, or executive",
        "default": "technical"
      },
      "priority_risks_only": {
        "type": "boolean",
        "required": false,
        "description": "Whether to focus only on high-priority risks",
        "default": false
      },
      "include_cost_estimates": {
        "type": "boolean",
        "required": false,
        "description": "Whether to include migration cost estimates",
        "default": false
      },
      "timeline_constraints": {
        "type": "string",
        "required": false,
        "description": "Timeline constraints in weeks",
        "default": "None"
      },
      "budget_constraints": {
        "type": "string",
        "required": false,
        "description": "Budget constraints description",
        "default": "None"
      },
      "compliance_requirements": {
        "type": "array",
        "required": false,
        "description": "List of compliance requirements to address",
        "items": {
          "type": "string"
        },
        "default": "None"
      },
      "success_criteria": {
        "type": "array",
        "required": false,
        "description": "Migration success criteria",
        "items": {
          "type": "string"
        },
        "default": "None"
      }
    },
    "error_messages": [
      "Analysis results not found: One or more analysis result IDs are invalid.",
      "Invalid report format: Use executive, technical, or comprehensive.",
      "Invalid stakeholder level: Use technical, management, or executive.",
      "Report generation failed: Unable to compile analysis results into report.",
      "Insufficient data: Minimum 2 analysis results required for comprehensive report."
    ],
    "usage": "Provide analysis_result_ids array with all previous analysis results. Set report_format and stakeholder_level to customize output. Use optional parameters to focus on specific aspects like risks, costs, or compliance.",
    "output_details": {
      "report_id": {
        "type": "string",
        "description": "Unique identifier for compatibility report"
      },
      "overall_compatibility_score": {
        "type": "number",
        "description": "Overall migration compatibility score (0-100)"
      },
      "migration_feasibility": {
        "type": "string",
        "description": "Migration feasibility assessment: feasible, challenging, or high-risk"
      },
      "critical_issues_count": {
        "type": "integer",
        "description": "Number of critical issues identified"
      },
      "recommendation_count": {
        "type": "integer",
        "description": "Number of actionable recommendations provided"
      },
      "estimated_effort_weeks": {
        "type": "number",
        "description": "Estimated migration effort in weeks"
      },
      "report_sections": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of report sections included"
      }
    }
  }
  ```
