field_name: rag_systems
subfield: document_ingestion_and_preprocessing
task: Text extraction from various document types
tool_description: "**STEP 1 — Rate task difficulty**\n\nThis task involves extracting text from diverse document formats (PDFs, Word docs, images, web pages, etc.), each with unique parsing challenges, encoding issues, and structural complexities. The scope is broad with multiple file types, moderate ambiguity in handling edge cases, and significant dependencies between extraction, cleaning, and validation steps. This represents a **medium** difficulty task.\n\n**STEP 2 — Set a tool budget**\n\nGiven the medium complexity, I'll target **12 tools** to cover the various document types, preprocessing steps, and validation requirements while maintaining composability.\n\n**STEP 3 — List all tool names with dependencies and affordances**\n\n1. **PDF Text Extractor** - Consumes: PDF files → Produces: Raw text + metadata\n2. **Document Format Detector** - Consumes: File paths → Produces: Format identification\n3. **OCR Image Processor** - Consumes: Images/scanned docs → Produces: Extracted text\n4. **Word Document Parser** - Consumes: DOC/DOCX files → Produces: Text + formatting\n5. **Web Content Scraper** - Consumes: URLs → Produces: Clean text content\n6. **Text Cleaner** - Consumes: Raw text → Produces: Cleaned, normalized text\n7. **Encoding Detector** - Consumes: Text files → Produces: Character encoding info\n8. **Table Structure Extractor** - Consumes: Documents → Produces: Structured table data\n9. **Metadata Extractor** - Consumes: Documents → Produces: Document properties\n10. **Text Validator** - Consumes: Extracted text → Produces: Quality metrics\n11. **Batch Document Processor** - Consumes: Multiple files → Produces: Processing results\n12. **Text Segmenter** - Consumes: Long text → Produces: Logical segments\n\n**STEP 4 — Multi-tool plans**\n\n**Simple plans:**\n- Single PDF processing: Document Format Detector → PDF Text Extractor → Text Cleaner\n- Image text extraction: OCR Image Processor → Text Validator → Text Cleaner\n\n**Medium plans:**\n- Web content ingestion: Web Content Scraper → Text Cleaner → Text Segmenter → Text Validator\n- Office document processing: Document Format Detector → Word Document Parser → Table Structure Extractor → Metadata Extractor\n\n**Complex plans:**\n- Full document pipeline: Batch Document Processor → Document Format Detector → [PDF Text Extractor/OCR Image Processor/Word Document Parser] → Table Structure Extractor → Metadata Extractor → Text Cleaner → Text Segmenter → Text Validator\n- Multi-format corpus building: Document Format Detector → Encoding Detector → [Multiple extractors] → Text Cleaner → Text Validator → Text Segmenter\n\n**STEP 5 — Produce tools**\n\n```json\n{\n  \"tool_name\": \"Document Format Detector\",\n  \"tool_description\": \"Identifies the format and type of document files based on file extension, MIME type, and content analysis to route to appropriate extraction tools.\",\n  \"parameters\": {\n    \"file_path\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Path to the document file to analyze\"\n    },\n    \"include_confidence\": {\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Whether to include confidence scores for format detection\",\n      \"default\": false\n    }\n  },\n  \"error_messages\": [\n    \"File not found: The specified file path does not exist or is not accessible.\",\n    \"Unsupported file format: The file format cannot be determined or is not supported.\",\n    \"File access denied: Insufficient permissions to read the specified file.\"\n  ],\n  \"usage\": \"Provide the file_path parameter pointing to a document file. Optionally set include_confidence to true for detailed format detection scores.\",\n  \"output_details\": {\n    \"detected_format\": {\n      \"type\": \"string\",\n      \"description\": \"The detected document format (pdf, docx, txt, html, image, etc.)\"\n    },\n    \"mime_type\": {\n      \"type\": \"string\", \n      \"description\": \"MIME type of the detected format\"\n    },\n    \"confidence_score\": {\n      \"type\": \"number\",\n \
  \     \"description\": \"Confidence level of format detection (0-1)\"\n    }\n  }\n}\n```\n\n```json\n{\n  \"tool_name\": \"PDF Text Extractor\",\n  \"tool_description\": \"Extracts text content from PDF files with options for page ranges, password handling, and layout preservation.\",\n  \"parameters\": {\n    \"pdf_path\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Path to the PDF file\"\n    },\n    \"start_page\": {\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"Starting page number (1-based)\",\n      \"default\": 1\n    },\n    \"end_page\": {\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"Ending page number (1-based)\",\n      \"default\": None\n    },\n    \"password\": {\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"Password for encrypted PDFs\",\n      \"default\": None\n    },\n    \"preserve_layout\": {\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Whether to maintain original text layout\",\n      \"default\": false\n    }\n  },\n  \"error_messages\": [\n    \"PDF file not found: The specified PDF path does not exist.\",\n    \"Invalid page range: start_page must be less than or equal to end_page and within document bounds.\",\n    \"Encrypted PDF requires password: Provide the correct password parameter for encrypted documents.\",\n    \"Corrupted PDF: The PDF file appears to be damaged or corrupted.\",\n    \"Insufficient memory: PDF file too large to process in available memory.\"\n  ],\n  \"usage\": \"Provide pdf_path to extract text from entire document, or specify start_page/end_page for partial extraction. Include password for encrypted PDFs.\",\n  \"output_details\": {\n    \"extracted_text\": {\n      \"type\": \"string\",\n      \"description\": \"The extracted text content from the PDF\"\n    },\n    \"page_count\": {\n      \"type\": \"integer\",\n      \"description\": \"Total number of pages in the PDF\"\n    },\n    \"pages_processed\": {\n      \"type\": \"integer\",\n      \"description\": \"Number of pages successfully processed\"\n    }\n  }\n}\n```\n\n```json\n{\n  \"tool_name\": \"OCR Image Processor\",\n  \"tool_description\": \"Performs optical character recognition on images and scanned documents to extract text content with language and preprocessing options.\",\n  \"parameters\": {\n    \"image_path\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Path to the image file containing text\"\n    },\n    \"language\": {\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"Language code for OCR (eng, spa, fra, deu, etc.)\",\n      \"default\": \"eng\"\n    },\n    \"preprocessing\": {\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Apply image preprocessing for better OCR accuracy\",\n      \"default\": true\n    },\n    \"dpi\": {\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"DPI setting for OCR processing (150-600)\",\n      \"default\": 300\n    },\n    \"confidence_threshold\": {\n      \"type\": \"number\",\n      \"required\": false,\n      \"description\": \"Minimum confidence threshold for text recognition (0-1)\",\n      \"default\": 0.6\n    }\n  },\n  \"error_messages\": [\n    \"Image file not found: The specified image path does not exist or is not accessible.\",\n    \"Unsupported image format: Use supported formats like PNG, JPG, TIFF, BMP.\",\n    \"Invalid language code: Provide a valid ISO language code for OCR processing.\",\n    \"Invalid DPI value: DPI must be between 150 and 600.\",\n    \"Low image quality: Image resolution too poor for reliable text extraction.\",\n    \"OCR processing failed: Unable to process image due to technical error.\"\n  ],\n  \"usage\": \"Provide image_path to process. Set language for non-English text, enable preprocessing for poor quality images, adjust dpi and confidence_threshold as needed.\",\n  \"output_details\"\
  : {\n    \"extracted_text\": {\n      \"type\": \"string\",\n      \"description\": \"Text content extracted from the image\"\n    },\n    \"confidence_score\": {\n      \"type\": \"number\",\n      \"description\": \"Average confidence score of text recognition\"\n    },\n    \"word_count\": {\n      \"type\": \"integer\",\n      \"description\": \"Number of words successfully recognized\"\n    }\n  }\n}\n```\n\n```json\n{\n  \"tool_name\": \"Word Document Parser\",\n  \"tool_description\": \"Extracts text and structural elements from Microsoft Word documents (DOC/DOCX) with formatting and metadata preservation.\",\n  \"parameters\": {\n    \"doc_path\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Path to the Word document file\"\n    },\n    \"extract_headers\": {\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Include header content in extraction\",\n      \"default\": true\n    },\n    \"extract_footers\": {\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Include footer content in extraction\",\n      \"default\": true\n    },\n    \"extract_tables\": {\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Include table content in extraction\",\n      \"default\": true\n    }\n  },\n  \"error_messages\": [\n    \"Document file not found: The specified document path does not exist.\",\n    \"Unsupported document format: Only DOC and DOCX formats are supported.\",\n    \"Corrupted document: The document file appears to be damaged or corrupted.\",\n    \"Document is password protected: Cannot access password-protected documents.\",\n    \"Insufficient permissions: Unable to read the document file due to access restrictions.\"\n  ],\n  \"usage\": \"Provide doc_path to extract content. Use boolean flags to control extraction of headers, footers, and tables based on requirements.\",\n  \"output_details\": {\n    \"extracted_text\": {\n      \"type\": \"string\",\n      \"description\": \"Main body text extracted from the document\"\n    },\n    \"paragraph_count\": {\n      \"type\": \"integer\",\n      \"description\": \"Number of paragraphs found in the document\"\n    },\n    \"table_count\": {\n      \"type\": \"integer\",\n      \"description\": \"Number of tables found in the document\"\n    },\n    \"has_images\": {\n      \"type\": \"boolean\",\n      \"description\": \"Whether the document contains embedded images\"\n    }\n  }\n}\n```\n\n```json\n{\n  \"tool_name\": \"Web Content Scraper\",\n  \"tool_description\": \"Extracts clean text content from web pages, filtering out navigation, ads, and boilerplate content while preserving main article text.\",\n  \"parameters\": {\n    \"url\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"URL of the web page to scrape\"\n    },\n    \"user_agent\": {\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"Custom user agent string for the request\",\n      \"default\": \"Mozilla/5.0 (compatible; TextExtractor/1.0)\"\n    },\n    \"timeout\": {\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"Request timeout in seconds (1-60)\",\n      \"default\": 30\n    },\n    \"follow_redirects\": {\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Whether to follow HTTP redirects\",\n      \"default\": true\n    },\n    \"extract_links\": {\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Whether to extract hyperlinks from the content\",\n      \"default\": false\n    }\n  },\n  \"error_messages\": [\n    \"Invalid URL format: Provide a valid HTTP or HTTPS URL.\",\n    \"Network connection failed: Unable to connect to the specified URL.\",\n    \"HTTP error response: Received error status code from server (404, 403, 500, etc.).\",\n    \"Request timeout: Server did not respond within the specified timeout period.\",\n    \"Content extraction failed: Unable to parse HTML content\
  \ or extract meaningful text.\",\n    \"Blocked by robots.txt: The URL is blocked by the site's robots.txt file.\"\n  ],\n  \"usage\": \"Provide a valid URL to extract content. Adjust timeout for slow sites, set custom user_agent if needed, and enable extract_links to capture hyperlinks.\",\n  \"output_details\": {\n    \"extracted_text\": {\n      \"type\": \"string\",\n      \"description\": \"Clean main content extracted from the web page\"\n    },\n    \"title\": {\n      \"type\": \"string\",\n      \"description\": \"Page title extracted from HTML\"\n    },\n    \"links\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"string\"\n      },\n      \"description\": \"List of hyperlinks found in the content\"\n    },\n    \"word_count\": {\n      \"type\": \"integer\",\n      \"description\": \"Number of words in extracted content\"\n    }\n  }\n}\n```\n\n```json\n{\n  \"tool_name\": \"Text Cleaner\",\n  \"tool_description\": \"Cleans and normalizes extracted text by removing unwanted characters, fixing encoding issues, and standardizing whitespace and formatting.\",\n  \"parameters\": {\n    \"raw_text\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Raw text content to be cleaned\"\n    },\n    \"remove_extra_whitespace\": {\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Remove multiple consecutive spaces and normalize whitespace\",\n      \"default\": true\n    },\n    \"remove_special_chars\": {\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Remove or replace special characters and symbols\",\n      \"default\": false\n    },\n    \"fix_encoding\": {\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Attempt to fix common encoding issues\",\n      \"default\": true\n    },\n    \"normalize_unicode\": {\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Normalize Unicode characters to standard form\",\n      \"default\": true\n    },\n    \"preserve_line_breaks\": {\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Maintain original line break structure\",\n      \"default\": true\n    }\n  },\n  \"error_messages\": [\n    \"Empty input text: Provide non-empty text content for cleaning.\",\n    \"Text too large: Input text exceeds maximum processing size limit.\",\n    \"Encoding detection failed: Unable to determine or fix text encoding issues.\",\n    \"Unicode normalization error: Failed to normalize Unicode characters in the text.\"\n  ],\n  \"usage\": \"Provide raw_text for cleaning. Use boolean parameters to control specific cleaning operations based on your text quality and requirements.\",\n  \"output_details\": {\n    \"cleaned_text\": {\n      \"type\": \"string\",\n      \"description\": \"The cleaned and normalized text content\"\n    },\n    \"original_length\": {\n      \"type\": \"integer\",\n      \"description\": \"Character count of original text\"\n    },\n    \"cleaned_length\": {\n      \"type\": \"integer\",\n      \"description\": \"Character count of cleaned text\"\n    },\n    \"changes_made\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"string\"\n      },\n      \"description\": \"List of cleaning operations performed\"\n    }\n  }\n}\n```\n\n```json\n{\n  \"tool_name\": \"Encoding Detector\",\n  \"tool_description\": \"Detects and analyzes text encoding of files to ensure proper character interpretation during text extraction.\",\n  \"parameters\": {\n    \"file_path\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Path to the text file for encoding detection\"\n    },\n    \"sample_size\": {\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"Number of bytes to sample for detection (1024-65536)\",\n      \"default\": 8192\n    }\n  },\n  \"error_messages\": [\n    \"File not found: The specified file path does not exist or is not accessible.\",\n    \"Binary file\
  \ detected: The file appears to be binary rather than text content.\",\n    \"Invalid sample size: sample_size must be between 1024 and 65536 bytes.\",\n    \"Encoding detection failed: Unable to determine text encoding with sufficient confidence.\"\n  ],\n  \"usage\": \"Provide file_path to analyze text encoding. Adjust sample_size for very large files or when detection accuracy is critical.\",\n  \"output_details\": {\n    \"detected_encoding\": {\n      \"type\": \"string\",\n      \"description\": \"The most likely text encoding (utf-8, latin-1, etc.)\"\n    },\n    \"confidence\": {\n      \"type\": \"number\",\n      \"description\": \"Confidence level of encoding detection (0-1)\"\n    },\n    \"alternative_encodings\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"string\"\n      },\n      \"description\": \"List of other possible encodings with lower confidence\"\n    }\n  }\n}\n```\n\n```json\n{\n  \"tool_name\": \"Table Structure Extractor\",\n  \"tool_description\": \"Identifies and extracts structured table data from documents, preserving row-column relationships and converting to structured format.\",\n  \"parameters\": {\n    \"document_path\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Path to document containing tables\"\n    },\n    \"document_type\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Document format: pdf, docx, html, csv, xlsx\"\n    },\n    \"table_index\": {\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"Specific table to extract (0-based), or -1 for all tables\",\n      \"default\": -1\n    },\n    \"has_header\": {\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Whether tables have header rows\",\n      \"default\": true\n    },\n    \"min_rows\": {\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"Minimum number of rows to consider valid table\",\n      \"default\": 2\n    },\n    \"min_cols\": {\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"Minimum number of columns to consider valid table\",\n      \"default\": 2\n    }\n  },\n  \"error_messages\": [\n    \"Document not found: The specified document path does not exist.\",\n    \"Unsupported document type: Use supported formats: pdf, docx, html, csv, xlsx.\",\n    \"No tables found: The document does not contain any recognizable table structures.\",\n    \"Invalid table index: Specified table_index exceeds the number of tables found.\",\n    \"Table extraction failed: Unable to parse table structure due to formatting issues.\",\n    \"Invalid minimum values: min_rows and min_cols must be positive integers.\"\n  ],\n  \"usage\": \"Provide document_path and document_type. Set table_index for specific tables, adjust min_rows/min_cols to filter small tables, and set has_header appropriately.\",\n  \"output_details\": {\n    \"tables_found\": {\n      \"type\": \"integer\",\n      \"description\": \"Total number of tables detected in document\"\n    },\n    \"extracted_tables\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"string\"\n      },\n      \"description\": \"JSON-formatted strings representing extracted table data\"\n    },\n    \"table_dimensions\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"string\"\n      },\n      \"description\": \"Dimensions of each table in format 'rows x columns'\"\n    }\n  }\n}\n```\n\n```json\n{\n  \"tool_name\": \"Metadata Extractor\",\n  \"tool_description\": \"Extracts document metadata including creation date, author, title, subject, keywords, and technical properties from various document formats.\",\n  \"parameters\": {\n    \"document_path\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Path to the document file\"\n    },\n    \"document_format\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Document format: pdf, docx, xlsx,\
  \ pptx, txt, html\"\n    },\n    \"extract_custom_properties\": {\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Whether to extract custom document properties\",\n      \"default\": false\n    },\n    \"extract_statistics\": {\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Whether to extract document statistics (word count, page count, etc.)\",\n      \"default\": true\n    }\n  },\n  \"error_messages\": [\n    \"Document not found: The specified document path does not exist or is not accessible.\",\n    \"Unsupported document format: The specified format is not supported for metadata extraction.\",\n    \"Metadata extraction failed: Unable to read metadata from the document file.\",\n    \"Corrupted document: The document appears to be damaged and metadata cannot be extracted.\"\n  ],\n  \"usage\": \"Provide document_path and document_format. Enable extract_custom_properties for application-specific metadata and extract_statistics for document metrics.\",\n  \"output_details\": {\n    \"title\": {\n      \"type\": \"string\",\n      \"description\": \"Document title from metadata\"\n    },\n    \"author\": {\n      \"type\": \"string\",\n      \"description\": \"Document author information\"\n    },\n    \"creation_date\": {\n      \"type\": \"string\",\n      \"description\": \"Document creation timestamp\",\n      \"format\": \"date-time\"\n    },\n    \"modification_date\": {\n      \"type\": \"string\",\n      \"description\": \"Last modification timestamp\",\n      \"format\": \"date-time\"\n    },\n    \"page_count\": {\n      \"type\": \"integer\",\n      \"description\": \"Number of pages in document\"\n    },\n    \"word_count\": {\n      \"type\": \"integer\",\n      \"description\": \"Estimated word count\"\n    },\n    \"keywords\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"string\"\n      },\n      \"description\": \"Keywords or tags associated with document\"\n    },\n    \"file_size_bytes\": {\n      \"type\": \"integer\",\n      \"description\": \"File size in bytes\"\n    }\n  }\n}\n```\n\n```json\n{\n  \"tool_name\": \"Text Validator\",\n  \"tool_description\": \"Validates extracted text quality by checking for completeness, readability, language detection, and potential extraction errors.\",\n  \"parameters\": {\n    \"text_content\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Text content to validate\"\n    },\n    \"expected_language\": {\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"Expected language code (en, es, fr, de, etc.)\",\n      \"default\": None\n    },\n    \"min_word_count\": {\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"Minimum expected word count for validation\",\n      \"default\": 10\n    },\n    \"check_encoding_issues\": {\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Check for common encoding problems\",\n      \"default\": true\n    }\n  },\n  \"error_messages\": [\n    \"Empty text content: Provide non-empty text for validation.\",\n    \"Text too short: Text content is below minimum word count threshold.\",\n    \"Invalid language code: Provide a valid ISO language code for comparison.\"\n  ],\n  \"usage\": \"Provide text_content for quality assessment. Set expected_language and min_word_count for validation criteria, enable check_encoding_issues for encoding problem detection.\",\n  \"output_details\": {\n    \"is_valid\": {\n      \"type\": \"boolean\",\n      \"description\": \"Overall validation status of the text\"\n    },\n    \"word_count\": {\n      \"type\": \"integer\",\n      \"description\": \"Total word count in the text\"\n    },\n    \"detected_language\": {\n      \"type\": \"string\",\n      \"description\": \"Automatically detected language of the text\"\n    },\n    \"language_confidence\": {\n      \"type\": \"number\",\n      \"description\": \"Confidence score for language detection (0-1)\"\n    },\n\
  \    \"encoding_issues_found\": {\n      \"type\": \"boolean\",\n      \"description\": \"Whether encoding problems were detected\"\n    },\n    \"validation_issues\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"string\"\n      },\n      \"description\": \"List of validation problems found\"\n    },\n    \"quality_score\": {\n      \"type\": \"number\",\n      \"description\": \"Overall text quality score (0-1)\"\n    }\n  }\n}\n```\n\n```json\n{\n  \"tool_name\": \"Batch Document Processor\",\n  \"tool_description\": \"Processes multiple documents simultaneously with parallel processing, progress tracking, and error handling for large document collections.\",\n  \"parameters\": {\n    \"input_directory\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Directory path containing documents to process\"\n    },\n    \"file_patterns\": {\n      \"type\": \"array\",\n      \"required\": false,\n      \"description\": \"File patterns to match (e.g., ['*.pdf', '*.docx'])\",\n      \"items\": {\n        \"type\": \"string\"\n      },\n      \"default\": [\"*.*\"]\n    },\n    \"output_directory\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Directory path for processed output files\"\n    },\n    \"max_parallel_jobs\": {\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"Maximum number of parallel processing jobs (1-16)\",\n      \"default\": 4\n    },\n    \"skip_errors\": {\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Continue processing other files when errors occur\",\n      \"default\": true\n    },\n    \"create_manifest\": {\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Create a processing manifest file with results\",\n      \"default\": true\n    },\n    \"recursive\": {\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Process subdirectories recursively\",\n      \"default\": false\n    }\n  },\n  \"error_messages\": [\n    \"Input directory not found: The specified input directory does not exist.\",\n    \"Output directory creation failed: Cannot create or access the specified output directory.\",\n    \"No matching files found: No files match the specified patterns in the input directory.\",\n    \"Invalid parallel job count: max_parallel_jobs must be between 1 and 16.\",\n    \"Processing interrupted: Batch processing was interrupted due to system error.\",\n    \"Insufficient disk space: Not enough disk space available for output files.\"\n  ],\n  \"usage\": \"Provide input_directory and output_directory paths. Specify file_patterns to filter documents, adjust max_parallel_jobs for performance, and enable recursive for subdirectory processing.\",\n  \"output_details\": {\n    \"total_files_found\": {\n      \"type\": \"integer\",\n      \"description\": \"Total number of files matching the patterns\"\n    },\n    \"files_processed\": {\n      \"type\": \"integer\",\n      \"description\": \"Number of files successfully processed\"\n    },\n    \"files_failed\": {\n      \"type\": \"integer\",\n      \"description\": \"Number of files that failed processing\"\n    },\n    \"processing_time_seconds\": {\n      \"type\": \"number\",\n      \"description\": \"Total processing time in seconds\"\n    },\n    \"failed_files\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"string\"\n      },\n      \"description\": \"List of files that failed to process\"\n    },\n    \"manifest_path\": {\n      \"type\": \"string\",\n      \"description\": \"Path to the generated processing manifest file\"\n    }\n  }\n}\n```\n\n```json\n{\n  \"tool_name\": \"Text Segmenter\",\n  \"tool_description\": \"Segments long text into logical chunks based on paragraphs, sentences, or custom delimiters with size and overlap controls for downstream processing.\",\n  \"parameters\": {\n    \"text_content\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\"\
  : \"Long text content to be segmented\"\n    },\n    \"segmentation_method\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Segmentation approach: paragraph, sentence, fixed_size, semantic\"\n    },\n    \"max_segment_size\": {\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"Maximum characters per segment (100-10000)\",\n      \"default\": 1000\n    },\n    \"overlap_size\": {\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"Character overlap between consecutive segments\",\n      \"default\": 100\n    },\n    \"preserve_structure\": {\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Maintain document structure markers in segments\",\n      \"default\": true\n    },\n    \"min_segment_size\": {\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"Minimum characters per segment (50-1000)\",\n      \"default\": 100\n    }\n  },\n  \"error_messages\": [\n    \"Empty text content: Provide non-empty text for segmentation.\",\n    \"Invalid segmentation method: Use one of [paragraph, sentence, fixed_size, semantic].\",\n    \"Invalid segment size: max_segment_size must be between 100 and 10000 characters.\",\n    \"Invalid overlap size: overlap_size must be less than max_segment_size and non-negative.\",\n    \"Invalid minimum size: min_segment_size must be between 50 and 1000, and less than max_segment_size.\",\n    \"Text too short: Input text is shorter than minimum segment requirements.\"\n  ],\n  \"usage\": \"Provide text_content and segmentation_method. Adjust max_segment_size and overlap_size for optimal chunk sizes, set min_segment_size to filter small segments.\",\n  \"output_details\": {\n    \"segments\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"string\"\n      },\n      \"description\": \"Array of text segments created from the input\"\n    },\n    \"segment_count\": {\n      \"type\": \"integer\",\n      \"description\": \"Total number of segments created\"\n    },\n    \"average_segment_length\": {\n      \"type\": \"number\",\n      \"description\": \"Average character length of segments\"\n    },\n    \"total_characters\": {\n      \"type\": \"integer\",\n      \"description\": \"Total characters across all segments\"\n    }\n  }\n}\n```"
