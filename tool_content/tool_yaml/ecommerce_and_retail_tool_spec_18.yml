field_name: ecommerce_and_retail
subfield: Product Catalog Management
task: Product Category Organization and Taxonomy Management
tool_description: |-
  **STEP 1 — Rate task difficulty**

  This task is **medium** difficulty. It involves managing complex hierarchical relationships between products and categories, requires coordination between multiple data sources (product attributes, existing taxonomies, business rules), and has moderate risk since poor categorization affects searchability and customer experience.

  **STEP 2 — Set a tool budget**

  Given the medium difficulty, I'll target **12 tools** to cover the various aspects of taxonomy management, category organization, and product classification workflows.

  **STEP 3 — List all tool names and dependencies**

  1. **Product Data Extractor** - Consumes: product IDs/sources → Produces: structured product data
  2. **Category Hierarchy Builder** - Consumes: category definitions → Produces: taxonomy structure
  3. **Product Attribute Analyzer** - Consumes: product data → Produces: attribute profiles
  4. **Category Classifier** - Consumes: product data, taxonomy → Produces: category assignments
  5. **Taxonomy Validator** - Consumes: taxonomy structure → Produces: validation results
  6. **Duplicate Category Detector** - Consumes: category data → Produces: duplicate reports
  7. **Product Migration Tool** - Consumes: products, source/target categories → Produces: migration results
  8. **Category Performance Analyzer** - Consumes: category data, metrics → Produces: performance insights
  9. **Bulk Category Updater** - Consumes: category updates → Produces: update results
  10. **Taxonomy Export Generator** - Consumes: taxonomy structure → Produces: export files
  11. **Category Rule Engine** - Consumes: business rules, products → Produces: rule-based assignments
  12. **Taxonomy Merge Tool** - Consumes: multiple taxonomies → Produces: merged taxonomy

  **STEP 4 — Multi-tool plans**

  **Simple Plans:**
  1. **Basic Product Categorization**: Product Data Extractor → Category Classifier → Bulk Category Updater
  2. **Category Cleanup**: Duplicate Category Detector → Category Performance Analyzer → Bulk Category Updater

  **Medium Plans:**
  1. **New Taxonomy Creation**: Product Data Extractor → Product Attribute Analyzer → Category Hierarchy Builder → Taxonomy Validator
  2. **Category Migration**: Product Data Extractor → Product Migration Tool → Category Performance Analyzer → Taxonomy Export Generator

  **Complex Plans:**
  1. **Complete Taxonomy Overhaul**: Product Data Extractor → Product Attribute Analyzer → Category Hierarchy Builder → Category Rule Engine → Category Classifier → Taxonomy Validator → Product Migration Tool
  2. **Multi-Source Taxonomy Integration**: Multiple Product Data Extractors → Taxonomy Merge Tool → Duplicate Category Detector → Category Hierarchy Builder → Taxonomy Validator → Bulk Category Updater

  **STEP 5 — Produce tools**

  ```json
  {
    "tool_name": "Product Data Extractor",
    "tool_description": "Extracts and standardizes product information from various data sources for taxonomy management operations.",
    "parameters": {
      "source_type": {
        "type": "string",
        "required": true,
        "description": "Data source type: csv, database, api, json, xml"
      },
      "source_location": {
        "type": "string",
        "required": true,
        "description": "File path, database connection string, or API endpoint"
      },
      "product_ids": {
        "type": "array",
        "items": {"type": "string"},
        "required": false,
        "description": "Specific product IDs to extract (if empty, extracts all)",
        "default": null
      }
    },
    "error_messages": [
      "Invalid source type: Must be one of [csv, database, api, json, xml]",
      "Source location not accessible: Check file path, database connection, or API endpoint",
      "Product IDs not found: One or more specified product IDs do not exist in the source"
    ],
    "usage": "Specify the source_type and source_location, optionally filter by product_ids. Returns standardized product data ready for taxonomy operations.",
    "output_details": {
      "total_products": {
        "type": "integer",
        "description": "Number of products extracted"
      },
      "product_ids": {
        "type": "array",
        "items": {"type": "string"},
        "description": "List of extracted product IDs"
      },
      "extraction_status": {
        "type": "string",
        "description": "Success or partial success status"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Category Hierarchy Builder",
    "tool_description": "Creates and structures hierarchical category taxonomies with parent-child relationships and metadata.",
    "parameters": {
      "category_names": {
        "type": "array",
        "items": {"type": "string"},
        "required": true,
        "description": "List of category names to organize"
      },
      "parent_child_pairs": {
        "type": "array",
        "items": {"type": "string"},
        "required": false,
        "description": "Parent-child relationships in format 'parent:child'",
        "default": null
      },
      "max_depth": {
        "type": "integer",
        "required": false,
        "description": "Maximum hierarchy depth (1-10)",
        "default": 5
      },
      "auto_organize": {
        "type": "boolean",
        "required": false,
        "description": "Automatically infer hierarchy from category names",
        "default": true
      },
      "include_metadata": {
        "type": "boolean",
        "required": false,
        "description": "Include category metadata like descriptions and attributes",
        "default": true
      }
    },
    "error_messages": [
      "Empty category list: Provide at least one category name",
      "Invalid hierarchy depth: max_depth must be between 1 and 10",
      "Circular dependency detected: Parent-child relationships create a loop",
      "Invalid parent-child format: Use 'parent:child' format for relationships"
    ],
    "usage": "Provide category_names and optionally specify parent_child_pairs. Set max_depth and toggle auto_organize based on your needs.",
    "output_details": {
      "hierarchy_structure": {
        "type": "string",
        "description": "JSON representation of the category hierarchy"
      },
      "total_categories": {
        "type": "integer",
        "description": "Total number of categories in the hierarchy"
      },
      "max_depth_used": {
        "type": "integer",
        "description": "Actual maximum depth of the created hierarchy"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Product Attribute Analyzer",
    "tool_description": "Analyzes product attributes to identify patterns and suggest category groupings based on attribute similarity.",
    "parameters": {
      "product_data_source": {
        "type": "string",
        "required": true,
        "description": "Reference to extracted product data"
      },
      "analysis_type": {
        "type": "string",
        "required": true,
        "description": "Type of analysis: similarity, clustering, frequency, correlation"
      },
      "attribute_weights": {
        "type": "array",
        "items": {"type": "number"},
        "required": false,
        "description": "Importance weights for different attributes (0-1)",
        "default": null
      },
      "min_similarity_threshold": {
        "type": "number",
        "required": false,
        "description": "Minimum similarity score for grouping (0-1)",
        "default": 0.7
      }
    },
    "error_messages": [
      "Invalid product data source: Product data reference not found or invalid",
      "Invalid analysis type: Must be one of [similarity, clustering, frequency, correlation]",
      "Invalid similarity threshold: Must be between 0 and 1",
      "Attribute weights mismatch: Number of weights must match number of attributes"
    ],
    "usage": "Reference the product_data_source and choose an analysis_type. Optionally set attribute_weights and min_similarity_threshold for refined analysis.",
    "output_details": {
      "attribute_patterns": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Identified attribute patterns and groupings"
      },
      "similarity_scores": {
        "type": "array",
        "items": {"type": "number"},
        "description": "Similarity scores between product groups"
      },
      "suggested_categories": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Suggested category names based on analysis"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Category Classifier",
    "tool_description": "Automatically assigns products to categories using machine learning and rule-based classification methods.",
    "parameters": {
      "product_data_source": {
        "type": "string",
        "required": true,
        "description": "Reference to product data to classify"
      },
      "taxonomy_reference": {
        "type": "string",
        "required": true,
        "description": "Reference to target taxonomy structure"
      },
      "classification_method": {
        "type": "string",
        "required": true,
        "description": "Classification approach: ml_based, rule_based, hybrid"
      },
      "confidence_threshold": {
        "type": "number",
        "required": false,
        "description": "Minimum confidence score for assignments (0-1)",
        "default": 0.8
      },
      "allow_multiple_categories": {
        "type": "boolean",
        "required": false,
        "description": "Allow products to be assigned to multiple categories",
        "default": false
      },
      "training_data_source": {
        "type": "string",
        "required": false,
        "description": "Reference to training data for ML methods",
        "default": null
      }
    },
    "error_messages": [
      "Invalid product data source: Referenced product data not found",
      "Invalid taxonomy reference: Taxonomy structure not found or malformed",
      "Invalid classification method: Must be one of [ml_based, rule_based, hybrid]",
      "Invalid confidence threshold: Must be between 0 and 1",
      "Missing training data: ML-based classification requires training_data_source"
    ],
    "usage": "Provide product_data_source, taxonomy_reference, and classification_method. Adjust confidence_threshold and other parameters based on your accuracy requirements.",
    "output_details": {
      "classified_products": {
        "type": "integer",
        "description": "Number of products successfully classified"
      },
      "unclassified_products": {
        "type": "integer",
        "description": "Number of products that couldn't be classified"
      },
      "average_confidence": {
        "type": "number",
        "description": "Average confidence score of classifications"
      },
      "classification_results": {
        "type": "string",
        "description": "Detailed classification results in JSON format"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Taxonomy Validator",
    "tool_description": "Validates taxonomy structures for consistency, completeness, and adherence to business rules.",
    "parameters": {
      "taxonomy_source": {
        "type": "string",
        "required": true,
        "description": "Reference to taxonomy structure to validate"
      },
      "validation_rules": {
        "type": "array",
        "items": {"type": "string"},
        "required": true,
        "description": "Validation rules to apply: completeness, consistency, depth, naming, duplicates"
      },
      "max_allowed_depth": {
        "type": "integer",
        "required": false,
        "description": "Maximum allowed hierarchy depth",
        "default": 6
      },
      "required_fields": {
        "type": "array",
        "items": {"type": "string"},
        "required": false,
        "description": "Required fields for each category",
        "default": null
      }
    },
    "error_messages": [
      "Invalid taxonomy source: Taxonomy reference not found or malformed",
      "Invalid validation rules: Must include at least one of [completeness, consistency, depth, naming, duplicates]",
      "Invalid max depth: Must be a positive integer",
      "Required fields not specified: Some validation rules require required_fields parameter"
    ],
    "usage": "Provide taxonomy_source and specify validation_rules to apply. Set max_allowed_depth and required_fields as needed for your validation criteria.",
    "output_details": {
      "validation_status": {
        "type": "string",
        "description": "Overall validation result: passed, failed, or warning"
      },
      "issues_found": {
        "type": "array",
        "items": {"type": "string"},
        "description": "List of validation issues discovered"
      },
      "recommendations": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Recommended fixes for identified issues"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Duplicate Category Detector",
    "tool_description": "Identifies duplicate, similar, or redundant categories within taxonomy structures using various matching algorithms.",
    "parameters": {
      "taxonomy_source": {
        "type": "string",
        "required": true,
        "description": "Reference to taxonomy to scan for duplicates"
      },
      "detection_method": {
        "type": "string",
        "required": true,
        "description": "Detection approach: exact_match, fuzzy_match, semantic_similarity"
      },
      "similarity_threshold": {
        "type": "number",
        "required": false,
        "description": "Threshold for similarity matching (0-1)",
        "default": 0.85
      },
      "ignore_case": {
        "type": "boolean",
        "required": false,
        "description": "Ignore case differences in category names",
        "default": true
      },
      "check_descriptions": {
        "type": "boolean",
        "required": false,
        "description": "Include category descriptions in duplicate detection",
        "default": false
      }
    },
    "error_messages": [
      "Invalid taxonomy source: Taxonomy reference not found",
      "Invalid detection method: Must be one of [exact_match, fuzzy_match, semantic_similarity]",
      "Invalid similarity threshold: Must be between 0 and 1",
      "Insufficient data: Taxonomy must contain at least 2 categories for duplicate detection"
    ],
    "usage": "Specify taxonomy_source and detection_method. Adjust similarity_threshold and other boolean flags based on your duplicate detection sensitivity requirements.",
    "output_details": {
      "duplicate_groups": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Groups of duplicate categories found"
      },
      "total_duplicates": {
        "type": "integer",
        "description": "Total number of duplicate categories identified"
      },
      "confidence_scores": {
        "type": "array",
        "items": {"type": "number"},
        "description": "Confidence scores for each duplicate group"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Product Migration Tool",
    "tool_description": "Migrates products between categories while maintaining data integrity and tracking migration history.",
    "parameters": {
      "product_ids": {
        "type": "array",
        "items": {"type": "string"},
        "required": true,
        "description": "List of product IDs to migrate"
      },
      "source_categories": {
        "type": "array",
        "items": {"type": "string"},
        "required": true,
        "description": "Current categories of the products"
      },
      "target_categories": {
        "type": "array",
        "items": {"type": "string"},
        "required": true,
        "description": "Destination categories for the products"
      },
      "migration_strategy": {
        "type": "string",
        "required": true,
        "description": "Migration approach: move, copy, merge"
      },
      "backup_before_migration": {
        "type": "boolean",
        "required": false,
        "description": "Create backup before performing migration",
        "default": true
      },
      "validate_target_categories": {
        "type": "boolean",
        "required": false,
        "description": "Validate that target categories exist",
        "default": true
      },
      "batch_size": {
        "type": "integer",
        "required": false,
        "description": "Number of products to migrate per batch",
        "default": 100
      },
      "preserve_timestamps": {
        "type": "boolean",
        "required": false,
        "description": "Preserve original product timestamps",
        "default": true
      }
    },
    "error_messages": [
      "Mismatched array lengths: product_ids, source_categories, and target_categories must have same length",
      "Invalid migration strategy: Must be one of [move, copy, merge]",
      "Target category not found: One or more target categories don't exist",
      "Invalid batch size: Must be between 1 and 1000",
      "Migration conflict: Product already exists in target category (for copy strategy)"
    ],
    "usage": "Provide equal-length arrays of product_ids, source_categories, and target_categories. Choose migration_strategy and adjust other parameters for safe migration.",
    "output_details": {
      "migrated_count": {
        "type": "integer",
        "description": "Number of products successfully migrated"
      },
      "failed_count": {
        "type": "integer",
        "description": "Number of products that failed to migrate"
      },
      "migration_log": {
        "type": "string",
        "description": "Detailed log of migration operations"
      },
      "backup_location": {
        "type": "string",
        "description": "Location of backup data if created"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Category Performance Analyzer",
    "tool_description": "Analyzes category performance metrics including product count, sales data, and user engagement to optimize taxonomy structure.",
    "parameters": {
      "taxonomy_source": {
        "type": "string",
        "required": true,
        "description": "Reference to taxonomy structure to analyze"
      },
      "metrics_to_analyze": {
        "type": "array",
        "items": {"type": "string"},
        "required": true,
        "description": "Metrics to include: product_count, sales_volume, click_through_rate, conversion_rate, search_frequency"
      },
      "time_period_start": {
        "type": "string",
        "format": "date-time",
        "required": true,
        "description": "Start date for performance analysis"
      },
      "time_period_end": {
        "type": "string",
        "format": "date-time",
        "required": true,
        "description": "End date for performance analysis"
      },
      "include_subcategories": {
        "type": "boolean",
        "required": false,
        "description": "Include subcategory performance in analysis",
        "default": true
      }
    },
    "error_messages": [
      "Invalid taxonomy source: Taxonomy reference not found",
      "Invalid metrics selection: Must include at least one of [product_count, sales_volume, click_through_rate, conversion_rate, search_frequency]",
      "Invalid time period: Start date must be before end date",
      "Insufficient data: Not enough performance data available for the specified period"
    ],
    "usage": "Specify taxonomy_source, metrics_to_analyze, and time period. Toggle include_subcategories based on analysis depth needed.",
    "output_details": {
      "performance_summary": {
        "type": "string",
        "description": "Overall performance analysis summary"
      },
      "top_performing_categories": {
        "type": "array",
        "items": {"type": "string"},
        "description": "List of best performing categories"
      },
      "underperforming_categories": {
        "type": "array",
        "items": {"type": "string"},
        "description": "List of categories needing attention"
      },
      "optimization_recommendations": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Specific recommendations for taxonomy improvement"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Bulk Category Updater",
    "tool_description": "Performs bulk updates to category properties, metadata, and assignments with validation and rollback capabilities.",
    "parameters": {
      "update_operations": {
        "type": "array",
        "items": {"type": "string"},
        "required": true,
        "description": "List of update operations in format 'category_id:field:new_value'"
      },
      "operation_type": {
        "type": "string",
        "required": true,
        "description": "Type of bulk operation: update_properties, reassign_products, merge_categories, delete_categories"
      },
      "validation_level": {
        "type": "string",
        "required": false,
        "description": "Validation strictness: strict, moderate, lenient",
        "default": "moderate"
      },
      "create_rollback_point": {
        "type": "boolean",
        "required": false,
        "description": "Create rollback point before executing updates",
        "default": true
      }
    },
    "error_messages": [
      "Invalid update operations format: Use 'category_id:field:new_value' format",
      "Invalid operation type: Must be one of [update_properties, reassign_products, merge_categories, delete_categories]",
      "Invalid validation level: Must be one of [strict, moderate, lenient]",
      "Validation failed: One or more updates failed validation checks"
    ],
    "usage": "Provide update_operations in the specified format and choose operation_type. Set validation_level and rollback options based on your safety requirements.",
    "output_details": {
      "updated_count": {
        "type": "integer",
        "description": "Number of categories successfully updated"
      },
      "failed_count": {
        "type": "integer",
        "description": "Number of updates that failed"
      },
      "rollback_id": {
        "type": "string",
        "description": "Rollback point identifier if created"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Taxonomy Export Generator",
    "tool_description": "Exports taxonomy structures in various formats for integration with external systems, reporting, or backup purposes.",
    "parameters": {
      "taxonomy_source": {
        "type": "string",
        "required": true,
        "description": "Reference to taxonomy structure to export"
      },
      "export_format": {
        "type": "string",
        "required": true,
        "description": "Output format: json, xml, csv, excel, sql"
      },
      "include_metadata": {
        "type": "boolean",
        "required": false,
        "description": "Include category metadata in export",
        "default": true
      },
      "export_level": {
        "type": "string",
        "required": false,
        "description": "Export scope: full_hierarchy, top_level_only, specific_branch",
        "default": "full_hierarchy"
      }
    },
    "error_messages": [
      "Invalid taxonomy source: Taxonomy reference not found",
      "Invalid export format: Must be one of [json, xml, csv, excel, sql]",
      "Invalid export level: Must be one of [full_hierarchy, top_level_only, specific_branch]",
      "Export generation failed: Unable to generate export in requested format"
    ],
    "usage": "Specify taxonomy_source and desired export_format. Configure include_metadata and export_level based on your integration requirements.",
    "output_details": {
      "export_file_path": {
        "type": "string",
        "description": "Path to generated export file"
      },
      "exported_categories": {
        "type": "integer",
        "description": "Number of categories included in export"
      },
      "file_size": {
        "type": "number",
        "description": "Size of export file in megabytes"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Category Rule Engine",
    "tool_description": "Applies business rules and logic for automatic category assignment and taxonomy maintenance based on configurable rule sets.",
    "parameters": {
      "rule_definitions": {
        "type": "array",
        "items": {"type": "string"},
        "required": true,
        "description": "Business rules in format 'condition:action:priority'"
      },
      "product_data_source": {
        "type": "string",
        "required": true,
        "description": "Reference to product data to apply rules against"
      },
      "rule_execution_order": {
        "type": "string",
        "required": false,
        "description": "Rule execution strategy: priority_based, sequential, parallel",
        "default": "priority_based"
      },
      "conflict_resolution": {
        "type": "string",
        "required": false,
        "description": "How to handle rule conflicts: first_wins, highest_priority, manual_review",
        "default": "highest_priority"
      },
      "dry_run_mode": {
        "type": "boolean",
        "required": false,
        "description": "Execute rules without making actual changes",
        "default": false
      }
    },
    "error_messages": [
      "Invalid rule format: Rules must follow 'condition:action:priority' format",
      "Invalid product data source: Product data reference not found",
      "Invalid execution order: Must be one of [priority_based, sequential, parallel]",
      "Invalid conflict resolution: Must be one of [first_wins, highest_priority, manual_review]",
      "Rule execution error: One or more rules failed to execute properly"
    ],
    "usage": "Define rule_definitions and specify product_data_source. Configure execution and conflict resolution strategies based on your business logic requirements.",
    "output_details": {
      "rules_executed": {
        "type": "integer",
        "description": "Number of rules successfully executed"
      },
      "products_affected": {
        "type": "integer",
        "description": "Number of products processed by rules"
      },
      "rule_conflicts": {
        "type": "array",
        "items": {"type": "string"},
        "description": "List of rule conflicts encountered"
      },
      "execution_summary": {
        "type": "string",
        "description": "Detailed summary of rule execution results"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Taxonomy Merge Tool",
    "tool_description": "Merges multiple taxonomy structures while resolving conflicts and maintaining category relationships and product assignments.",
    "parameters": {
      "source_taxonomies": {
        "type": "array",
        "items": {"type": "string"},
        "required": true,
        "description": "References to taxonomy structures to merge"
      },
      "merge_strategy": {
        "type": "string",
        "required": true,
        "description": "Merge approach: union, intersection, hierarchical_preference, custom_rules"
      },
      "conflict_resolution_rules": {
        "type": "array",
        "items": {"type": "string"},
        "required": false,
        "description": "Rules for resolving category conflicts during merge",
        "default": null
      },
      "preserve_hierarchy": {
        "type": "boolean",
        "required": false,
        "description": "Maintain original hierarchy structures where possible",
        "default": true
      },
      "merge_metadata": {
        "type": "boolean",
        "required": false,
        "description": "Combine metadata from matching categories",
        "default": true
      }
    },
    "error_messages": [
      "Insufficient taxonomies: Must provide at least 2 taxonomies to merge",
      "Invalid merge strategy: Must be one of [union, intersection, hierarchical_preference, custom_rules]",
      "Taxonomy reference error: One or more source taxonomies not found",
      "Merge conflict: Unresolvable conflicts found between taxonomies",
      "Custom rules required: merge_strategy 'custom_rules' requires conflict_resolution_rules"
    ],
    "usage": "Provide array of source_taxonomies and select merge_strategy. Configure conflict resolution and metadata handling based on your integration needs.",
    "output_details": {
      "merged_taxonomy_id": {
        "type": "string",
        "description": "Reference ID of the newly created merged taxonomy"
      },
      "total_categories": {
        "type": "integer",
        "description": "Total categories in merged taxonomy"
      },
      "conflicts_resolved": {
        "type": "integer",
        "description": "Number of conflicts successfully resolved"
      },
      "merge_report": {
        "type": "string",
        "description": "Detailed report of merge operations and decisions"
      }
    }
  }
  ```
