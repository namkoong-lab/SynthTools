field_name: healthcare_medical
subfield: Electronic Health Records Management
task: Patient registration and demographic data management
tool_description: |-
  STEP 1 — Rate task difficulty

  This task involves medium complexity due to the need for comprehensive data validation, privacy compliance (HIPAA), integration with existing healthcare systems, and handling of sensitive demographic information with multiple interdependent workflows for registration, verification, and updates.

  STEP 2 — Set a tool budget

  Given the medium difficulty, I'll target 12 tools to cover patient registration workflows, demographic data management, validation, search, and compliance requirements.

  STEP 3 — List all tool names and dependencies

  Tools with their upstream dependencies and downstream affordances:
  1. Patient ID Generator - Consumes: basic info → Produces: unique patient IDs
  2. Demographic Data Validator - Consumes: raw demographic data → Produces: validated data
  3. Insurance Verifier - Consumes: insurance details → Produces: coverage status
  4. Patient Registrar - Consumes: validated data + patient ID → Produces: registration record
  5. Duplicate Patient Detector - Consumes: demographic data → Produces: potential matches
  6. Patient Search Engine - Consumes: search criteria → Produces: patient matches
  7. Demographic Data Updater - Consumes: patient ID + new data → Produces: updated record
  8. Emergency Contact Manager - Consumes: contact details → Produces: validated contacts
  9. Address Standardizer - Consumes: raw addresses → Produces: standardized addresses
  10. Phone Number Validator - Consumes: phone numbers → Produces: validated numbers
  11. Patient Record Merger - Consumes: duplicate patient IDs → Produces: merged record
  12. Audit Trail Logger - Consumes: action details → Produces: audit logs

  STEP 4 — Multi-tool plans

  Simple plans:
  1. New patient registration: Patient ID Generator → Demographic Data Validator → Patient Registrar
  2. Update patient phone: Phone Number Validator → Demographic Data Updater → Audit Trail Logger

  Medium plans:
  1. Complete new patient onboarding: Address Standardizer → Phone Number Validator → Demographic Data Validator → Insurance Verifier → Duplicate Patient Detector → Patient ID Generator → Emergency Contact Manager → Patient Registrar → Audit Trail Logger
  2. Patient record maintenance: Patient Search Engine → Demographic Data Updater → Insurance Verifier → Audit Trail Logger

  Complex plans:
  1. Comprehensive patient registration with duplicate resolution: Address Standardizer → Phone Number Validator → Demographic Data Validator → Duplicate Patient Detector → Patient Search Engine → Patient Record Merger → Insurance Verifier → Emergency Contact Manager → Patient Registrar → Audit Trail Logger
  2. Mass patient data migration: Patient Search Engine → Duplicate Patient Detector → Address Standardizer → Demographic Data Validator → Patient Record Merger → Demographic Data Updater → Audit Trail Logger

  STEP 5 — Produce tools

  ```json
  {
    "tool_name": "Patient ID Generator",
    "tool_description": "Generates unique patient identifiers following healthcare standards with configurable format and validation rules.",
    "parameters": {
      "facility_code": {
        "type": "string",
        "required": true,
        "description": "Healthcare facility code (3-10 characters)"
      },
      "id_format": {
        "type": "string",
        "required": false,
        "description": "ID format pattern: numeric, alphanumeric, or custom",
        "default": "numeric"
      }
    },
    "error_messages": [
      "Invalid facility code: Must be 3-10 characters containing only letters and numbers.",
      "Unsupported ID format: Use 'numeric', 'alphanumeric', or provide a valid custom pattern.",
      "ID generation failed: Unable to generate unique identifier after maximum attempts."
    ],
    "usage": "Provide facility_code and optionally specify id_format. The tool generates a unique patient identifier that follows healthcare standards.",
    "output_details": {
      "patient_id": {
        "type": "string",
        "description": "Generated unique patient identifier"
      },
      "checksum": {
        "type": "string",
        "description": "Validation checksum for the generated ID"
      },
      "generation_timestamp": {
        "type": "string",
        "description": "When the ID was generated"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Demographic Data Validator",
    "tool_description": "Validates and standardizes patient demographic information including names, dates, gender, and other personal details according to healthcare data standards.",
    "parameters": {
      "first_name": {
        "type": "string",
        "required": true,
        "description": "Patient's first name"
      },
      "last_name": {
        "type": "string",
        "required": true,
        "description": "Patient's last name"
      },
      "date_of_birth": {
        "type": "string",
        "required": true,
        "description": "Patient's birth date",
        "format": "date-time"
      },
      "gender": {
        "type": "string",
        "required": true,
        "description": "Patient's gender (M, F, O, U)"
      },
      "ssn": {
        "type": "string",
        "required": false,
        "description": "Social Security Number (format: XXX-XX-XXXX)",
        "default": "None"
      },
      "middle_name": {
        "type": "string",
        "required": false,
        "description": "Patient's middle name",
        "default": "None"
      },
      "suffix": {
        "type": "string",
        "required": false,
        "description": "Name suffix (Jr, Sr, III, etc.)",
        "default": "None"
      },
      "race": {
        "type": "string",
        "required": false,
        "description": "Patient's race",
        "default": "None"
      },
      "ethnicity": {
        "type": "string",
        "required": false,
        "description": "Patient's ethnicity",
        "default": "None"
      }
    },
    "error_messages": [
      "Invalid name format: Names must contain only letters, spaces, hyphens, and apostrophes.",
      "Invalid date of birth: Must be a valid date not in the future and not more than 150 years ago.",
      "Invalid gender code: Use M (Male), F (Female), O (Other), or U (Unknown).",
      "Invalid SSN format: Must follow XXX-XX-XXXX pattern with valid numbers.",
      "Missing required fields: first_name, last_name, date_of_birth, and gender are required."
    ],
    "usage": "Provide required demographic fields (first_name, last_name, date_of_birth, gender) and optional fields. The tool validates and standardizes the information.",
    "output_details": {
      "validation_status": {
        "type": "string",
        "description": "Overall validation result (valid, invalid, warning)"
      },
      "standardized_data": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Array of standardized demographic field values"
      },
      "validation_errors": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Array of validation error messages"
      },
      "confidence_score": {
        "type": "number",
        "description": "Data quality confidence score (0-100)"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Insurance Verifier",
    "tool_description": "Verifies patient insurance coverage, eligibility, and benefits by connecting with insurance provider systems.",
    "parameters": {
      "insurance_provider": {
        "type": "string",
        "required": true,
        "description": "Insurance company name"
      },
      "policy_number": {
        "type": "string",
        "required": true,
        "description": "Insurance policy or member ID number"
      },
      "group_number": {
        "type": "string",
        "required": false,
        "description": "Insurance group number",
        "default": "None"
      },
      "patient_date_of_birth": {
        "type": "string",
        "required": true,
        "description": "Patient's date of birth for verification",
        "format": "date-time"
      },
      "service_date": {
        "type": "string",
        "required": false,
        "description": "Date of service for eligibility check",
        "format": "date-time",
        "default": "None"
      }
    },
    "error_messages": [
      "Invalid insurance provider: Provider not found in system directory.",
      "Invalid policy number format: Policy number must be alphanumeric and 6-20 characters.",
      "Verification failed: Unable to connect to insurance provider system.",
      "Policy not found: No active policy found for the provided information.",
      "Eligibility expired: Insurance coverage is not active for the specified date."
    ],
    "usage": "Provide insurance_provider, policy_number, and patient_date_of_birth. Optionally specify group_number and service_date for detailed verification.",
    "output_details": {
      "verification_status": {
        "type": "string",
        "description": "Insurance verification result (active, inactive, pending, error)"
      },
      "coverage_effective_date": {
        "type": "string",
        "description": "When coverage became effective"
      },
      "coverage_end_date": {
        "type": "string",
        "description": "When coverage expires"
      },
      "copay_amount": {
        "type": "number",
        "description": "Patient copay amount"
      },
      "deductible_remaining": {
        "type": "number",
        "description": "Remaining deductible amount"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Patient Registrar",
    "tool_description": "Creates complete patient registration records in the EHR system combining validated demographic, insurance, and contact information.",
    "parameters": {
      "patient_id": {
        "type": "string",
        "required": true,
        "description": "Unique patient identifier"
      },
      "validated_demographics": {
        "type": "array",
        "required": true,
        "description": "Array of validated demographic field values",
        "items": {
          "type": "string"
        }
      },
      "insurance_data": {
        "type": "array",
        "required": false,
        "description": "Array of insurance verification results",
        "items": {
          "type": "string"
        },
        "default": "None"
      },
      "emergency_contacts": {
        "type": "array",
        "required": false,
        "description": "Array of emergency contact information",
        "items": {
          "type": "string"
        },
        "default": "None"
      },
      "preferred_language": {
        "type": "string",
        "required": false,
        "description": "Patient's preferred language",
        "default": "English"
      },
      "registration_type": {
        "type": "string",
        "required": false,
        "description": "Type of registration (new, update, transfer)",
        "default": "new"
      }
    },
    "error_messages": [
      "Invalid patient ID: Patient ID must be provided and properly formatted.",
      "Missing demographic data: Validated demographics array cannot be empty.",
      "Registration type error: Use 'new', 'update', or 'transfer'.",
      "System error: Unable to create patient record due to database connection issue.",
      "Duplicate registration: Patient ID already exists in the system."
    ],
    "usage": "Provide patient_id and validated_demographics array. Optionally include insurance_data, emergency_contacts, preferred_language, and registration_type.",
    "output_details": {
      "registration_status": {
        "type": "string",
        "description": "Registration completion status (success, failed, pending)"
      },
      "medical_record_number": {
        "type": "string",
        "description": "Generated medical record number"
      },
      "registration_timestamp": {
        "type": "string",
        "description": "When registration was completed"
      },
      "account_number": {
        "type": "string",
        "description": "Patient account number for billing"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Duplicate Patient Detector",
    "tool_description": "Identifies potential duplicate patient records using fuzzy matching algorithms on demographic data to prevent duplicate registrations.",
    "parameters": {
      "first_name": {
        "type": "string",
        "required": true,
        "description": "Patient's first name for matching"
      },
      "last_name": {
        "type": "string",
        "required": true,
        "description": "Patient's last name for matching"
      },
      "date_of_birth": {
        "type": "string",
        "required": true,
        "description": "Patient's birth date",
        "format": "date-time"
      },
      "ssn": {
        "type": "string",
        "required": false,
        "description": "Social Security Number for exact matching",
        "default": "None"
      },
      "phone_number": {
        "type": "string",
        "required": false,
        "description": "Patient's phone number",
        "default": "None"
      },
      "address": {
        "type": "string",
        "required": false,
        "description": "Patient's address",
        "default": "None"
      },
      "match_threshold": {
        "type": "number",
        "required": false,
        "description": "Similarity threshold for matches (0.7-1.0)",
        "default": 0.85
      }
    },
    "error_messages": [
      "Invalid match threshold: Must be between 0.7 and 1.0.",
      "Missing required fields: first_name, last_name, and date_of_birth are required.",
      "Search failed: Unable to query existing patient records.",
      "Invalid date format: date_of_birth must be in valid date-time format."
    ],
    "usage": "Provide first_name, last_name, and date_of_birth. Optionally include additional fields for more accurate matching and adjust match_threshold.",
    "output_details": {
      "potential_matches": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Array of potential duplicate patient IDs"
      },
      "match_scores": {
        "type": "array",
        "items": {
          "type": "number"
        },
        "description": "Similarity scores for each potential match"
      },
      "total_matches_found": {
        "type": "integer",
        "description": "Number of potential duplicates identified"
      },
      "highest_match_score": {
        "type": "number",
        "description": "Highest similarity score found"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Patient Search Engine",
    "tool_description": "Searches existing patient records using various criteria including partial matches and phonetic algorithms.",
    "parameters": {
      "search_type": {
        "type": "string",
        "required": true,
        "description": "Search type: exact, partial, phonetic, or advanced"
      },
      "first_name": {
        "type": "string",
        "required": false,
        "description": "Patient's first name",
        "default": "None"
      },
      "last_name": {
        "type": "string",
        "required": false,
        "description": "Patient's last name",
        "default": "None"
      },
      "patient_id": {
        "type": "string",
        "required": false,
        "description": "Patient ID for direct lookup",
        "default": "None"
      },
      "date_of_birth": {
        "type": "string",
        "required": false,
        "description": "Patient's birth date",
        "format": "date-time",
        "default": "None"
      },
      "phone_number": {
        "type": "string",
        "required": false,
        "description": "Patient's phone number",
        "default": "None"
      },
      "max_results": {
        "type": "integer",
        "required": false,
        "description": "Maximum number of results to return (1-100)",
        "default": 20
      }
    },
    "error_messages": [
      "Invalid search type: Use 'exact', 'partial', 'phonetic', or 'advanced'.",
      "No search criteria provided: At least one search parameter must be specified.",
      "Invalid max_results: Must be between 1 and 100.",
      "Search failed: Database query error occurred.",
      "Too many results: Refine search criteria to get fewer results."
    ],
    "usage": "Specify search_type and at least one search criterion. Use max_results to limit returned records. Different search types offer varying levels of matching flexibility.",
    "output_details": {
      "search_results": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Array of matching patient IDs"
      },
      "result_count": {
        "type": "integer",
        "description": "Number of patients found"
      },
      "search_time_ms": {
        "type": "integer",
        "description": "Search execution time in milliseconds"
      },
      "partial_matches": {
        "type": "boolean",
        "description": "Whether results include partial matches"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Demographic Data Updater",
    "tool_description": "Updates existing patient demographic information with validation and audit trail creation for compliance.",
    "parameters": {
      "patient_id": {
        "type": "string",
        "required": true,
        "description": "Patient ID for the record to update"
      },
      "update_fields": {
        "type": "array",
        "required": true,
        "description": "Array of field names to update",
        "items": {
          "type": "string"
        }
      },
      "update_values": {
        "type": "array",
        "required": true,
        "description": "Array of new values corresponding to update_fields",
        "items": {
          "type": "string"
        }
      },
      "update_reason": {
        "type": "string",
        "required": true,
        "description": "Reason for the update"
      },
      "updated_by": {
        "type": "string",
        "required": true,
        "description": "User ID of person making the update"
      },
      "validate_changes": {
        "type": "boolean",
        "required": false,
        "description": "Whether to validate new data",
        "default": true
      }
    },
    "error_messages": [
      "Patient not found: No patient record exists for the provided patient_id.",
      "Mismatched arrays: update_fields and update_values must have the same length.",
      "Invalid field name: One or more field names are not valid demographic fields.",
      "Validation failed: New data does not meet validation requirements.",
      "Update failed: Database error occurred while updating record.",
      "Permission denied: User does not have permission to update patient records."
    ],
    "usage": "Provide patient_id, update_fields array, corresponding update_values array, update_reason, and updated_by. Optionally disable validation with validate_changes parameter.",
    "output_details": {
      "update_status": {
        "type": "string",
        "description": "Update operation result (success, failed, partial)"
      },
      "updated_fields": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Array of successfully updated field names"
      },
      "validation_warnings": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Array of validation warning messages"
      },
      "update_timestamp": {
        "type": "string",
        "description": "When the update was completed"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Emergency Contact Manager",
    "tool_description": "Manages emergency contact information including validation, relationship verification, and priority ordering.",
    "parameters": {
      "contact_name": {
        "type": "string",
        "required": true,
        "description": "Emergency contact's full name"
      },
      "relationship": {
        "type": "string",
        "required": true,
        "description": "Relationship to patient (spouse, parent, child, sibling, friend, other)"
      },
      "primary_phone": {
        "type": "string",
        "required": true,
        "description": "Primary contact phone number"
      },
      "secondary_phone": {
        "type": "string",
        "required": false,
        "description": "Secondary contact phone number",
        "default": "None"
      },
      "address": {
        "type": "string",
        "required": false,
        "description": "Contact's address",
        "default": "None"
      },
      "priority": {
        "type": "integer",
        "required": false,
        "description": "Contact priority (1-5, where 1 is highest)",
        "default": 1
      },
      "can_make_decisions": {
        "type": "boolean",
        "required": false,
        "description": "Whether contact can make medical decisions",
        "default": false
      },
      "preferred_contact_method": {
        "type": "string",
        "required": false,
        "description": "Preferred contact method (phone, text, email)",
        "default": "phone"
      }
    },
    "error_messages": [
      "Invalid relationship: Use spouse, parent, child, sibling, friend, or other.",
      "Invalid phone number: Phone number must be in valid format.",
      "Invalid priority: Priority must be between 1 and 5.",
      "Invalid contact method: Use phone, text, or email.",
      "Missing required fields: contact_name, relationship, and primary_phone are required.",
      "Duplicate contact: This emergency contact already exists for the patient."
    ],
    "usage": "Provide contact_name, relationship, and primary_phone. Optionally specify additional contact details, priority, decision-making authority, and preferred contact method.",
    "output_details": {
      "contact_id": {
        "type": "string",
        "description": "Generated unique identifier for this emergency contact"
      },
      "validation_status": {
        "type": "string",
        "description": "Contact validation result (valid, invalid, warning)"
      },
      "formatted_phone": {
        "type": "string",
        "description": "Standardized primary phone number"
      },
      "contact_priority": {
        "type": "integer",
        "description": "Assigned priority level"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Address Standardizer",
    "tool_description": "Standardizes and validates addresses using USPS standards and geocoding services to ensure accurate patient location data.",
    "parameters": {
      "street_address": {
        "type": "string",
        "required": true,
        "description": "Street address line"
      },
      "city": {
        "type": "string",
        "required": true,
        "description": "City name"
      },
      "state": {
        "type": "string",
        "required": true,
        "description": "State abbreviation or full name"
      },
      "zip_code": {
        "type": "string",
        "required": true,
        "description": "ZIP or postal code"
      },
      "apartment_unit": {
        "type": "string",
        "required": false,
        "description": "Apartment, suite, or unit number",
        "default": "None"
      }
    },
    "error_messages": [
      "Invalid address format: Street address contains invalid characters or format.",
      "City not found: City name is not recognized or misspelled.",
      "Invalid state: State must be valid US state abbreviation or full name.",
      "Invalid ZIP code: ZIP code must be 5 digits or 5+4 format.",
      "Address not found: Address cannot be verified with postal service.",
      "Standardization failed: Unable to standardize address format."
    ],
    "usage": "Provide street_address, city, state, and zip_code. Optionally include apartment_unit for complete address standardization and validation.",
    "output_details": {
      "standardized_address": {
        "type": "string",
        "description": "USPS standardized complete address"
      },
      "validation_status": {
        "type": "string",
        "description": "Address validation result (valid, invalid, corrected)"
      },
      "zip_plus_four": {
        "type": "string",
        "description": "Full ZIP+4 code"
      },
      "county": {
        "type": "string",
        "description": "County name"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Phone Number Validator",
    "tool_description": "Validates and formats phone numbers according to healthcare standards with support for international numbers.",
    "parameters": {
      "phone_number": {
        "type": "string",
        "required": true,
        "description": "Phone number to validate"
      },
      "phone_type": {
        "type": "string",
        "required": false,
        "description": "Phone type: mobile, home, work, or fax",
        "default": "mobile"
      },
      "country_code": {
        "type": "string",
        "required": false,
        "description": "Country code for international numbers",
        "default": "US"
      }
    },
    "error_messages": [
      "Invalid phone number format: Phone number must contain only digits, spaces, hyphens, parentheses, and plus sign.",
      "Invalid phone type: Use mobile, home, work, or fax.",
      "Invalid country code: Country code not recognized.",
      "Number too short: Phone number has insufficient digits for the specified country.",
      "Number too long: Phone number has too many digits for the specified country.",
      "Invalid area code: Area code is not valid for the specified region."
    ],
    "usage": "Provide phone_number and optionally specify phone_type and country_code. The tool validates and formats the number according to healthcare standards.",
    "output_details": {
      "formatted_number": {
        "type": "string",
        "description": "Standardized phone number format"
      },
      "is_valid": {
        "type": "boolean",
        "description": "Whether the phone number is valid"
      },
      "number_type": {
        "type": "string",
        "description": "Detected number type (mobile, landline, voip)"
      },
      "carrier_name": {
        "type": "string",
        "description": "Phone carrier/provider name"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Patient Record Merger",
    "tool_description": "Merges duplicate patient records while preserving data integrity, maintaining audit trails, and handling conflicts between records.",
    "parameters": {
      "primary_patient_id": {
        "type": "string",
        "required": true,
        "description": "Patient ID to keep as primary record"
      },
      "duplicate_patient_ids": {
        "type": "array",
        "required": true,
        "description": "Array of duplicate patient IDs to merge",
        "items": {
          "type": "string"
        },
        "minItems": 1,
        "maxItems": 10
      },
      "merge_strategy": {
        "type": "string",
        "required": false,
        "description": "Merge strategy: keep_primary, keep_most_recent, or manual",
        "default": "keep_primary"
      },
      "field_preferences": {
        "type": "array",
        "required": false,
        "description": "Array of field-level merge preferences",
        "items": {
          "type": "string"
        },
        "default": "None"
      },
      "merged_by": {
        "type": "string",
        "required": true,
        "description": "User ID performing the merge operation"
      },
      "merge_reason": {
        "type": "string",
        "required": true,
        "description": "Reason for merging records"
      },
      "preserve_history": {
        "type": "boolean",
        "required": false,
        "description": "Whether to preserve all historical data",
        "default": true
      },
      "notification_required": {
        "type": "boolean",
        "required": false,
        "description": "Whether to send merge notifications",
        "default": true
      }
    },
    "error_messages": [
      "Primary patient not found: primary_patient_id does not exist in the system.",
      "Duplicate patient not found: One or more duplicate_patient_ids do not exist.",
      "Invalid merge strategy: Use keep_primary, keep_most_recent, or manual.",
      "Merge conflict detected: Records contain conflicting data that requires manual resolution.",
      "Permission denied: User does not have permission to merge patient records.",
      "Merge failed: Database error occurred during merge operation.",
      "Self-merge attempted: Cannot merge a patient record with itself."
    ],
    "usage": "Provide primary_patient_id, duplicate_patient_ids array, merged_by, and merge_reason. Optionally specify merge_strategy, field_preferences, and control history preservation and notifications.",
    "output_details": {
      "merge_status": {
        "type": "string",
        "description": "Merge operation result (success, failed, partial, conflicts)"
      },
      "merged_record_id": {
        "type": "string",
        "description": "Final patient ID after merge"
      },
      "conflicts_detected": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Array of data conflicts that need resolution"
      },
      "merge_timestamp": {
        "type": "string",
        "description": "When the merge was completed"
      },
      "archived_records": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Array of patient IDs that were archived during merge"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Audit Trail Logger",
    "tool_description": "Creates comprehensive audit logs for patient record activities to ensure HIPAA compliance and maintain accountability.",
    "parameters": {
      "patient_id": {
        "type": "string",
        "required": true,
        "description": "Patient ID for the record being accessed or modified"
      },
      "user_id": {
        "type": "string",
        "required": true,
        "description": "ID of user performing the action"
      },
      "action_type": {
        "type": "string",
        "required": true,
        "description": "Type of action: create, read, update, delete, merge, search"
      },
      "affected_fields": {
        "type": "array",
        "required": false,
        "description": "Array of field names that were accessed or modified",
        "items": {
          "type": "string"
        },
        "default": "None"
      },
      "session_id": {
        "type": "string",
        "required": false,
        "description": "User session identifier",
        "default
