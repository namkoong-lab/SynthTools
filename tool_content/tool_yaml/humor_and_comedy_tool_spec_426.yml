field_name: humor_and_comedy
subfield: Stand-up Comedy Performance
task: Generate and refine comedic material including jokes, stories, and observational content
tool_description: |-
  **STEP 1 — Rate task difficulty**

  This task is **medium** difficulty. While individual joke creation might seem straightforward, developing comprehensive comedic material requires understanding audience psychology, timing, cultural context, and narrative structure. The ambiguity lies in humor's subjective nature and the coordination needed between different content types (jokes, stories, observations) to create cohesive performance material.

  **STEP 2 — Set a tool budget**

  Given the medium difficulty, I'll target **12 tools** to cover the various aspects of comedic material generation and refinement, from initial concept development to audience testing and performance optimization.

  **STEP 3 — List all tool names with dependencies and affordances**

  1. **Topic Idea Generator** - Consumes: themes, audience types → Produces: topic lists, angles
  2. **Joke Structure Builder** - Consumes: topics, setup styles → Produces: formatted jokes, punchlines
  3. **Story Arc Creator** - Consumes: personal experiences, themes → Produces: narrative structures, story outlines
  4. **Observational Content Extractor** - Consumes: scenarios, contexts → Produces: observational premises, insights
  5. **Timing Pattern Analyzer** - Consumes: content, delivery styles → Produces: rhythm patterns, pause suggestions
  6. **Audience Compatibility Checker** - Consumes: content, demographics → Produces: appropriateness scores, recommendations
  7. **Callback Reference Manager** - Consumes: existing material → Produces: callback opportunities, reference maps
  8. **Punchline Optimizer** - Consumes: setups, target emotions → Produces: alternative punchlines, impact scores
  9. **Transition Flow Builder** - Consumes: individual pieces → Produces: seamless connections, segue suggestions
  10. **Material Freshness Validator** - Consumes: content, reference databases → Produces: originality scores, similarity warnings
  11. **Performance Ready Formatter** - Consumes: raw material → Produces: stage-ready scripts, cue cards
  12. **Audience Response Simulator** - Consumes: material, audience profiles → Produces: predicted reactions, engagement metrics

  **STEP 4 — Multi-tool plans**

  **Simple Plans:**
  1. **Basic Joke Creation**: Topic Idea Generator → Joke Structure Builder → Punchline Optimizer
  2. **Quick Material Check**: Material Freshness Validator → Audience Compatibility Checker

  **Medium Plans:**
  1. **Story Development**: Topic Idea Generator → Story Arc Creator → Timing Pattern Analyzer → Performance Ready Formatter
  2. **Observational Set**: Observational Content Extractor → Punchline Optimizer → Audience Response Simulator

  **Complex Plans:**
  1. **Full Set Creation**: Topic Idea Generator → multiple content creators → Callback Reference Manager → Transition Flow Builder → Performance Ready Formatter
  2. **Complete Material Refinement**: All content through Material Freshness Validator → Audience Compatibility Checker → Audience Response Simulator → Performance optimization loop

  **STEP 5 — Produce tools**

  ```json
  {
    "tool_name": "Topic Idea Generator",
    "tool_description": "Generates comedy topic ideas and angles based on themes, current events, personal experiences, and target audience demographics to provide fresh material concepts.",
    "parameters": {
      "theme_category": {
        "type": "string",
        "required": true,
        "description": "Main theme category (relationships, technology, daily life, politics, social media, work, travel, family)"
      },
      "audience_type": {
        "type": "string",
        "required": true,
        "description": "Primary audience demographic (millennials, gen-z, boomers, mixed, corporate, college, general)"
      },
      "personal_experience": {
        "type": "boolean",
        "required": false,
        "default": false,
        "description": "Whether to include personal experience-based topics"
      },
      "controversy_level": {
        "type": "integer",
        "required": false,
        "default": 3,
        "description": "Acceptable controversy level from 1 (very safe) to 5 (edgy)"
      },
      "topic_count": {
        "type": "integer",
        "required": false,
        "default": 10,
        "description": "Number of topic ideas to generate (1-20)"
      }
    },
    "error_messages": [
      "Invalid theme category: Use one of [relationships, technology, daily life, politics, social media, work, travel, family]",
      "Invalid audience type: Use one of [millennials, gen-z, boomers, mixed, corporate, college, general]",
      "Controversy level out of range: Must be integer between 1-5",
      "Topic count out of range: Must be integer between 1-20"
    ],
    "usage": "Specify theme_category and audience_type, optionally set personal_experience, controversy_level, and topic_count to generate relevant comedy topics with different angles and approaches.",
    "output_details": {
      "topics": {
        "type": "array",
        "items": {"type": "string"},
        "description": "List of generated topic ideas with brief descriptions"
      },
      "angles": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Different comedic angles or perspectives for each topic"
      },
      "relevance_score": {
        "type": "number",
        "description": "Relevance score for the audience (0-10)"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Joke Structure Builder",
    "tool_description": "Constructs jokes using established comedic structures like setup-punchline, rule-of-three, callback, or misdirection patterns with customizable delivery styles.",
    "parameters": {
      "topic": {
        "type": "string",
        "required": true,
        "description": "The topic or premise for the joke"
      },
      "structure_type": {
        "type": "string",
        "required": true,
        "description": "Joke structure (setup-punchline, rule-of-three, misdirection, callback, one-liner, story-joke)"
      },
      "delivery_style": {
        "type": "string",
        "required": false,
        "default": "conversational",
        "description": "Delivery style (conversational, deadpan, energetic, sarcastic, observational)"
      },
      "setup_length": {
        "type": "string",
        "required": false,
        "default": "medium",
        "description": "Length of setup (short, medium, long)"
      },
      "punchline_type": {
        "type": "string",
        "required": false,
        "default": "surprise",
        "description": "Type of punchline (surprise, wordplay, exaggeration, absurd, relatable)"
      }
    },
    "error_messages": [
      "Invalid structure type: Use one of [setup-punchline, rule-of-three, misdirection, callback, one-liner, story-joke]",
      "Invalid delivery style: Use one of [conversational, deadpan, energetic, sarcastic, observational]",
      "Invalid setup length: Use one of [short, medium, long]",
      "Invalid punchline type: Use one of [surprise, wordplay, exaggeration, absurd, relatable]",
      "Empty topic provided: Topic must contain at least one word"
    ],
    "usage": "Provide a topic and structure_type, optionally customize delivery_style, setup_length, and punchline_type to generate structured jokes with proper comedic timing and format.",
    "output_details": {
      "setup": {
        "type": "string",
        "description": "The joke setup with timing cues"
      },
      "punchline": {
        "type": "string",
        "description": "The punchline with delivery notes"
      },
      "full_joke": {
        "type": "string",
        "description": "Complete formatted joke ready for performance"
      },
      "timing_notes": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Suggested timing and delivery notes"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Story Arc Creator",
    "tool_description": "Develops comedic story structures with proper narrative flow, character development, and escalating humor for longer-form comedic content.",
    "parameters": {
      "story_premise": {
        "type": "string",
        "required": true,
        "description": "Basic premise or starting situation for the story"
      },
      "story_length": {
        "type": "string",
        "required": true,
        "description": "Target story length (short: 1-2 min, medium: 3-5 min, long: 5+ min)"
      },
      "narrative_style": {
        "type": "string",
        "required": false,
        "default": "personal",
        "description": "Narrative style (personal, fictional, observational, hypothetical)"
      },
      "escalation_pattern": {
        "type": "string",
        "required": false,
        "default": "gradual",
        "description": "How comedy escalates (gradual, sudden, cyclical, explosive)"
      },
      "character_count": {
        "type": "integer",
        "required": false,
        "default": 2,
        "description": "Number of characters in the story (1-5)"
      },
      "resolution_type": {
        "type": "string",
        "required": false,
        "default": "twist",
        "description": "Story resolution type (twist, ironic, absurd, heartwarming, cliffhanger)"
      }
    },
    "error_messages": [
      "Invalid story length: Use one of [short, medium, long]",
      "Invalid narrative style: Use one of [personal, fictional, observational, hypothetical]",
      "Invalid escalation pattern: Use one of [gradual, sudden, cyclical, explosive]",
      "Invalid character count: Must be integer between 1-5",
      "Invalid resolution type: Use one of [twist, ironic, absurd, heartwarming, cliffhanger]",
      "Empty story premise: Provide a basic premise or starting situation"
    ],
    "usage": "Input story_premise and story_length, customize narrative_style, escalation_pattern, character_count, and resolution_type to create structured comedic stories with proper pacing and development.",
    "output_details": {
      "story_outline": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Structured outline with story beats and comedy points"
      },
      "character_descriptions": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Brief character descriptions and their roles"
      },
      "punchline_moments": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Key comedic moments and punchlines throughout the story"
      },
      "estimated_duration": {
        "type": "string",
        "description": "Estimated performance time"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Observational Content Extractor",
    "tool_description": "Identifies and develops observational comedy from everyday situations, finding the absurd, ironic, or relatable elements that audiences connect with.",
    "parameters": {
      "situation_context": {
        "type": "string",
        "required": true,
        "description": "The everyday situation or context to analyze"
      },
      "observation_angle": {
        "type": "string",
        "required": true,
        "description": "Comedic angle (absurdity, irony, relatability, contradiction, exaggeration)"
      },
      "detail_level": {
        "type": "string",
        "required": false,
        "default": "specific",
        "description": "Level of detail (general, specific, hyper-specific)"
      },
      "universality": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Whether the observation should be universally relatable"
      }
    },
    "error_messages": [
      "Invalid observation angle: Use one of [absurdity, irony, relatability, contradiction, exaggeration]",
      "Invalid detail level: Use one of [general, specific, hyper-specific]",
      "Empty situation context: Provide a specific situation or context to analyze",
      "Context too vague: Provide more specific details about the situation"
    ],
    "usage": "Describe a situation_context and choose an observation_angle, optionally set detail_level and universality to extract comedic observations that audiences will find funny and relatable.",
    "output_details": {
      "primary_observation": {
        "type": "string",
        "description": "Main comedic observation about the situation"
      },
      "supporting_details": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Additional details and examples that support the observation"
      },
      "relatability_score": {
        "type": "number",
        "description": "How relatable the observation is (0-10)"
      },
      "comedic_potential": {
        "type": "number",
        "description": "Estimated comedy potential (0-10)"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Timing Pattern Analyzer",
    "tool_description": "Analyzes comedic timing patterns in content, identifying optimal pause placement, rhythm, and pacing to maximize comedic impact and audience response.",
    "parameters": {
      "content_text": {
        "type": "string",
        "required": true,
        "description": "The comedic content to analyze for timing"
      },
      "performance_style": {
        "type": "string",
        "required": true,
        "description": "Performance style (rapid-fire, measured, conversational, dramatic, deadpan)"
      },
      "audience_size": {
        "type": "string",
        "required": false,
        "default": "medium",
        "description": "Expected audience size (small: <50, medium: 50-200, large: 200+)"
      },
      "venue_type": {
        "type": "string",
        "required": false,
        "default": "comedy-club",
        "description": "Venue type (comedy-club, theater, bar, corporate, outdoor)"
      },
      "content_type": {
        "type": "string",
        "required": false,
        "default": "mixed",
        "description": "Content type (jokes, story, observational, crowd-work, mixed)"
      }
    },
    "error_messages": [
      "Invalid performance style: Use one of [rapid-fire, measured, conversational, dramatic, deadpan]",
      "Invalid audience size: Use one of [small, medium, large]",
      "Invalid venue type: Use one of [comedy-club, theater, bar, corporate, outdoor]",
      "Invalid content type: Use one of [jokes, story, observational, crowd-work, mixed]",
      "Content too short: Provide at least 10 words of content to analyze",
      "Content too long: Maximum 1000 words for effective timing analysis"
    ],
    "usage": "Input content_text and performance_style, optionally specify audience_size, venue_type, and content_type to receive detailed timing recommendations for optimal comedic delivery.",
    "output_details": {
      "pause_markers": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Recommended pause locations with duration suggestions"
      },
      "rhythm_pattern": {
        "type": "string",
        "description": "Overall rhythm and pacing pattern description"
      },
      "emphasis_points": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Words or phrases that should be emphasized"
      },
      "estimated_duration": {
        "type": "string",
        "description": "Estimated performance duration with timing"
      },
      "timing_score": {
        "type": "number",
        "description": "Overall timing effectiveness score (0-10)"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Audience Compatibility Checker",
    "tool_description": "Evaluates comedic content against audience demographics, cultural sensitivities, and venue appropriateness to ensure material resonates positively with target audiences.",
    "parameters": {
      "content": {
        "type": "string",
        "required": true,
        "description": "The comedic content to evaluate"
      },
      "target_demographics": {
        "type": "array",
        "items": {"type": "string"},
        "required": true,
        "description": "Target audience demographics (age groups, cultural backgrounds, interests)"
      },
      "venue_context": {
        "type": "string",
        "required": true,
        "description": "Venue context (comedy-club, corporate, college, family-show, roast, private-party)"
      },
      "cultural_sensitivity": {
        "type": "integer",
        "required": false,
        "default": 7,
        "description": "Required cultural sensitivity level (1-10, higher = more sensitive)"
      },
      "content_rating": {
        "type": "string",
        "required": false,
        "default": "PG-13",
        "description": "Acceptable content rating (G, PG, PG-13, R, mature)"
      },
      "regional_context": {
        "type": "string",
        "required": false,
        "default": "general",
        "description": "Regional or cultural context (general, urban, rural, international, specific-region)"
      },
      "time_period": {
        "type": "string",
        "required": false,
        "default": "current",
        "description": "Time period context (current, retro, timeless, generational)"
      }
    },
    "error_messages": [
      "Invalid venue context: Use one of [comedy-club, corporate, college, family-show, roast, private-party]",
      "Invalid cultural sensitivity level: Must be integer between 1-10",
      "Invalid content rating: Use one of [G, PG, PG-13, R, mature]",
      "Invalid regional context: Use one of [general, urban, rural, international, specific-region]",
      "Invalid time period: Use one of [current, retro, timeless, generational]",
      "Empty demographics array: Provide at least one target demographic",
      "Content too short: Provide sufficient content for meaningful evaluation"
    ],
    "usage": "Submit content with target_demographics and venue_context, adjust cultural_sensitivity, content_rating, regional_context, and time_period as needed to assess audience compatibility and receive improvement suggestions.",
    "output_details": {
      "compatibility_score": {
        "type": "number",
        "description": "Overall audience compatibility score (0-10)"
      },
      "demographic_scores": {
        "type": "array",
        "items": {"type": "number"},
        "description": "Compatibility scores for each demographic group"
      },
      "potential_issues": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Identified potential issues or sensitivities"
      },
      "recommendations": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Suggestions for improving audience compatibility"
      },
      "approval_status": {
        "type": "string",
        "description": "Overall approval status (approved, caution, revise, reject)"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Callback Reference Manager",
    "tool_description": "Identifies and manages callback opportunities within existing material, creating reference maps and suggesting strategic placement for enhanced comedic cohesion.",
    "parameters": {
      "existing_material": {
        "type": "array",
        "items": {"type": "string"},
        "required": true,
        "description": "Array of existing jokes, stories, or bits"
      },
      "callback_density": {
        "type": "string",
        "required": false,
        "default": "moderate",
        "description": "Desired callback density (minimal, moderate, heavy)"
      },
      "callback_style": {
        "type": "string",
        "required": false,
        "default": "subtle",
        "description": "Callback style (subtle, obvious, escalating, running-gag)"
      }
    },
    "error_messages": [
      "Empty material array: Provide at least 2 pieces of existing material for callback analysis",
      "Invalid callback density: Use one of [minimal, moderate, heavy]",
      "Invalid callback style: Use one of [subtle, obvious, escalating, running-gag]",
      "Insufficient material length: Each material piece should be at least 5 words long",
      "Too many material pieces: Maximum 50 pieces for effective callback analysis"
    ],
    "usage": "Submit an array of existing_material, optionally set callback_density and callback_style to identify callback opportunities and receive suggestions for creating cohesive comedic connections.",
    "output_details": {
      "callback_opportunities": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Identified elements that can be referenced later"
      },
      "suggested_callbacks": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Specific callback suggestions with placement recommendations"
      },
      "reference_map": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Visual map showing callback connections between material"
      },
      "cohesion_score": {
        "type": "number",
        "description": "Material cohesion score with callbacks (0-10)"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Punchline Optimizer",
    "tool_description": "Generates alternative punchlines for existing setups and evaluates their comedic impact, helping refine jokes for maximum audience response and laughter.",
    "parameters": {
      "setup": {
        "type": "string",
        "required": true,
        "description": "The joke setup or premise"
      },
      "current_punchline": {
        "type": "string",
        "required": false,
        "default": "None",
        "description": "Current punchline if one exists"
      },
      "target_emotion": {
        "type": "string",
        "required": true,
        "description": "Target audience emotion (surprise, relatability, shock, clever, absurd, groan)"
      },
      "optimization_focus": {
        "type": "string",
        "required": false,
        "default": "impact",
        "description": "Optimization focus (impact, clarity, originality, timing, wordplay)"
      },
      "alternative_count": {
        "type": "integer",
        "required": false,
        "default": 5,
        "description": "Number of alternative punchlines to generate (1-10)"
      }
    },
    "error_messages": [
      "Empty setup provided: Provide a joke setup or premise",
      "Invalid target emotion: Use one of [surprise, relatability, shock, clever, absurd, groan]",
      "Invalid optimization focus: Use one of [impact, clarity, originality, timing, wordplay]",
      "Invalid alternative count: Must be integer between 1-10",
      "Setup too long: Maximum 200 words for effective punchline optimization"
    ],
    "usage": "Provide a setup and target_emotion, optionally include current_punchline and adjust optimization_focus and alternative_count to generate and evaluate improved punchline options.",
    "output_details": {
      "alternative_punchlines": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Generated alternative punchlines"
      },
      "impact_scores": {
        "type": "array",
        "items": {"type": "number"},
        "description": "Comedic impact scores for each punchline (0-10)"
      },
      "best_option": {
        "type": "string",
        "description": "Recommended best punchline option"
      },
      "improvement_notes": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Specific improvement notes for each alternative"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Transition Flow Builder",
    "tool_description": "Creates smooth transitions and segues between individual comedic pieces to build cohesive sets with natural flow and maintained audience engagement throughout performances.",
    "parameters": {
      "material_pieces": {
        "type": "array",
        "items": {"type": "string"},
        "required": true,
        "description": "Array of individual jokes, stories, or bits to connect"
      },
      "transition_style": {
        "type": "string",
        "required": true,
        "description": "Transition style (conversational, thematic, callback, contrast, seamless)"
      },
      "set_length": {
        "type": "integer",
        "required": true,
        "description": "Target set length in minutes (5-60)"
      },
      "energy_management": {
        "type": "string",
        "required": false,
        "default": "varied",
        "description": "Energy flow pattern (building, varied, consistent, explosive-end)"
      },
      "audience_interaction": {
        "type": "boolean",
        "required": false,
        "default": false,
        "description": "Whether to include audience interaction opportunities"
      },
      "opening_strength": {
        "type": "string",
        "required": false,
        "default": "strong",
        "description": "Opening material strength (gentle, moderate, strong, explosive)"
      },
      "closing_strength": {
        "type": "string",
        "required": false,
        "default": "explosive",
        "description": "Closing material strength (moderate, strong, explosive, memorable)"
      }
    },
    "error_messages": [
      "Insufficient material: Provide at least 3 pieces of material for effective transitions",
      "Invalid transition style: Use one of [conversational, thematic, callback, contrast, seamless]",
      "Invalid set length: Must be integer between 5-60 minutes",
      "Invalid energy management: Use one of [building, varied, consistent, explosive-end]",
      "Invalid opening strength: Use one of [gentle, moderate, strong, explosive]",
      "Invalid closing strength: Use one of [moderate, strong, explosive, memorable]",
      "Too many material pieces: Maximum 30 pieces for effective set building"
    ],
    "usage": "Submit material_pieces array with transition_style and set_length, customize energy_management, audience_interaction, opening_strength, and closing_strength to create a well-structured comedic set with smooth transitions.",
    "output_details": {
      "ordered_set": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Material pieces in optimal performance order"
      },
      "transition_scripts": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Specific transition lines between pieces"
      },
      "timing_breakdown": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Estimated timing for each section"
      },
      "energy_curve": {
        "type": "string",
        "description": "Description of the set's energy progression"
      },
      "flow_score": {
        "type": "number",
        "description": "Overall set flow quality score (0-10)"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Material Freshness Validator",
    "tool_description": "Analyzes comedic content against existing joke databases and popular material to identify potential similarities, ensuring originality and helping avoid accidental plagiarism.",
    "parameters": {
      "content": {
        "type": "string",
        "required": true,
        "description": "The comedic content to check for originality"
      },
      "similarity_threshold": {
        "type": "number",
        "required": false,
        "default": 0.7,
        "description": "Similarity threshold for flagging (0.1-1.0, higher = stricter)"
      },
      "check_popular_comedians": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Whether to check against popular comedian material"
      },
      "check_social_media": {
        "type": "boolean",
        "required": false,
        "default": false,
        "description": "Whether to check against viral social media content"
      },
      "time_frame": {
        "type": "string",
        "required": false,
        "default": "all-time",
        "description": "Time frame for comparison (recent, 5-years, 10-years, all-time)"
      }
    },
    "error_messages": [
      "Invalid similarity threshold: Must be number between 0.1-1.0",
      "Invalid time frame: Use one of [recent, 5-years, 10-years, all-time]",
      "Content too short: Provide at least 5 words for meaningful analysis",
      "Content too long: Maximum 500 words for effective freshness validation",
      "Analysis unavailable: Unable to access reference databases for comparison"
    ],
    "usage": "Submit content for originality checking, adjust similarity_threshold, enable check_popular_comedians and check_social_media as needed, set appropriate time_frame to validate material freshness and avoid similarities.",
    "output_details": {
      "originality_score": {
        "type": "number",
        "description": "Overall originality score (0-10)"
      },
      "similar_content": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Identified similar existing content"
      },
      "risk_level": {
        "type": "string",
        "description": "Risk level (low, moderate, high, critical)"
      },
      "recommendations": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Suggestions for improving originality"
      },
      "approval_status": {
        "type": "string",
        "description": "Freshness approval status (original, caution, revise, reject)"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Performance Ready Formatter",
    "tool_description": "Formats raw comedic material into stage-ready scripts with performance notes, timing cues, and delivery instructions optimized for live performance execution.",
    "parameters": {
      "raw_material": {
        "type": "string",
        "required": true,
        "description": "Raw comedic content to format for performance"
      },
      "format_type": {
        "type": "string",
        "required": true,
        "description": "Output format type (script, cue-cards, teleprompter, notes-only)"
      },
      "performance_context": {
        "type": "string",
        "required": true,
        "description": "Performance context (stage, mic-stand, roaming, seated, virtual)"
      },
      "include_timing": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Whether to include timing cues and pauses"
      },
      "include_gestures": {
        "type": "boolean",
        "required": false,
        "default": false,
        "description": "Whether to include gesture and movement suggestions"
      },
      "font_size": {
        "type": "string",
        "required": false,
        "default": "medium",
        "description": "Text size for readability (small, medium, large, extra-large)"
      },
