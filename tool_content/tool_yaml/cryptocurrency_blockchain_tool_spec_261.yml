field_name: cryptocurrency_blockchain
subfield: Wallet Management and Key Security
task: Import and restore existing wallets using seed phrases, private keys, or backup files
tool_description: "**STEP 1 — Rate task difficulty**\n\nThis task is rated as **medium** difficulty. While the core cryptographic operations are well-established, the task involves handling sensitive data (private keys, seed phrases), requires robust validation across multiple wallet formats and blockchain standards, and has high security requirements where errors could lead to permanent fund loss.\n\n**STEP 2 — Set a tool budget**\n\nGiven the medium difficulty, I'll target **12 tools** to cover seed phrase validation, private key operations, wallet derivation, backup file handling, address generation, and security verification across different blockchain networks.\n\n**STEP 3 — List all tool names and dependencies**\n\nTools and their data flow:\n- Seed Phrase Validator (consumes: mnemonic words → produces: validation status)\n- Private Key Validator (consumes: private key string → produces: validation status) \n- Backup File Parser (consumes: backup file content → produces: extracted credentials)\n- HD Wallet Deriver (consumes: seed/private key → produces: derived keys)\n- Address Generator (consumes: private key, blockchain type → produces: wallet address)\n- Balance Checker (consumes: address, blockchain → produces: balance info)\n- Transaction History Fetcher (consumes: address, blockchain → produces: transaction list)\n- Multi Chain Detector (consumes: credentials → produces: supported blockchains)\n- Wallet Metadata Extractor (consumes: backup data → produces: wallet info)\n- Security Strength Analyzer (consumes: credentials → produces: security assessment)\n- Blockchain Network Validator (consumes: network params → produces: validation status)\n- Wallet Import Coordinator (consumes: all credential types → produces: unified wallet data)\n\n**STEP 4 — Multi-tool plans**\n\n**Simple plans:**\n1. **Basic seed restore**: Seed Phrase Validator → HD Wallet Deriver → Address Generator\n2. **Private key import**: Private Key Validator → Address Generator → Balance Checker\n\n**Medium plans:**\n1. **Complete wallet recovery**: Seed Phrase Validator → HD Wallet Deriver → Multi Chain Detector → Address Generator → Balance Checker → Transaction History Fetcher\n2. **Backup file restore**: Backup File Parser → Wallet Metadata Extractor → Private Key Validator → Address Generator → Security Strength Analyzer\n\n**Complex plans:**\n1. **Full multi-chain restoration**: Backup File Parser → Wallet Metadata Extractor → Seed Phrase Validator → HD Wallet Deriver → Multi Chain Detector → Blockchain Network Validator → Address Generator → Balance Checker → Transaction History Fetcher → Security Strength Analyzer → Wallet Import Coordinator\n2. **Comprehensive wallet audit**: All validation tools → HD Wallet Deriver → Multi Chain Detector → Address Generator for all chains → Balance Checker → Transaction History Fetcher → Security assessment → Final import coordination\n\n**STEP 5 — Produce tools**\n\n```json\n{\n  \"tool_name\": \"Seed Phrase Validator\",\n  \"tool_description\": \"Validates BIP39 mnemonic seed phrases for correctness, word validity, and checksum verification across different word counts and languages.\",\n  \"parameters\": {\n    \"mnemonic_words\": {\n      \"type\": \"array\",\n      \"required\": true,\n      \"description\": \"Array of mnemonic words in sequence\",\n      \"items\": {\"type\": \"string\"},\n      \"minItems\": 12,\n      \"maxItems\": 24\n    },\n    \"language\": {\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"Language of the mnemonic (english, japanese, french, spanish, chinese_simplified, chinese_traditional)\",\n      \"default\": \"english\"\n    },\n    \"strict_validation\": {\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Enable strict BIP39 checksum validation\",\n      \"default\": true\n    }\n  },\n  \"error_messages\": [\n    \"Invalid word count: Mnemonic must contain 12, 15, 18, 21, or 24 words.\",\n    \"Invalid mnemonic word: One or more words are not in the BIP39 wordlist for the specified language.\",\n   \
  \ \"Checksum validation failed: The mnemonic checksum is invalid, indicating corruption or incorrect word order.\",\n    \"Unsupported language: Use one of [english, japanese, french, spanish, chinese_simplified, chinese_traditional].\"\n  ],\n  \"usage\": \"Provide the mnemonic_words array in correct sequence. Optionally specify language and strict_validation settings. Returns validation status and entropy information.\",\n  \"output_details\": {\n    \"is_valid\": {\n      \"type\": \"boolean\",\n      \"description\": \"Whether the mnemonic is valid\"\n    },\n    \"entropy_bits\": {\n      \"type\": \"integer\",\n      \"description\": \"Number of entropy bits in the mnemonic\"\n    },\n    \"word_count\": {\n      \"type\": \"integer\",\n      \"description\": \"Total number of words in the mnemonic\"\n    },\n    \"checksum_valid\": {\n      \"type\": \"boolean\",\n      \"description\": \"Whether the checksum verification passed\"\n    }\n  }\n}\n```\n\n```json\n{\n  \"tool_name\": \"Private Key Validator\",\n  \"tool_description\": \"Validates private keys in various formats (hex, WIF, raw) and ensures they conform to elliptic curve cryptography standards for different blockchain networks.\",\n  \"parameters\": {\n    \"private_key\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Private key in hex, WIF, or raw format\"\n    },\n    \"key_format\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Format of the private key: hex, wif, raw\"\n    },\n    \"blockchain_type\": {\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"Target blockchain: bitcoin, ethereum, litecoin, dogecoin, bitcoin_cash\",\n      \"default\": \"bitcoin\"\n    }\n  },\n  \"error_messages\": [\n    \"Invalid private key format: Key format must be one of [hex, wif, raw].\",\n    \"Invalid private key length: Private key must be exactly 32 bytes (64 hex characters).\",\n    \"Private key out of range: Key must be between 1 and secp256k1 curve order.\",\n    \"Invalid WIF checksum: WIF format private key has invalid checksum.\",\n    \"Unsupported blockchain: Use one of [bitcoin, ethereum, litecoin, dogecoin, bitcoin_cash].\"\n  ],\n  \"usage\": \"Provide private_key and key_format, optionally specify blockchain_type. The tool validates the key and returns format information.\",\n  \"output_details\": {\n    \"is_valid\": {\n      \"type\": \"boolean\",\n      \"description\": \"Whether the private key is valid\"\n    },\n    \"key_format\": {\n      \"type\": \"string\",\n      \"description\": \"Detected or specified format of the key\"\n    },\n    \"compressed\": {\n      \"type\": \"boolean\",\n      \"description\": \"Whether the key corresponds to compressed public key\"\n    },\n    \"network\": {\n      \"type\": \"string\",\n      \"description\": \"Network type (mainnet/testnet) if applicable\"\n    }\n  }\n}\n```\n\n```json\n{\n  \"tool_name\": \"Backup File Parser\",\n  \"tool_description\": \"Parses and extracts wallet data from various backup file formats including JSON wallets, encrypted keystores, and wallet export files from popular wallet applications.\",\n  \"parameters\": {\n    \"backup_content\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Raw content of the backup file as string\"\n    },\n    \"file_format\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Format of backup file: json, keystore, electrum, exodus, metamask, trust_wallet\"\n    },\n    \"password\": {\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"Password for encrypted backup files\",\n      \"default\": \"None\"\n    },\n    \"validate_structure\": {\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Validate backup file structure before parsing\",\n      \"default\": true\n    }\n  },\n  \"error_messages\": [\n    \"Invalid backup format: Supported formats are [json, keystore, electrum, exodus, metamask, trust_wallet].\"\
  ,\n    \"Backup file corrupted: File structure is invalid or corrupted.\",\n    \"Decryption failed: Incorrect password or corrupted encrypted data.\",\n    \"Missing required fields: Backup file is missing essential wallet data fields.\",\n    \"Unsupported backup version: Backup file version is not supported.\"\n  ],\n  \"usage\": \"Provide backup_content and file_format, include password for encrypted files. Set validate_structure to verify file integrity before parsing.\",\n  \"output_details\": {\n    \"parsing_success\": {\n      \"type\": \"boolean\",\n      \"description\": \"Whether parsing was successful\"\n    },\n    \"wallet_type\": {\n      \"type\": \"string\",\n      \"description\": \"Type of wallet found in backup\"\n    },\n    \"encrypted\": {\n      \"type\": \"boolean\",\n      \"description\": \"Whether the backup was encrypted\"\n    },\n    \"extracted_data\": {\n      \"type\": \"string\",\n      \"description\": \"JSON string containing extracted wallet data\"\n    },\n    \"creation_date\": {\n      \"type\": \"string\",\n      \"description\": \"Backup creation timestamp if available\",\n      \"format\": \"date-time\"\n    }\n  }\n}\n```\n\n```json\n{\n  \"tool_name\": \"HD Wallet Deriver\",\n  \"tool_description\": \"Derives hierarchical deterministic wallet keys and addresses using BIP32/BIP44 standards from seed phrases or master private keys, supporting multiple derivation paths and blockchain networks.\",\n  \"parameters\": {\n    \"seed_source\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Seed phrase or master private key for derivation\"\n    },\n    \"source_type\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Type of seed source: mnemonic or master_key\"\n    },\n    \"derivation_path\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"BIP32 derivation path (e.g., m/44'/0'/0'/0/0)\"\n    },\n    \"blockchain_type\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Target blockchain: bitcoin, ethereum, litecoin, dogecoin, bitcoin_cash\"\n    },\n    \"account_index\": {\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"Account index for derivation (0-2147483647)\",\n      \"default\": 0\n    },\n    \"address_count\": {\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"Number of addresses to derive (1-100)\",\n      \"default\": 1\n    },\n    \"change_addresses\": {\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Include change addresses in derivation\",\n      \"default\": false\n    },\n    \"passphrase\": {\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"BIP39 passphrase for enhanced security\",\n      \"default\": \"None\"\n    }\n  },\n  \"error_messages\": [\n    \"Invalid source type: Must be either 'mnemonic' or 'master_key'.\",\n    \"Invalid derivation path: Path must follow BIP32 format (e.g., m/44'/0'/0'/0/0).\",\n    \"Unsupported blockchain: Use one of [bitcoin, ethereum, litecoin, dogecoin, bitcoin_cash].\",\n    \"Account index out of range: Must be between 0 and 2147483647.\",\n    \"Address count exceeded: Can derive maximum 100 addresses per request.\",\n    \"Derivation failed: Unable to derive keys from provided seed source.\"\n  ],\n  \"usage\": \"Provide seed_source, source_type, derivation_path, and blockchain_type. Optionally set account_index, address_count, change_addresses, and passphrase for customized derivation.\",\n  \"output_details\": {\n    \"master_public_key\": {\n      \"type\": \"string\",\n      \"description\": \"Master public key for the derivation path\"\n    },\n    \"derived_addresses\": {\n      \"type\": \"array\",\n      \"items\": {\"type\": \"string\"},\n      \"description\": \"Array of derived wallet addresses\"\n    },\n    \"private_keys\": {\n      \"type\": \"array\",\n      \"items\": {\"type\": \"string\"},\n      \"description\": \"Array of\
  \ corresponding private keys\"\n    },\n    \"derivation_paths\": {\n      \"type\": \"array\",\n      \"items\": {\"type\": \"string\"},\n      \"description\": \"Array of full derivation paths used\"\n    },\n    \"address_types\": {\n      \"type\": \"array\",\n      \"items\": {\"type\": \"string\"},\n      \"description\": \"Array indicating address types (receiving/change)\"\n    }\n  }\n}\n```\n\n```json\n{\n  \"tool_name\": \"Address Generator\",\n  \"tool_description\": \"Generates cryptocurrency addresses from private keys for various blockchain networks, supporting different address formats and encoding standards.\",\n  \"parameters\": {\n    \"private_key\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Private key in hex format\"\n    },\n    \"blockchain_type\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Target blockchain: bitcoin, ethereum, litecoin, dogecoin, bitcoin_cash\"\n    },\n    \"address_format\": {\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"Address format: legacy, segwit, bech32 (Bitcoin-based only)\",\n      \"default\": \"legacy\"\n    },\n    \"compressed_key\": {\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Use compressed public key format\",\n      \"default\": true\n    }\n  },\n  \"error_messages\": [\n    \"Invalid private key: Private key must be valid hex format (64 characters).\",\n    \"Unsupported blockchain: Use one of [bitcoin, ethereum, litecoin, dogecoin, bitcoin_cash].\",\n    \"Invalid address format: Format must be one of [legacy, segwit, bech32] for Bitcoin-based chains.\",\n    \"Format not supported: Selected address format is not supported for the specified blockchain.\"\n  ],\n  \"usage\": \"Provide private_key and blockchain_type, optionally specify address_format and compressed_key settings. Returns the generated address and associated metadata.\",\n  \"output_details\": {\n    \"address\": {\n      \"type\": \"string\",\n      \"description\": \"Generated cryptocurrency address\"\n    },\n    \"public_key\": {\n      \"type\": \"string\",\n      \"description\": \"Public key corresponding to the private key\"\n    },\n    \"address_format\": {\n      \"type\": \"string\",\n      \"description\": \"Format used for address generation\"\n    },\n    \"blockchain_network\": {\n      \"type\": \"string\",\n      \"description\": \"Target blockchain network\"\n    }\n  }\n}\n```\n\n```json\n{\n  \"tool_name\": \"Balance Checker\",\n  \"tool_description\": \"Retrieves current balance and basic account information for cryptocurrency addresses across multiple blockchain networks using public APIs.\",\n  \"parameters\": {\n    \"address\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Cryptocurrency address to check balance for\"\n    },\n    \"blockchain_type\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Blockchain network: bitcoin, ethereum, litecoin, dogecoin, bitcoin_cash\"\n    },\n    \"include_tokens\": {\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Include ERC-20 token balances (Ethereum only)\",\n      \"default\": false\n    }\n  },\n  \"error_messages\": [\n    \"Invalid address format: Address format is not valid for the specified blockchain.\",\n    \"Unsupported blockchain: Use one of [bitcoin, ethereum, litecoin, dogecoin, bitcoin_cash].\",\n    \"API unavailable: Unable to connect to blockchain API service.\",\n    \"Address not found: Address has no transaction history on the blockchain.\"\n  ],\n  \"usage\": \"Provide address and blockchain_type to retrieve current balance. Set include_tokens to true for ERC-20 token balances on Ethereum.\",\n  \"output_details\": {\n    \"balance\": {\n      \"type\": \"string\",\n      \"description\": \"Current balance in native currency units\"\n    },\n    \"confirmed_balance\": {\n      \"type\": \"string\",\n      \"description\": \"Confirmed balance\
  \ excluding pending transactions\"\n    },\n    \"transaction_count\": {\n      \"type\": \"integer\",\n      \"description\": \"Total number of transactions for this address\"\n    },\n    \"tokens\": {\n      \"type\": \"array\",\n      \"items\": {\"type\": \"string\"},\n      \"description\": \"Array of token balances (if requested and applicable)\"\n    }\n  }\n}\n```\n\n```json\n{\n  \"tool_name\": \"Transaction History Fetcher\",\n  \"tool_description\": \"Retrieves transaction history for cryptocurrency addresses with filtering options, pagination, and detailed transaction information including inputs, outputs, and confirmations.\",\n  \"parameters\": {\n    \"address\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Cryptocurrency address to fetch transactions for\"\n    },\n    \"blockchain_type\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Blockchain network: bitcoin, ethereum, litecoin, dogecoin, bitcoin_cash\"\n    },\n    \"limit\": {\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"Maximum number of transactions to retrieve (1-100)\",\n      \"default\": 50\n    },\n    \"start_date\": {\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"Start date for transaction history (ISO 8601)\",\n      \"format\": \"date-time\",\n      \"default\": \"None\"\n    },\n    \"end_date\": {\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"End date for transaction history (ISO 8601)\",\n      \"format\": \"date-time\",\n      \"default\": \"None\"\n    },\n    \"transaction_type\": {\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"Filter by transaction type: all, incoming, outgoing\",\n      \"default\": \"all\"\n    },\n    \"min_confirmations\": {\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"Minimum confirmations required (0-100)\",\n      \"default\": 0\n    }\n  },\n  \"error_messages\": [\n    \"Invalid address format: Address format is not valid for the specified blockchain.\",\n    \"Unsupported blockchain: Use one of [bitcoin, ethereum, litecoin, dogecoin, bitcoin_cash].\",\n    \"Invalid date range: start_date must be before end_date.\",\n    \"Limit exceeded: Maximum 100 transactions per request.\",\n    \"Invalid transaction type: Use one of [all, incoming, outgoing].\",\n    \"API rate limit exceeded: Too many requests, try again later.\"\n  ],\n  \"usage\": \"Provide address and blockchain_type, optionally set limit, date range, transaction_type, and min_confirmations for filtered results.\",\n  \"output_details\": {\n    \"transaction_count\": {\n      \"type\": \"integer\",\n      \"description\": \"Number of transactions returned\"\n    },\n    \"transactions\": {\n      \"type\": \"array\",\n      \"items\": {\"type\": \"string\"},\n      \"description\": \"Array of transaction data as JSON strings\"\n    },\n    \"total_received\": {\n      \"type\": \"string\",\n      \"description\": \"Total amount received by the address\"\n    },\n    \"total_sent\": {\n      \"type\": \"string\",\n      \"description\": \"Total amount sent from the address\"\n    },\n    \"has_more\": {\n      \"type\": \"boolean\",\n      \"description\": \"Whether more transactions are available\"\n    }\n  }\n}\n```\n\n```json\n{\n  \"tool_name\": \"Multi Chain Detector\",\n  \"tool_description\": \"Analyzes wallet credentials to detect which blockchain networks are supported and identifies existing addresses with transaction history across multiple chains.\",\n  \"parameters\": {\n    \"credential_type\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Type of credential: mnemonic, private_key, master_key\"\n    },\n    \"credential_data\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"The credential data (seed phrase, private key, etc.)\"\n    },\n    \"chains_to_check\": {\n      \"type\": \"array\",\n   \
  \   \"required\": false,\n      \"description\": \"Array of blockchain networks to check\",\n      \"items\": {\"type\": \"string\"},\n      \"default\": [\"bitcoin\", \"ethereum\", \"litecoin\", \"dogecoin\", \"bitcoin_cash\"]\n    },\n    \"check_activity\": {\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Check for existing activity on detected addresses\",\n      \"default\": true\n    }\n  },\n  \"error_messages\": [\n    \"Invalid credential type: Must be one of [mnemonic, private_key, master_key].\",\n    \"Invalid credential data: Credential data format is invalid or corrupted.\",\n    \"Unsupported blockchain: One or more chains in chains_to_check are not supported.\",\n    \"Derivation failed: Unable to derive addresses for one or more blockchain networks.\"\n  ],\n  \"usage\": \"Provide credential_type and credential_data, optionally specify chains_to_check and check_activity. Returns supported chains and activity status.\",\n  \"output_details\": {\n    \"supported_chains\": {\n      \"type\": \"array\",\n      \"items\": {\"type\": \"string\"},\n      \"description\": \"Array of blockchain networks supported by the credential\"\n    },\n    \"active_chains\": {\n      \"type\": \"array\",\n      \"items\": {\"type\": \"string\"},\n      \"description\": \"Array of chains with existing transaction activity\"\n    },\n    \"derived_addresses\": {\n      \"type\": \"string\",\n      \"description\": \"JSON string mapping chains to their derived addresses\"\n    },\n    \"total_chains_found\": {\n      \"type\": \"integer\",\n      \"description\": \"Total number of supported blockchain networks\"\n    }\n  }\n}\n```\n\n```json\n{\n  \"tool_name\": \"Wallet Metadata Extractor\",\n  \"tool_description\": \"Extracts metadata information from wallet backup files including creation date, version, wallet name, and configuration settings.\",\n  \"parameters\": {\n    \"backup_data\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Parsed backup file data as JSON string\"\n    },\n    \"wallet_type\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Type of wallet: electrum, exodus, metamask, trust_wallet, generic\"\n    }\n  },\n  \"error_messages\": [\n    \"Invalid backup data: Backup data must be valid JSON format.\",\n    \"Unsupported wallet type: Wallet type must be one of [electrum, exodus, metamask, trust_wallet, generic].\",\n    \"Metadata extraction failed: Unable to extract metadata from the provided backup data.\"\n  ],\n  \"usage\": \"Provide backup_data as JSON string and specify wallet_type. Returns extracted metadata information about the wallet.\",\n  \"output_details\": {\n    \"wallet_name\": {\n      \"type\": \"string\",\n      \"description\": \"Name or label of the wallet\"\n    },\n    \"creation_date\": {\n      \"type\": \"string\",\n      \"description\": \"Wallet creation timestamp\",\n      \"format\": \"date-time\"\n    },\n    \"wallet_version\": {\n      \"type\": \"string\",\n      \"description\": \"Version of the wallet software\"\n    },\n    \"encryption_enabled\": {\n      \"type\": \"boolean\",\n      \"description\": \"Whether the wallet has encryption enabled\"\n    },\n    \"account_count\": {\n      \"type\": \"integer\",\n      \"description\": \"Number of accounts in the wallet\"\n    },\n    \"supported_currencies\": {\n      \"type\": \"array\",\n      \"items\": {\"type\": \"string\"},\n      \"description\": \"Array of supported cryptocurrencies\"\n    }\n  }\n}\n```\n\n```json\n{\n  \"tool_name\": \"Security Strength Analyzer\",\n  \"tool_description\": \"Analyzes the security strength of wallet credentials including entropy assessment, common vulnerability checks, and security recommendations.\",\n  \"parameters\": {\n    \"credential_type\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Type of credential: mnemonic, private_key, password\"\n    },\n    \"credential_data\": {\n      \"type\": \"string\",\n      \"required\"\
  : true,\n      \"description\": \"The credential data to analyze\"\n    },\n    \"check_wordlist\": {\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Check against common word lists and dictionaries\",\n      \"default\": true\n    }\n  },\n  \"error_messages\": [\n    \"Invalid credential type: Must be one of [mnemonic, private_key, password].\",\n    \"Empty credential data: Credential data cannot be empty.\",\n    \"Analysis failed: Unable to perform security analysis on the provided data.\"\n  ],\n  \"usage\": \"Provide credential_type and credential_data for analysis. Set check_wordlist to verify against common vulnerability databases.\",\n  \"output_details\": {\n    \"security_score\": {\n      \"type\": \"integer\",\n      \"description\": \"Security score from 0-100\"\n    },\n    \"entropy_bits\": {\n      \"type\": \"integer\",\n      \"description\": \"Estimated entropy in bits\"\n    },\n    \"vulnerabilities_found\": {\n      \"type\": \"array\",\n      \"items\": {\"type\": \"string\"},\n      \"description\": \"Array of identified security vulnerabilities\"\n    },\n    \"recommendations\": {\n      \"type\": \"array\",\n      \"items\": {\"type\": \"string\"},\n      \"description\": \"Array of security improvement recommendations\"\n    },\n    \"risk_level\": {\n      \"type\": \"string\",\n      \"description\": \"Overall risk level: low, medium, high, critical\"\n    }\n  }\n}\n```\n\n```json\n{\n  \"tool_name\": \"Blockchain Network Validator\",\n  \"tool_description\": \"Validates blockchain network parameters and connectivity, ensuring the target network is accessible and properly configured for wallet operations.\",\n  \"parameters\": {\n    \"blockchain_type\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Blockchain network to validate: bitcoin, ethereum, litecoin, dogecoin, bitcoin_cash\"\n    },\n    \"network_mode\": {\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"Network mode: mainnet or testnet\",\n      \"default\": \"mainnet\"\n    }\n  },\n  \"error_messages\": [\n    \"Unsupported blockchain: Use one of [bitcoin, ethereum, litecoin, dogecoin, bitcoin_cash].\",\n    \"Invalid network mode: Mode must be either 'mainnet' or 'testnet'.\",\n    \"Network unavailable: Unable to connect to the specified blockchain network.\",\n    \"API service down: Blockchain API service is currently unavailable.\"\n  ],\n  \"usage\": \"Provide blockchain_type and optionally network_mode to validate network accessibility and configuration.\",\n  \"output_details\": {\n    \"network_available\": {\n      \"type\": \"boolean\",\n      \"description\": \"Whether the network is accessible\"\n    },\n    \"current_block_height\": {\n      \"type\": \"integer\",\n      \"description\": \"Current blockchain height\"\n    },\n    \"network_difficulty\": {\n      \"type\": \"string\",\n      \"description\": \"Current network difficulty\"\n    },\n    \"average_block_time\": {\n      \"type\": \"number\",\n      \"description\": \"Average block time in seconds\"\n    },\n    \"api_status\": {\n      \"type\": \"string\",\n      \"description\": \"Status of blockchain API services\"\n    }\n  }\n}\n```\n\n```json\n{\n  \"tool_name\": \"Wallet Import Coordinator\",\n  \"tool_description\": \"Coordinates the complete wallet import process by combining data from multiple tools to create a unified wallet restoration result with comprehensive validation and error handling.\",\n  \"parameters\": {\n    \"credential_source\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Source of wallet credentials: seed_phrase, private_key, backup_file\"\n    },\n    \"credential_data\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"The wallet credential data\"\n    },\n    \"target_blockchains\": {\n      \"type\": \"array\",\n      \"required\": true,\n      \"description\": \"Array of blockchain networks to import for\",\n      \"items\": {\"type\": \"\
  string\"},\n      \"minItems\": 1,\n      \"maxItems\": 10\n    },\n    \"derivation_paths\": {\n      \"type\": \"array\",\n      \"required\": false,\n      \"description\": \"Custom derivation paths for HD wallets\",\n      \"items\": {\"type\": \"string\"},\n      \"default\": [\"None\"]\n    },\n    \"validate_balances\": {\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Validate balances on all imported addresses\",\n      \"default\": true\n    },\n    \"include_transaction_history\": {\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Include transaction history in import results\",\n      \"default\": false\n    },\n    \"security_check\": {\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Perform security analysis on credentials\",\n      \"default\": true\n    },\n    \"max_addresses_per_chain\": {\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"Maximum addresses to derive per blockchain (1-50)\",\n      \"default\": 5\n    },\n    \"passphrase\": {\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"Optional BIP39 passphrase for enhanced security\",\n      \"default\": \"None\"\n    },\n    \"import_name\": {\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"Name identifier for the imported wallet\",\n      \"default\": \"Imported Wallet\"\n    }\n  },\n  \"error_messages\": [\n    \"Invalid credential source: Must be one of [seed_phrase, private_key, backup_file].\",\n    \"Unsupported blockchain: One or more target blockchains are not supported.\",\n    \"Import coordination failed: Unable to coordinate import across multiple tools.\",\n    \"Validation failed: One or more validation steps failed during import.\",\n    \"Address limit exceeded: max_addresses_per_chain must be between 1-50.\",\n    \"Derivation path error: One or more custom derivation paths are invalid.\"\n  ],\n  \"usage\": \"Provide credential_source, credential_data, and target_blockchains. Configure optional parameters for customized import behavior. Returns comprehensive wallet import results.\",\n  \"output_details\": {\n    \"import_success\": {\n      \"type\": \"boolean\",\n      \"description\": \"Whether the overall import was successful\"\n    },\n    \"imported_chains\": {\n      \"type\": \"array\",\n      \"items\": {\"type\": \"string\"},\n      \"description\": \"Array of successfully imported blockchain networks\"\n    },\n    \"total_addresses\": {\n      \"type\": \"integer\",\n      \"description\": \"Total number of addresses imported\"\n    },\n    \"total_balance\": {\n      \"type\": \"string\",\n      \"description\": \"Combined balance across all chains (if validated)\"\n    },\n    \"security_score\": {\n      \"type\": \"integer\",\n      \"description\": \"Security assessment score (if requested)\"\n    },\n    \"import_summary\": {\n      \"type\": \"string\",\n      \"description\": \"JSON string containing detailed import results\"\n    },\n    \"warnings\": {\n      \"type\": \"array\",\n      \"items\": {\"type\": \"string\"},\n      \"description\": \"Array of warnings encountered during import\"\n    },\n    \"import_timestamp\": {\n      \"type\": \"string\","
