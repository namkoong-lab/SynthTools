field_name: cloud_platforms
subfield: Container Orchestration and Management
task: Deploy and manage containerized applications across cluster environments
tool_description: "## STEP 1 — Rate task difficulty\n\nThis task is **hard** due to the broad scope encompassing multiple orchestration platforms, complex inter-service dependencies, security configurations, networking requirements, and high risk of production outages from deployment errors.\n\n## STEP 2 — Set a tool budget\n\nGiven the hard difficulty rating, I'm targeting **17 tools** to cover the comprehensive workflow from container building to monitoring and scaling.\n\n## STEP 3 — List all tool names and dependencies\n\n**Tools and their data flow:**\n- **Container Image Builder** → produces container images\n- **Registry Manager** → consumes images, produces registry metadata\n- **Cluster Provisioner** → produces cluster configuration\n- **Namespace Creator** → consumes cluster config, produces namespace info\n- **Secret Manager** → produces encrypted secrets\n- **Config Map Manager** → produces configuration data\n- **Service Mesh Configurator** → consumes cluster info, produces mesh config\n- **Load Balancer Configurator** → produces traffic routing rules\n- **Deployment Manager** → consumes images/configs/secrets, produces deployment status\n- **Service Monitor** → consumes deployment info, produces health metrics\n- **Auto Scaler** → consumes metrics, produces scaling decisions\n- **Rolling Update Manager** → consumes deployment config, produces update status\n- **Resource Quota Manager** → produces resource limits\n- **Network Policy Manager** → produces security policies  \n- **Backup Manager** → consumes cluster state, produces backup artifacts\n- **Log Aggregator** → consumes pod logs, produces centralized logs\n- **Cluster Health Checker** → consumes all components, produces health report\n\n## STEP 4 — Multi-tool plans\n\n**Simple plans:**\n1. Basic deployment: Container Image Builder → Registry Manager → Deployment Manager\n2. Health monitoring: Service Monitor → Log Aggregator → Cluster Health Checker\n\n**Medium plans:**\n1. Secure application deployment: Secret Manager → Config Map Manager → Namespace Creator → Deployment Manager → Service Monitor\n2. Traffic management: Load Balancer Configurator → Service Mesh Configurator → Network Policy Manager → Rolling Update Manager\n\n**Complex plans:**\n1. Full production setup: Cluster Provisioner → Namespace Creator → Secret Manager → Config Map Manager → Resource Quota Manager → Container Image Builder → Registry Manager → Deployment Manager → Service Mesh Configurator → Load Balancer Configurator → Auto Scaler → Service Monitor\n2. Complete lifecycle management: All tools orchestrated for enterprise-grade deployment with monitoring, scaling, security, and backup capabilities\n\n## STEP 5 — Produce tools\n\n```json\n{\n  \"tool_name\": \"Container Image Builder\",\n  \"tool_description\": \"Builds container images from source code with specified runtime configurations and dependencies.\",\n  \"parameters\": {\n    \"source_path\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Path to the source code directory or repository URL\"\n    },\n    \"dockerfile_path\": {\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"Path to Dockerfile relative to source_path\",\n      \"default\": \"Dockerfile\"\n    },\n    \"image_name\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Name for the resulting container image\"\n    },\n    \"image_tag\": {\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"Tag for the container image\",\n      \"default\": \"latest\"\n    },\n    \"build_args\": {\n      \"type\": \"array\",\n      \"required\": false,\n      \"description\": \"Build-time variables in KEY=VALUE format\",\n      \"items\": {\"type\": \"string\"},\n      \"default\": \"None\"\n    }\n  },\n  \"error_messages\": [\n    \"Source path not found: Ensure the source_path exists and is accessible.\",\n    \"Dockerfile not found: Verify dockerfile_path is correct relative to source_path.\",\n    \"Invalid image name: Image name must\
  \ follow Docker naming conventions (lowercase, alphanumeric, hyphens, underscores).\",\n    \"Build failed: Check Dockerfile syntax and ensure all dependencies are available.\",\n    \"Invalid build args: Build arguments must be in KEY=VALUE format.\"\n  ],\n  \"usage\": \"Provide source_path, image_name, and optionally dockerfile_path, image_tag, and build_args. The tool builds the container image and returns build details.\",\n  \"output_details\": {\n    \"image_id\": {\n      \"type\": \"string\",\n      \"description\": \"Unique identifier of the built image\"\n    },\n    \"image_size\": {\n      \"type\": \"number\",\n      \"description\": \"Size of the built image in MB\"\n    },\n    \"build_status\": {\n      \"type\": \"string\",\n      \"description\": \"Status of the build process\"\n    },\n    \"build_time\": {\n      \"type\": \"string\",\n      \"description\": \"Timestamp when build completed\",\n      \"format\": \"date-time\"\n    }\n  }\n}\n```\n\n```json\n{\n  \"tool_name\": \"Registry Manager\",\n  \"tool_description\": \"Manages container images in registries including push, pull, and metadata operations.\",\n  \"parameters\": {\n    \"registry_url\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"URL of the container registry\"\n    },\n    \"username\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Registry authentication username\"\n    },\n    \"password\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Registry authentication password\"\n    },\n    \"operation\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Operation to perform: push, pull, list, delete\"\n    },\n    \"image_name\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Name of the image to operate on\"\n    },\n    \"image_tag\": {\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"Tag of the image\",\n      \"default\": \"latest\"\n    }\n  },\n  \"error_messages\": [\n    \"Registry authentication failed: Verify username and password are correct.\",\n    \"Registry unreachable: Check registry_url and network connectivity.\",\n    \"Invalid operation: Use one of [push, pull, list, delete].\",\n    \"Image not found: Specified image_name and image_tag do not exist in registry.\",\n    \"Permission denied: User lacks required permissions for this operation.\"\n  ],\n  \"usage\": \"Provide registry_url, username, password, operation, and image_name. Optionally specify image_tag. Returns operation results.\",\n  \"output_details\": {\n    \"operation_status\": {\n      \"type\": \"string\",\n      \"description\": \"Success or failure status of the operation\"\n    },\n    \"image_digest\": {\n      \"type\": \"string\",\n      \"description\": \"SHA256 digest of the image\"\n    },\n    \"registry_response\": {\n      \"type\": \"string\",\n      \"description\": \"Response message from registry\"\n    }\n  }\n}\n```\n\n```json\n{\n  \"tool_name\": \"Cluster Provisioner\",\n  \"tool_description\": \"Provisions and configures Kubernetes clusters on various cloud platforms with specified node configurations.\",\n  \"parameters\": {\n    \"cluster_name\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Name of the cluster to provision\"\n    },\n    \"cloud_provider\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Cloud provider: aws, gcp, azure, on-premise\"\n    },\n    \"node_count\": {\n      \"type\": \"integer\",\n      \"required\": true,\n      \"description\": \"Number of worker nodes\"\n    },\n    \"node_instance_type\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Instance type for worker nodes\"\n    },\n    \"kubernetes_version\": {\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"Kubernetes version to install\",\n      \"default\": \"1.28\"\n    },\n    \"region\"\
  : {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Cloud region for cluster deployment\"\n    },\n    \"enable_autoscaling\": {\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Enable cluster autoscaling\",\n      \"default\": false\n    },\n    \"max_nodes\": {\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"Maximum nodes when autoscaling enabled\",\n      \"default\": \"None\"\n    },\n    \"network_cidr\": {\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"CIDR block for cluster network\",\n      \"default\": \"10.0.0.0/16\"\n    }\n  },\n  \"error_messages\": [\n    \"Invalid cloud provider: Use one of [aws, gcp, azure, on-premise].\",\n    \"Insufficient quota: Cloud provider quota exceeded for requested resources.\",\n    \"Invalid instance type: Specified node_instance_type not available in region.\",\n    \"Unsupported Kubernetes version: Check available versions for selected provider.\",\n    \"Network CIDR conflict: Specified CIDR conflicts with existing networks.\",\n    \"Region not available: Selected region not supported by cloud provider.\",\n    \"Autoscaling configuration error: max_nodes required when enable_autoscaling is true.\"\n  ],\n  \"usage\": \"Provide cluster_name, cloud_provider, node_count, node_instance_type, and region. Optionally configure kubernetes_version, enable_autoscaling, max_nodes, and network_cidr.\",\n  \"output_details\": {\n    \"cluster_id\": {\n      \"type\": \"string\",\n      \"description\": \"Unique identifier of the provisioned cluster\"\n    },\n    \"cluster_endpoint\": {\n      \"type\": \"string\",\n      \"description\": \"API server endpoint URL\"\n    },\n    \"provisioning_status\": {\n      \"type\": \"string\",\n      \"description\": \"Current status of cluster provisioning\"\n    },\n    \"node_ips\": {\n      \"type\": \"array\",\n      \"items\": {\"type\": \"string\"},\n      \"description\": \"IP addresses of provisioned nodes\"\n    },\n    \"kubeconfig\": {\n      \"type\": \"string\",\n      \"description\": \"Base64 encoded kubeconfig for cluster access\"\n    }\n  }\n}\n```\n\n```json\n{\n  \"tool_name\": \"Namespace Creator\",\n  \"tool_description\": \"Creates and manages Kubernetes namespaces with resource quotas and access policies.\",\n  \"parameters\": {\n    \"namespace_name\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Name of the namespace to create\"\n    },\n    \"kubeconfig\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Base64 encoded kubeconfig for cluster access\"\n    },\n    \"labels\": {\n      \"type\": \"array\",\n      \"required\": false,\n      \"description\": \"Labels to apply in KEY=VALUE format\",\n      \"items\": {\"type\": \"string\"},\n      \"default\": \"None\"\n    }\n  },\n  \"error_messages\": [\n    \"Invalid namespace name: Must follow Kubernetes naming conventions (lowercase, alphanumeric, hyphens).\",\n    \"Kubeconfig authentication failed: Verify kubeconfig is valid and accessible.\",\n    \"Namespace already exists: Choose a different namespace name.\",\n    \"Invalid labels format: Labels must be in KEY=VALUE format.\",\n    \"Cluster connection failed: Unable to connect to Kubernetes cluster.\"\n  ],\n  \"usage\": \"Provide namespace_name and kubeconfig. Optionally specify labels. Creates the namespace and returns creation details.\",\n  \"output_details\": {\n    \"namespace_status\": {\n      \"type\": \"string\",\n      \"description\": \"Status of namespace creation\"\n    },\n    \"creation_time\": {\n      \"type\": \"string\",\n      \"description\": \"Timestamp when namespace was created\",\n      \"format\": \"date-time\"\n    },\n    \"applied_labels\": {\n      \"type\": \"array\",\n      \"items\": {\"type\": \"string\"},\n      \"description\": \"Labels successfully applied to namespace\"\n    }\n  }\n}\n```\n\n```json\n{\n  \"tool_name\": \"Secret Manager\",\n  \"tool_description\"\
  : \"Creates and manages Kubernetes secrets for sensitive data like passwords, tokens, and certificates.\",\n  \"parameters\": {\n    \"secret_name\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Name of the secret to create\"\n    },\n    \"namespace\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Namespace where secret will be created\"\n    },\n    \"kubeconfig\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Base64 encoded kubeconfig for cluster access\"\n    },\n    \"secret_type\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Type of secret: generic, tls, docker-registry\"\n    },\n    \"data_keys\": {\n      \"type\": \"array\",\n      \"required\": true,\n      \"description\": \"Keys for secret data\",\n      \"items\": {\"type\": \"string\"}\n    },\n    \"data_values\": {\n      \"type\": \"array\",\n      \"required\": true,\n      \"description\": \"Values for secret data (base64 encoded)\",\n      \"items\": {\"type\": \"string\"}\n    }\n  },\n  \"error_messages\": [\n    \"Invalid secret name: Must follow Kubernetes naming conventions.\",\n    \"Namespace not found: Specified namespace does not exist.\",\n    \"Kubeconfig authentication failed: Verify kubeconfig credentials.\",\n    \"Invalid secret type: Use one of [generic, tls, docker-registry].\",\n    \"Data mismatch: data_keys and data_values arrays must have same length.\",\n    \"Invalid base64 encoding: Ensure data_values are properly base64 encoded.\"\n  ],\n  \"usage\": \"Provide secret_name, namespace, kubeconfig, secret_type, data_keys, and data_values. Creates the secret and returns status.\",\n  \"output_details\": {\n    \"secret_status\": {\n      \"type\": \"string\",\n      \"description\": \"Status of secret creation\"\n    },\n    \"creation_time\": {\n      \"type\": \"string\",\n      \"description\": \"Timestamp when secret was created\",\n      \"format\": \"date-time\"\n    },\n    \"data_key_count\": {\n      \"type\": \"integer\",\n      \"description\": \"Number of data keys stored in secret\"\n    }\n  }\n}\n```\n\n```json\n{\n  \"tool_name\": \"Config Map Manager\",\n  \"tool_description\": \"Creates and manages Kubernetes ConfigMaps for application configuration data.\",\n  \"parameters\": {\n    \"configmap_name\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Name of the ConfigMap to create\"\n    },\n    \"namespace\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Namespace where ConfigMap will be created\"\n    },\n    \"kubeconfig\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Base64 encoded kubeconfig for cluster access\"\n    },\n    \"config_data\": {\n      \"type\": \"array\",\n      \"required\": true,\n      \"description\": \"Configuration data in KEY=VALUE format\",\n      \"items\": {\"type\": \"string\"}\n    }\n  },\n  \"error_messages\": [\n    \"Invalid ConfigMap name: Must follow Kubernetes naming conventions.\",\n    \"Namespace not found: Specified namespace does not exist.\",\n    \"Kubeconfig authentication failed: Verify kubeconfig credentials.\",\n    \"Invalid config data format: Data must be in KEY=VALUE format.\",\n    \"ConfigMap already exists: Choose a different name or delete existing ConfigMap.\"\n  ],\n  \"usage\": \"Provide configmap_name, namespace, kubeconfig, and config_data. Creates the ConfigMap and returns creation status.\",\n  \"output_details\": {\n    \"configmap_status\": {\n      \"type\": \"string\",\n      \"description\": \"Status of ConfigMap creation\"\n    },\n    \"creation_time\": {\n      \"type\": \"string\",\n      \"description\": \"Timestamp when ConfigMap was created\",\n      \"format\": \"date-time\"\n    },\n    \"data_key_count\": {\n      \"type\": \"integer\",\n      \"description\": \"Number of configuration keys stored\"\n    }\n  }\n}\n```\n\n```json\n{\n  \"tool_name\": \"Service Mesh Configurator\"\
  ,\n  \"tool_description\": \"Configures service mesh (Istio, Linkerd, Consul Connect) for microservice communication, security, and observability.\",\n  \"parameters\": {\n    \"mesh_type\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Service mesh type: istio, linkerd, consul\"\n    },\n    \"namespace\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Namespace to configure mesh for\"\n    },\n    \"kubeconfig\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Base64 encoded kubeconfig for cluster access\"\n    },\n    \"enable_mtls\": {\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Enable mutual TLS between services\",\n      \"default\": true\n    },\n    \"enable_tracing\": {\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Enable distributed tracing\",\n      \"default\": false\n    },\n    \"enable_metrics\": {\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Enable metrics collection\",\n      \"default\": true\n    },\n    \"traffic_policies\": {\n      \"type\": \"array\",\n      \"required\": false,\n      \"description\": \"Traffic management policies to apply\",\n      \"items\": {\"type\": \"string\"},\n      \"default\": \"None\"\n    },\n    \"gateway_config\": {\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"Gateway configuration for external traffic\",\n      \"default\": \"None\"\n    }\n  },\n  \"error_messages\": [\n    \"Unsupported mesh type: Use one of [istio, linkerd, consul].\",\n    \"Namespace not found: Specified namespace does not exist.\",\n    \"Kubeconfig authentication failed: Verify kubeconfig credentials.\",\n    \"Mesh installation not found: Service mesh must be installed on cluster first.\",\n    \"Invalid traffic policy: Check traffic policy syntax for selected mesh type.\",\n    \"Gateway configuration error: Verify gateway configuration syntax.\"\n  ],\n  \"usage\": \"Provide mesh_type, namespace, and kubeconfig. Optionally configure enable_mtls, enable_tracing, enable_metrics, traffic_policies, and gateway_config.\",\n  \"output_details\": {\n    \"mesh_status\": {\n      \"type\": \"string\",\n      \"description\": \"Status of mesh configuration\"\n    },\n    \"applied_policies\": {\n      \"type\": \"array\",\n      \"items\": {\"type\": \"string\"},\n      \"description\": \"Successfully applied traffic policies\"\n    },\n    \"mtls_enabled\": {\n      \"type\": \"boolean\",\n      \"description\": \"Whether mTLS is enabled\"\n    },\n    \"configuration_time\": {\n      \"type\": \"string\",\n      \"description\": \"Timestamp when configuration was applied\",\n      \"format\": \"date-time\"\n    }\n  }\n}\n```\n\n```json\n{\n  \"tool_name\": \"Load Balancer Configurator\",\n  \"tool_description\": \"Configures load balancing for containerized applications with health checks and traffic distribution rules.\",\n  \"parameters\": {\n    \"service_name\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Name of the service to configure load balancing for\"\n    },\n    \"namespace\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Namespace containing the service\"\n    },\n    \"kubeconfig\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Base64 encoded kubeconfig for cluster access\"\n    },\n    \"lb_type\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Load balancer type: ClusterIP, NodePort, LoadBalancer, Ingress\"\n    },\n    \"target_port\": {\n      \"type\": \"integer\",\n      \"required\": true,\n      \"description\": \"Target port on the pods\"\n    },\n    \"service_port\": {\n      \"type\": \"integer\",\n      \"required\": true,\n      \"description\": \"Port exposed by the service\"\n    },\n    \"health_check_path\": {\n      \"type\": \"string\",\n      \"required\"\
  : false,\n      \"description\": \"HTTP path for health checks\",\n      \"default\": \"/health\"\n    },\n    \"load_balancing_algorithm\": {\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"Algorithm: round-robin, least-connections, ip-hash\",\n      \"default\": \"round-robin\"\n    }\n  },\n  \"error_messages\": [\n    \"Service not found: Specified service does not exist in namespace.\",\n    \"Invalid load balancer type: Use one of [ClusterIP, NodePort, LoadBalancer, Ingress].\",\n    \"Port conflict: service_port already in use by another service.\",\n    \"Invalid port range: Ports must be between 1-65535.\",\n    \"Kubeconfig authentication failed: Verify kubeconfig credentials.\",\n    \"Invalid load balancing algorithm: Use one of [round-robin, least-connections, ip-hash].\"\n  ],\n  \"usage\": \"Provide service_name, namespace, kubeconfig, lb_type, target_port, and service_port. Optionally configure health_check_path and load_balancing_algorithm.\",\n  \"output_details\": {\n    \"lb_status\": {\n      \"type\": \"string\",\n      \"description\": \"Status of load balancer configuration\"\n    },\n    \"external_ip\": {\n      \"type\": \"string\",\n      \"description\": \"External IP address (for LoadBalancer type)\"\n    },\n    \"service_endpoint\": {\n      \"type\": \"string\",\n      \"description\": \"Service endpoint URL\"\n    },\n    \"configuration_time\": {\n      \"type\": \"string\",\n      \"description\": \"Timestamp when configuration was applied\",\n      \"format\": \"date-time\"\n    }\n  }\n}\n```\n\n```json\n{\n  \"tool_name\": \"Deployment Manager\",\n  \"tool_description\": \"Creates and manages Kubernetes deployments with specified container configurations, replicas, and resource constraints.\",\n  \"parameters\": {\n    \"deployment_name\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Name of the deployment to create\"\n    },\n    \"namespace\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Namespace for the deployment\"\n    },\n    \"kubeconfig\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Base64 encoded kubeconfig for cluster access\"\n    },\n    \"image_name\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Container image name with tag\"\n    },\n    \"replicas\": {\n      \"type\": \"integer\",\n      \"required\": true,\n      \"description\": \"Number of pod replicas\"\n    },\n    \"container_port\": {\n      \"type\": \"integer\",\n      \"required\": true,\n      \"description\": \"Port exposed by container\"\n    },\n    \"cpu_request\": {\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"CPU resource request (e.g., 100m, 0.5)\",\n      \"default\": \"100m\"\n    },\n    \"memory_request\": {\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"Memory resource request (e.g., 128Mi, 1Gi)\",\n      \"default\": \"128Mi\"\n    },\n    \"cpu_limit\": {\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"CPU resource limit (e.g., 500m, 1)\",\n      \"default\": \"500m\"\n    },\n    \"memory_limit\": {\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"Memory resource limit (e.g., 512Mi, 2Gi)\",\n      \"default\": \"512Mi\"\n    },\n    \"env_vars\": {\n      \"type\": \"array\",\n      \"required\": false,\n      \"description\": \"Environment variables in KEY=VALUE format\",\n      \"items\": {\"type\": \"string\"},\n      \"default\": \"None\"\n    },\n    \"config_maps\": {\n      \"type\": \"array\",\n      \"required\": false,\n      \"description\": \"ConfigMap names to mount\",\n      \"items\": {\"type\": \"string\"},\n      \"default\": \"None\"\n    },\n    \"secrets\": {\n      \"type\": \"array\",\n      \"required\": false,\n      \"description\": \"Secret names to mount\",\n      \"items\": {\"type\": \"string\"},\n      \"default\": \"None\"\n    }\n\
  \  },\n  \"error_messages\": [\n    \"Invalid deployment name: Must follow Kubernetes naming conventions.\",\n    \"Namespace not found: Specified namespace does not exist.\",\n    \"Image pull failed: Container image not accessible or does not exist.\",\n    \"Invalid replica count: Must be a positive integer.\",\n    \"Invalid resource format: Use standard Kubernetes resource notation (e.g., 100m, 1Gi).\",\n    \"ConfigMap not found: One or more specified ConfigMaps do not exist.\",\n    \"Secret not found: One or more specified secrets do not exist.\",\n    \"Invalid environment variables: Must be in KEY=VALUE format.\",\n    \"Kubeconfig authentication failed: Verify kubeconfig credentials.\"\n  ],\n  \"usage\": \"Provide deployment_name, namespace, kubeconfig, image_name, replicas, and container_port. Optionally configure resource limits, environment variables, ConfigMaps, and secrets.\",\n  \"output_details\": {\n    \"deployment_status\": {\n      \"type\": \"string\",\n      \"description\": \"Status of deployment creation\"\n    },\n    \"ready_replicas\": {\n      \"type\": \"integer\",\n      \"description\": \"Number of ready replicas\"\n    },\n    \"pod_names\": {\n      \"type\": \"array\",\n      \"items\": {\"type\": \"string\"},\n      \"description\": \"Names of created pods\"\n    },\n    \"creation_time\": {\n      \"type\": \"string\",\n      \"description\": \"Timestamp when deployment was created\",\n      \"format\": \"date-time\"\n    }\n  }\n}\n```\n\n```json\n{\n  \"tool_name\": \"Service Monitor\",\n  \"tool_description\": \"Monitors health and performance metrics of deployed services with alerting capabilities.\",\n  \"parameters\": {\n    \"service_name\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Name of the service to monitor\"\n    },\n    \"namespace\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Namespace containing the service\"\n    },\n    \"kubeconfig\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Base64 encoded kubeconfig for cluster access\"\n    },\n    \"health_endpoint\": {\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"Health check endpoint path\",\n      \"default\": \"/health\"\n    },\n    \"metrics_endpoint\": {\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"Metrics endpoint path\",\n      \"default\": \"/metrics\"\n    },\n    \"check_interval\": {\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"Health check interval in seconds\",\n      \"default\": 30\n    },\n    \"alert_thresholds\": {\n      \"type\": \"array\",\n      \"required\": false,\n      \"description\": \"Alert thresholds in METRIC=VALUE format\",\n      \"items\": {\"type\": \"string\"},\n      \"default\": \"None\"\n    }\n  },\n  \"error_messages\": [\n    \"Service not found: Specified service does not exist in namespace.\",\n    \"Health endpoint unreachable: Cannot access health check endpoint.\",\n    \"Metrics endpoint unreachable: Cannot access metrics endpoint.\",\n    \"Invalid check interval: Must be between 10-3600 seconds.\",\n    \"Invalid threshold format: Use METRIC=VALUE format (e.g., cpu=80, memory=90).\",\n    \"Kubeconfig authentication failed: Verify kubeconfig credentials.\"\n  ],\n  \"usage\": \"Provide service_name, namespace, and kubeconfig. Optionally configure health_endpoint, metrics_endpoint, check_interval, and alert_thresholds.\",\n  \"output_details\": {\n    \"monitoring_status\": {\n      \"type\": \"string\",\n      \"description\": \"Status of monitoring setup\"\n    },\n    \"health_status\": {\n      \"type\": \"string\",\n      \"description\": \"Current health status of the service\"\n    },\n    \"response_time\": {\n      \"type\": \"number\",\n      \"description\": \"Average response time in milliseconds\"\n    },\n    \"error_rate\": {\n      \"type\": \"number\",\n      \"description\": \"Error rate percentage\"\n    },\n    \"last_check\"\
  : {\n      \"type\": \"string\",\n      \"description\": \"Timestamp of last health check\",\n      \"format\": \"date-time\"\n    }\n  }\n}\n```\n\n```json\n{\n  \"tool_name\": \"Auto Scaler\",\n  \"tool_description\": \"Configures horizontal and vertical pod autoscaling based on resource utilization and custom metrics.\",\n  \"parameters\": {\n    \"deployment_name\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Name of deployment to scale\"\n    },\n    \"namespace\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Namespace containing the deployment\"\n    },\n    \"kubeconfig\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Base64 encoded kubeconfig for cluster access\"\n    },\n    \"scaling_type\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Scaling type: horizontal, vertical, both\"\n    },\n    \"min_replicas\": {\n      \"type\": \"integer\",\n      \"required\": true,\n      \"description\": \"Minimum number of replicas\"\n    },\n    \"max_replicas\": {\n      \"type\": \"integer\",\n      \"required\": true,\n      \"description\": \"Maximum number of replicas\"\n    },\n    \"cpu_threshold\": {\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"CPU utilization threshold percentage\",\n      \"default\": 70\n    },\n    \"memory_threshold\": {\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"Memory utilization threshold percentage\",\n      \"default\": 80\n    }\n  },\n  \"error_messages\": [\n    \"Deployment not found: Specified deployment does not exist in namespace.\",\n    \"Invalid scaling type: Use one of [horizontal, vertical, both].\",\n    \"Invalid replica range: min_replicas must be less than max_replicas.\",\n    \"Invalid threshold values: CPU and memory thresholds must be between 1-100.\",\n    \"Metrics server not available: Kubernetes metrics server required for autoscaling.\",\n    \"Kubeconfig authentication failed: Verify kubeconfig credentials.\"\n  ],\n  \"usage\": \"Provide deployment_name, namespace, kubeconfig, scaling_type, min_replicas, and max_replicas. Optionally configure cpu_threshold and memory_threshold.\",\n  \"output_details\": {\n    \"hpa_status\": {\n      \"type\": \"string\",\n      \"description\": \"Horizontal Pod Autoscaler status\"\n    },\n    \"vpa_status\": {\n      \"type\": \"string\",\n      \"description\": \"Vertical Pod Autoscaler status\"\n    },\n    \"current_replicas\": {\n      \"type\": \"integer\",\n      \"description\": \"Current number of replicas\"\n    },\n    \"target_replicas\": {\n      \"type\": \"integer\",\n      \"description\": \"Target number of replicas\""
