field_name: ecommerce_and_retail
subfield: Product Search and Discovery
task: Visual search and image-based product matching using uploaded photos or screenshots
tool_description: |-
  **STEP 1 — Rate task difficulty**

  This task is **hard** due to the complex computer vision requirements, multi-modal data processing (images, text, metadata), sophisticated matching algorithms, real-time performance expectations, and high accuracy demands for commercial viability.

  **STEP 2 — Set a tool budget**

  Given the hard difficulty rating, I'll target **17 tools** within the 15-20 range to cover image processing, feature extraction, similarity matching, product catalog management, and result optimization.

  **STEP 3 — List all tool names and dependencies**

  Tools and their data flow:
  - **Image Preprocessor** → processes raw images → **Feature Extractor**
  - **Feature Extractor** → extracts visual features → **Similarity Calculator**, **Embedding Generator**
  - **Product Catalog Indexer** → indexes products → **Search Engine**
  - **Search Engine** + **Similarity Calculator** → finds matches → **Result Ranker**
  - **Result Ranker** → ranks results → **Result Formatter**
  - **Performance Monitor**, **A/B Test Manager**, **Analytics Tracker** → provide feedback loops
  - **Cache Manager**, **Batch Processor** → optimize performance
  - **Feedback Collector** → improves matching accuracy over time

  **STEP 4 — Multi-tool plans**

  **Simple plans:**
  1. Basic image search: Image Preprocessor → Feature Extractor → Similarity Calculator → Result Formatter
  2. Performance monitoring: Analytics Tracker → Performance Monitor → Cache Manager

  **Medium plans:**
  1. Standard visual search: Image Preprocessor → Feature Extractor → Embedding Generator → Search Engine → Result Ranker → Result Formatter
  2. Catalog optimization: Product Catalog Indexer → Search Engine → Performance Monitor → Cache Manager

  **Complex plans:**
  1. Full pipeline with learning: Image Preprocessor → Feature Extractor → Embedding Generator → Search Engine → Similarity Calculator → Result Ranker → Result Formatter → Analytics Tracker → Feedback Collector
  2. Production system with A/B testing: Batch Processor → Product Catalog Indexer → Search Engine → A/B Test Manager → Result Ranker → Performance Monitor → Analytics Tracker

  **STEP 5 — Produce tools**

  ```json
  {
    "tool_name": "Image Preprocessor",
    "tool_description": "Preprocesses uploaded images by resizing, normalizing, and applying quality enhancements to prepare them for feature extraction and matching.",
    "parameters": {
      "image_data": {
        "type": "string",
        "required": true,
        "description": "Base64 encoded image data or image URL"
      },
      "target_size": {
        "type": "integer",
        "required": false,
        "description": "Target image size in pixels (224-1024)",
        "default": 512
      },
      "quality_enhancement": {
        "type": "boolean",
        "required": false,
        "description": "Apply quality enhancement filters",
        "default": true
      }
    },
    "error_messages": [
      "Invalid image format: Ensure image is in JPEG, PNG, or WebP format",
      "Image too large: Maximum file size is 10MB",
      "Invalid target size: Must be between 224 and 1024 pixels",
      "Corrupted image data: Image data appears to be corrupted or incomplete"
    ],
    "usage": "Provide image_data as base64 string or URL, optionally specify target_size and quality_enhancement. Returns preprocessed image ready for feature extraction.",
    "output_details": {
      "processed_image": {
        "type": "string",
        "description": "Base64 encoded preprocessed image"
      },
      "image_dimensions": {
        "type": "array",
        "items": {
          "type": "integer"
        },
        "description": "Width and height of processed image"
      },
      "processing_applied": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of preprocessing steps applied"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Feature Extractor",
    "tool_description": "Extracts visual features from preprocessed images using deep learning models, focusing on color, texture, shape, and object characteristics relevant for product matching.",
    "parameters": {
      "image_data": {
        "type": "string",
        "required": true,
        "description": "Base64 encoded preprocessed image"
      },
      "model_type": {
        "type": "string",
        "required": false,
        "description": "Feature extraction model: resnet50, vgg16, mobilenet, efficientnet",
        "default": "resnet50"
      },
      "feature_layers": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "required": false,
        "description": "Specific layers to extract features from",
        "default": ["conv5", "fc1"]
      },
      "normalize_features": {
        "type": "boolean",
        "required": false,
        "description": "Apply L2 normalization to features",
        "default": true
      }
    },
    "error_messages": [
      "Invalid model type: Use one of [resnet50, vgg16, mobilenet, efficientnet]",
      "Invalid image data: Image data must be valid base64 encoded string",
      "Feature extraction failed: Model could not process the provided image",
      "Invalid feature layers: Specified layers do not exist in the selected model"
    ],
    "usage": "Provide preprocessed image_data, optionally specify model_type, feature_layers, and normalize_features. Returns extracted visual features as numerical vectors.",
    "output_details": {
      "feature_vector": {
        "type": "array",
        "items": {
          "type": "number"
        },
        "description": "Numerical feature vector representing visual characteristics"
      },
      "feature_dimension": {
        "type": "integer",
        "description": "Dimension of the extracted feature vector"
      },
      "extraction_time": {
        "type": "number",
        "description": "Time taken for feature extraction in seconds"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Product Catalog Indexer",
    "tool_description": "Indexes product catalog data including images, metadata, and pre-computed features to enable fast similarity searches and product matching.",
    "parameters": {
      "catalog_data_path": {
        "type": "string",
        "required": true,
        "description": "Path to product catalog CSV or JSON file"
      },
      "product_id_column": {
        "type": "string",
        "required": true,
        "description": "Column name containing unique product IDs"
      },
      "image_url_column": {
        "type": "string",
        "required": true,
        "description": "Column name containing product image URLs"
      },
      "category_column": {
        "type": "string",
        "required": false,
        "description": "Column name containing product categories",
        "default": "None"
      },
      "price_column": {
        "type": "string",
        "required": false,
        "description": "Column name containing product prices",
        "default": "None"
      },
      "title_column": {
        "type": "string",
        "required": false,
        "description": "Column name containing product titles",
        "default": "None"
      },
      "description_column": {
        "type": "string",
        "required": false,
        "description": "Column name containing product descriptions",
        "default": "None"
      },
      "brand_column": {
        "type": "string",
        "required": false,
        "description": "Column name containing product brands",
        "default": "None"
      },
      "index_name": {
        "type": "string",
        "required": true,
        "description": "Name for the created search index"
      },
      "batch_size": {
        "type": "integer",
        "required": false,
        "description": "Number of products to process in each batch (100-10000)",
        "default": 1000
      },
      "extract_features": {
        "type": "boolean",
        "required": false,
        "description": "Extract visual features during indexing",
        "default": true
      },
      "enable_text_search": {
        "type": "boolean",
        "required": false,
        "description": "Enable text-based search capabilities",
        "default": true
      }
    },
    "error_messages": [
      "Catalog file not found: Verify the catalog_data_path exists and is accessible",
      "Missing required columns: Ensure product_id_column and image_url_column exist in the catalog",
      "Invalid batch size: Batch size must be between 100 and 10000",
      "Index creation failed: Unable to create search index, check permissions and disk space",
      "Feature extraction failed: Some products could not be processed due to invalid image URLs"
    ],
    "usage": "Provide catalog_data_path, product_id_column, image_url_column, and index_name. Optionally specify metadata columns and processing options. Creates searchable product index.",
    "output_details": {
      "index_id": {
        "type": "string",
        "description": "Unique identifier for the created index"
      },
      "indexed_products": {
        "type": "integer",
        "description": "Number of products successfully indexed"
      },
      "failed_products": {
        "type": "integer",
        "description": "Number of products that failed indexing"
      },
      "index_size": {
        "type": "number",
        "description": "Size of the created index in MB"
      },
      "processing_time": {
        "type": "number",
        "description": "Total indexing time in seconds"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Similarity Calculator",
    "tool_description": "Calculates similarity scores between query image features and indexed product features using various distance metrics and similarity algorithms.",
    "parameters": {
      "query_features": {
        "type": "array",
        "items": {
          "type": "number"
        },
        "required": true,
        "description": "Feature vector from query image"
      },
      "index_id": {
        "type": "string",
        "required": true,
        "description": "ID of the product index to search against"
      },
      "similarity_metric": {
        "type": "string",
        "required": false,
        "description": "Similarity metric: cosine, euclidean, manhattan, jaccard",
        "default": "cosine"
      },
      "top_k": {
        "type": "integer",
        "required": false,
        "description": "Number of top similar products to return (1-1000)",
        "default": 50
      },
      "min_similarity": {
        "type": "number",
        "required": false,
        "description": "Minimum similarity threshold (0.0-1.0)",
        "default": 0.1
      }
    },
    "error_messages": [
      "Invalid query features: Feature vector must be non-empty array of numbers",
      "Index not found: Specified index_id does not exist",
      "Invalid similarity metric: Use one of [cosine, euclidean, manhattan, jaccard]",
      "Invalid top_k value: Must be between 1 and 1000",
      "Invalid similarity threshold: Must be between 0.0 and 1.0"
    ],
    "usage": "Provide query_features array and index_id, optionally specify similarity_metric, top_k, and min_similarity. Returns ranked list of similar products with scores.",
    "output_details": {
      "similar_products": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of product IDs ranked by similarity"
      },
      "similarity_scores": {
        "type": "array",
        "items": {
          "type": "number"
        },
        "description": "Similarity scores corresponding to each product"
      },
      "search_time": {
        "type": "number",
        "description": "Time taken for similarity calculation in seconds"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Search Engine",
    "tool_description": "Performs comprehensive visual and text-based product searches combining multiple signals including visual similarity, category filters, and metadata matching.",
    "parameters": {
      "query_type": {
        "type": "string",
        "required": true,
        "description": "Type of search: visual_only, text_only, hybrid"
      },
      "index_id": {
        "type": "string",
        "required": true,
        "description": "ID of the product index to search"
      },
      "query_features": {
        "type": "array",
        "items": {
          "type": "number"
        },
        "required": false,
        "description": "Visual feature vector for visual or hybrid search",
        "default": "None"
      },
      "query_text": {
        "type": "string",
        "required": false,
        "description": "Text query for text or hybrid search",
        "default": "None"
      },
      "category_filter": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "required": false,
        "description": "Filter by specific product categories",
        "default": "None"
      },
      "price_range": {
        "type": "array",
        "items": {
          "type": "number"
        },
        "required": false,
        "description": "Price filter as [min_price, max_price]",
        "default": "None"
      },
      "brand_filter": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "required": false,
        "description": "Filter by specific brands",
        "default": "None"
      },
      "max_results": {
        "type": "integer",
        "required": false,
        "description": "Maximum number of results to return (1-500)",
        "default": 20
      }
    },
    "error_messages": [
      "Invalid query type: Use one of [visual_only, text_only, hybrid]",
      "Missing query data: Visual queries require query_features, text queries require query_text",
      "Index not found: Specified index_id does not exist",
      "Invalid price range: Must be array of two numbers [min, max] where min <= max",
      "Invalid max_results: Must be between 1 and 500"
    ],
    "usage": "Specify query_type and index_id, provide appropriate query data (query_features for visual, query_text for text), optionally add filters. Returns comprehensive search results.",
    "output_details": {
      "product_ids": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of matching product IDs"
      },
      "relevance_scores": {
        "type": "array",
        "items": {
          "type": "number"
        },
        "description": "Relevance scores for each product"
      },
      "total_matches": {
        "type": "integer",
        "description": "Total number of products matching the query"
      },
      "search_time": {
        "type": "number",
        "description": "Total search time in seconds"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Result Ranker",
    "tool_description": "Ranks and reorders search results using machine learning models that consider user preferences, product popularity, business rules, and contextual signals.",
    "parameters": {
      "product_ids": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "required": true,
        "description": "List of product IDs to rank"
      },
      "relevance_scores": {
        "type": "array",
        "items": {
          "type": "number"
        },
        "required": true,
        "description": "Initial relevance scores for each product"
      },
      "user_id": {
        "type": "string",
        "required": false,
        "description": "User ID for personalized ranking",
        "default": "None"
      },
      "ranking_model": {
        "type": "string",
        "required": false,
        "description": "Ranking model: popularity, personalized, business_rules, ml_hybrid",
        "default": "ml_hybrid"
      },
      "boost_popular": {
        "type": "boolean",
        "required": false,
        "description": "Boost popular products in ranking",
        "default": true
      },
      "boost_available": {
        "type": "boolean",
        "required": false,
        "description": "Boost products currently in stock",
        "default": true
      },
      "diversity_factor": {
        "type": "number",
        "required": false,
        "description": "Promote result diversity (0.0-1.0)",
        "default": 0.2
      }
    },
    "error_messages": [
      "Mismatched arrays: product_ids and relevance_scores must have same length",
      "Invalid ranking model: Use one of [popularity, personalized, business_rules, ml_hybrid]",
      "Invalid diversity factor: Must be between 0.0 and 1.0",
      "Empty product list: Must provide at least one product to rank"
    ],
    "usage": "Provide product_ids and relevance_scores arrays, optionally specify user_id and ranking preferences. Returns reordered product list with updated scores.",
    "output_details": {
      "ranked_product_ids": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Product IDs reordered by ranking algorithm"
      },
      "final_scores": {
        "type": "array",
        "items": {
          "type": "number"
        },
        "description": "Final ranking scores after all factors applied"
      },
      "ranking_factors": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of factors considered in ranking"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Result Formatter",
    "tool_description": "Formats search results for client applications by enriching product data with metadata, images, and presentation-ready information.",
    "parameters": {
      "product_ids": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "required": true,
        "description": "List of product IDs to format"
      },
      "index_id": {
        "type": "string",
        "required": true,
        "description": "Index ID to retrieve product metadata"
      },
      "include_images": {
        "type": "boolean",
        "required": false,
        "description": "Include product image URLs in results",
        "default": true
      },
      "include_prices": {
        "type": "boolean",
        "required": false,
        "description": "Include price information in results",
        "default": true
      },
      "include_descriptions": {
        "type": "boolean",
        "required": false,
        "description": "Include product descriptions in results",
        "default": false
      }
    },
    "error_messages": [
      "Index not found: Specified index_id does not exist",
      "Empty product list: Must provide at least one product ID",
      "Product data unavailable: Some products could not be retrieved from index"
    ],
    "usage": "Provide product_ids array and index_id, specify which metadata fields to include. Returns formatted product information ready for display.",
    "output_details": {
      "formatted_results": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "JSON strings containing formatted product data"
      },
      "result_count": {
        "type": "integer",
        "description": "Number of successfully formatted results"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Embedding Generator",
    "tool_description": "Generates dense vector embeddings from visual features and product metadata for improved similarity matching and machine learning applications.",
    "parameters": {
      "input_features": {
        "type": "array",
        "items": {
          "type": "number"
        },
        "required": true,
        "description": "Input feature vector to embed"
      },
      "embedding_model": {
        "type": "string",
        "required": false,
        "description": "Embedding model: autoencoder, transformer, pca, umap",
        "default": "autoencoder"
      },
      "embedding_dimension": {
        "type": "integer",
        "required": false,
        "description": "Target embedding dimension (64-1024)",
        "default": 256
      },
      "normalize_output": {
        "type": "boolean",
        "required": false,
        "description": "Apply L2 normalization to output embeddings",
        "default": true
      }
    },
    "error_messages": [
      "Invalid input features: Must provide non-empty array of numerical features",
      "Invalid embedding model: Use one of [autoencoder, transformer, pca, umap]",
      "Invalid embedding dimension: Must be between 64 and 1024",
      "Embedding generation failed: Model could not process the input features"
    ],
    "usage": "Provide input_features array, optionally specify embedding_model, embedding_dimension, and normalize_output. Returns dense vector embedding.",
    "output_details": {
      "embedding_vector": {
        "type": "array",
        "items": {
          "type": "number"
        },
        "description": "Generated embedding vector"
      },
      "embedding_dimension": {
        "type": "integer",
        "description": "Actual dimension of the embedding vector"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Performance Monitor",
    "tool_description": "Monitors and analyzes the performance of visual search operations including response times, accuracy metrics, and system resource usage.",
    "parameters": {
      "metric_types": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "required": true,
        "description": "Metrics to monitor: response_time, accuracy, throughput, memory_usage, cache_hit_rate"
      },
      "time_window": {
        "type": "string",
        "required": false,
        "description": "Time window for metrics: 1h, 6h, 24h, 7d",
        "default": "1h"
      },
      "aggregation": {
        "type": "string",
        "required": false,
        "description": "Aggregation method: avg, min, max, p50, p95, p99",
        "default": "avg"
      }
    },
    "error_messages": [
      "Invalid metric types: Use valid metrics [response_time, accuracy, throughput, memory_usage, cache_hit_rate]",
      "Invalid time window: Use one of [1h, 6h, 24h, 7d]",
      "Invalid aggregation: Use one of [avg, min, max, p50, p95, p99]",
      "Insufficient data: Not enough data points for the specified time window"
    ],
    "usage": "Specify metric_types array and optionally time_window and aggregation method. Returns performance metrics for the visual search system.",
    "output_details": {
      "metrics": {
        "type": "array",
        "items": {
          "type": "number"
        },
        "description": "Metric values corresponding to requested types"
      },
      "metric_names": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Names of the metrics returned"
      },
      "timestamp": {
        "type": "string",
        "description": "Timestamp of the metrics snapshot"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Cache Manager",
    "tool_description": "Manages caching of frequently accessed features, embeddings, and search results to improve response times and reduce computational overhead.",
    "parameters": {
      "operation": {
        "type": "string",
        "required": true,
        "description": "Cache operation: store, retrieve, invalidate, clear, stats"
      },
      "cache_key": {
        "type": "string",
        "required": false,
        "description": "Unique key for cache entry",
        "default": "None"
      },
      "cache_value": {
        "type": "string",
        "required": false,
        "description": "Value to store in cache (JSON string)",
        "default": "None"
      },
      "ttl_seconds": {
        "type": "integer",
        "required": false,
        "description": "Time to live in seconds (60-86400)",
        "default": 3600
      }
    },
    "error_messages": [
      "Invalid operation: Use one of [store, retrieve, invalidate, clear, stats]",
      "Missing cache key: store, retrieve, and invalidate operations require cache_key",
      "Missing cache value: store operation requires cache_value",
      "Invalid TTL: TTL must be between 60 and 86400 seconds",
      "Cache operation failed: Unable to perform the requested cache operation"
    ],
    "usage": "Specify operation type, provide cache_key for store/retrieve/invalidate operations, cache_value for store operations. Optionally set TTL for stored items.",
    "output_details": {
      "success": {
        "type": "boolean",
        "description": "Whether the cache operation succeeded"
      },
      "cache_value": {
        "type": "string",
        "description": "Retrieved value for retrieve operations"
      },
      "cache_stats": {
        "type": "string",
        "description": "JSON string with cache statistics"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Analytics Tracker",
    "tool_description": "Tracks user interactions, search patterns, and conversion metrics to provide insights for improving visual search performance and user experience.",
    "parameters": {
      "event_type": {
        "type": "string",
        "required": true,
        "description": "Event to track: search, click, view, purchase, bounce"
      },
      "user_id": {
        "type": "string",
        "required": false,
        "description": "Unique user identifier",
        "default": "None"
      },
      "session_id": {
        "type": "string",
        "required": true,
        "description": "User session identifier"
      },
      "product_id": {
        "type": "string",
        "required": false,
        "description": "Product ID for product-related events",
        "default": "None"
      },
      "query_id": {
        "type": "string",
        "required": false,
        "description": "Search query identifier",
        "default": "None"
      },
      "timestamp": {
        "type": "string",
        "required": false,
        "description": "Event timestamp in ISO format",
        "default": "None"
      }
    },
    "error_messages": [
      "Invalid event type: Use one of [search, click, view, purchase, bounce]",
      "Missing session ID: All events require a valid session_id",
      "Invalid timestamp format: Use ISO 8601 date-time format",
      "Tracking failed: Unable to record the analytics event"
    ],
    "usage": "Specify event_type and session_id, optionally provide user_id, product_id, query_id, and timestamp. Records analytics event for later analysis.",
    "output_details": {
      "event_id": {
        "type": "string",
        "description": "Unique identifier for the recorded event"
      },
      "success": {
        "type": "boolean",
        "description": "Whether the event was successfully recorded"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "A/B Test Manager",
    "tool_description": "Manages A/B testing experiments for different visual search algorithms, ranking strategies, and user interface variations to optimize performance.",
    "parameters": {
      "operation": {
        "type": "string",
        "required": true,
        "description": "A/B test operation: create, assign, record_outcome, analyze, end"
      },
      "experiment_id": {
        "type": "string",
        "required": false,
        "description": "Unique identifier for the experiment",
        "default": "None"
      },
      "user_id": {
        "type": "string",
        "required": false,
        "description": "User ID for assignment and outcome recording",
        "default": "None"
      },
      "variant_configs": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "required": false,
        "description": "JSON strings defining test variants",
        "default": "None"
      },
      "traffic_split": {
        "type": "array",
        "items": {
          "type": "number"
        },
        "required": false,
        "description": "Traffic allocation percentages for each variant",
        "default": "None"
      },
      "outcome_metric": {
        "type": "string",
        "required": false,
        "description": "Metric to track: click_rate, conversion_rate, engagement_time",
        "default": "None"
      },
      "outcome_value": {
        "type": "number",
        "required": false,
        "description": "Outcome value to record",
        "default": "None"
      }
    },
    "error_messages": [
      "Invalid operation: Use one of [create, assign, record_outcome, analyze, end]",
      "Missing experiment config: create operation requires variant_configs and traffic_split",
      "Invalid traffic split: Traffic percentages must sum to 100",
      "Experiment not found: Specified experiment_id does not exist",
      "Missing outcome data: record_outcome requires outcome_metric and outcome_value"
    ],
    "usage": "Specify operation and relevant parameters for each A/B test action. Create experiments with variant_configs, assign users, record outcomes, and analyze results.",
    "output_details": {
      "experiment_id": {
        "type": "string",
        "description": "Experiment identifier"
      },
      "assigned_variant": {
        "type": "string",
        "description": "Variant assigned to user"
      },
      "test_results": {
        "type": "string",
        "description": "JSON string with experiment analysis results"
      },
      "success": {
        "type": "boolean",
        "description": "Whether the operation succeeded"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Feedback Collector",
    "tool_description": "Collects and processes user feedback on search results to improve matching algorithms through explicit ratings and implicit behavioral signals.",
    "parameters": {
      "feedback_type": {
        "type": "string",
        "required": true,
        "description": "Type of feedback: explicit_rating, implicit_click, implicit_purchase, relevance_judgment"
      },
      "query_id": {
        "type": "string",
        "required": true,
        "description": "Search query identifier"
      },
