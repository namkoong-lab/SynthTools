field_name: app_automation
subfield: web_application_testing
task: Functional testing of web application user interfaces and workflows
tool_description: |-
  **STEP 1 — Rate task difficulty**

  This task is **hard** due to the broad scope of testing different UI components and workflows, high ambiguity in test scenarios and expected behaviors, complex dependencies between UI elements and backend systems, high risk of missing critical bugs that could affect user experience, and significant infrastructure requirements for test environments and browser automation.

  **STEP 2 — Set a tool budget**

  Given the hard difficulty rating, I'll target **17 tools** to cover the comprehensive needs of functional web application testing, including test planning, execution, validation, reporting, and maintenance workflows.

  **STEP 3 — List all tool names and dependencies**

  1. **Test Case Generator** - Consumes: requirements, UI specs → Produces: test cases
  2. **Element Locator** - Consumes: page source, selector criteria → Produces: element references
  3. **Form Data Populator** - Consumes: form fields, test data → Produces: populated forms
  4. **Click Action Executor** - Consumes: element references → Produces: click results
  5. **Navigation Controller** - Consumes: URLs, navigation commands → Produces: page states
  6. **Text Content Validator** - Consumes: page content, expected text → Produces: validation results
  7. **Screenshot Comparator** - Consumes: current screenshot, baseline image → Produces: visual diff results
  8. **Wait Condition Manager** - Consumes: wait criteria, timeout settings → Produces: element readiness status
  9. **Cookie Session Handler** - Consumes: cookie data, session parameters → Produces: session states
  10. **Form Submission Tester** - Consumes: form data, submission parameters → Produces: submission results
  11. **URL Response Validator** - Consumes: URLs, expected responses → Produces: response validation
  12. **Cross Browser Runner** - Consumes: test cases, browser configurations → Produces: multi-browser results
  13. **Test Data Generator** - Consumes: data schemas, generation rules → Produces: test datasets
  14. **Error Log Analyzer** - Consumes: browser logs, error patterns → Produces: error analysis
  15. **Test Report Builder** - Consumes: test results, metadata → Produces: formatted reports
  16. **Workflow Sequence Runner** - Consumes: test sequences, execution parameters → Produces: workflow results
  17. **Accessibility Checker** - Consumes: page elements, accessibility rules → Produces: compliance results

  **STEP 4 — Multi-tool plans**

  **Simple Plans:**
  1. Basic form testing: Test Data Generator → Form Data Populator → Form Submission Tester → Text Content Validator
  2. Link validation: Element Locator → Click Action Executor → Navigation Controller → URL Response Validator

  **Medium Plans:**
  1. Login workflow testing: Test Data Generator → Form Data Populator → Form Submission Tester → Cookie Session Handler → Navigation Controller → Text Content Validator
  2. Visual regression testing: Navigation Controller → Wait Condition Manager → Screenshot Comparator → Test Report Builder → Error Log Analyzer

  **Complex Plans:**
  1. Complete E2E user journey: Test Case Generator → Test Data Generator → Navigation Controller → Element Locator → Form Data Populator → Form Submission Tester → Wait Condition Manager → Text Content Validator → Cookie Session Handler → Screenshot Comparator → Cross Browser Runner → Test Report Builder
  2. Comprehensive accessibility audit: Navigation Controller → Element Locator → Accessibility Checker → Text Content Validator → Screenshot Comparator → Error Log Analyzer → Test Report Builder → Cross Browser Runner

  **STEP 5 — Produce tools**

  ```json
  {
    "tool_name": "Test Case Generator",
    "tool_description": "Generates comprehensive test cases based on application requirements, user stories, and UI specifications for functional testing scenarios.",
    "parameters": {
      "application_type": {
        "type": "string",
        "required": true,
        "description": "Type of web application (e-commerce, social media, enterprise, blog, portfolio)"
      },
      "user_stories": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "required": true,
        "description": "List of user stories or requirements to generate test cases for",
        "minItems": 1,
        "maxItems": 50
      },
      "test_priority": {
        "type": "string",
        "required": false,
        "default": "medium",
        "description": "Priority level for test case generation (low, medium, high, critical)"
      },
      "include_negative_tests": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Whether to include negative test scenarios"
      },
      "browser_compatibility": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "required": false,
        "default": ["chrome"],
        "description": "Target browsers for testing (chrome, firefox, safari, edge)"
      }
    },
    "error_messages": [
      "Invalid application type: Must be one of e-commerce, social media, enterprise, blog, portfolio",
      "Empty user stories: At least one user story must be provided",
      "Invalid test priority: Must be one of low, medium, high, critical",
      "Invalid browser specified: Use supported browsers chrome, firefox, safari, edge",
      "Too many user stories: Maximum 50 user stories allowed per generation"
    ],
    "usage": "Provide application_type and user_stories array. Optionally set test_priority, include_negative_tests, and browser_compatibility. The tool generates structured test cases with steps, expected results, and metadata.",
    "output_details": {
      "test_cases": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Generated test cases with identifiers"
      },
      "total_cases": {
        "type": "integer",
        "description": "Total number of test cases generated"
      },
      "priority_distribution": {
        "type": "string",
        "description": "Summary of test cases by priority levels"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Element Locator",
    "tool_description": "Locates web elements using various selector strategies and validates their presence and accessibility for interaction.",
    "parameters": {
      "page_url": {
        "type": "string",
        "required": true,
        "description": "URL of the web page to search for elements"
      },
      "selector_type": {
        "type": "string",
        "required": true,
        "description": "Type of selector to use (id, class, xpath, css, text, tag)"
      },
      "selector_value": {
        "type": "string",
        "required": true,
        "description": "The actual selector value or text to locate the element"
      },
      "wait_timeout": {
        "type": "integer",
        "required": false,
        "default": 10,
        "description": "Maximum time in seconds to wait for element to appear"
      }
    },
    "error_messages": [
      "Invalid URL format: Provide a valid HTTP/HTTPS URL",
      "Unsupported selector type: Use one of id, class, xpath, css, text, tag",
      "Element not found: No element matches the provided selector within timeout period",
      "Invalid timeout value: Timeout must be between 1 and 120 seconds",
      "Page load failed: Unable to load the specified URL"
    ],
    "usage": "Provide page_url, selector_type, and selector_value to locate an element. Optionally set wait_timeout for dynamic content. Returns element reference and properties if found.",
    "output_details": {
      "element_found": {
        "type": "boolean",
        "description": "Whether the element was successfully located"
      },
      "element_id": {
        "type": "string",
        "description": "Unique identifier for the located element"
      },
      "element_properties": {
        "type": "string",
        "description": "Summary of element properties like tag, attributes, visibility"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Form Data Populator",
    "tool_description": "Populates web forms with test data, handling various input types including text fields, dropdowns, checkboxes, and file uploads.",
    "parameters": {
      "form_selector": {
        "type": "string",
        "required": true,
        "description": "CSS selector or ID of the form to populate"
      },
      "field_data": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "required": true,
        "description": "Array of field data in format 'field_name:value'",
        "minItems": 1,
        "maxItems": 100
      },
      "clear_existing": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Whether to clear existing field values before populating"
      },
      "validate_fields": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Whether to validate field requirements and constraints"
      },
      "submission_delay": {
        "type": "integer",
        "required": false,
        "default": 0,
        "description": "Delay in milliseconds between field inputs to simulate human behavior"
      },
      "file_upload_paths": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "required": false,
        "default": null,
        "description": "Array of file paths for file upload fields in format 'field_name:file_path'"
      },
      "dropdown_selections": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "required": false,
        "default": null,
        "description": "Array of dropdown selections in format 'field_name:option_value'"
      },
      "checkbox_states": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "required": false,
        "default": null,
        "description": "Array of checkbox states in format 'field_name:true/false'"
      },
      "radio_selections": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "required": false,
        "default": null,
        "description": "Array of radio button selections in format 'field_name:value'"
      },
      "date_inputs": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "required": false,
        "default": null,
        "description": "Array of date inputs in format 'field_name:YYYY-MM-DD'"
      },
      "text_area_data": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "required": false,
        "default": null,
        "description": "Array of textarea content in format 'field_name:text_content'"
      },
      "number_inputs": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "required": false,
        "default": null,
        "description": "Array of number inputs in format 'field_name:numeric_value'"
      }
    },
    "error_messages": [
      "Form not found: No form element matches the provided selector",
      "Invalid field data format: Use 'field_name:value' format for field_data entries",
      "Field not found: One or more specified fields do not exist in the form",
      "Invalid file path: One or more file upload paths are not accessible",
      "Field validation failed: One or more fields failed validation constraints",
      "Invalid date format: Date inputs must be in YYYY-MM-DD format",
      "Invalid number format: Number inputs must contain valid numeric values",
      "Form interaction failed: Unable to interact with form elements due to page state"
    ],
    "usage": "Provide form_selector and field_data array with field names and values. Use additional arrays for specific input types like dropdowns, checkboxes, file uploads. The tool handles different input types automatically and provides validation feedback.",
    "output_details": {
      "fields_populated": {
        "type": "integer",
        "description": "Number of fields successfully populated"
      },
      "validation_results": {
        "type": "string",
        "description": "Summary of field validation results and any errors"
      },
      "form_status": {
        "type": "string",
        "description": "Overall status of form population (success, partial, failed)"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Click Action Executor",
    "tool_description": "Executes click actions on web elements with support for different click types, coordination, and interaction validation.",
    "parameters": {
      "element_selector": {
        "type": "string",
        "required": true,
        "description": "CSS selector, ID, or XPath of the element to click"
      },
      "click_type": {
        "type": "string",
        "required": false,
        "default": "single",
        "description": "Type of click action (single, double, right, middle)"
      },
      "wait_before_click": {
        "type": "integer",
        "required": false,
        "default": 0,
        "description": "Milliseconds to wait before executing click"
      },
      "force_click": {
        "type": "boolean",
        "required": false,
        "default": false,
        "description": "Force click even if element is not visible or interactable"
      }
    },
    "error_messages": [
      "Element not found: No element matches the provided selector",
      "Element not clickable: Element is not visible or interactable",
      "Invalid click type: Must be one of single, double, right, middle",
      "Click action failed: Unable to execute click due to page state or element state",
      "Invalid wait time: wait_before_click must be between 0 and 30000 milliseconds"
    ],
    "usage": "Provide element_selector to click an element. Optionally specify click_type, wait_before_click, and force_click. The tool validates element state and executes the click action with appropriate feedback.",
    "output_details": {
      "click_executed": {
        "type": "boolean",
        "description": "Whether the click action was successfully executed"
      },
      "element_state": {
        "type": "string",
        "description": "State of the element before click (visible, hidden, disabled, etc.)"
      },
      "page_response": {
        "type": "string",
        "description": "Summary of page response after click (navigation, modal, content change)"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Navigation Controller",
    "tool_description": "Controls browser navigation including page loading, back/forward actions, refresh, and URL validation with performance monitoring.",
    "parameters": {
      "action": {
        "type": "string",
        "required": true,
        "description": "Navigation action (goto, back, forward, refresh, close)"
      },
      "url": {
        "type": "string",
        "required": false,
        "default": null,
        "description": "Target URL for goto action"
      },
      "wait_for_load": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Whether to wait for page to fully load"
      },
      "timeout": {
        "type": "integer",
        "required": false,
        "default": 30,
        "description": "Maximum time in seconds to wait for page load"
      },
      "validate_ssl": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Whether to validate SSL certificates for HTTPS URLs"
      }
    },
    "error_messages": [
      "Invalid navigation action: Must be one of goto, back, forward, refresh, close",
      "URL required for goto action: Provide a valid URL when using goto action",
      "Invalid URL format: URL must be a valid HTTP/HTTPS address",
      "Page load timeout: Page failed to load within the specified timeout",
      "Navigation failed: Unable to complete navigation action",
      "SSL validation failed: SSL certificate is invalid or expired",
      "Invalid timeout value: Timeout must be between 5 and 120 seconds"
    ],
    "usage": "Provide action type (goto, back, forward, refresh, close). For goto action, also provide url. Optionally set wait_for_load, timeout, and validate_ssl. The tool executes navigation and reports results with performance metrics.",
    "output_details": {
      "navigation_success": {
        "type": "boolean",
        "description": "Whether navigation was successful"
      },
      "current_url": {
        "type": "string",
        "description": "Current URL after navigation"
      },
      "page_load_time": {
        "type": "number",
        "description": "Time in seconds taken to load the page"
      },
      "response_status": {
        "type": "integer",
        "description": "HTTP response status code"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Text Content Validator",
    "tool_description": "Validates text content on web pages including exact matches, partial matches, regular expressions, and text formatting checks.",
    "parameters": {
      "validation_type": {
        "type": "string",
        "required": true,
        "description": "Type of validation (contains, exact, regex, not_contains, starts_with, ends_with)"
      },
      "expected_text": {
        "type": "string",
        "required": true,
        "description": "Text or pattern to validate against"
      },
      "element_selector": {
        "type": "string",
        "required": false,
        "default": "body",
        "description": "CSS selector to limit search scope (default is entire page)"
      },
      "case_sensitive": {
        "type": "boolean",
        "required": false,
        "default": false,
        "description": "Whether text comparison should be case sensitive"
      },
      "trim_whitespace": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Whether to trim leading/trailing whitespace before comparison"
      }
    },
    "error_messages": [
      "Invalid validation type: Must be one of contains, exact, regex, not_contains, starts_with, ends_with",
      "Empty expected text: expected_text parameter cannot be empty",
      "Invalid regex pattern: Provided regular expression pattern is invalid",
      "Element not found: No element matches the provided selector",
      "Text validation failed: Expected text was not found or does not match criteria"
    ],
    "usage": "Provide validation_type and expected_text to validate page content. Optionally specify element_selector to limit scope, and set case_sensitive and trim_whitespace options. The tool returns validation results with detailed comparison information.",
    "output_details": {
      "validation_passed": {
        "type": "boolean",
        "description": "Whether the text validation passed"
      },
      "found_text": {
        "type": "string",
        "description": "Actual text found during validation"
      },
      "match_count": {
        "type": "integer",
        "description": "Number of matches found for the validation criteria"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Screenshot Comparator",
    "tool_description": "Captures screenshots and compares them with baseline images for visual regression testing with difference highlighting and similarity scoring.",
    "parameters": {
      "comparison_type": {
        "type": "string",
        "required": true,
        "description": "Type of comparison (full_page, element, viewport, mobile)"
      },
      "baseline_name": {
        "type": "string",
        "required": true,
        "description": "Name or path of the baseline image for comparison"
      },
      "element_selector": {
        "type": "string",
        "required": false,
        "default": null,
        "description": "CSS selector for element screenshot (required for element comparison)"
      },
      "similarity_threshold": {
        "type": "number",
        "required": false,
        "default": 0.95,
        "description": "Minimum similarity score (0.0-1.0) to consider images matching"
      },
      "ignore_colors": {
        "type": "boolean",
        "required": false,
        "default": false,
        "description": "Whether to ignore color differences and compare only structure"
      }
    },
    "error_messages": [
      "Invalid comparison type: Must be one of full_page, element, viewport, mobile",
      "Baseline image not found: No baseline image exists with the provided name",
      "Element selector required: element_selector is required for element comparison type",
      "Element not found: No element matches the provided selector",
      "Invalid similarity threshold: Must be between 0.0 and 1.0",
      "Screenshot capture failed: Unable to capture screenshot due to page state"
    ],
    "usage": "Provide comparison_type and baseline_name. For element comparison, also provide element_selector. Optionally set similarity_threshold and ignore_colors. The tool captures current screenshot and compares with baseline, returning similarity metrics.",
    "output_details": {
      "comparison_passed": {
        "type": "boolean",
        "description": "Whether the images match within the similarity threshold"
      },
      "similarity_score": {
        "type": "number",
        "description": "Similarity score between 0.0 and 1.0"
      },
      "difference_summary": {
        "type": "string",
        "description": "Summary of visual differences found"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Wait Condition Manager",
    "tool_description": "Manages various wait conditions for dynamic web content including element visibility, text presence, and page state changes.",
    "parameters": {
      "condition_type": {
        "type": "string",
        "required": true,
        "description": "Type of wait condition (element_visible, element_clickable, text_present, url_contains, alert_present, page_loaded)"
      },
      "target_value": {
        "type": "string",
        "required": true,
        "description": "Target value for the condition (element selector, text, URL fragment, etc.)"
      },
      "timeout_seconds": {
        "type": "integer",
        "required": false,
        "default": 10,
        "description": "Maximum time to wait for condition"
      },
      "poll_frequency": {
        "type": "number",
        "required": false,
        "default": 0.5,
        "description": "Time in seconds between condition checks"
      }
    },
    "error_messages": [
      "Invalid condition type: Must be one of element_visible, element_clickable, text_present, url_contains, alert_present, page_loaded",
      "Empty target value: target_value parameter cannot be empty",
      "Timeout exceeded: Condition was not met within the specified timeout",
      "Invalid timeout: timeout_seconds must be between 1 and 300",
      "Invalid poll frequency: poll_frequency must be between 0.1 and 5.0",
      "Condition check failed: Unable to evaluate condition due to page state"
    ],
    "usage": "Provide condition_type and target_value to wait for a specific condition. Optionally set timeout_seconds and poll_frequency. The tool monitors the condition and returns when met or timeout is reached.",
    "output_details": {
      "condition_met": {
        "type": "boolean",
        "description": "Whether the wait condition was successfully met"
      },
      "wait_time": {
        "type": "number",
        "description": "Actual time in seconds waited before condition was met"
      },
      "final_state": {
        "type": "string",
        "description": "Final state when condition was met or timeout occurred"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Cookie Session Handler",
    "tool_description": "Manages browser cookies and sessions including setting, getting, deleting cookies, and session state management for authentication testing.",
    "parameters": {
      "action": {
        "type": "string",
        "required": true,
        "description": "Cookie action (set, get, delete, clear_all, export_session, import_session)"
      },
      "cookie_name": {
        "type": "string",
        "required": false,
        "default": null,
        "description": "Name of specific cookie (required for set, get, delete actions)"
      },
      "cookie_value": {
        "type": "string",
        "required": false,
        "default": null,
        "description": "Value of cookie (required for set action)"
      },
      "domain": {
        "type": "string",
        "required": false,
        "default": null,
        "description": "Domain for cookie (optional for set action)"
      },
      "path": {
        "type": "string",
        "required": false,
        "default": "/",
        "description": "Path for cookie (optional for set action)"
      },
      "expires": {
        "type": "string",
        "required": false,
        "default": null,
        "description": "Expiration time in ISO format (optional for set action)",
        "format": "date-time"
      },
      "session_data": {
        "type": "string",
        "required": false,
        "default": null,
        "description": "JSON string of session data (required for import_session)"
      }
    },
    "error_messages": [
      "Invalid action: Must be one of set, get, delete, clear_all, export_session, import_session",
      "Cookie name required: cookie_name is required for set, get, and delete actions",
      "Cookie value required: cookie_value is required for set action",
      "Invalid expiration format: expires must be in valid ISO date-time format",
      "Cookie not found: No cookie exists with the specified name",
      "Invalid session data: session_data must be valid JSON string for import action",
      "Cookie operation failed: Unable to complete cookie operation"
    ],
    "usage": "Provide action type and relevant parameters based on the action. For set action, provide cookie_name and cookie_value. For get/delete, provide cookie_name. For import_session, provide session_data. The tool manages cookies and returns operation results.",
    "output_details": {
      "operation_success": {
        "type": "boolean",
        "description": "Whether the cookie operation was successful"
      },
      "cookie_data": {
        "type": "string",
        "description": "Cookie data or session information based on action"
      },
      "cookies_count": {
        "type": "integer",
        "description": "Number of cookies affected by the operation"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Form Submission Tester",
    "tool_description": "Tests form submissions with validation, error handling, and response verification for various submission methods and scenarios.",
    "parameters": {
      "form_selector": {
        "type": "string",
        "required": true,
        "description": "CSS selector or ID of the form to submit"
      },
      "submission_method": {
        "type": "string",
        "required": false,
        "default": "click",
        "description": "Method to submit form (click, enter, javascript)"
      },
      "submit_button_selector": {
        "type": "string",
        "required": false,
        "default": null,
        "description": "Selector for submit button (required for click method)"
      },
      "expected_response": {
        "type": "string",
        "required": false,
        "default": "success",
        "description": "Expected response type (success, error, redirect, validation_error)"
      },
      "wait_for_response": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Whether to wait for form submission response"
      }
    },
    "error_messages": [
      "Form not found: No form element matches the provided selector",
      "Invalid submission method: Must be one of click, enter, javascript",
      "Submit button required: submit_button_selector is required for click method",
      "Submit button not found: No submit button matches the provided selector",
      "Form submission failed: Unable to submit form due to validation or technical errors",
      "Invalid expected response: Must be one of success, error, redirect, validation_error",
      "Response timeout: No response received within timeout period"
    ],
    "usage": "Provide form_selector to identify the form. For click submission, also provide submit_button_selector. Optionally set submission_method, expected_response, and wait_for_response. The tool submits the form and validates the response.",
    "output_details": {
      "submission_success": {
        "type": "boolean",
        "description": "Whether the form was successfully submitted"
      },
      "response_type": {
        "type": "string",
        "description": "Type of response received (success, error, redirect, etc.)"
      },
      "response_message": {
        "type": "string",
        "description": "Response message or error details from the submission"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "URL Response Validator",
    "tool_description": "Validates URL responses including HTTP status codes, response times, headers, and content verification for link testing and API endpoint validation.",
    "parameters": {
      "url": {
        "type": "string",
        "required": true,
        "description": "URL to validate and test"
      },
      "expected_status": {
        "type": "integer",
        "required": false,
        "default": 200,
        "description": "Expected HTTP status code"
      },
      "max_response_time": {
        "type": "number",
        "required": false,
        "default": 5.0,
        "description": "Maximum acceptable response time in seconds"
      },
      "follow_redirects": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Whether to follow HTTP redirects"
      },
      "verify_ssl": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Whether to verify SSL certificates"
      }
    },
    "error_messages": [
      "Invalid URL format: Provide a valid HTTP/HTTPS URL",
      "Connection failed: Unable to connect to the specified URL",
      "Status code mismatch: Received status code does not match expected status",
      "Response timeout: Response time exceeded the maximum allowed time",
      "SSL verification failed: SSL certificate is invalid or expired",
      "Invalid expected status: HTTP status code must be between 100 and 599",
      "Invalid response time limit: max_response_time must be between 0.1 and 120 seconds"
    ],
    "usage": "Provide url to test. Optionally set expected_status, max_response_time, follow_redirects, and verify_ssl. The tool makes HTTP request and validates response against specified criteria.",
    "output_details": {
      "validation_passed": {
        "type": "boolean",
        "description": "Whether URL response validation passed"
      },
      "status_code": {
        "type": "integer",
        "description": "HTTP status code received"
      },
      "response_time": {
        "type": "number",
        "description": "Response time in seconds"
      },
      "final_url": {
        "type": "string",
        "description": "Final URL after following redirects"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Cross Browser Runner",
    "tool_
