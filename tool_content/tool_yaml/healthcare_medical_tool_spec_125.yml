field_name: healthcare_medical
subfield: Medical Imaging and Radiology
task: DICOM file processing, validation, and metadata extraction
tool_description: |-
  **STEP 1 — Rate task difficulty**

  This task involves complex medical data standards (DICOM), strict compliance requirements, multi-modal imaging support, and critical accuracy for patient safety. The scope includes file validation, metadata extraction, anonymization, and integration with medical systems, making this a **hard** difficulty task.

  **STEP 2 — Set a tool budget**

  Given the hard difficulty rating, I'm targeting **17 tools** to handle the comprehensive workflow of DICOM processing, validation, and metadata management.

  **STEP 3 — List all tool names with dependencies and affordances**

  1. **DICOM_File_Validator** - Consumes: DICOM files → Produces: validation status, compliance reports
  2. **DICOM_Header_Extractor** - Consumes: validated DICOM files → Produces: structured metadata
  3. **DICOM_Anonymizer** - Consumes: DICOM files, anonymization rules → Produces: de-identified DICOM files
  4. **Image_Quality_Assessor** - Consumes: DICOM image data → Produces: quality metrics, artifacts detection
  5. **DICOM_Series_Organizer** - Consumes: multiple DICOM files → Produces: organized series structure
  6. **Pixel_Data_Extractor** - Consumes: DICOM files → Produces: raw pixel arrays, image properties
  7. **DICOM_Tag_Editor** - Consumes: DICOM files, tag modifications → Produces: modified DICOM files
  8. **Modality_Specific_Validator** - Consumes: DICOM files, modality type → Produces: modality-specific validation
  9. **DICOM_Compression_Handler** - Consumes: DICOM files, compression settings → Produces: compressed/decompressed files
  10. **Study_Metadata_Aggregator** - Consumes: series metadata → Produces: study-level summaries
  11. **DICOM_Format_Converter** - Consumes: DICOM files, target format → Produces: converted image files
  12. **Patient_Data_Extractor** - Consumes: DICOM headers → Produces: patient demographics, study info
  13. **DICOM_Integrity_Checker** - Consumes: DICOM files → Produces: corruption status, repair recommendations
  14. **Acquisition_Parameter_Analyzer** - Consumes: DICOM metadata → Produces: imaging protocol analysis
  15. **DICOM_Batch_Processor** - Consumes: file lists, processing workflows → Produces: batch processing results
  16. **DICOM_Compliance_Reporter** - Consumes: validation results → Produces: regulatory compliance reports
  17. **DICOM_Database_Indexer** - Consumes: processed DICOM metadata → Produces: searchable database entries

  **STEP 4 — Multi-tool plans**

  **Simple Plans:**
  1. **Basic File Validation**: DICOM_File_Validator → DICOM_Compliance_Reporter (validate single file and generate report)
  2. **Quick Metadata Extraction**: DICOM_File_Validator → DICOM_Header_Extractor (validate then extract basic metadata)

  **Medium Plans:**
  1. **Patient Data Processing**: DICOM_File_Validator → DICOM_Header_Extractor → Patient_Data_Extractor → DICOM_Anonymizer (complete patient data workflow)
  2. **Quality Assessment Pipeline**: DICOM_File_Validator → Image_Quality_Assessor → Acquisition_Parameter_Analyzer → Study_Metadata_Aggregator (comprehensive quality analysis)

  **Complex Plans:**
  1. **Complete DICOM Processing Workflow**: DICOM_File_Validator → DICOM_Series_Organizer → DICOM_Header_Extractor → Image_Quality_Assessor → DICOM_Anonymizer → DICOM_Database_Indexer (full processing pipeline)
  2. **Research Dataset Preparation**: DICOM_Batch_Processor → DICOM_Integrity_Checker → Modality_Specific_Validator → DICOM_Anonymizer → DICOM_Format_Converter → Study_Metadata_Aggregator (prepare large datasets for research)

  **STEP 5 — Produce tools**

  ```json
  {
    "tool_name": "DICOM_File_Validator",
    "tool_description": "Validates DICOM files for format compliance, structural integrity, and standard conformance according to DICOM PS3 specifications.",
    "parameters": {
      "file_path": {
        "type": "string",
        "required": true,
        "description": "Path to the DICOM file to validate"
      },
      "strict_mode": {
        "type": "boolean",
        "required": false,
        "description": "Enable strict validation against DICOM standards",
        "default": true
      }
    },
    "error_messages": [
      "File not found: The specified DICOM file path does not exist. Verify the file path is correct.",
      "Invalid file format: File is not a valid DICOM format. Ensure the file has proper DICOM headers.",
      "Corrupted file: DICOM file appears corrupted or truncated. Check file integrity and re-transfer if needed."
    ],
    "usage": "Provide file_path to a DICOM file and optionally set strict_mode for validation level. Returns validation status and detailed compliance information.",
    "output_details": {
      "is_valid": {
        "type": "boolean",
        "description": "Whether the DICOM file passes validation"
      },
      "compliance_level": {
        "type": "string",
        "description": "DICOM compliance level (strict, standard, loose)"
      },
      "errors_found": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of validation errors discovered"
      },
      "warnings": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of validation warnings"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "DICOM_Header_Extractor",
    "tool_description": "Extracts and structures metadata from DICOM file headers, including patient information, study details, and technical parameters.",
    "parameters": {
      "file_path": {
        "type": "string",
        "required": true,
        "description": "Path to the validated DICOM file"
      },
      "include_private_tags": {
        "type": "boolean",
        "required": false,
        "description": "Whether to include manufacturer-specific private tags",
        "default": false
      },
      "tag_groups": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "required": false,
        "description": "Specific DICOM tag groups to extract (e.g., 0010, 0008, 0020)",
        "default": "None"
      }
    },
    "error_messages": [
      "File access error: Cannot read the specified DICOM file. Check file permissions and availability.",
      "Invalid DICOM structure: File lacks proper DICOM header structure. Validate file first.",
      "Tag parsing error: Unable to parse specific DICOM tags. File may have non-standard tag formatting."
    ],
    "usage": "Provide file_path to extract metadata from DICOM headers. Optionally specify include_private_tags and tag_groups to control extraction scope.",
    "output_details": {
      "patient_info": {
        "type": "string",
        "description": "JSON string containing patient demographic data"
      },
      "study_info": {
        "type": "string",
        "description": "JSON string containing study and series information"
      },
      "technical_params": {
        "type": "string",
        "description": "JSON string containing imaging technical parameters"
      },
      "extracted_tags": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of successfully extracted DICOM tag identifiers"
      },
      "extraction_timestamp": {
        "type": "string",
        "description": "Timestamp when metadata extraction was performed"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "DICOM_Anonymizer",
    "tool_description": "Removes or replaces personally identifiable information from DICOM files according to HIPAA and DICOM anonymization standards.",
    "parameters": {
      "input_file_path": {
        "type": "string",
        "required": true,
        "description": "Path to the source DICOM file to anonymize"
      },
      "output_file_path": {
        "type": "string",
        "required": true,
        "description": "Path where anonymized DICOM file will be saved"
      },
      "anonymization_profile": {
        "type": "string",
        "required": false,
        "description": "Predefined anonymization profile (basic, full, research, clinical_trial)",
        "default": "basic"
      },
      "preserve_study_structure": {
        "type": "boolean",
        "required": false,
        "description": "Maintain study and series relationships during anonymization",
        "default": true
      },
      "custom_patient_id": {
        "type": "string",
        "required": false,
        "description": "Custom patient ID to replace original (auto-generated if not provided)",
        "default": "None"
      },
      "remove_private_tags": {
        "type": "boolean",
        "required": false,
        "description": "Remove all private manufacturer tags",
        "default": true
      },
      "date_offset_days": {
        "type": "integer",
        "required": false,
        "description": "Number of days to offset all dates (maintains temporal relationships)",
        "default": 0
      }
    },
    "error_messages": [
      "Input file not accessible: Cannot read the source DICOM file. Verify file path and permissions.",
      "Output path invalid: Cannot write to specified output path. Check directory permissions and disk space.",
      "Invalid anonymization profile: Use one of [basic, full, research, clinical_trial].",
      "Anonymization failed: Error during anonymization process. Check file integrity and retry.",
      "Date offset out of range: date_offset_days must be between -36500 and 36500 (±100 years)."
    ],
    "usage": "Provide input_file_path and output_file_path, then configure anonymization settings. The tool creates anonymized DICOM files while preserving medical imaging data integrity.",
    "output_details": {
      "anonymization_success": {
        "type": "boolean",
        "description": "Whether anonymization completed successfully"
      },
      "tags_modified": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of DICOM tags that were modified or removed"
      },
      "generated_patient_id": {
        "type": "string",
        "description": "The anonymized patient ID assigned"
      },
      "generated_study_id": {
        "type": "string",
        "description": "The anonymized study ID assigned"
      },
      "anonymization_timestamp": {
        "type": "string",
        "description": "When the anonymization was performed"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Image_Quality_Assessor",
    "tool_description": "Analyzes DICOM image quality by detecting artifacts, measuring noise levels, and assessing overall image characteristics for diagnostic adequacy.",
    "parameters": {
      "file_path": {
        "type": "string",
        "required": true,
        "description": "Path to the DICOM file for quality assessment"
      },
      "assessment_type": {
        "type": "string",
        "required": false,
        "description": "Type of quality assessment (comprehensive, artifacts_only, noise_only, contrast_only)",
        "default": "comprehensive"
      },
      "modality_specific": {
        "type": "boolean",
        "required": false,
        "description": "Apply modality-specific quality metrics",
        "default": true
      }
    },
    "error_messages": [
      "Cannot extract pixel data: DICOM file lacks readable pixel data. Verify file contains image information.",
      "Unsupported image format: Image format within DICOM is not supported for quality analysis.",
      "Invalid assessment type: Use one of [comprehensive, artifacts_only, noise_only, contrast_only].",
      "Insufficient image data: Image dimensions too small for meaningful quality assessment (minimum 64x64 pixels)."
    ],
    "usage": "Provide file_path to DICOM image file and optionally specify assessment_type and modality_specific settings. Returns detailed quality metrics and recommendations.",
    "output_details": {
      "overall_quality_score": {
        "type": "number",
        "description": "Overall image quality score from 0-100"
      },
      "noise_level": {
        "type": "number",
        "description": "Measured noise level in the image"
      },
      "contrast_ratio": {
        "type": "number",
        "description": "Image contrast ratio measurement"
      },
      "artifacts_detected": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of detected image artifacts"
      },
      "quality_recommendations": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Recommendations for improving image quality"
      },
      "diagnostic_adequacy": {
        "type": "string",
        "description": "Assessment of diagnostic adequacy (excellent, good, acceptable, poor)"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "DICOM_Series_Organizer",
    "tool_description": "Organizes multiple DICOM files into proper series and study hierarchies based on DICOM metadata and relationships.",
    "parameters": {
      "input_directory": {
        "type": "string",
        "required": true,
        "description": "Directory containing DICOM files to organize"
      },
      "output_directory": {
        "type": "string",
        "required": true,
        "description": "Directory where organized DICOM structure will be created"
      },
      "organization_pattern": {
        "type": "string",
        "required": false,
        "description": "Directory naming pattern (patient_study_series, date_modality, custom)",
        "default": "patient_study_series"
      },
      "include_subdirectories": {
        "type": "boolean",
        "required": false,
        "description": "Recursively search subdirectories for DICOM files",
        "default": true
      },
      "verify_series_integrity": {
        "type": "boolean",
        "required": false,
        "description": "Verify completeness and consistency of series",
        "default": true
      }
    },
    "error_messages": [
      "Input directory not found: The specified input directory does not exist or is not accessible.",
      "Output directory creation failed: Cannot create output directory structure. Check permissions.",
      "Invalid organization pattern: Use one of [patient_study_series, date_modality, custom].",
      "No DICOM files found: No valid DICOM files detected in the input directory.",
      "Series organization error: Unable to organize files due to missing or inconsistent metadata."
    ],
    "usage": "Provide input_directory containing DICOM files and output_directory for organized structure. Configure organization_pattern and other options as needed.",
    "output_details": {
      "total_files_processed": {
        "type": "integer",
        "description": "Total number of DICOM files processed"
      },
      "studies_created": {
        "type": "integer",
        "description": "Number of study directories created"
      },
      "series_created": {
        "type": "integer",
        "description": "Number of series directories created"
      },
      "organization_summary": {
        "type": "string",
        "description": "Summary of the organization process and structure created"
      },
      "incomplete_series": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of series that appear incomplete or have missing files"
      },
      "organization_errors": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of files that could not be properly organized"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Pixel_Data_Extractor",
    "tool_description": "Extracts raw pixel data arrays from DICOM files and provides image properties for further analysis or processing.",
    "parameters": {
      "file_path": {
        "type": "string",
        "required": true,
        "description": "Path to the DICOM file for pixel data extraction"
      },
      "normalize_values": {
        "type": "boolean",
        "required": false,
        "description": "Normalize pixel values to 0-1 range",
        "default": false
      },
      "apply_windowing": {
        "type": "boolean",
        "required": false,
        "description": "Apply DICOM window level and width if present",
        "default": true
      }
    },
    "error_messages": [
      "No pixel data found: DICOM file does not contain pixel data elements.",
      "Unsupported transfer syntax: Cannot decode pixel data with current transfer syntax.",
      "Memory allocation error: Image too large for available memory. Consider processing smaller regions.",
      "Pixel data corruption: Pixel data appears corrupted or incomplete."
    ],
    "usage": "Provide file_path to extract pixel data from DICOM files. Configure normalize_values and apply_windowing based on processing needs.",
    "output_details": {
      "image_width": {
        "type": "integer",
        "description": "Width of the image in pixels"
      },
      "image_height": {
        "type": "integer",
        "description": "Height of the image in pixels"
      },
      "bits_per_pixel": {
        "type": "integer",
        "description": "Number of bits per pixel"
      },
      "pixel_spacing_x": {
        "type": "number",
        "description": "Physical spacing between pixels in X direction (mm)"
      },
      "pixel_spacing_y": {
        "type": "number",
        "description": "Physical spacing between pixels in Y direction (mm)"
      },
      "min_pixel_value": {
        "type": "number",
        "description": "Minimum pixel value in the image"
      },
      "max_pixel_value": {
        "type": "number",
        "description": "Maximum pixel value in the image"
      },
      "extraction_successful": {
        "type": "boolean",
        "description": "Whether pixel data extraction completed successfully"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "DICOM_Tag_Editor",
    "tool_description": "Modifies, adds, or removes specific DICOM tags while maintaining file integrity and standard compliance.",
    "parameters": {
      "input_file_path": {
        "type": "string",
        "required": true,
        "description": "Path to the source DICOM file"
      },
      "output_file_path": {
        "type": "string",
        "required": true,
        "description": "Path where modified DICOM file will be saved"
      },
      "tags_to_modify": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "required": false,
        "description": "Array of tag modifications in format 'tag_id:new_value'",
        "default": "None"
      },
      "tags_to_remove": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "required": false,
        "description": "Array of DICOM tag IDs to remove",
        "default": "None"
      },
      "validate_modifications": {
        "type": "boolean",
        "required": false,
        "description": "Validate tag modifications against DICOM standards",
        "default": true
      },
      "preserve_original": {
        "type": "boolean",
        "required": false,
        "description": "Keep backup of original file",
        "default": false
      },
      "update_derived_tags": {
        "type": "boolean",
        "required": false,
        "description": "Automatically update related/derived tags",
        "default": true
      },
      "modification_reason": {
        "type": "string",
        "required": false,
        "description": "Reason for modifications (for audit trail)",
        "default": "None"
      }
    },
    "error_messages": [
      "Invalid tag format: Use format 'XXXX,XXXX:value' for tag modifications (e.g., '0010,0010:ANONYMOUS').",
      "Protected tag modification: Attempting to modify critical tags that could corrupt the file.",
      "Invalid tag value: New tag value does not match expected data type or format for the tag.",
      "File write error: Cannot save modified file to output path. Check permissions and disk space.",
      "Tag validation failed: Modified tags do not conform to DICOM standards."
    ],
    "usage": "Specify input and output file paths, then provide tags_to_modify or tags_to_remove arrays. Use validation options to ensure DICOM compliance.",
    "output_details": {
      "modification_success": {
        "type": "boolean",
        "description": "Whether tag modifications completed successfully"
      },
      "tags_modified": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of tags that were successfully modified"
      },
      "tags_removed": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of tags that were successfully removed"
      },
      "modification_warnings": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Warnings about potentially problematic modifications"
      },
      "modification_timestamp": {
        "type": "string",
        "description": "Timestamp when modifications were applied"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Modality_Specific_Validator",
    "tool_description": "Performs specialized validation for specific imaging modalities (CT, MRI, X-ray, etc.) checking modality-specific requirements and constraints.",
    "parameters": {
      "file_path": {
        "type": "string",
        "required": true,
        "description": "Path to the DICOM file for modality validation"
      },
      "expected_modality": {
        "type": "string",
        "required": true,
        "description": "Expected imaging modality (CT, MR, CR, DX, US, NM, PT, etc.)"
      },
      "validation_level": {
        "type": "string",
        "required": false,
        "description": "Validation strictness level (basic, standard, strict)",
        "default": "standard"
      },
      "check_protocol_compliance": {
        "type": "boolean",
        "required": false,
        "description": "Validate against standard imaging protocols",
        "default": true
      }
    },
    "error_messages": [
      "Modality mismatch: File modality does not match expected modality. Check file source and modality specification.",
      "Missing required tags: Modality-specific required DICOM tags are missing or empty.",
      "Invalid parameter values: Imaging parameters are outside acceptable ranges for the modality.",
      "Protocol non-compliance: Image acquisition parameters do not meet standard protocols.",
      "Unsupported modality: The specified modality is not supported for validation."
    ],
    "usage": "Provide file_path and expected_modality for specialized validation. Configure validation_level and protocol compliance checking as needed.",
    "output_details": {
      "modality_valid": {
        "type": "boolean",
        "description": "Whether the file passes modality-specific validation"
      },
      "detected_modality": {
        "type": "string",
        "description": "Modality detected from DICOM tags"
      },
      "missing_required_tags": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of missing modality-required tags"
      },
      "parameter_warnings": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Warnings about unusual parameter values"
      },
      "protocol_compliance_score": {
        "type": "number",
        "description": "Compliance score for standard imaging protocols (0-100)"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "DICOM_Compression_Handler",
    "tool_description": "Handles compression and decompression of DICOM files using various DICOM-supported compression algorithms while maintaining image quality.",
    "parameters": {
      "input_file_path": {
        "type": "string",
        "required": true,
        "description": "Path to the source DICOM file"
      },
      "output_file_path": {
        "type": "string",
        "required": true,
        "description": "Path where processed DICOM file will be saved"
      },
      "operation": {
        "type": "string",
        "required": true,
        "description": "Operation to perform (compress, decompress)"
      },
      "compression_algorithm": {
        "type": "string",
        "required": false,
        "description": "Compression algorithm (jpeg_lossy, jpeg_lossless, jpeg2000, rle)",
        "default": "jpeg_lossless"
      },
      "quality_factor": {
        "type": "integer",
        "required": false,
        "description": "Compression quality factor 1-100 (for lossy compression only)",
        "default": 85
      }
    },
    "error_messages": [
      "Unsupported compression algorithm: Use one of [jpeg_lossy, jpeg_lossless, jpeg2000, rle].",
      "Invalid operation: Operation must be either 'compress' or 'decompress'.",
      "Compression failed: Error during compression process. Check file integrity and algorithm compatibility.",
      "Quality factor out of range: quality_factor must be between 1 and 100.",
      "Already compressed/decompressed: File is already in the requested compression state."
    ],
    "usage": "Specify input and output paths, operation type, and compression settings. Tool handles DICOM-compliant compression while preserving metadata.",
    "output_details": {
      "operation_success": {
        "type": "boolean",
        "description": "Whether the compression/decompression completed successfully"
      },
      "original_size_bytes": {
        "type": "integer",
        "description": "Original file size in bytes"
      },
      "processed_size_bytes": {
        "type": "integer",
        "description": "Processed file size in bytes"
      },
      "compression_ratio": {
        "type": "number",
        "description": "Compression ratio achieved"
      },
      "transfer_syntax": {
        "type": "string",
        "description": "DICOM transfer syntax used"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Study_Metadata_Aggregator",
    "tool_description": "Aggregates metadata from multiple DICOM series into comprehensive study-level summaries and creates structured reports.",
    "parameters": {
      "series_paths": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "required": true,
        "description": "Array of paths to DICOM series directories or individual files",
        "minItems": 1,
        "maxItems": 50
      },
      "include_statistics": {
        "type": "boolean",
        "required": false,
        "description": "Include statistical analysis of study data",
        "default": true
      },
      "generate_summary_report": {
        "type": "boolean",
        "required": false,
        "description": "Generate human-readable summary report",
        "default": true
      },
      "aggregate_image_metrics": {
        "type": "boolean",
        "required": false,
        "description": "Aggregate image quality and technical metrics",
        "default": false
      }
    },
    "error_messages": [
      "No valid series found: None of the provided paths contain valid DICOM series.",
      "Inconsistent study data: Series belong to different studies and cannot be aggregated.",
      "Metadata extraction failed: Unable to extract metadata from one or more series.",
      "Series limit exceeded: Too many series provided (maximum 50 series per study)."
    ],
    "usage": "Provide array of series_paths from the same study and configure aggregation options. Tool creates comprehensive study summaries from series metadata.",
    "output_details": {
      "study_instance_uid": {
        "type": "string",
        "description": "Unique identifier for the study"
      },
      "total_series_count": {
        "type": "integer",
        "description": "Number of series in the study"
      },
      "total_images_count": {
        "type": "integer",
        "description": "Total number of images across all series"
      },
      "modalities_present": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of imaging modalities found in the study"
      },
      "study_date": {
        "type": "string",
        "description": "Date when the study was performed"
      },
      "acquisition_duration_minutes": {
        "type": "number",
        "description": "Total acquisition time for the study in minutes"
      },
      "summary_report": {
        "type": "string",
        "description": "Human-readable summary of the study"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "DICOM_Format_Converter",
    "tool_description": "Converts DICOM images to standard image formats (JPEG, PNG, TIFF) or other medical formats while preserving essential metadata.",
    "parameters": {
      "input_file_path": {
        "type": "string",
        "required": true,
        "description": "Path to the source DICOM file"
      },
      "output_format": {
        "type": "string",
        "required": true,
        "description": "Target output format (jpeg, png, tiff, bmp, nifti)"
      },
      "output_directory": {
        "type": "string",
        "required": true,
        "description": "Directory where converted files will be saved"
      },
      "preserve_metadata": {
        "type": "boolean",
        "required": false,
        "description": "Embed DICOM metadata in converted file when possible",
        "default": true
      },
      "apply_window_level": {
        "type": "boolean",
        "required": false,
        "description": "Apply DICOM window/level settings for display",
        "default": true
      },
      "image_quality": {
        "type": "integer",
        "required": false,
        "description": "Output image quality 1-100 (for lossy formats)",
        "default": 95
      }
    },
    "error_messages": [
      "Unsupported output format: Use one of [jpeg, png, t
