field_name: healthcare_medical
subfield: Medical Imaging and Radiology
task: DICOM image processing and format conversion
tool_description: |-
  **STEP 1 — Rate task difficulty**

  This task is **medium** difficulty. DICOM processing involves standardized but complex medical imaging formats with strict compliance requirements, multiple conversion pathways, metadata handling, and potential patient privacy concerns. The technical complexity is moderate but requires specialized domain knowledge.

  **STEP 2 — Set a tool budget**

  Given the medium difficulty, I'll target **12 tools** to cover the various aspects of DICOM processing: file validation, metadata extraction, format conversion, image enhancement, anonymization, compression, and quality assurance.

  **STEP 3 — List all tool names and dependencies**

  Tools and their data flow:
  1. **DICOM File Validator** → validates raw DICOM files → produces validation status
  2. **DICOM Metadata Extractor** → consumes validated DICOM → produces structured metadata
  3. **DICOM Anonymizer** → consumes DICOM files → produces anonymized DICOM
  4. **DICOM Image Extractor** → consumes DICOM files → produces raw image arrays
  5. **Image Format Converter** → consumes image arrays/DICOM → produces standard formats (JPEG, PNG, TIFF)
  6. **DICOM Compression Tool** → consumes DICOM files → produces compressed DICOM
  7. **Image Enhancement Processor** → consumes image data → produces enhanced images
  8. **DICOM Header Editor** → consumes DICOM + edits → produces modified DICOM
  9. **Multi-frame DICOM Splitter** → consumes multi-frame DICOM → produces single-frame DICOMs
  10. **DICOM Series Organizer** → consumes multiple DICOM files → produces organized series structure
  11. **DICOM Quality Checker** → consumes DICOM files → produces quality metrics
  12. **Batch DICOM Processor** → orchestrates multiple tools → produces batch processing results

  **STEP 4 — Multi-tool plans**

  **Simple plans:**
  1. Basic conversion: DICOM File Validator → Image Format Converter (validate then convert single file)
  2. Quick anonymization: DICOM File Validator → DICOM Anonymizer (validate and anonymize patient data)

  **Medium plans:**
  1. Standard processing: DICOM File Validator → DICOM Metadata Extractor → Image Enhancement Processor → Image Format Converter
  2. Clinical preparation: DICOM File Validator → DICOM Anonymizer → DICOM Quality Checker → DICOM Compression Tool

  **Complex plans:**
  1. Complete workflow: DICOM Series Organizer → DICOM File Validator → DICOM Anonymizer → Multi-frame DICOM Splitter → Image Enhancement Processor → DICOM Quality Checker → Batch DICOM Processor
  2. Research pipeline: DICOM File Validator → DICOM Metadata Extractor → DICOM Header Editor → Image Enhancement Processor → Image Format Converter → DICOM Quality Checker

  **STEP 5 — Produce tools**

  ```json
  {
    "tool_name": "DICOM File Validator",
    "tool_description": "Validates DICOM files for compliance with DICOM standards, checking file structure, required tags, and data integrity.",
    "parameters": {
      "file_path": {
        "type": "string",
        "required": true,
        "description": "Path to the DICOM file to validate"
      },
      "strict_mode": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Enable strict validation according to DICOM standard"
      }
    },
    "error_messages": [
      "File not found: The specified DICOM file path does not exist. Verify the file path is correct.",
      "Invalid DICOM format: File is not a valid DICOM file. Ensure the file has proper DICOM headers and structure.",
      "Corrupted file: DICOM file appears to be corrupted. Try using a different copy of the file."
    ],
    "usage": "Provide the file_path to a DICOM file and optionally set strict_mode to control validation rigor. Returns validation status and any compliance issues found.",
    "output_details": {
      "is_valid": {
        "type": "boolean",
        "description": "Whether the DICOM file passes validation"
      },
      "compliance_issues": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of DICOM compliance issues found"
      },
      "file_size_bytes": {
        "type": "integer",
        "description": "Size of the DICOM file in bytes"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "DICOM Metadata Extractor",
    "tool_description": "Extracts and structures metadata from DICOM files including patient information, study details, series information, and technical parameters.",
    "parameters": {
      "file_path": {
        "type": "string",
        "required": true,
        "description": "Path to the DICOM file"
      },
      "include_private_tags": {
        "type": "boolean",
        "required": false,
        "default": false,
        "description": "Include private/vendor-specific DICOM tags"
      },
      "tag_filter": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "required": false,
        "default": "None",
        "description": "Specific DICOM tag numbers to extract (e.g., '0010,0010' for patient name)"
      }
    },
    "error_messages": [
      "File access error: Cannot read the DICOM file. Check file permissions and path.",
      "Metadata parsing error: Unable to parse DICOM metadata. File may be corrupted or non-standard.",
      "Invalid tag filter: One or more tag numbers in tag_filter are not valid DICOM tag formats. Use format (XXXX,XXXX)."
    ],
    "usage": "Specify file_path to extract metadata from a DICOM file. Use include_private_tags to include vendor-specific data and tag_filter to extract only specific tags.",
    "output_details": {
      "patient_name": {
        "type": "string",
        "description": "Patient name from DICOM header"
      },
      "patient_id": {
        "type": "string",
        "description": "Patient identifier"
      },
      "study_date": {
        "type": "string",
        "description": "Date when study was performed"
      },
      "modality": {
        "type": "string",
        "description": "Imaging modality (CT, MRI, X-Ray, etc.)"
      },
      "image_dimensions": {
        "type": "array",
        "items": {
          "type": "integer"
        },
        "description": "Image dimensions as [rows, columns, frames]"
      },
      "pixel_spacing": {
        "type": "array",
        "items": {
          "type": "number"
        },
        "description": "Physical distance between pixels in mm"
      },
      "all_tags": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "All extracted DICOM tags in key:value format"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "DICOM Anonymizer",
    "tool_description": "Removes or replaces patient-identifiable information from DICOM files while preserving essential medical imaging data for research or sharing.",
    "parameters": {
      "input_path": {
        "type": "string",
        "required": true,
        "description": "Path to input DICOM file"
      },
      "output_path": {
        "type": "string",
        "required": true,
        "description": "Path for anonymized output DICOM file"
      },
      "anonymization_level": {
        "type": "string",
        "required": false,
        "default": "standard",
        "description": "Level of anonymization: minimal, standard, or aggressive"
      },
      "preserve_dates": {
        "type": "boolean",
        "required": false,
        "default": false,
        "description": "Whether to preserve original dates or shift them"
      },
      "custom_patient_id": {
        "type": "string",
        "required": false,
        "default": "None",
        "description": "Custom patient ID to assign instead of auto-generated"
      }
    },
    "error_messages": [
      "Input file error: Cannot read input DICOM file. Verify file exists and is readable.",
      "Output path error: Cannot write to specified output path. Check directory permissions.",
      "Invalid anonymization level: Use one of [minimal, standard, aggressive].",
      "Anonymization failed: Error during anonymization process. Input file may be corrupted or use unsupported DICOM format."
    ],
    "usage": "Provide input_path and output_path for the DICOM file. Set anonymization_level to control how much information is removed, and use preserve_dates and custom_patient_id for specific requirements.",
    "output_details": {
      "success": {
        "type": "boolean",
        "description": "Whether anonymization completed successfully"
      },
      "removed_tags": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of DICOM tags that were removed or modified"
      },
      "output_file_size": {
        "type": "integer",
        "description": "Size of anonymized file in bytes"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "DICOM Image Extractor",
    "tool_description": "Extracts pixel data from DICOM files and converts it to numerical arrays, handling different bit depths, photometric interpretations, and rescaling.",
    "parameters": {
      "file_path": {
        "type": "string",
        "required": true,
        "description": "Path to the DICOM file"
      },
      "apply_rescaling": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Apply DICOM rescale slope and intercept to pixel values"
      },
      "normalize_values": {
        "type": "boolean",
        "required": false,
        "default": false,
        "description": "Normalize pixel values to 0-1 range"
      },
      "output_data_type": {
        "type": "string",
        "required": false,
        "default": "float32",
        "description": "Output array data type: uint8, uint16, float32, or float64"
      }
    },
    "error_messages": [
      "DICOM read error: Cannot read DICOM file. Ensure file is valid and accessible.",
      "No pixel data: DICOM file contains no pixel data to extract.",
      "Invalid data type: output_data_type must be one of [uint8, uint16, float32, float64].",
      "Pixel extraction failed: Error extracting pixel data. File may have unsupported compression or encoding."
    ],
    "usage": "Specify file_path to extract pixel data from DICOM. Use apply_rescaling for Hounsfield units in CT, normalize_values for ML preprocessing, and output_data_type to control precision.",
    "output_details": {
      "pixel_array_shape": {
        "type": "array",
        "items": {
          "type": "integer"
        },
        "description": "Shape of extracted pixel array [height, width, frames]"
      },
      "data_type": {
        "type": "string",
        "description": "Data type of extracted pixel values"
      },
      "min_pixel_value": {
        "type": "number",
        "description": "Minimum pixel value in the extracted array"
      },
      "max_pixel_value": {
        "type": "number",
        "description": "Maximum pixel value in the extracted array"
      },
      "rescale_applied": {
        "type": "boolean",
        "description": "Whether rescale slope and intercept were applied"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Image Format Converter",
    "tool_description": "Converts DICOM images or extracted pixel arrays to standard image formats like JPEG, PNG, TIFF with customizable quality and compression settings.",
    "parameters": {
      "input_path": {
        "type": "string",
        "required": true,
        "description": "Path to input DICOM file or image file"
      },
      "output_path": {
        "type": "string",
        "required": true,
        "description": "Path for output image file"
      },
      "output_format": {
        "type": "string",
        "required": true,
        "description": "Target image format: JPEG, PNG, TIFF, or BMP"
      },
      "quality": {
        "type": "integer",
        "required": false,
        "default": 95,
        "description": "Image quality for lossy formats (1-100)"
      },
      "windowing_center": {
        "type": "number",
        "required": false,
        "default": "None",
        "description": "Window center for display (CT/MRI images)"
      },
      "windowing_width": {
        "type": "number",
        "required": false,
        "default": "None",
        "description": "Window width for display (CT/MRI images)"
      },
      "resize_dimensions": {
        "type": "array",
        "items": {
          "type": "integer"
        },
        "required": false,
        "default": "None",
        "description": "Target dimensions [width, height] for resizing"
      }
    },
    "error_messages": [
      "Input file error: Cannot read input file. Check file path and format.",
      "Invalid output format: output_format must be one of [JPEG, PNG, TIFF, BMP].",
      "Quality out of range: quality must be between 1 and 100 for lossy formats.",
      "Invalid windowing parameters: windowing_center and windowing_width must be positive numbers.",
      "Invalid resize dimensions: resize_dimensions must be array of two positive integers.",
      "Conversion failed: Error during image conversion. Check input file compatibility."
    ],
    "usage": "Provide input_path (DICOM or image file) and output_path with desired output_format. Use quality for compression, windowing parameters for medical image display, and resize_dimensions to change image size.",
    "output_details": {
      "success": {
        "type": "boolean",
        "description": "Whether conversion completed successfully"
      },
      "output_dimensions": {
        "type": "array",
        "items": {
          "type": "integer"
        },
        "description": "Final image dimensions [width, height]"
      },
      "output_size_bytes": {
        "type": "integer",
        "description": "Size of converted image file in bytes"
      },
      "compression_ratio": {
        "type": "number",
        "description": "Compression ratio compared to original"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "DICOM Compression Tool",
    "tool_description": "Compresses DICOM files using various compression algorithms while maintaining DICOM compliance and image quality.",
    "parameters": {
      "input_path": {
        "type": "string",
        "required": true,
        "description": "Path to input DICOM file"
      },
      "output_path": {
        "type": "string",
        "required": true,
        "description": "Path for compressed output DICOM file"
      },
      "compression_type": {
        "type": "string",
        "required": true,
        "description": "Compression algorithm: RLE, JPEG, JPEG2000, or JPEGLossless"
      },
      "quality_factor": {
        "type": "integer",
        "required": false,
        "default": 90,
        "description": "Quality factor for lossy compression (1-100)"
      },
      "preserve_metadata": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Preserve all original DICOM metadata"
      }
    },
    "error_messages": [
      "Input file error: Cannot read input DICOM file. Verify file exists and is valid DICOM format.",
      "Invalid compression type: compression_type must be one of [RLE, JPEG, JPEG2000, JPEGLossless].",
      "Quality factor out of range: quality_factor must be between 1 and 100.",
      "Compression failed: Error during compression. Input file may be incompatible with selected compression type.",
      "Output write error: Cannot write compressed file to output path. Check directory permissions."
    ],
    "usage": "Specify input_path and output_path for DICOM files. Choose compression_type based on requirements (lossless for diagnostic, lossy for archival). Set quality_factor for lossy compression and preserve_metadata as needed.",
    "output_details": {
      "success": {
        "type": "boolean",
        "description": "Whether compression completed successfully"
      },
      "original_size_bytes": {
        "type": "integer",
        "description": "Size of original DICOM file in bytes"
      },
      "compressed_size_bytes": {
        "type": "integer",
        "description": "Size of compressed DICOM file in bytes"
      },
      "compression_ratio": {
        "type": "number",
        "description": "Compression ratio (original_size / compressed_size)"
      },
      "is_lossless": {
        "type": "boolean",
        "description": "Whether the compression algorithm is lossless"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Image Enhancement Processor",
    "tool_description": "Applies various image enhancement techniques to medical images including noise reduction, contrast adjustment, sharpening, and histogram equalization.",
    "parameters": {
      "input_path": {
        "type": "string",
        "required": true,
        "description": "Path to input image or DICOM file"
      },
      "output_path": {
        "type": "string",
        "required": true,
        "description": "Path for enhanced output image"
      },
      "enhancement_type": {
        "type": "string",
        "required": true,
        "description": "Enhancement method: denoise, contrast_enhance, sharpen, histogram_equalize, or adaptive_enhance"
      },
      "intensity": {
        "type": "number",
        "required": false,
        "default": 1.0,
        "description": "Enhancement intensity factor (0.1-3.0)"
      },
      "preserve_original_range": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Preserve original pixel value range after enhancement"
      },
      "kernel_size": {
        "type": "integer",
        "required": false,
        "default": 3,
        "description": "Kernel size for filtering operations (3, 5, 7, or 9)"
      }
    },
    "error_messages": [
      "Input file error: Cannot read input file. Ensure file exists and is a valid image or DICOM format.",
      "Invalid enhancement type: enhancement_type must be one of [denoise, contrast_enhance, sharpen, histogram_equalize, adaptive_enhance].",
      "Invalid intensity: intensity must be between 0.1 and 3.0.",
      "Invalid kernel size: kernel_size must be one of [3, 5, 7, 9].",
      "Enhancement failed: Error during image enhancement. Input image may be corrupted or incompatible.",
      "Output write error: Cannot write enhanced image to output path."
    ],
    "usage": "Provide input_path and output_path for the image file. Select enhancement_type based on needs, adjust intensity for effect strength, and use kernel_size for spatial operations. Set preserve_original_range to maintain medical imaging value ranges.",
    "output_details": {
      "success": {
        "type": "boolean",
        "description": "Whether enhancement completed successfully"
      },
      "enhancement_applied": {
        "type": "string",
        "description": "Type of enhancement that was applied"
      },
      "quality_metrics": {
        "type": "array",
        "items": {
          "type": "number"
        },
        "description": "Quality metrics [contrast, sharpness, noise_level]"
      },
      "processing_time_seconds": {
        "type": "number",
        "description": "Time taken for enhancement processing"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "DICOM Header Editor",
    "tool_description": "Modifies specific DICOM header tags while maintaining file integrity and DICOM compliance, useful for corrections or research anonymization.",
    "parameters": {
      "input_path": {
        "type": "string",
        "required": true,
        "description": "Path to input DICOM file"
      },
      "output_path": {
        "type": "string",
        "required": true,
        "description": "Path for modified output DICOM file"
      },
      "tag_modifications": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "required": true,
        "description": "List of tag modifications in format 'tag_number:new_value'"
      },
      "remove_tags": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "required": false,
        "default": "None",
        "description": "List of DICOM tag numbers to remove"
      },
      "validate_compliance": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Validate DICOM compliance after modifications"
      },
      "backup_original": {
        "type": "boolean",
        "required": false,
        "default": false,
        "description": "Create backup of original file"
      },
      "preserve_pixel_data": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Ensure pixel data remains unchanged"
      },
      "add_custom_tags": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "required": false,
        "default": "None",
        "description": "List of custom tags to add in format 'tag_number:value:VR'"
      },
      "modification_reason": {
        "type": "string",
        "required": false,
        "default": "None",
        "description": "Reason for modification (for audit trail)"
      },
      "force_overwrite": {
        "type": "boolean",
        "required": false,
        "default": false,
        "description": "Overwrite output file if it already exists"
      },
      "encoding_format": {
        "type": "string",
        "required": false,
        "default": "utf-8",
        "description": "Character encoding for text values"
      },
      "strict_validation": {
        "type": "boolean",
        "required": false,
        "default": false,
        "description": "Apply strict DICOM standard validation"
      },
      "log_changes": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Generate detailed log of all changes made"
      }
    },
    "error_messages": [
      "Input file error: Cannot read input DICOM file. Verify file exists and is valid DICOM format.",
      "Invalid tag format: tag_modifications must use format 'XXXX,XXXX:value'. Check tag number formatting.",
      "Tag modification failed: One or more tag modifications could not be applied. Check tag exists and value format is correct.",
      "Compliance validation failed: Modified DICOM file fails compliance check. Review modifications for DICOM standard violations.",
      "Output write error: Cannot write modified file to output path. Check permissions and available space.",
      "Backup creation failed: Could not create backup file. Check backup directory permissions.",
      "Invalid custom tag format: add_custom_tags must use format 'XXXX,XXXX:value:VR'. Check Value Representation (VR) codes.",
      "Pixel data corruption: Modifications resulted in pixel data changes when preserve_pixel_data is true."
    ],
    "usage": "Specify input_path, output_path, and tag_modifications list. Use remove_tags to delete specific tags, add_custom_tags for new tags. Enable validate_compliance and backup_original for safety. Set modification_reason for documentation.",
    "output_details": {
      "success": {
        "type": "boolean",
        "description": "Whether header modification completed successfully"
      },
      "modified_tags": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of tags that were successfully modified"
      },
      "removed_tags": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of tags that were successfully removed"
      },
      "added_tags": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of custom tags that were successfully added"
      },
      "compliance_status": {
        "type": "string",
        "description": "DICOM compliance status after modifications"
      },
      "change_log": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Detailed log of all changes made to the file"
      },
      "backup_path": {
        "type": "string",
        "description": "Path to backup file if backup_original was enabled"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Multi-frame DICOM Splitter",
    "tool_description": "Splits multi-frame DICOM files into individual single-frame DICOM files, preserving metadata and proper series organization.",
    "parameters": {
      "input_path": {
        "type": "string",
        "required": true,
        "description": "Path to multi-frame DICOM file"
      },
      "output_directory": {
        "type": "string",
        "required": true,
        "description": "Directory path for output single-frame DICOM files"
      },
      "naming_pattern": {
        "type": "string",
        "required": false,
        "default": "frame_{frame_number:04d}.dcm",
        "description": "Naming pattern for output files"
      },
      "preserve_metadata": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Preserve original DICOM metadata in each frame"
      }
    },
    "error_messages": [
      "Input file error: Cannot read multi-frame DICOM file. Ensure file exists and is valid multi-frame DICOM.",
      "Not multi-frame: Input DICOM file is not multi-frame format. Use regular DICOM processing tools instead.",
      "Output directory error: Cannot create or access output directory. Check path and permissions.",
      "Frame extraction failed: Error extracting individual frames. Input file may be corrupted.",
      "Insufficient disk space: Not enough disk space to create all output files."
    ],
    "usage": "Provide input_path to multi-frame DICOM and output_directory for resulting files. Use naming_pattern to control output filenames and preserve_metadata to maintain DICOM headers.",
    "output_details": {
      "success": {
        "type": "boolean",
        "description": "Whether splitting completed successfully"
      },
      "total_frames": {
        "type": "integer",
        "description": "Total number of frames extracted"
      },
      "output_files": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of created output file paths"
      },
      "total_output_size": {
        "type": "integer",
        "description": "Total size of all output files in bytes"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "DICOM Series Organizer",
    "tool_description": "Organizes multiple DICOM files into proper series structure based on metadata, sorting by acquisition time, slice location, or custom criteria.",
    "parameters": {
      "input_directory": {
        "type": "string",
        "required": true,
        "description": "Directory containing DICOM files to organize"
      },
      "output_directory": {
        "type": "string",
        "required": true,
        "description": "Directory for organized DICOM series structure"
      },
      "organization_method": {
        "type": "string",
        "required": false,
        "default": "series_uid",
        "description": "Organization method: series_uid, study_date, modality, or patient_id"
      },
      "sort_criteria": {
        "type": "string",
        "required": false,
        "default": "instance_number",
        "description": "Sorting criteria within series: instance_number, acquisition_time, or slice_location"
      },
      "create_subdirectories": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Create subdirectories for each series"
      }
    },
    "error_messages": [
      "Input directory error: Cannot access input directory or no DICOM files found.",
      "Output directory error: Cannot create output directory structure. Check permissions.",
      "Invalid organization method: organization_method must be one of [series_uid, study_date, modality, patient_id].",
      "Invalid sort criteria: sort_criteria must be one of [instance_number, acquisition_time, slice_location].",
      "Organization failed: Error organizing DICOM files. Some files may have incomplete metadata."
    ],
    "usage": "Specify input_directory with DICOM files and output_directory for organized structure. Choose organization_method for grouping and sort_criteria for ordering within groups.",
    "output_details": {
      "success": {
        "type": "boolean",
        "description": "Whether organization completed successfully"
      },
      "total_files_processed": {
        "type": "integer",
        "description": "Total number of DICOM files processed"
      },
      "series_created": {
        "type": "integer",
        "description": "Number of series directories created"
      },
      "organization_summary": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Summary of organized series with file counts"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "DICOM Quality Checker",
    "tool_description": "Performs comprehensive quality assessment of DICOM files checking for artifacts, completeness, consistency, and technical parameters.",
    "parameters": {
      "file_path": {
        "type": "string",
        "required": true,
        "description": "Path to DICOM file to assess"
      },
      "check_pixel_data": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Analyze pixel data for artifacts and quality issues"
      },
      "check_metadata": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Validate metadata completeness and consistency"
      },
      "artifact_detection": {
        "type": "boolean",
        "required": false,
