field_name: software_apps
subfield: Mobile App Development
task: Cross-Platform Application Development and Build Management
tool_description: |-
  **STEP 1 — Rate task difficulty**

  Cross-platform application development and build management is a **hard** task due to its broad scope encompassing multiple platforms (iOS, Android, web), complex coordination between different build systems, significant dependencies on external services and toolchains, high risk of deployment failures affecting user experience, and substantial infrastructure requirements for CI/CD pipelines and testing environments.

  **STEP 2 — Set a tool budget**

  Given the hard difficulty rating, I'm targeting **17 tools** within the 15–20 range to cover the comprehensive workflow from project initialization through deployment and monitoring.

  **STEP 3 — List all tool names and dependencies**

  Tools and their flow:
  - **Project Initializer** → produces project structure
  - **Dependency Manager** → consumes project config, produces dependency manifest
  - **Code Generator** → consumes templates/specs, produces source code
  - **Asset Optimizer** → consumes raw assets, produces optimized assets
  - **Configuration Manager** → produces environment configs
  - **Code Quality Analyzer** → consumes source code, produces quality reports
  - **Cross Platform Compiler** → consumes source code + configs, produces platform binaries
  - **Build Orchestrator** → consumes all artifacts, produces build pipeline
  - **Testing Framework** → consumes builds, produces test results
  - **Performance Profiler** → consumes builds, produces performance metrics
  - **Security Scanner** → consumes code/builds, produces security reports
  - **Package Builder** → consumes compiled code, produces app packages
  - **Certificate Manager** → produces signing certificates
  - **App Store Publisher** → consumes packages + certificates, produces published apps
  - **Crash Reporter** → consumes deployed apps, produces crash analytics
  - **Feature Flag Manager** → produces feature configurations
  - **Version Controller** → produces version metadata

  **STEP 4 — Multi-tool plans**

  **Simple Plans:**
  1. **Basic Build**: Project Initializer → Dependency Manager → Cross Platform Compiler → Package Builder
  2. **Code Quality Check**: Code Quality Analyzer → Security Scanner → Testing Framework

  **Medium Plans:**
  1. **Development Workflow**: Project Initializer → Dependency Manager → Code Generator → Asset Optimizer → Configuration Manager → Cross Platform Compiler → Testing Framework
  2. **Release Pipeline**: Build Orchestrator → Performance Profiler → Security Scanner → Package Builder → Certificate Manager → App Store Publisher

  **Complex Plans:**
  1. **Full CI/CD**: Project Initializer → Dependency Manager → Code Generator → Asset Optimizer → Configuration Manager → Code Quality Analyzer → Cross Platform Compiler → Build Orchestrator → Testing Framework → Performance Profiler → Security Scanner → Package Builder → Certificate Manager → App Store Publisher → Crash Reporter
  2. **Production Monitoring**: Feature Flag Manager → Version Controller → App Store Publisher → Crash Reporter → Performance Profiler → Security Scanner

  **STEP 5 — Produce tools**

  ```json
  {
    "tool_name": "Project Initializer",
    "tool_description": "Creates a new cross-platform project structure with framework setup, configuration files, and directory organization for the specified platforms.",
    "parameters": {
      "project_name": {
        "type": "string",
        "required": true,
        "description": "Name of the project to be created"
      },
      "platforms": {
        "type": "array",
        "required": true,
        "description": "Target platforms for the project",
        "items": {
          "type": "string"
        },
        "minItems": 1,
        "maxItems": 5
      },
      "framework": {
        "type": "string",
        "required": true,
        "description": "Cross-platform framework to use (react_native, flutter, xamarin, ionic, cordova)"
      },
      "template": {
        "type": "string",
        "required": false,
        "description": "Project template to use",
        "default": "basic"
      }
    },
    "error_messages": [
      "Invalid project name: Project name must contain only alphanumeric characters, hyphens, and underscores.",
      "Unsupported platform: Supported platforms are ios, android, web, windows, macos.",
      "Invalid framework: Supported frameworks are react_native, flutter, xamarin, ionic, cordova.",
      "Template not found: The specified template does not exist for the chosen framework."
    ],
    "usage": "Provide project_name, platforms array, and framework. Optionally specify a template. The tool creates the project structure and returns initialization details.",
    "output_details": {
      "project_path": {
        "type": "string",
        "description": "File system path where the project was created"
      },
      "framework_version": {
        "type": "string",
        "description": "Version of the framework used"
      },
      "files_created": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of configuration files and directories created"
      },
      "next_steps": {
        "type": "string",
        "description": "Recommended next steps for project setup"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Dependency Manager",
    "tool_description": "Manages project dependencies including installation, updates, version resolution, and dependency conflict detection across different platforms.",
    "parameters": {
      "project_path": {
        "type": "string",
        "required": true,
        "description": "Path to the project directory"
      },
      "action": {
        "type": "string",
        "required": true,
        "description": "Action to perform (install, update, remove, audit, resolve_conflicts)"
      },
      "packages": {
        "type": "array",
        "required": false,
        "description": "List of package names to manage",
        "items": {
          "type": "string"
        },
        "default": "None"
      },
      "version_constraints": {
        "type": "array",
        "required": false,
        "description": "Version constraints for packages in semver format",
        "items": {
          "type": "string"
        },
        "default": "None"
      },
      "dev_dependencies": {
        "type": "boolean",
        "required": false,
        "description": "Whether to include development dependencies",
        "default": false
      }
    },
    "error_messages": [
      "Project not found: The specified project path does not exist or is not a valid project.",
      "Invalid action: Supported actions are install, update, remove, audit, resolve_conflicts.",
      "Package not found: One or more specified packages do not exist in the registry.",
      "Version conflict: Dependencies have conflicting version requirements that cannot be resolved.",
      "Network error: Unable to connect to package registry. Check internet connection."
    ],
    "usage": "Specify project_path and action. For install/update/remove actions, provide packages array. Optionally specify version_constraints and dev_dependencies flag.",
    "output_details": {
      "status": {
        "type": "string",
        "description": "Success or failure status of the operation"
      },
      "packages_modified": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of packages that were installed, updated, or removed"
      },
      "conflicts_resolved": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of dependency conflicts that were resolved"
      },
      "vulnerabilities": {
        "type": "integer",
        "description": "Number of security vulnerabilities found"
      },
      "dependency_tree": {
        "type": "string",
        "description": "Summary of the current dependency tree structure"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Code Generator",
    "tool_description": "Generates boilerplate code, components, screens, and API interfaces based on templates and specifications for cross-platform development.",
    "parameters": {
      "project_path": {
        "type": "string",
        "required": true,
        "description": "Path to the project directory"
      },
      "generator_type": {
        "type": "string",
        "required": true,
        "description": "Type of code to generate (component, screen, api, model, service, test)"
      },
      "name": {
        "type": "string",
        "required": true,
        "description": "Name of the generated code element"
      },
      "template": {
        "type": "string",
        "required": false,
        "description": "Template to use for code generation",
        "default": "default"
      },
      "properties": {
        "type": "array",
        "required": false,
        "description": "Properties or parameters for the generated code",
        "items": {
          "type": "string"
        },
        "default": "None"
      },
      "target_platform": {
        "type": "string",
        "required": false,
        "description": "Specific platform to target (ios, android, web)",
        "default": "all"
      },
      "include_tests": {
        "type": "boolean",
        "required": false,
        "description": "Whether to generate accompanying test files",
        "default": true
      },
      "style_framework": {
        "type": "string",
        "required": false,
        "description": "CSS/styling framework to use (native, styled_components, emotion, tailwind)",
        "default": "native"
      }
    },
    "error_messages": [
      "Invalid generator type: Supported types are component, screen, api, model, service, test.",
      "Template not found: The specified template does not exist for the generator type.",
      "Invalid name format: Name must be a valid identifier (alphanumeric and underscores only).",
      "Platform not supported: Target platform must be ios, android, web, or all.",
      "Property format error: Properties must be in valid format (name:type pairs).",
      "File already exists: A file with the same name already exists. Use force option to overwrite."
    ],
    "usage": "Provide project_path, generator_type, and name. Optionally specify template, properties, target_platform, include_tests, and style_framework. The tool generates the requested code files.",
    "output_details": {
      "files_generated": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of files that were generated"
      },
      "imports_added": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Import statements that need to be added to other files"
      },
      "next_steps": {
        "type": "string",
        "description": "Instructions for integrating the generated code"
      },
      "template_used": {
        "type": "string",
        "description": "Name of the template that was used for generation"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Asset Optimizer",
    "tool_description": "Optimizes images, icons, fonts, and other assets for different screen densities and platforms while maintaining quality and reducing bundle size.",
    "parameters": {
      "asset_path": {
        "type": "string",
        "required": true,
        "description": "Path to the asset file or directory to optimize"
      },
      "optimization_level": {
        "type": "string",
        "required": true,
        "description": "Optimization level (low, medium, high, lossless)"
      },
      "target_platforms": {
        "type": "array",
        "required": true,
        "description": "Platforms to optimize for",
        "items": {
          "type": "string"
        },
        "minItems": 1
      },
      "output_formats": {
        "type": "array",
        "required": false,
        "description": "Output formats to generate (webp, avif, png, jpg)",
        "items": {
          "type": "string"
        },
        "default": "None"
      },
      "generate_densities": {
        "type": "boolean",
        "required": false,
        "description": "Whether to generate multiple density versions",
        "default": true
      }
    },
    "error_messages": [
      "Asset not found: The specified asset path does not exist.",
      "Unsupported file format: Asset format is not supported for optimization.",
      "Invalid optimization level: Level must be low, medium, high, or lossless.",
      "Platform not supported: Supported platforms are ios, android, web.",
      "Output format error: Unsupported output format specified."
    ],
    "usage": "Provide asset_path, optimization_level, and target_platforms. Optionally specify output_formats and generate_densities flag to control the optimization process.",
    "output_details": {
      "optimized_assets": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Paths to the optimized asset files"
      },
      "size_reduction": {
        "type": "number",
        "description": "Percentage reduction in file size"
      },
      "formats_generated": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of formats that were generated"
      },
      "total_size_before": {
        "type": "integer",
        "description": "Total size in bytes before optimization"
      },
      "total_size_after": {
        "type": "integer",
        "description": "Total size in bytes after optimization"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Configuration Manager",
    "tool_description": "Manages environment configurations, API endpoints, feature flags, and build settings across different deployment environments and platforms.",
    "parameters": {
      "project_path": {
        "type": "string",
        "required": true,
        "description": "Path to the project directory"
      },
      "environment": {
        "type": "string",
        "required": true,
        "description": "Target environment (development, staging, production)"
      },
      "config_type": {
        "type": "string",
        "required": true,
        "description": "Type of configuration (app_config, build_config, secrets, features)"
      },
      "action": {
        "type": "string",
        "required": true,
        "description": "Action to perform (get, set, delete, validate, sync)"
      },
      "config_key": {
        "type": "string",
        "required": false,
        "description": "Specific configuration key to manage",
        "default": "None"
      },
      "config_value": {
        "type": "string",
        "required": false,
        "description": "Value to set for the configuration key",
        "default": "None"
      },
      "platform_specific": {
        "type": "boolean",
        "required": false,
        "description": "Whether the configuration is platform-specific",
        "default": false
      }
    },
    "error_messages": [
      "Project not found: The specified project path is not valid.",
      "Invalid environment: Environment must be development, staging, or production.",
      "Invalid config type: Type must be app_config, build_config, secrets, or features.",
      "Invalid action: Action must be get, set, delete, validate, or sync.",
      "Configuration key required: config_key is required for set and delete actions.",
      "Value required: config_value is required for set action.",
      "Validation failed: Configuration values do not meet validation requirements."
    ],
    "usage": "Specify project_path, environment, config_type, and action. For set operations, provide config_key and config_value. Use platform_specific flag for platform-specific configurations.",
    "output_details": {
      "status": {
        "type": "string",
        "description": "Operation status (success or failure)"
      },
      "config_value": {
        "type": "string",
        "description": "Retrieved or set configuration value"
      },
      "validation_errors": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of validation errors if any"
      },
      "synced_configs": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of configurations that were synchronized"
      },
      "environment_summary": {
        "type": "string",
        "description": "Summary of current environment configuration"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Code Quality Analyzer",
    "tool_description": "Analyzes code quality using static analysis tools, checks coding standards, detects code smells, and provides improvement suggestions.",
    "parameters": {
      "project_path": {
        "type": "string",
        "required": true,
        "description": "Path to the project directory to analyze"
      },
      "analysis_scope": {
        "type": "string",
        "required": true,
        "description": "Scope of analysis (full, changed_files, specific_directory)"
      },
      "rules_config": {
        "type": "string",
        "required": false,
        "description": "Path to custom rules configuration file",
        "default": "default"
      },
      "include_patterns": {
        "type": "array",
        "required": false,
        "description": "File patterns to include in analysis",
        "items": {
          "type": "string"
        },
        "default": "None"
      },
      "exclude_patterns": {
        "type": "array",
        "required": false,
        "description": "File patterns to exclude from analysis",
        "items": {
          "type": "string"
        },
        "default": "None"
      },
      "severity_threshold": {
        "type": "string",
        "required": false,
        "description": "Minimum severity level to report (info, warning, error, critical)",
        "default": "warning"
      },
      "output_format": {
        "type": "string",
        "required": false,
        "description": "Format for the analysis report (json, xml, html, console)",
        "default": "json"
      }
    },
    "error_messages": [
      "Project not found: The specified project path does not exist.",
      "Invalid analysis scope: Scope must be full, changed_files, or specific_directory.",
      "Rules config not found: The specified rules configuration file does not exist.",
      "Invalid severity threshold: Threshold must be info, warning, error, or critical.",
      "Invalid output format: Format must be json, xml, html, or console.",
      "Analysis failed: Static analysis tools encountered errors during execution."
    ],
    "usage": "Provide project_path and analysis_scope. Optionally specify rules_config, include/exclude patterns, severity_threshold, and output_format to customize the analysis.",
    "output_details": {
      "total_issues": {
        "type": "integer",
        "description": "Total number of issues found"
      },
      "issues_by_severity": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Breakdown of issues by severity level"
      },
      "code_coverage": {
        "type": "number",
        "description": "Code coverage percentage if available"
      },
      "technical_debt": {
        "type": "string",
        "description": "Estimated technical debt in time units"
      },
      "maintainability_score": {
        "type": "number",
        "description": "Maintainability score from 0-100"
      },
      "report_path": {
        "type": "string",
        "description": "Path to the detailed analysis report file"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Cross Platform Compiler",
    "tool_description": "Compiles source code for multiple target platforms simultaneously, handling platform-specific optimizations and generating native binaries.",
    "parameters": {
      "project_path": {
        "type": "string",
        "required": true,
        "description": "Path to the project directory"
      },
      "target_platforms": {
        "type": "array",
        "required": true,
        "description": "Platforms to compile for",
        "items": {
          "type": "string"
        },
        "minItems": 1,
        "maxItems": 5
      },
      "build_mode": {
        "type": "string",
        "required": true,
        "description": "Build mode (debug, release, profile)"
      },
      "architecture": {
        "type": "array",
        "required": false,
        "description": "Target architectures (arm64, x86_64, armv7)",
        "items": {
          "type": "string"
        },
        "default": ["arm64"]
      },
      "optimization_level": {
        "type": "string",
        "required": false,
        "description": "Compiler optimization level (O0, O1, O2, O3)",
        "default": "O2"
      },
      "enable_tree_shaking": {
        "type": "boolean",
        "required": false,
        "description": "Whether to enable dead code elimination",
        "default": true
      },
      "minify_output": {
        "type": "boolean",
        "required": false,
        "description": "Whether to minify the output code",
        "default": true
      },
      "parallel_builds": {
        "type": "integer",
        "required": false,
        "description": "Number of parallel build processes (1-8)",
        "default": 4
      },
      "custom_flags": {
        "type": "array",
        "required": false,
        "description": "Additional compiler flags",
        "items": {
          "type": "string"
        },
        "default": "None"
      },
      "output_directory": {
        "type": "string",
        "required": false,
        "description": "Custom output directory for compiled binaries",
        "default": "build"
      }
    },
    "error_messages": [
      "Project not found: The specified project path does not exist or is not a valid project.",
      "Unsupported platform: One or more target platforms are not supported.",
      "Invalid build mode: Build mode must be debug, release, or profile.",
      "Unsupported architecture: Architecture must be arm64, x86_64, or armv7.",
      "Invalid optimization level: Level must be O0, O1, O2, or O3.",
      "Parallel builds out of range: Number must be between 1 and 8.",
      "Compilation failed: Source code contains errors that prevent compilation.",
      "Insufficient disk space: Not enough space available for build output.",
      "Platform SDK missing: Required SDK for target platform is not installed."
    ],
    "usage": "Specify project_path, target_platforms, and build_mode. Optionally configure architecture, optimization_level, tree_shaking, minification, parallel_builds, custom_flags, and output_directory.",
    "output_details": {
      "build_status": {
        "type": "string",
        "description": "Overall build status (success, failed, partial)"
      },
      "compiled_platforms": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of platforms that compiled successfully"
      },
      "output_files": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Paths to generated binary files"
      },
      "build_time": {
        "type": "integer",
        "description": "Total build time in seconds"
      },
      "binary_sizes": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Size information for each generated binary"
      },
      "warnings_count": {
        "type": "integer",
        "description": "Number of compilation warnings"
      },
      "optimization_report": {
        "type": "string",
        "description": "Summary of optimization results"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Build Orchestrator",
    "tool_description": "Orchestrates complex build pipelines by coordinating multiple build steps, managing dependencies between tasks, and handling parallel execution.",
    "parameters": {
      "project_path": {
        "type": "string",
        "required": true,
        "description": "Path to the project directory"
      },
      "pipeline_config": {
        "type": "string",
        "required": true,
        "description": "Path to pipeline configuration file or predefined pipeline name"
      },
      "target_environments": {
        "type": "array",
        "required": true,
        "description": "Target environments for the build",
        "items": {
          "type": "string"
        },
        "minItems": 1
      },
      "parallel_execution": {
        "type": "boolean",
        "required": false,
        "description": "Whether to run independent tasks in parallel",
        "default": true
      },
      "skip_steps": {
        "type": "array",
        "required": false,
        "description": "Build steps to skip during execution",
        "items": {
          "type": "string"
        },
        "default": "None"
      },
      "force_rebuild": {
        "type": "boolean",
        "required": false,
        "description": "Whether to force rebuild all components",
        "default": false
      }
    },
    "error_messages": [
      "Project not found: The specified project path does not exist.",
      "Pipeline config not found: The pipeline configuration file does not exist.",
      "Invalid environment: One or more target environments are not recognized.",
      "Pipeline validation failed: The pipeline configuration contains errors.",
      "Step dependency error: Pipeline contains circular dependencies or missing steps.",
      "Resource conflict: Multiple steps are trying to access the same resource simultaneously."
    ],
    "usage": "Provide project_path, pipeline_config, and target_environments. Optionally configure parallel_execution, skip_steps, and force_rebuild to control pipeline execution.",
    "output_details": {
      "pipeline_status": {
        "type": "string",
        "description": "Overall pipeline execution status"
      },
      "completed_steps": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of successfully completed build steps"
      },
      "failed_steps": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of failed build steps"
      },
      "execution_time": {
        "type": "integer",
        "description": "Total pipeline execution time in seconds"
      },
      "artifacts_generated": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of build artifacts that were generated"
      },
      "next_pipeline": {
        "type": "string",
        "description": "Suggested next pipeline to run based on current results"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Testing Framework",
    "tool_description": "Executes comprehensive testing suites including unit tests, integration tests, UI tests, and cross-platform compatibility tests with detailed reporting.",
    "parameters": {
      "project_path": {
        "type": "string",
        "required": true,
        "description": "Path to the project directory"
      },
      "test_types": {
        "type": "array",
        "required": true,
        "description": "Types of tests to run",
        "items": {
          "type": "string"
        },
        "minItems": 1
      },
      "test_platforms": {
        "type": "array",
        "required": true,
        "description": "Platforms to run tests on",
        "items": {
          "type": "string"
        },
        "minItems": 1
      },
      "test_patterns": {
        "type": "array",
        "required": false,
        "description": "Test file patterns to include",
        "items": {
          "type": "string"
        },
        "default": "None"
      },
      "parallel_execution": {
        "type": "boolean",
        "required": false,
        "description": "Whether to run tests in parallel",
        "default": true
      },
      "coverage_threshold": {
        "type": "number",
        "required": false,
        "description": "Minimum code coverage percentage required (0-100)",
        "default": 80.0
      },
      "timeout_seconds": {
        "type": "integer",
        "required": false,
        "description": "Maximum time to wait for test completion",
        "default": 300
      },
      "retry_failed": {
        "type": "boolean",
        "required": false,
        "description": "Whether to retry failed tests once",
        "default": true
      },
      "generate_reports": {
        "type": "boolean",
        "required": false,
        "description": "Whether to generate detailed test reports",
        "default": true
      },
      "device_configurations": {
        "type": "array",
        "required": false,
        "description": "Specific device configurations for UI tests",
        "items": {
          "type": "string"
        },
        "default": "None"
      }
    },
    "error_messages": [
      "Project not found: The specified project path does not exist.",
      "Invalid test type: Supported types are unit, integration, ui, e2e, performance, accessibility.",
      "Unsupported platform: Platform must be ios, android, web, or simulator names.",
      "Coverage threshold invalid: Threshold must be between 0 and 100.",
      "Timeout invalid: Timeout must be a positive integer.",
      "No tests found: No test files match the specified patterns.",
      "Test execution failed: Tests could not be executed due to configuration errors.",
      "Device not available: Specified device configuration is not available for testing."
    ],
    "usage": "Specify project_path, test_types, and test_platforms. Optionally configure test_patterns, parallel_execution, coverage_threshold, timeout, retry behavior, reporting, and device_configurations.",
    "output_details": {
      "overall_status": {
        "type": "string",
        "description": "Overall test execution status (passed, failed, partial)"
      },
      "tests_passed": {
        "type": "integer",
        "description": "Number of tests that passed"
      },
      "tests_failed": {
        "type": "integer",
        "description": "Number of tests that failed"
      },
      "tests_skipped": {
        "type": "integer",
        "description": "Number of tests that were skipped"
      },
      "code_coverage": {
        "type": "number",
        "description": "Overall code coverage percentage achieved"
      },
      "execution_time": {
        "type": "integer",
        "description": "Total test execution time in seconds"
      },
      "failed_test_details": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Details of failed tests including error messages"
      },
      "report_paths": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Paths to generated test report files"
      },
      "performance_metrics": {
        "type": "string",
        "description": "Summary of performance test results if applicable"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Performance Profiler",
    "tool_description": "Profiles application performance including memory usage
