field_name: agriculture_environmental
subfield: Livestock Health and Management
task: Manage breeding programs and genetic lineage tracking
tool_description: |-
  ## STEP 1 — Rate task difficulty

  This task is **hard**. Managing breeding programs and genetic lineage tracking involves complex multi-generational data relationships, genetic calculations, compliance with breeding standards, coordination between multiple stakeholders, and high-stakes decisions that impact animal welfare and economic outcomes over long time horizons.

  ## STEP 2 — Set a tool budget

  Given the hard difficulty rating, I'm targeting **17 tools** within the 15-20 range to handle the comprehensive workflows needed for breeding program management and genetic tracking.

  ## STEP 3 — List all tool names and dependencies

  **Tools and their data flow:**
  1. **Animal Registry Creator** → produces animal records
  2. **Pedigree Validator** → consumes parent/offspring data → produces validation status
  3. **Genetic Coefficient Calculator** → consumes pedigree data → produces inbreeding/relationship coefficients
  4. **Breeding Compatibility Checker** → consumes animal records + genetic data → produces compatibility scores
  5. **Mating Plan Generator** → consumes compatibility data → produces breeding schedules
  6. **Pregnancy Status Tracker** → consumes breeding events → produces pregnancy records
  7. **Birth Record Manager** → consumes pregnancy data → produces offspring records
  8. **Genetic Trait Analyzer** → consumes phenotype/genotype data → produces trait predictions
  9. **Performance Data Collector** → produces performance metrics
  10. **Breeding Value Estimator** → consumes performance + pedigree data → produces breeding values
  11. **Selection Criteria Evaluator** → consumes breeding values + criteria → produces selection rankings
  12. **Lineage Report Generator** → consumes pedigree data → produces genealogy reports
  13. **Health Record Integrator** → consumes health data → produces health summaries
  14. **Breeding Goal Optimizer** → consumes multiple data sources → produces optimization recommendations
  15. **Genetic Diversity Monitor** → consumes population data → produces diversity metrics
  16. **Compliance Status Checker** → consumes breeding records → produces regulatory compliance status
  17. **Breeding Program Evaluator** → consumes historical data → produces program performance analysis

  ## STEP 4 — Multi-tool plans

  **Simple plans:**
  1. **Basic animal registration**: Animal Registry Creator → Pedigree Validator → Health Record Integrator
  2. **Simple mating decision**: Breeding Compatibility Checker → Mating Plan Generator

  **Medium plans:**
  1. **Breeding value assessment**: Performance Data Collector → Genetic Trait Analyzer → Breeding Value Estimator → Selection Criteria Evaluator
  2. **Pregnancy management**: Mating Plan Generator → Pregnancy Status Tracker → Birth Record Manager → Animal Registry Creator
  3. **Lineage documentation**: Pedigree Validator → Genetic Coefficient Calculator → Lineage Report Generator

  **Complex plans:**
  1. **Comprehensive breeding program**: Animal Registry Creator → Pedigree Validator → Genetic Coefficient Calculator → Performance Data Collector → Breeding Value Estimator → Selection Criteria Evaluator → Breeding Compatibility Checker → Mating Plan Generator → Breeding Goal Optimizer
  2. **Population management workflow**: Genetic Diversity Monitor → Breeding Compatibility Checker → Selection Criteria Evaluator → Mating Plan Generator → Compliance Status Checker → Breeding Program Evaluator

  ## STEP 5 — Produce tools

  ```json
  {
    "tool_name": "Animal Registry Creator",
    "tool_description": "Creates new animal records in the breeding database with essential identification and basic information for livestock management.",
    "parameters": {
      "animal_id": {
        "type": "string",
        "required": true,
        "description": "Unique identifier for the animal"
      },
      "species": {
        "type": "string",
        "required": true,
        "description": "Species of the animal (cattle, sheep, goat, pig, horse, etc.)"
      },
      "breed": {
        "type": "string",
        "required": true,
        "description": "Breed name of the animal"
      },
      "sex": {
        "type": "string",
        "required": true,
        "description": "Sex of the animal (male, female)"
      },
      "birth_date": {
        "type": "string",
        "required": true,
        "description": "Date of birth in ISO 8601 format",
        "format": "date-time"
      }
    },
    "error_messages": [
      "Duplicate animal ID: The provided animal_id already exists in the registry.",
      "Invalid species: Species must be a recognized livestock type.",
      "Invalid sex: Sex must be either 'male' or 'female'.",
      "Invalid birth date: Date must be in ISO 8601 format and not in the future."
    ],
    "usage": "Provide animal_id, species, breed, sex, and birth_date to create a new animal record. Ensure the animal_id is unique and all required information is accurate.",
    "output_details": {
      "registry_status": {
        "type": "string",
        "description": "Confirmation status of the registration"
      },
      "assigned_id": {
        "type": "string",
        "description": "The unique ID assigned to the animal"
      },
      "registration_date": {
        "type": "string",
        "description": "Timestamp when the animal was registered"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Pedigree Validator",
    "tool_description": "Validates pedigree relationships and ensures genetic lineage accuracy by checking parent-offspring relationships and detecting inconsistencies.",
    "parameters": {
      "animal_id": {
        "type": "string",
        "required": true,
        "description": "ID of the animal whose pedigree is being validated"
      },
      "sire_id": {
        "type": "string",
        "required": false,
        "description": "ID of the father",
        "default": "None"
      },
      "dam_id": {
        "type": "string",
        "required": false,
        "description": "ID of the mother",
        "default": "None"
      },
      "generations_to_check": {
        "type": "integer",
        "required": false,
        "description": "Number of generations back to validate (1-10)",
        "default": 3
      },
      "validation_level": {
        "type": "string",
        "required": false,
        "description": "Validation strictness: basic, standard, or comprehensive",
        "default": "standard"
      }
    },
    "error_messages": [
      "Animal not found: The specified animal_id does not exist in the registry.",
      "Parent not found: One or both parent IDs do not exist in the registry.",
      "Circular pedigree: Detected circular relationship in the pedigree chain.",
      "Invalid generations: generations_to_check must be between 1 and 10.",
      "Invalid validation level: Must be 'basic', 'standard', or 'comprehensive'.",
      "Age inconsistency: Parent birth date is after offspring birth date."
    ],
    "usage": "Provide animal_id and optionally sire_id, dam_id, generations_to_check, and validation_level. The tool will verify pedigree consistency and identify any errors in the lineage.",
    "output_details": {
      "validation_status": {
        "type": "string",
        "description": "Overall validation result: valid, warning, or error"
      },
      "errors_found": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of validation errors discovered"
      },
      "warnings": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of validation warnings"
      },
      "pedigree_completeness": {
        "type": "number",
        "description": "Percentage of known ancestors in the specified generations"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Genetic Coefficient Calculator",
    "tool_description": "Calculates inbreeding coefficients and relationship coefficients between animals based on pedigree data for breeding decisions.",
    "parameters": {
      "animal_id": {
        "type": "string",
        "required": true,
        "description": "Primary animal ID for coefficient calculation"
      },
      "comparison_animal_id": {
        "type": "string",
        "required": false,
        "description": "Second animal ID for relationship coefficient calculation",
        "default": "None"
      },
      "generations": {
        "type": "integer",
        "required": false,
        "description": "Number of generations to include in calculation (3-10)",
        "default": 5
      },
      "coefficient_type": {
        "type": "string",
        "required": true,
        "description": "Type of coefficient: inbreeding, relationship, or both"
      }
    },
    "error_messages": [
      "Animal not found: One or both animal IDs do not exist in the registry.",
      "Insufficient pedigree data: Not enough ancestral information for accurate calculation.",
      "Invalid generations: generations must be between 3 and 10.",
      "Invalid coefficient type: Must be 'inbreeding', 'relationship', or 'both'.",
      "Missing comparison animal: comparison_animal_id required when coefficient_type includes 'relationship'."
    ],
    "usage": "Specify animal_id and coefficient_type. For relationship coefficients, also provide comparison_animal_id. Adjust generations as needed for calculation depth.",
    "output_details": {
      "inbreeding_coefficient": {
        "type": "number",
        "description": "Inbreeding coefficient value (0-1)"
      },
      "relationship_coefficient": {
        "type": "number",
        "description": "Relationship coefficient between the two animals (0-1)"
      },
      "calculation_confidence": {
        "type": "string",
        "description": "Confidence level of the calculation: high, medium, or low"
      },
      "pedigree_depth": {
        "type": "integer",
        "description": "Actual generations used in the calculation"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Breeding Compatibility Checker",
    "tool_description": "Evaluates breeding compatibility between potential mates considering genetic relationships, health status, and breeding objectives.",
    "parameters": {
      "male_id": {
        "type": "string",
        "required": true,
        "description": "ID of the male animal"
      },
      "female_id": {
        "type": "string",
        "required": true,
        "description": "ID of the female animal"
      },
      "max_inbreeding_threshold": {
        "type": "number",
        "required": false,
        "description": "Maximum acceptable inbreeding coefficient (0-0.25)",
        "default": 0.0625
      },
      "health_requirements": {
        "type": "array",
        "required": false,
        "description": "Required health test results",
        "items": {
          "type": "string"
        },
        "default": "None"
      },
      "breeding_objectives": {
        "type": "array",
        "required": false,
        "description": "Primary breeding goals to optimize",
        "items": {
          "type": "string"
        },
        "default": "None"
      }
    },
    "error_messages": [
      "Animal not found: One or both animal IDs do not exist in the registry.",
      "Same sex pairing: Both animals are the same sex.",
      "Invalid inbreeding threshold: max_inbreeding_threshold must be between 0 and 0.25.",
      "Age incompatibility: One or both animals are not of breeding age.",
      "Health data missing: Required health test results are not available for one or both animals."
    ],
    "usage": "Provide male_id and female_id for the potential mating pair. Optionally set max_inbreeding_threshold, health_requirements, and breeding_objectives to customize compatibility assessment.",
    "output_details": {
      "compatibility_score": {
        "type": "number",
        "description": "Overall compatibility score (0-100)"
      },
      "inbreeding_risk": {
        "type": "string",
        "description": "Risk level: low, medium, or high"
      },
      "health_compatibility": {
        "type": "string",
        "description": "Health compatibility status: compatible, warning, or incompatible"
      },
      "genetic_diversity_impact": {
        "type": "string",
        "description": "Impact on genetic diversity: positive, neutral, or negative"
      },
      "recommendation": {
        "type": "string",
        "description": "Breeding recommendation: recommended, conditional, or not recommended"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Mating Plan Generator",
    "tool_description": "Creates optimized breeding schedules and mating assignments based on compatibility scores, breeding goals, and operational constraints.",
    "parameters": {
      "planning_period_start": {
        "type": "string",
        "required": true,
        "description": "Start date of the breeding period",
        "format": "date-time"
      },
      "planning_period_end": {
        "type": "string",
        "required": true,
        "description": "End date of the breeding period",
        "format": "date-time"
      },
      "available_males": {
        "type": "array",
        "required": true,
        "description": "List of available male animal IDs",
        "items": {
          "type": "string"
        },
        "minItems": 1
      },
      "available_females": {
        "type": "array",
        "required": true,
        "description": "List of available female animal IDs",
        "items": {
          "type": "string"
        },
        "minItems": 1
      },
      "breeding_method": {
        "type": "string",
        "required": false,
        "description": "Breeding method: natural, artificial_insemination, or embryo_transfer",
        "default": "natural"
      },
      "max_matings_per_male": {
        "type": "integer",
        "required": false,
        "description": "Maximum number of females per male (1-50)",
        "default": 10
      },
      "optimization_priority": {
        "type": "string",
        "required": false,
        "description": "Primary optimization goal: genetic_gain, diversity, or balanced",
        "default": "balanced"
      }
    },
    "error_messages": [
      "Invalid date range: planning_period_start must be before planning_period_end.",
      "Empty animal lists: Both available_males and available_females must contain at least one ID.",
      "Animal not found: One or more animal IDs do not exist in the registry.",
      "Invalid breeding method: Must be 'natural', 'artificial_insemination', or 'embryo_transfer'.",
      "Invalid max matings: max_matings_per_male must be between 1 and 50.",
      "Invalid optimization priority: Must be 'genetic_gain', 'diversity', or 'balanced'."
    ],
    "usage": "Specify the planning period dates and lists of available males and females. Customize breeding_method, max_matings_per_male, and optimization_priority as needed for your operation.",
    "output_details": {
      "mating_assignments": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of recommended male-female pairings"
      },
      "breeding_schedule": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Chronological schedule of breeding activities"
      },
      "expected_offspring_count": {
        "type": "integer",
        "description": "Projected number of offspring from the plan"
      },
      "genetic_diversity_score": {
        "type": "number",
        "description": "Expected genetic diversity score of offspring (0-100)"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Pregnancy Status Tracker",
    "tool_description": "Monitors and updates pregnancy status of bred females, tracks breeding dates, and estimates due dates for breeding program management.",
    "parameters": {
      "female_id": {
        "type": "string",
        "required": true,
        "description": "ID of the female animal"
      },
      "breeding_date": {
        "type": "string",
        "required": true,
        "description": "Date when breeding occurred",
        "format": "date-time"
      },
      "male_id": {
        "type": "string",
        "required": true,
        "description": "ID of the male animal used for breeding"
      },
      "pregnancy_status": {
        "type": "string",
        "required": true,
        "description": "Current pregnancy status: confirmed, suspected, not_confirmed, or failed"
      },
      "confirmation_date": {
        "type": "string",
        "required": false,
        "description": "Date when pregnancy status was confirmed",
        "format": "date-time",
        "default": "None"
      },
      "confirmation_method": {
        "type": "string",
        "required": false,
        "description": "Method used to confirm pregnancy: ultrasound, blood_test, or physical_exam",
        "default": "None"
      }
    },
    "error_messages": [
      "Animal not found: female_id or male_id does not exist in the registry.",
      "Invalid breeding date: Date cannot be in the future and must be in ISO 8601 format.",
      "Invalid pregnancy status: Must be 'confirmed', 'suspected', 'not_confirmed', or 'failed'.",
      "Invalid confirmation method: Must be 'ultrasound', 'blood_test', or 'physical_exam'.",
      "Date inconsistency: confirmation_date cannot be before breeding_date.",
      "Missing confirmation data: confirmation_date required when status is 'confirmed'."
    ],
    "usage": "Provide female_id, breeding_date, male_id, and pregnancy_status. Include confirmation_date and confirmation_method when pregnancy is confirmed.",
    "output_details": {
      "tracking_id": {
        "type": "string",
        "description": "Unique identifier for this pregnancy record"
      },
      "estimated_due_date": {
        "type": "string",
        "description": "Calculated due date based on species gestation period"
      },
      "days_pregnant": {
        "type": "integer",
        "description": "Current number of days since breeding"
      },
      "status_confidence": {
        "type": "string",
        "description": "Confidence level of pregnancy status: high, medium, or low"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Birth Record Manager",
    "tool_description": "Records birth events and creates offspring records with parentage information for genetic lineage tracking in breeding programs.",
    "parameters": {
      "mother_id": {
        "type": "string",
        "required": true,
        "description": "ID of the mother animal"
      },
      "father_id": {
        "type": "string",
        "required": true,
        "description": "ID of the father animal"
      },
      "birth_date": {
        "type": "string",
        "required": true,
        "description": "Date and time of birth",
        "format": "date-time"
      },
      "offspring_count": {
        "type": "integer",
        "required": true,
        "description": "Number of offspring born (1-10)"
      },
      "offspring_sexes": {
        "type": "array",
        "required": true,
        "description": "Sex of each offspring in birth order",
        "items": {
          "type": "string"
        },
        "minItems": 1,
        "maxItems": 10
      },
      "birth_weights": {
        "type": "array",
        "required": false,
        "description": "Birth weights in kg for each offspring",
        "items": {
          "type": "number"
        },
        "default": "None"
      },
      "birth_difficulty": {
        "type": "string",
        "required": false,
        "description": "Birth difficulty level: easy, normal, difficult, or assisted",
        "default": "normal"
      },
      "health_status": {
        "type": "array",
        "required": false,
        "description": "Health status of each offspring: healthy, weak, or medical_attention",
        "items": {
          "type": "string"
        },
        "default": "None"
      }
    },
    "error_messages": [
      "Parent not found: mother_id or father_id does not exist in the registry.",
      "Invalid birth date: Date must be in ISO 8601 format and cannot be in the future.",
      "Invalid offspring count: Must be between 1 and 10.",
      "Array length mismatch: offspring_sexes, birth_weights, and health_status arrays must match offspring_count.",
      "Invalid sex value: Each sex must be 'male' or 'female'.",
      "Invalid birth difficulty: Must be 'easy', 'normal', 'difficult', or 'assisted'.",
      "Invalid health status: Each status must be 'healthy', 'weak', or 'medical_attention'.",
      "Negative birth weight: All birth weights must be positive numbers."
    ],
    "usage": "Record birth_date, mother_id, father_id, offspring_count, and offspring_sexes. Optionally include birth_weights, birth_difficulty, and health_status for complete records.",
    "output_details": {
      "offspring_ids": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Generated unique IDs for each offspring"
      },
      "birth_record_id": {
        "type": "string",
        "description": "Unique identifier for this birth event"
      },
      "registration_status": {
        "type": "string",
        "description": "Status of offspring registration: completed, partial, or pending"
      },
      "litter_size": {
        "type": "integer",
        "description": "Total number of offspring born"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Genetic Trait Analyzer",
    "tool_description": "Analyzes genetic and phenotypic traits of animals to predict breeding values and genetic potential for specific characteristics.",
    "parameters": {
      "animal_id": {
        "type": "string",
        "required": true,
        "description": "ID of the animal to analyze"
      },
      "trait_categories": {
        "type": "array",
        "required": true,
        "description": "Categories of traits to analyze",
        "items": {
          "type": "string"
        },
        "minItems": 1,
        "maxItems": 15
      },
      "phenotype_data": {
        "type": "array",
        "required": false,
        "description": "Observed phenotype values corresponding to trait categories",
        "items": {
          "type": "number"
        },
        "default": "None"
      },
      "genotype_data": {
        "type": "array",
        "required": false,
        "description": "Genetic marker data or test results",
        "items": {
          "type": "string"
        },
        "default": "None"
      },
      "age_at_measurement": {
        "type": "integer",
        "required": false,
        "description": "Age of animal when measurements were taken (in days)",
        "default": "None"
      },
      "measurement_conditions": {
        "type": "string",
        "required": false,
        "description": "Environmental conditions during measurement: standard, field, or laboratory",
        "default": "standard"
      },
      "analysis_method": {
        "type": "string",
        "required": false,
        "description": "Analysis approach: phenotypic, genomic, or blended",
        "default": "blended"
      }
    },
    "error_messages": [
      "Animal not found: The specified animal_id does not exist in the registry.",
      "Invalid trait categories: Each category must be a recognized trait type for the species.",
      "Data array mismatch: phenotype_data length must match trait_categories length when provided.",
      "Invalid measurement conditions: Must be 'standard', 'field', or 'laboratory'.",
      "Invalid analysis method: Must be 'phenotypic', 'genomic', or 'blended'.",
      "Missing required data: At least phenotype_data or genotype_data must be provided.",
      "Invalid age: age_at_measurement must be a positive integer.",
      "Insufficient data: Not enough data points for reliable trait analysis."
    ],
    "usage": "Specify animal_id and trait_categories to analyze. Provide phenotype_data and/or genotype_data based on available information. Set analysis_method based on data type and analysis goals.",
    "output_details": {
      "trait_predictions": {
        "type": "array",
        "items": {
          "type": "number"
        },
        "description": "Predicted breeding values for each analyzed trait"
      },
      "prediction_accuracy": {
        "type": "array",
        "items": {
          "type": "number"
        },
        "description": "Accuracy scores (0-1) for each trait prediction"
      },
      "genetic_merit_rank": {
        "type": "string",
        "description": "Overall genetic merit ranking: excellent, good, average, or below_average"
      },
      "trait_heritabilities": {
        "type": "array",
        "items": {
          "type": "number"
        },
        "description": "Heritability estimates for each trait"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Performance Data Collector",
    "tool_description": "Collects and organizes performance measurements and production data for animals to support breeding value estimation and selection decisions.",
    "parameters": {
      "animal_id": {
        "type": "string",
        "required": true,
        "description": "ID of the animal being measured"
      },
      "measurement_date": {
        "type": "string",
        "required": true,
        "description": "Date when measurements were taken",
        "format": "date-time"
      },
      "performance_traits": {
        "type": "array",
        "required": true,
        "description": "Names of performance traits measured",
        "items": {
          "type": "string"
        },
        "minItems": 1,
        "maxItems": 20
      },
      "measurement_values": {
        "type": "array",
        "required": true,
        "description": "Measured values for each performance trait",
        "items": {
          "type": "number"
        },
        "minItems": 1,
        "maxItems": 20
      },
      "measurement_units": {
        "type": "array",
        "required": true,
        "description": "Units of measurement for each trait",
        "items": {
          "type": "string"
        },
        "minItems": 1,
        "maxItems": 20
      },
      "measurement_method": {
        "type": "string",
        "required": false,
        "description": "Method used for measurement: direct, estimated, or calculated",
        "default": "direct"
      },
      "environmental_factors": {
        "type": "array",
        "required": false,
        "description": "Environmental conditions affecting measurements",
        "items": {
          "type": "string"
        },
        "default": "None"
      },
      "technician_id": {
        "type": "string",
        "required": false,
        "description": "ID of person who took the measurements",
        "default": "None"
      }
    },
    "error_messages": [
      "Animal not found: The specified animal_id does not exist in the registry.",
      "Invalid measurement date: Date must be in ISO 8601 format and not in the future.",
      "Array length mismatch: performance_traits, measurement_values, and measurement_units must have the same length.",
      "Invalid measurement method: Must be 'direct', 'estimated', or 'calculated'.",
      "Invalid measurement values: All values must be numeric and appropriate for the trait type.",
      "Empty arrays: All trait, value, and unit arrays must contain at least one element.",
      "Unrecognized trait: One or more performance traits are not recognized for this species."
    ],
    "usage": "Provide animal_id, measurement_date, and arrays of performance_traits, measurement_values, and measurement_units. Optionally specify measurement_method, environmental_factors, and technician_id for complete records.",
    "output_details": {
      "record_id": {
        "type": "string",
        "description": "Unique identifier for this performance record"
      },
      "data_quality_score": {
        "type": "number",
        "description": "Quality assessment score of the collected data (0-100)"
      },
      "outlier_flags": {
        "type": "array",
        "items": {
          "type": "boolean"
        },
        "description": "Flags indicating potential outliers for each measurement"
      },
      "storage_status": {
        "type": "string",
        "description": "Status of data storage: saved, pending, or error"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Breeding Value Estimator",
    "tool_description": "Calculates estimated breeding values (EBVs) for animals using performance data, pedigree information, and genetic relationships.",
    "parameters": {
      "animal_ids": {
        "type": "array",
        "required": true,
        "description": "List of animal IDs to calculate breeding values for",
        "items": {
          "type": "string"
        },
        "minItems": 1,
        "maxItems": 100
      },
      "traits_of_interest": {
        "type": "array",
        "required": true,
        "description": "Traits to calculate breeding values for",
        "items": {
          "type": "string"
        },
        "minItems": 1,
        "maxItems": 10
      },
      "evaluation_model": {
        "type": "string",
        "required": false,
        "description": "Statistical model: animal_model, sire_model, or maternal_model",
        "default": "animal_model"
      },
      "include_genomics": {
        "type": "boolean",
        "required": false,
        "description": "Whether to include genomic information in evaluation",
        "default": false
      },
      "reference_population": {
        "type": "string",
        "required": false,
        "description": "Reference population for comparison: breed, contemporary, or custom",
        "default": "breed"
      }
    },
    "error_messages": [
      "Animal not found: One or more animal_ids do not exist in the registry.",
      "Invalid evaluation model: Must be 'animal_model', 'sire_model', or 'maternal_model'.",
      "Unrecognized traits: One or more traits are not recognized for breeding value estimation.",
      "Insufficient data: Not enough performance or pedigree data for reliable EBV calculation.",
      "Invalid reference population: Must be 'breed', 'contemporary', or 'custom'.",
      "Genomic data unavailable: include_genomics set to true but no genomic data available."
    ],
    "usage": "Specify animal_ids and traits_of_interest for EBV calculation. Choose appropriate evaluation_model and reference_population. Set include_
