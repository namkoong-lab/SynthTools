field_name: databases
subfield: Database Security and Access Control
task: Security Policy Configuration and Enforcement
tool_description: "**STEP 1 — Rate task difficulty**\n\nSecurity Policy Configuration and Enforcement is a **hard** task due to its broad scope covering authentication, authorization, encryption, auditing, and compliance requirements. It involves complex interdependencies between user management, role hierarchies, resource permissions, and audit trails, with high risk of security breaches if configured incorrectly.\n\n**STEP 2 — Set a tool budget**\n\nGiven the hard difficulty rating, I'll target **17 tools** within the 15-20 range to comprehensively cover user management, role-based access control, policy enforcement, auditing, encryption, and compliance monitoring.\n\n**STEP 3 — List all tool names with dependencies and affordances**\n\n1. **User Account Manager** - Creates/manages user accounts → Provides user identities for role assignment\n2. **Role Definition Engine** - Defines roles and hierarchies → Provides role structures for permission assignment  \n3. **Permission Matrix Builder** - Maps permissions to resources → Provides permission mappings for policy creation\n4. **Access Policy Generator** - Creates comprehensive access policies → Provides policies for enforcement\n5. **Authentication Configuration Tool** - Configures auth methods → Provides auth configs for user verification\n6. **Session Management Controller** - Manages user sessions → Provides session controls for access enforcement\n7. **Resource Access Validator** - Validates access requests → Consumes policies/permissions, provides access decisions\n8. **Database Connection Auditor** - Monitors connections → Provides connection logs for security analysis\n9. **Query Permission Checker** - Validates query permissions → Consumes user context, provides query authorization\n10. **Data Masking Policy Engine** - Configures data masking rules → Provides masking policies for sensitive data\n11. **Encryption Key Manager** - Manages encryption keys → Provides key management for data protection\n12. **Audit Trail Generator** - Creates comprehensive audit logs → Provides audit data for compliance\n13. **Security Violation Detector** - Detects policy violations → Consumes audit data, provides violation alerts\n14. **Compliance Checker** - Validates regulatory compliance → Consumes policies/logs, provides compliance status\n15. **Security Policy Validator** - Validates policy configurations → Provides policy validation results\n16. **Access Pattern Analyzer** - Analyzes user access patterns → Provides behavioral insights for anomaly detection\n17. **Security Configuration Exporter** - Exports security configurations → Provides configuration backups and documentation\n\n**STEP 4 — Multi-tool plans**\n\n**Simple Plans:**\n1. **Basic User Setup**: User Account Manager → Role Definition Engine → Permission Matrix Builder (Create users, assign roles, set basic permissions)\n2. **Query Authorization**: Authentication Configuration Tool → Query Permission Checker → Audit Trail Generator (Authenticate user, check query rights, log activity)\n\n**Medium Plans:**  \n1. **Access Policy Implementation**: Role Definition Engine → Permission Matrix Builder → Access Policy Generator → Security Policy Validator → Resource Access Validator (Define roles, map permissions, create policies, validate configs, enforce access)\n2. **Session Security**: Authentication Configuration Tool → Session Management Controller → Database Connection Auditor → Security Violation Detector (Configure auth, manage sessions, monitor connections, detect violations)\n\n**Complex Plans:**\n1. **Comprehensive Security Setup**: User Account Manager → Role Definition Engine → Permission Matrix Builder → Access Policy Generator → Data Masking Policy Engine → Encryption Key Manager → Security Policy Validator (Full security infrastructure deployment)\n2. **Continuous Monitoring & Compliance**: Database Connection Auditor → Query Permission Checker → Audit Trail Generator → Access Pattern Analyzer → Security Violation Detector → Compliance Checker (Complete monitoring and compliance workflow)\n\n**STEP 5 — Produce\
  \ tools**\n\n```json\n{\n  \"tool_name\": \"User Account Manager\",\n  \"tool_description\": \"Creates, modifies, and manages database user accounts with authentication credentials and basic access settings.\",\n  \"parameters\": {\n    \"username\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Unique username for the database account\"\n    },\n    \"operation\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Operation type: create, update, delete, disable, enable\"\n    },\n    \"password\": {\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"User password (required for create operation)\",\n      \"default\": null\n    },\n    \"email\": {\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"User email address\",\n      \"default\": null\n    },\n    \"expiration_date\": {\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"Account expiration date\",\n      \"format\": \"date-time\",\n      \"default\": null\n    }\n  },\n  \"error_messages\": [\n    \"Invalid operation: Use one of [create, update, delete, disable, enable]\",\n    \"Username already exists: Choose a different username for create operation\",\n    \"Username not found: Provided username does not exist for update/delete operations\",\n    \"Password required: Password must be provided for create operation\",\n    \"Invalid email format: Provide a valid email address\",\n    \"Invalid expiration date: Use ISO 8601 date-time format\"\n  ],\n  \"usage\": \"Specify username and operation type. For create operations, include password. Optionally set email and expiration_date for account management.\",\n  \"output_details\": {\n    \"status\": {\n      \"type\": \"string\",\n      \"description\": \"Operation completion status\"\n    },\n    \"user_id\": {\n      \"type\": \"string\",\n      \"description\": \"Unique identifier for the user account\"\n    },\n    \"message\": {\n      \"type\": \"string\",\n      \"description\": \"Detailed result message\"\n    }\n  }\n}\n```\n\n```json\n{\n  \"tool_name\": \"Role Definition Engine\",\n  \"tool_description\": \"Defines database roles, establishes role hierarchies, and manages role inheritance relationships for access control.\",\n  \"parameters\": {\n    \"role_name\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Unique name for the database role\"\n    },\n    \"description\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Description of the role's purpose and scope\"\n    },\n    \"parent_roles\": {\n      \"type\": \"array\",\n      \"required\": false,\n      \"description\": \"List of parent roles this role inherits from\",\n      \"items\": {\"type\": \"string\"},\n      \"default\": []\n    },\n    \"privilege_level\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Base privilege level: read_only, read_write, admin, super_admin\"\n    },\n    \"database_scope\": {\n      \"type\": \"array\",\n      \"required\": false,\n      \"description\": \"Databases this role applies to\",\n      \"items\": {\"type\": \"string\"},\n      \"default\": [\"all\"]\n    },\n    \"is_system_role\": {\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Whether this is a system-defined role\",\n      \"default\": false\n    }\n  },\n  \"error_messages\": [\n    \"Role name already exists: Choose a unique role name\",\n    \"Invalid privilege level: Use one of [read_only, read_write, admin, super_admin]\",\n    \"Circular inheritance detected: Parent roles create a circular dependency\",\n    \"Parent role not found: One or more specified parent roles do not exist\",\n    \"Cannot modify system role: System roles cannot be altered\",\n    \"Invalid database scope: Specified databases do not exist\"\n  ],\n  \"usage\": \"Provide role_name, description, and privilege_level. Optionally specify parent_roles for inheritance,\
  \ database_scope for limited scope, and is_system_role for system roles.\",\n  \"output_details\": {\n    \"role_id\": {\n      \"type\": \"string\",\n      \"description\": \"Unique identifier for the created role\"\n    },\n    \"effective_permissions\": {\n      \"type\": \"array\",\n      \"items\": {\"type\": \"string\"},\n      \"description\": \"List of all effective permissions including inherited ones\"\n    },\n    \"hierarchy_level\": {\n      \"type\": \"integer\",\n      \"description\": \"Role's level in the hierarchy tree\"\n    },\n    \"status\": {\n      \"type\": \"string\",\n      \"description\": \"Role creation status\"\n    }\n  }\n}\n```\n\n```json\n{\n  \"tool_name\": \"Permission Matrix Builder\",\n  \"tool_description\": \"Creates and manages detailed permission matrices mapping database resources to specific access rights and operations.\",\n  \"parameters\": {\n    \"resource_type\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Type of database resource: table, view, procedure, function, schema, database\"\n    },\n    \"resource_name\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Name of the specific resource\"\n    },\n    \"permissions\": {\n      \"type\": \"array\",\n      \"required\": true,\n      \"description\": \"List of permissions to grant\",\n      \"items\": {\"type\": \"string\"},\n      \"minItems\": 1,\n      \"maxItems\": 20\n    },\n    \"grantee_type\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Type of permission recipient: user, role, group\"\n    },\n    \"grantee_name\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Name of the user, role, or group receiving permissions\"\n    },\n    \"grant_option\": {\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Whether grantee can grant these permissions to others\",\n      \"default\": false\n    },\n    \"conditions\": {\n      \"type\": \"array\",\n      \"required\": false,\n      \"description\": \"Conditional restrictions for permission usage\",\n      \"items\": {\"type\": \"string\"},\n      \"default\": []\n    },\n    \"expiration_date\": {\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"When permissions expire\",\n      \"format\": \"date-time\",\n      \"default\": null\n    }\n  },\n  \"error_messages\": [\n    \"Invalid resource type: Use one of [table, view, procedure, function, schema, database]\",\n    \"Resource not found: Specified resource does not exist in the database\",\n    \"Invalid permission: One or more permissions are not valid for the resource type\",\n    \"Invalid grantee type: Use one of [user, role, group]\",\n    \"Grantee not found: Specified user, role, or group does not exist\",\n    \"Permission already exists: This permission is already granted to the specified grantee\",\n    \"Invalid condition syntax: Check condition formatting and syntax\"\n  ],\n  \"usage\": \"Specify resource_type, resource_name, permissions array, grantee_type, and grantee_name. Optionally set grant_option, conditions, and expiration_date for advanced permission control.\",\n  \"output_details\": {\n    \"permission_id\": {\n      \"type\": \"string\",\n      \"description\": \"Unique identifier for the permission grant\"\n    },\n    \"effective_permissions\": {\n      \"type\": \"array\",\n      \"items\": {\"type\": \"string\"},\n      \"description\": \"Complete list of effective permissions after inheritance\"\n    },\n    \"conflicts\": {\n      \"type\": \"array\",\n      \"items\": {\"type\": \"string\"},\n      \"description\": \"Any permission conflicts detected\"\n    },\n    \"status\": {\n      \"type\": \"string\",\n      \"description\": \"Permission grant status\"\n    }\n  }\n}\n```\n\n```json\n{\n  \"tool_name\": \"Access Policy Generator\",\n  \"tool_description\": \"Generates comprehensive database access policies combining roles, permissions, and security rules into enforceable\
  \ policy documents.\",\n  \"parameters\": {\n    \"policy_name\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Unique name for the access policy\"\n    },\n    \"policy_type\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Policy classification: standard, restrictive, permissive, compliance\"\n    },\n    \"target_roles\": {\n      \"type\": \"array\",\n      \"required\": true,\n      \"description\": \"Roles this policy applies to\",\n      \"items\": {\"type\": \"string\"},\n      \"minItems\": 1,\n      \"maxItems\": 50\n    },\n    \"allowed_operations\": {\n      \"type\": \"array\",\n      \"required\": true,\n      \"description\": \"Database operations permitted by this policy\",\n      \"items\": {\"type\": \"string\"},\n      \"minItems\": 1,\n      \"maxItems\": 30\n    },\n    \"denied_operations\": {\n      \"type\": \"array\",\n      \"required\": false,\n      \"description\": \"Explicitly denied operations\",\n      \"items\": {\"type\": \"string\"},\n      \"default\": []\n    },\n    \"time_restrictions\": {\n      \"type\": \"array\",\n      \"required\": false,\n      \"description\": \"Time-based access restrictions\",\n      \"items\": {\"type\": \"string\"},\n      \"default\": []\n    },\n    \"ip_restrictions\": {\n      \"type\": \"array\",\n      \"required\": false,\n      \"description\": \"IP address or network restrictions\",\n      \"items\": {\"type\": \"string\"},\n      \"default\": []\n    },\n    \"data_classification_rules\": {\n      \"type\": \"array\",\n      \"required\": false,\n      \"description\": \"Rules for handling classified data\",\n      \"items\": {\"type\": \"string\"},\n      \"default\": []\n    },\n    \"audit_level\": {\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"Auditing level: none, basic, detailed, comprehensive\",\n      \"default\": \"basic\"\n    },\n    \"priority\": {\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"Policy priority for conflict resolution (1-100)\",\n      \"default\": 50\n    },\n    \"effective_date\": {\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"When policy becomes effective\",\n      \"format\": \"date-time\",\n      \"default\": null\n    },\n    \"expiration_date\": {\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"When policy expires\",\n      \"format\": \"date-time\",\n      \"default\": null\n    }\n  },\n  \"error_messages\": [\n    \"Invalid policy type: Use one of [standard, restrictive, permissive, compliance]\",\n    \"Role not found: One or more specified roles do not exist\",\n    \"Invalid operation: One or more operations are not recognized\",\n    \"Conflicting operations: Same operation appears in both allowed and denied lists\",\n    \"Invalid time restriction format: Use proper time format (HH:MM-HH:MM, days)\",\n    \"Invalid IP restriction format: Use valid CIDR notation or IP ranges\",\n    \"Invalid audit level: Use one of [none, basic, detailed, comprehensive]\",\n    \"Invalid priority: Priority must be between 1 and 100\",\n    \"Invalid date range: Effective date must be before expiration date\"\n  ],\n  \"usage\": \"Provide policy_name, policy_type, target_roles, and allowed_operations. Optionally configure denied_operations, time_restrictions, ip_restrictions, data_classification_rules, audit_level, priority, and date ranges for comprehensive policy control.\",\n  \"output_details\": {\n    \"policy_id\": {\n      \"type\": \"string\",\n      \"description\": \"Unique identifier for the generated policy\"\n    },\n    \"validation_status\": {\n      \"type\": \"string\",\n      \"description\": \"Policy validation result\"\n    },\n    \"conflicts_detected\": {\n      \"type\": \"array\",\n      \"items\": {\"type\": \"string\"},\n      \"description\": \"Any conflicts with existing policies\"\n    },\n    \"affected_users\": {\n      \"type\": \"integer\",\n      \"description\": \"\
  Number of users affected by this policy\"\n    },\n    \"policy_document\": {\n      \"type\": \"string\",\n      \"description\": \"Generated policy document summary\"\n    }\n  }\n}\n```\n\n```json\n{\n  \"tool_name\": \"Authentication Configuration Tool\",\n  \"tool_description\": \"Configures database authentication methods, multi-factor authentication, and credential validation policies for secure user access.\",\n  \"parameters\": {\n    \"auth_method\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Primary authentication method: password, ldap, kerberos, certificate, oauth2\"\n    },\n    \"enable_mfa\": {\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Enable multi-factor authentication\",\n      \"default\": false\n    },\n    \"mfa_methods\": {\n      \"type\": \"array\",\n      \"required\": false,\n      \"description\": \"Available MFA methods\",\n      \"items\": {\"type\": \"string\"},\n      \"default\": []\n    },\n    \"password_policy\": {\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"Password complexity requirements: basic, standard, strict\",\n      \"default\": \"standard\"\n    },\n    \"session_timeout\": {\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"Session timeout in minutes\",\n      \"default\": 60\n    },\n    \"max_login_attempts\": {\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"Maximum failed login attempts before lockout\",\n      \"default\": 5\n    }\n  },\n  \"error_messages\": [\n    \"Invalid auth method: Use one of [password, ldap, kerberos, certificate, oauth2]\",\n    \"MFA methods required: When MFA is enabled, specify at least one MFA method\",\n    \"Invalid MFA method: Use valid MFA methods like totp, sms, email, hardware_token\",\n    \"Invalid password policy: Use one of [basic, standard, strict]\",\n    \"Invalid timeout: Session timeout must be between 5 and 1440 minutes\",\n    \"Invalid login attempts: Max login attempts must be between 3 and 20\"\n  ],\n  \"usage\": \"Specify auth_method as the primary authentication. Optionally enable MFA with mfa_methods, set password_policy, session_timeout, and max_login_attempts for security configuration.\",\n  \"output_details\": {\n    \"config_id\": {\n      \"type\": \"string\",\n      \"description\": \"Configuration identifier\"\n    },\n    \"status\": {\n      \"type\": \"string\",\n      \"description\": \"Configuration status\"\n    },\n    \"active_methods\": {\n      \"type\": \"array\",\n      \"items\": {\"type\": \"string\"},\n      \"description\": \"List of active authentication methods\"\n    }\n  }\n}\n```\n\n```json\n{\n  \"tool_name\": \"Session Management Controller\",\n  \"tool_description\": \"Controls database user sessions, manages concurrent connections, and enforces session security policies.\",\n  \"parameters\": {\n    \"operation\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Session operation: create, terminate, list, monitor, configure\"\n    },\n    \"session_id\": {\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"Specific session identifier for targeted operations\",\n      \"default\": null\n    },\n    \"username\": {\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"Username for user-specific session operations\",\n      \"default\": null\n    }\n  },\n  \"error_messages\": [\n    \"Invalid operation: Use one of [create, terminate, list, monitor, configure]\",\n    \"Session not found: Specified session_id does not exist\",\n    \"User not found: Specified username does not exist\",\n    \"Session already terminated: Cannot operate on terminated session\",\n    \"Insufficient permissions: User lacks permission for this session operation\"\n  ],\n  \"usage\": \"Specify operation type. For targeted operations, provide session_id or username. Use 'list' to view active sessions, 'monitor' for session statistics,\
  \ 'terminate' to end sessions.\",\n  \"output_details\": {\n    \"active_sessions\": {\n      \"type\": \"array\",\n      \"items\": {\"type\": \"string\"},\n      \"description\": \"List of active session identifiers\"\n    },\n    \"session_count\": {\n      \"type\": \"integer\",\n      \"description\": \"Total number of active sessions\"\n    },\n    \"operation_result\": {\n      \"type\": \"string\",\n      \"description\": \"Result of the requested operation\"\n    }\n  }\n}\n```\n\n```json\n{\n  \"tool_name\": \"Resource Access Validator\",\n  \"tool_description\": \"Validates database resource access requests against configured policies, roles, and permissions in real-time.\",\n  \"parameters\": {\n    \"user_id\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"User requesting access\"\n    },\n    \"resource_type\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Type of resource being accessed: table, view, procedure, function, schema\"\n    },\n    \"resource_name\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Name of the specific resource\"\n    },\n    \"operation\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Requested operation: select, insert, update, delete, execute, create, drop\"\n    },\n    \"source_ip\": {\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"Source IP address of the request\",\n      \"default\": null\n    },\n    \"session_context\": {\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"Additional session context information\",\n      \"default\": null\n    }\n  },\n  \"error_messages\": [\n    \"User not found: Specified user_id does not exist\",\n    \"Invalid resource type: Use one of [table, view, procedure, function, schema]\",\n    \"Resource not found: Specified resource does not exist\",\n    \"Invalid operation: Use one of [select, insert, update, delete, execute, create, drop]\",\n    \"Access denied: User lacks required permissions for this operation\",\n    \"Policy violation: Request violates active security policies\"\n  ],\n  \"usage\": \"Provide user_id, resource_type, resource_name, and operation. Optionally include source_ip and session_context for enhanced validation. The tool returns access decision with reasons.\",\n  \"output_details\": {\n    \"access_granted\": {\n      \"type\": \"boolean\",\n      \"description\": \"Whether access is granted\"\n    },\n    \"reason\": {\n      \"type\": \"string\",\n      \"description\": \"Detailed reason for access decision\"\n    },\n    \"applicable_policies\": {\n      \"type\": \"array\",\n      \"items\": {\"type\": \"string\"},\n      \"description\": \"Policies that influenced the decision\"\n    },\n    \"risk_level\": {\n      \"type\": \"string\",\n      \"description\": \"Risk assessment of the access request\"\n    }\n  }\n}\n```\n\n```json\n{\n  \"tool_name\": \"Database Connection Auditor\",\n  \"tool_description\": \"Monitors and audits database connections, tracking connection events, patterns, and security-relevant activities.\",\n  \"parameters\": {\n    \"monitoring_scope\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Scope of monitoring: all_connections, user_specific, role_based, suspicious_only\"\n    },\n    \"target_user\": {\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"Specific user to monitor (required for user_specific scope)\",\n      \"default\": null\n    },\n    \"target_role\": {\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"Specific role to monitor (required for role_based scope)\",\n      \"default\": null\n    },\n    \"start_time\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Start of monitoring period\",\n      \"format\": \"date-time\"\n    },\n    \"end_time\": {\n      \"type\": \"string\",\n      \"required\": true,\n\
  \      \"description\": \"End of monitoring period\",\n      \"format\": \"date-time\"\n    },\n    \"include_successful\": {\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Include successful connection attempts\",\n      \"default\": true\n    },\n    \"include_failed\": {\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Include failed connection attempts\",\n      \"default\": true\n    }\n  },\n  \"error_messages\": [\n    \"Invalid monitoring scope: Use one of [all_connections, user_specific, role_based, suspicious_only]\",\n    \"Target required: target_user required for user_specific scope, target_role for role_based scope\",\n    \"User not found: Specified target_user does not exist\",\n    \"Role not found: Specified target_role does not exist\",\n    \"Invalid time range: start_time must be before end_time\",\n    \"Time range too large: Monitoring period cannot exceed 30 days\"\n  ],\n  \"usage\": \"Specify monitoring_scope and time range with start_time and end_time. For targeted monitoring, provide target_user or target_role. Control audit detail with include_successful and include_failed flags.\",\n  \"output_details\": {\n    \"total_connections\": {\n      \"type\": \"integer\",\n      \"description\": \"Total number of connection attempts\"\n    },\n    \"successful_connections\": {\n      \"type\": \"integer\",\n      \"description\": \"Number of successful connections\"\n    },\n    \"failed_connections\": {\n      \"type\": \"integer\",\n      \"description\": \"Number of failed connections\"\n    },\n    \"unique_users\": {\n      \"type\": \"integer\",\n      \"description\": \"Number of unique users in the audit period\"\n    },\n    \"connection_events\": {\n      \"type\": \"array\",\n      \"items\": {\"type\": \"string\"},\n      \"description\": \"Summary of connection events\"\n    },\n    \"anomalies_detected\": {\n      \"type\": \"array\",\n      \"items\": {\"type\": \"string\"},\n      \"description\": \"List of detected anomalies or suspicious activities\"\n    }\n  }\n}\n```\n\n```json\n{\n  \"tool_name\": \"Query Permission Checker\",\n  \"tool_description\": \"Analyzes SQL queries and validates user permissions to execute specific database operations against security policies.\",\n  \"parameters\": {\n    \"user_id\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"User attempting to execute the query\"\n    },\n    \"sql_query\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"SQL query to analyze and validate\"\n    },\n    \"query_type\": {\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"Query classification: select, insert, update, delete, ddl, dml, stored_procedure\",\n      \"default\": \"auto_detect\"\n    },\n    \"database_name\": {\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"Target database for the query\",\n      \"default\": \"current\"\n    },\n    \"validate_syntax\": {\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Whether to validate SQL syntax\",\n      \"default\": true\n    }\n  },\n  \"error_messages\": [\n    \"User not found: Specified user_id does not exist\",\n    \"Invalid SQL syntax: Query contains syntax errors\",\n    \"Invalid query type: Use one of [select, insert, update, delete, ddl, dml, stored_procedure, auto_detect]\",\n    \"Database not found: Specified database does not exist\",\n    \"Permission denied: User lacks permission to execute this query type\",\n    \"Resource access denied: User cannot access one or more resources referenced in query\",\n    \"Policy violation: Query violates active security policies\"\n  ],\n  \"usage\": \"Provide user_id and sql_query for validation. Optionally specify query_type, database_name, and validate_syntax. The tool analyzes the query and returns permission validation results.\",\n  \"output_details\": {\n    \"permission_granted\": {\n      \"type\": \"boolean\"\
  ,\n      \"description\": \"Whether user has permission to execute the query\"\n    },\n    \"detected_query_type\": {\n      \"type\": \"string\",\n      \"description\": \"Auto-detected or confirmed query type\"\n    },\n    \"affected_resources\": {\n      \"type\": \"array\",\n      \"items\": {\"type\": \"string\"},\n      \"description\": \"Database resources referenced in the query\"\n    },\n    \"permission_issues\": {\n      \"type\": \"array\",\n      \"items\": {\"type\": \"string\"},\n      \"description\": \"List of permission issues found\"\n    },\n    \"risk_assessment\": {\n      \"type\": \"string\",\n      \"description\": \"Risk level of the query execution\"\n    }\n  }\n}\n```\n\n```json\n{\n  \"tool_name\": \"Data Masking Policy Engine\",\n  \"tool_description\": \"Creates and manages data masking policies to protect sensitive information while maintaining data utility for authorized users.\",\n  \"parameters\": {\n    \"table_name\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Database table containing sensitive data\"\n    },\n    \"sensitive_columns\": {\n      \"type\": \"array\",\n      \"required\": true,\n      \"description\": \"Columns containing sensitive data to be masked\",\n      \"items\": {\"type\": \"string\"},\n      \"minItems\": 1,\n      \"maxItems\": 50\n    },\n    \"masking_method\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Masking technique: full_mask, partial_mask, tokenization, format_preserving, randomization\"\n    },\n    \"exempt_roles\": {\n      \"type\": \"array\",\n      \"required\": false,\n      \"description\": \"Roles exempt from data masking\",\n      \"items\": {\"type\": \"string\"},\n      \"default\": []\n    },\n    \"mask_character\": {\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"Character to use for masking (single character)\",\n      \"default\": \"*\"\n    },\n    \"preserve_length\": {\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Whether to preserve original data length\",\n      \"default\": true\n    },\n    \"partial_mask_start\": {\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"Starting position for partial masking\",\n      \"default\": 0\n    },\n    \"partial_mask_end\": {\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"Ending position for partial masking\",\n      \"default\": 0\n    },\n    \"data_classification\": {\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"Data sensitivity level: public, internal, confidential, restricted\",\n      \"default\": \"confidential\"\n    }\n  },\n  \"error_messages\": [\n    \"Table not found: Specified table does not exist\",\n    \"Column not found: One or more specified columns do not exist in the table\",\n    \"Invalid masking method: Use one of [full_mask, partial_mask, tokenization, format_preserving, randomization]\",\n    \"Role not found: One or more exempt roles do not exist\",\n    \"Invalid mask character: Must specify a single character\",\n    \"Invalid partial mask range: partial_mask_start must be less than partial_mask_end\",\n    \"Invalid classification: Use one of [public, internal, confidential, restricted]\",\n    \"Policy conflict: Conflicting masking policy already exists for this table\"\n  ],\n  \"usage\": \"Specify table_name, sensitive_columns, and masking_method. Configure exempt_roles, mask_character, preserve_length, and partial masking parameters as needed. Set data_classification for appropriate handling.\",\n  \"output_details\": {\n    \"policy_id\": {\n      \"type\": \"string\",\n      \"description\": \"Unique identifier for the masking policy\"\n    },\n    \"affected_columns\": {\n      \"type\": \"integer\",\n      \"description\": \"Number of columns affected by the policy\"\n    },\n    \"masking_preview\": {\n      \"type\": \"string\",\n      \"description\": \"Sample of how data will appear when\
  \ masked\"\n    },\n    \"policy_status\": {\n      \"type\": \"string\",\n      \"description\": \"Status of the masking policy\"\n    },"
