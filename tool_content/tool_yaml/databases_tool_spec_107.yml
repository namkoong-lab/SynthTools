field_name: databases
subfield: Query Optimization and Performance Tuning
task: Query performance monitoring and alerting
tool_description: |-
  **STEP 1 — Rate task difficulty**

  This task involves setting up comprehensive monitoring systems for database queries, analyzing performance metrics in real-time, and creating intelligent alerting mechanisms. The difficulty is **hard** due to the complex interdependencies between monitoring components, the need for real-time analysis of multiple performance dimensions, and the critical impact that false positives or missed alerts can have on system reliability.

  **STEP 2 — Set a tool budget**

  Given the hard difficulty rating, I'll target 17 tools within the 15-20 range to cover the comprehensive monitoring, analysis, and alerting workflows required for effective query performance management.

  **STEP 3 — List all tool names and dependencies**

  Tools and their data flow:
  - **Database Connection Manager** → provides connection configs to other tools
  - **Query Execution Monitor** → consumes connections, produces execution metrics
  - **Performance Metrics Collector** → consumes execution data, produces aggregated metrics
  - **Baseline Performance Analyzer** → consumes historical metrics, produces baseline patterns
  - **Anomaly Detection Engine** → consumes current metrics + baselines, produces anomaly scores
  - **Query Plan Analyzer** → consumes query text, produces execution plan insights
  - **Resource Utilization Tracker** → consumes system metrics, produces resource usage data
  - **Slow Query Detector** → consumes execution metrics, produces slow query alerts
  - **Performance Threshold Manager** → manages alert thresholds, produces threshold configs
  - **Alert Rule Engine** → consumes metrics + thresholds, produces alert conditions
  - **Notification Dispatcher** → consumes alerts, produces notifications
  - **Performance Dashboard Generator** → consumes all metrics, produces visualization data
  - **Historical Data Archiver** → consumes metrics, produces archived data
  - **Performance Report Builder** → consumes archived data, produces reports
  - **Query Optimization Recommender** → consumes performance data, produces optimization suggestions
  - **Alert Escalation Manager** → manages alert severity and escalation paths
  - **Performance Trend Analyzer** → analyzes long-term patterns, produces trend insights

  **STEP 4 — Multi-tool plans**

  **Simple plans:**
  1. **Basic Query Monitoring**: Database Connection Manager → Query Execution Monitor → Slow Query Detector → Notification Dispatcher
  2. **Resource Tracking**: Database Connection Manager → Resource Utilization Tracker → Performance Dashboard Generator

  **Medium plans:**
  1. **Anomaly Detection Pipeline**: Performance Metrics Collector → Baseline Performance Analyzer → Anomaly Detection Engine → Alert Rule Engine → Notification Dispatcher
  2. **Performance Analysis**: Query Plan Analyzer → Performance Metrics Collector → Performance Threshold Manager → Performance Dashboard Generator

  **Complex plans:**
  1. **Full Monitoring System**: Database Connection Manager → Query Execution Monitor → Performance Metrics Collector → Baseline Performance Analyzer → Anomaly Detection Engine → Alert Rule Engine → Alert Escalation Manager → Notification Dispatcher
  2. **Comprehensive Performance Suite**: All monitoring tools → Performance Dashboard Generator + Historical Data Archiver → Performance Report Builder → Query Optimization Recommender

  **STEP 5 — Produce tools**

  ```json
  {
    "tool_name": "Database Connection Manager",
    "tool_description": "Manages database connections and validates connectivity for monitoring tools, supporting multiple database types with connection pooling configuration.",
    "parameters": {
      "database_type": {
        "type": "string",
        "required": true,
        "description": "Type of database (postgresql, mysql, oracle, sqlserver, mongodb)"
      },
      "host": {
        "type": "string",
        "required": true,
        "description": "Database server hostname or IP address"
      },
      "port": {
        "type": "integer",
        "required": true,
        "description": "Database server port number"
      },
      "database_name": {
        "type": "string",
        "required": true,
        "description": "Name of the database to connect to"
      },
      "username": {
        "type": "string",
        "required": true,
        "description": "Database username for authentication"
      }
    },
    "error_messages": [
      "Connection timeout: Verify that the database server is running and accessible at the specified host and port.",
      "Authentication failed: Check that the username and password are correct and the user has necessary permissions.",
      "Database not found: Ensure the specified database name exists on the server.",
      "Unsupported database type: Use one of the supported database types (postgresql, mysql, oracle, sqlserver, mongodb).",
      "Invalid port number: Port must be between 1 and 65535."
    ],
    "usage": "Provide database connection details including type, host, port, database name, and username. The tool validates the connection and returns connection configuration for use by other monitoring tools.",
    "output_details": {
      "connection_id": {
        "type": "string",
        "description": "Unique identifier for this database connection"
      },
      "connection_status": {
        "type": "string",
        "description": "Status of the connection (active, failed, timeout)"
      },
      "database_version": {
        "type": "string",
        "description": "Version of the database server"
      },
      "max_connections": {
        "type": "integer",
        "description": "Maximum number of concurrent connections supported"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Query Execution Monitor",
    "tool_description": "Monitors real-time query execution, capturing performance metrics including execution time, resource usage, and query characteristics for performance analysis.",
    "parameters": {
      "connection_id": {
        "type": "string",
        "required": true,
        "description": "Database connection identifier from Database Connection Manager"
      },
      "monitoring_duration": {
        "type": "integer",
        "required": true,
        "description": "Duration to monitor in seconds (60-86400)"
      },
      "sample_rate": {
        "type": "number",
        "required": false,
        "default": 1.0,
        "description": "Fraction of queries to sample (0.1-1.0)"
      },
      "min_execution_time": {
        "type": "number",
        "required": false,
        "default": 0.1,
        "description": "Minimum execution time in seconds to capture (0.01-10.0)"
      },
      "include_system_queries": {
        "type": "boolean",
        "required": false,
        "default": false,
        "description": "Whether to include system/internal queries in monitoring"
      },
      "capture_query_text": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Whether to capture the actual query text"
      }
    },
    "error_messages": [
      "Invalid connection: The specified connection_id is not active or has expired.",
      "Monitoring duration out of range: Duration must be between 60 and 86400 seconds.",
      "Invalid sample rate: Sample rate must be between 0.1 and 1.0.",
      "Insufficient permissions: Database user lacks permissions to access query execution statistics.",
      "Resource limit exceeded: Monitoring cannot start due to system resource constraints."
    ],
    "usage": "Provide a valid connection_id and monitoring_duration. Optionally configure sample_rate, min_execution_time, and capture options. The tool returns real-time query execution metrics.",
    "output_details": {
      "total_queries_monitored": {
        "type": "integer",
        "description": "Total number of queries captured during monitoring"
      },
      "monitoring_start_time": {
        "type": "string",
        "description": "Start timestamp of monitoring session"
      },
      "monitoring_end_time": {
        "type": "string",
        "description": "End timestamp of monitoring session"
      },
      "execution_times": {
        "type": "array",
        "items": {"type": "number"},
        "description": "Array of query execution times in seconds"
      },
      "query_types": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Array of query types (SELECT, INSERT, UPDATE, DELETE)"
      },
      "average_execution_time": {
        "type": "number",
        "description": "Average execution time across all monitored queries"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Performance Metrics Collector",
    "tool_description": "Aggregates and processes raw performance data from query monitoring, calculating statistical metrics and preparing data for analysis and alerting systems.",
    "parameters": {
      "execution_times": {
        "type": "array",
        "required": true,
        "description": "Array of query execution times from Query Execution Monitor",
        "items": {"type": "number"},
        "minItems": 1,
        "maxItems": 10000
      },
      "query_types": {
        "type": "array",
        "required": true,
        "description": "Array of corresponding query types",
        "items": {"type": "string"},
        "minItems": 1,
        "maxItems": 10000
      },
      "aggregation_window": {
        "type": "integer",
        "required": false,
        "default": 300,
        "description": "Time window in seconds for aggregating metrics (60-3600)"
      }
    },
    "error_messages": [
      "Mismatched array lengths: execution_times and query_types arrays must have the same length.",
      "Empty data arrays: Both execution_times and query_types arrays must contain at least one element.",
      "Invalid aggregation window: Window must be between 60 and 3600 seconds.",
      "Invalid execution time values: All execution times must be positive numbers."
    ],
    "usage": "Provide arrays of execution_times and query_types from monitoring data. Optionally set aggregation_window for time-based grouping. Returns comprehensive performance statistics.",
    "output_details": {
      "mean_execution_time": {
        "type": "number",
        "description": "Mean execution time across all queries"
      },
      "median_execution_time": {
        "type": "number",
        "description": "Median execution time"
      },
      "p95_execution_time": {
        "type": "number",
        "description": "95th percentile execution time"
      },
      "p99_execution_time": {
        "type": "number",
        "description": "99th percentile execution time"
      },
      "total_query_count": {
        "type": "integer",
        "description": "Total number of queries processed"
      },
      "queries_per_second": {
        "type": "number",
        "description": "Average queries per second"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Baseline Performance Analyzer",
    "tool_description": "Analyzes historical performance data to establish baseline patterns and normal operating ranges for comparison with current performance metrics.",
    "parameters": {
      "historical_metrics": {
        "type": "array",
        "required": true,
        "description": "Array of historical mean execution times",
        "items": {"type": "number"},
        "minItems": 24,
        "maxItems": 8760
      },
      "timestamps": {
        "type": "array",
        "required": true,
        "description": "Corresponding timestamps for historical metrics",
        "items": {"type": "string"},
        "minItems": 24,
        "maxItems": 8760
      },
      "baseline_period_days": {
        "type": "integer",
        "required": false,
        "default": 7,
        "description": "Number of days to use for baseline calculation (1-30)"
      },
      "seasonality_detection": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Whether to detect and account for seasonal patterns"
      }
    },
    "error_messages": [
      "Insufficient historical data: Need at least 24 data points to establish a baseline.",
      "Mismatched array lengths: historical_metrics and timestamps arrays must have the same length.",
      "Invalid baseline period: Period must be between 1 and 30 days.",
      "Invalid timestamp format: All timestamps must be in ISO 8601 format.",
      "Data quality issues: Historical data contains too many gaps or anomalies to establish reliable baseline."
    ],
    "usage": "Provide historical performance metrics with corresponding timestamps. Optionally configure baseline_period_days and enable seasonality_detection. Returns baseline statistics and normal operating ranges.",
    "output_details": {
      "baseline_mean": {
        "type": "number",
        "description": "Baseline mean execution time"
      },
      "baseline_std": {
        "type": "number",
        "description": "Standard deviation of baseline performance"
      },
      "normal_range_lower": {
        "type": "number",
        "description": "Lower bound of normal performance range"
      },
      "normal_range_upper": {
        "type": "number",
        "description": "Upper bound of normal performance range"
      },
      "seasonal_pattern_detected": {
        "type": "boolean",
        "description": "Whether seasonal patterns were found in the data"
      },
      "confidence_score": {
        "type": "number",
        "description": "Confidence score for baseline quality (0-1)"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Anomaly Detection Engine",
    "tool_description": "Detects performance anomalies by comparing current metrics against established baselines using statistical and machine learning techniques.",
    "parameters": {
      "current_metrics": {
        "type": "array",
        "required": true,
        "description": "Array of current performance metrics to analyze",
        "items": {"type": "number"},
        "minItems": 1,
        "maxItems": 1000
      },
      "baseline_mean": {
        "type": "number",
        "required": true,
        "description": "Baseline mean from Baseline Performance Analyzer"
      },
      "baseline_std": {
        "type": "number",
        "required": true,
        "description": "Baseline standard deviation"
      },
      "sensitivity_level": {
        "type": "string",
        "required": false,
        "default": "medium",
        "description": "Anomaly detection sensitivity (low, medium, high)"
      },
      "detection_method": {
        "type": "string",
        "required": false,
        "default": "statistical",
        "description": "Detection method (statistical, isolation_forest, lstm)"
      }
    },
    "error_messages": [
      "Invalid baseline parameters: baseline_mean and baseline_std must be positive numbers.",
      "Empty current metrics: current_metrics array cannot be empty.",
      "Invalid sensitivity level: Use one of (low, medium, high).",
      "Unsupported detection method: Use one of (statistical, isolation_forest, lstm).",
      "Insufficient data for ML methods: Machine learning methods require at least 50 data points."
    ],
    "usage": "Provide current_metrics array and baseline statistics. Optionally configure sensitivity_level and detection_method. Returns anomaly scores and detected anomalies.",
    "output_details": {
      "anomaly_detected": {
        "type": "boolean",
        "description": "Whether any anomalies were detected"
      },
      "anomaly_count": {
        "type": "integer",
        "description": "Number of anomalous data points"
      },
      "anomaly_scores": {
        "type": "array",
        "items": {"type": "number"},
        "description": "Anomaly scores for each data point (0-1)"
      },
      "severity_level": {
        "type": "string",
        "description": "Overall severity of detected anomalies (none, low, medium, high)"
      },
      "anomaly_summary": {
        "type": "string",
        "description": "Human-readable summary of anomaly detection results"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Query Plan Analyzer",
    "tool_description": "Analyzes SQL query execution plans to identify performance bottlenecks, inefficient operations, and optimization opportunities.",
    "parameters": {
      "query_text": {
        "type": "string",
        "required": true,
        "description": "SQL query text to analyze"
      },
      "execution_plan": {
        "type": "string",
        "required": true,
        "description": "Query execution plan (JSON or XML format)"
      },
      "database_type": {
        "type": "string",
        "required": true,
        "description": "Database type (postgresql, mysql, oracle, sqlserver)"
      },
      "table_schemas": {
        "type": "array",
        "required": false,
        "default": [],
        "description": "Array of table schema information",
        "items": {"type": "string"},
        "maxItems": 100
      },
      "index_information": {
        "type": "array",
        "required": false,
        "default": [],
        "description": "Array of available indexes",
        "items": {"type": "string"},
        "maxItems": 500
      }
    },
    "error_messages": [
      "Invalid query syntax: The provided SQL query contains syntax errors.",
      "Unsupported database type: Use one of the supported database types (postgresql, mysql, oracle, sqlserver).",
      "Invalid execution plan format: Execution plan must be valid JSON or XML.",
      "Plan parsing failed: Unable to parse the execution plan structure.",
      "Schema information error: Provided table schema information is malformed."
    ],
    "usage": "Provide query_text, execution_plan, and database_type. Optionally include table_schemas and index_information for more detailed analysis. Returns comprehensive plan analysis.",
    "output_details": {
      "plan_complexity_score": {
        "type": "number",
        "description": "Complexity score of the execution plan (0-10)"
      },
      "expensive_operations": {
        "type": "array",
        "items": {"type": "string"},
        "description": "List of expensive operations identified in the plan"
      },
      "missing_indexes": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Suggested indexes that could improve performance"
      },
      "table_scans_count": {
        "type": "integer",
        "description": "Number of full table scans in the plan"
      },
      "optimization_recommendations": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Specific recommendations for query optimization"
      },
      "estimated_cost": {
        "type": "number",
        "description": "Estimated execution cost from the query planner"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Resource Utilization Tracker",
    "tool_description": "Monitors database server resource utilization including CPU, memory, disk I/O, and network metrics to correlate with query performance.",
    "parameters": {
      "connection_id": {
        "type": "string",
        "required": true,
        "description": "Database connection identifier"
      },
      "monitoring_interval": {
        "type": "integer",
        "required": false,
        "default": 60,
        "description": "Sampling interval in seconds (10-300)"
      },
      "duration": {
        "type": "integer",
        "required": true,
        "description": "Total monitoring duration in seconds (60-86400)"
      },
      "resource_types": {
        "type": "array",
        "required": false,
        "default": ["cpu", "memory", "disk_io", "network"],
        "description": "Types of resources to monitor",
        "items": {"type": "string"},
        "maxItems": 10
      }
    },
    "error_messages": [
      "Invalid connection: The specified connection_id is not active.",
      "Monitoring interval out of range: Interval must be between 10 and 300 seconds.",
      "Invalid duration: Duration must be between 60 and 86400 seconds.",
      "Unsupported resource type: Use supported resource types (cpu, memory, disk_io, network, connections).",
      "System monitoring unavailable: Unable to access system performance counters."
    ],
    "usage": "Provide connection_id and duration for monitoring. Optionally configure monitoring_interval and specific resource_types. Returns comprehensive resource utilization data.",
    "output_details": {
      "cpu_utilization_avg": {
        "type": "number",
        "description": "Average CPU utilization percentage"
      },
      "memory_utilization_avg": {
        "type": "number",
        "description": "Average memory utilization percentage"
      },
      "disk_io_avg": {
        "type": "number",
        "description": "Average disk I/O operations per second"
      },
      "network_throughput_avg": {
        "type": "number",
        "description": "Average network throughput in MB/s"
      },
      "resource_utilization_timeline": {
        "type": "array",
        "items": {"type": "number"},
        "description": "Timeline of overall resource utilization scores"
      },
      "peak_utilization_time": {
        "type": "string",
        "description": "Timestamp of peak resource utilization"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Slow Query Detector",
    "tool_description": "Identifies and analyzes slow-running queries based on configurable thresholds, providing detailed information about query patterns and frequency.",
    "parameters": {
      "execution_times": {
        "type": "array",
        "required": true,
        "description": "Array of query execution times",
        "items": {"type": "number"},
        "minItems": 1,
        "maxItems": 10000
      },
      "query_texts": {
        "type": "array",
        "required": true,
        "description": "Corresponding query texts",
        "items": {"type": "string"},
        "minItems": 1,
        "maxItems": 10000
      },
      "slow_threshold": {
        "type": "number",
        "required": false,
        "default": 1.0,
        "description": "Threshold in seconds to consider a query slow (0.1-60.0)"
      },
      "min_occurrences": {
        "type": "integer",
        "required": false,
        "default": 1,
        "description": "Minimum occurrences to report a slow query pattern (1-100)"
      }
    },
    "error_messages": [
      "Mismatched array lengths: execution_times and query_texts must have the same length.",
      "Invalid slow threshold: Threshold must be between 0.1 and 60.0 seconds.",
      "Invalid min_occurrences: Must be between 1 and 100.",
      "Empty input arrays: Both arrays must contain at least one element.",
      "Invalid execution times: All execution times must be positive numbers."
    ],
    "usage": "Provide execution_times and query_texts arrays from monitoring data. Configure slow_threshold and min_occurrences as needed. Returns analysis of slow queries.",
    "output_details": {
      "slow_queries_count": {
        "type": "integer",
        "description": "Total number of slow queries detected"
      },
      "slow_query_patterns": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Unique slow query patterns identified"
      },
      "slowest_execution_time": {
        "type": "number",
        "description": "Execution time of the slowest query"
      },
      "slow_queries_percentage": {
        "type": "number",
        "description": "Percentage of queries that were slow"
      },
      "frequent_slow_queries": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Most frequently occurring slow query patterns"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Performance Threshold Manager",
    "tool_description": "Manages performance thresholds and alert conditions for various metrics, supporting dynamic thresholds based on historical data and business requirements.",
    "parameters": {
      "metric_type": {
        "type": "string",
        "required": true,
        "description": "Type of metric (execution_time, cpu_usage, memory_usage, disk_io, query_rate)"
      },
      "threshold_value": {
        "type": "number",
        "required": true,
        "description": "Threshold value for the metric"
      },
      "comparison_operator": {
        "type": "string",
        "required": true,
        "description": "Comparison operator (greater_than, less_than, greater_equal, less_equal)"
      },
      "alert_severity": {
        "type": "string",
        "required": true,
        "description": "Alert severity level (info, warning, critical)"
      },
      "threshold_type": {
        "type": "string",
        "required": false,
        "default": "static",
        "description": "Type of threshold (static, dynamic, percentile)"
      },
      "evaluation_window": {
        "type": "integer",
        "required": false,
        "default": 300,
        "description": "Time window for threshold evaluation in seconds (60-3600)"
      },
      "minimum_samples": {
        "type": "integer",
        "required": false,
        "default": 5,
        "description": "Minimum samples needed for threshold evaluation (1-100)"
      }
    },
    "error_messages": [
      "Invalid metric type: Use one of (execution_time, cpu_usage, memory_usage, disk_io, query_rate).",
      "Invalid comparison operator: Use one of (greater_than, less_than, greater_equal, less_equal).",
      "Invalid alert severity: Use one of (info, warning, critical).",
      "Invalid threshold type: Use one of (static, dynamic, percentile).",
      "Invalid evaluation window: Window must be between 60 and 3600 seconds.",
      "Invalid minimum samples: Must be between 1 and 100.",
      "Threshold value error: Threshold value must be a positive number."
    ],
    "usage": "Specify metric_type, threshold_value, comparison_operator, and alert_severity. Optionally configure threshold_type, evaluation_window, and minimum_samples. Returns threshold configuration.",
    "output_details": {
      "threshold_id": {
        "type": "string",
        "description": "Unique identifier for this threshold configuration"
      },
      "threshold_config": {
        "type": "string",
        "description": "Summary of the threshold configuration"
      },
      "is_active": {
        "type": "boolean",
        "description": "Whether the threshold is currently active"
      },
      "last_triggered": {
        "type": "string",
        "description": "Timestamp of last threshold trigger (if any)"
      },
      "estimated_sensitivity": {
        "type": "number",
        "description": "Estimated sensitivity of this threshold (0-1)"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Alert Rule Engine",
    "tool_description": "Processes performance metrics against configured thresholds to generate alerts, supporting complex rule logic and alert suppression mechanisms.",
    "parameters": {
      "current_metrics": {
        "type": "array",
        "required": true,
        "description": "Array of current metric values to evaluate",
        "items": {"type": "number"},
        "minItems": 1,
        "maxItems": 1000
      },
      "metric_names": {
        "type": "array",
        "required": true,
        "description": "Names corresponding to each metric value",
        "items": {"type": "string"},
        "minItems": 1,
        "maxItems": 1000
      },
      "threshold_configs": {
        "type": "array",
        "required": true,
        "description": "Array of threshold configuration IDs from Threshold Manager",
        "items": {"type": "string"},
        "minItems": 1,
        "maxItems": 100
      },
      "suppression_window": {
        "type": "integer",
        "required": false,
        "default": 300,
        "description": "Alert suppression window in seconds (60-3600)"
      },
      "enable_alert_grouping": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Whether to group similar alerts together"
      }
    },
    "error_messages": [
      "Mismatched array lengths: current_metrics and metric_names must have the same length.",
      "Invalid threshold configs: One or more threshold configuration IDs are invalid.",
      "Empty input arrays: All required arrays must contain at least one element.",
      "Invalid suppression window: Window must be between 60 and 3600 seconds.",
      "No matching thresholds: No threshold configurations match the provided metrics."
    ],
    "usage": "Provide current_metrics, metric_names, and threshold_configs from previous tools. Configure suppression settings as needed. Returns alert generation results.",
    "output_details": {
      "alerts_generated": {
        "type": "integer",
        "description": "Number of alerts generated"
      },
      "alert_summaries": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Summary descriptions of generated alerts"
      },
      "suppressed_alerts": {
        "type": "integer",
        "description": "Number of alerts that were suppressed"
      },
      "highest_severity": {
        "type": "string",
        "description": "Highest severity level among generated alerts"
      },
      "requires_immediate_attention": {
        "type": "boolean",
        "description": "Whether any critical alerts require immediate attention"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Notification Dispatcher",
    "tool_description": "Dispatches alerts through multiple communication channels with message formatting, recipient routing, and delivery confirmation tracking.",
    "parameters": {
      "alert_summaries": {
        "type": "array",
        "required": true,
        "description": "Array of alert summaries to dispatch",
        "items": {"type": "string"},
        "minItems": 1,
        "maxItems": 100
      },
      "severity_levels": {
        "type": "array",
        "required": true,
        "description": "Severity level for each alert",
        "items": {"type": "string"},
        "minItems": 1,
        "maxItems": 100
      },
      "notification_channels": {
        "type": "array",
        "required": true,
        "description": "Channels to use for notifications (email, slack, webhook, sms)",
        "items": {"type": "string"},
        "minItems": 1,
        "maxItems": 10
      },
      "recipient_groups": {
        "type": "array",
        "required": false,
        "default": ["default"],
        "description": "Recipient groups to notify",
        "items": {"type": "string"},
        "maxItems": 20
      },
      "immediate_delivery": {
        "type": "boolean",
        "required": false,
        "default": false,
        "description": "Whether to send notifications immediately for critical alerts"
      }
    },
    "error_messages": [
      "Mismatched array lengths: alert_summaries and severity_levels must have the same length.",
      "Invalid notification channels: Use supported channels (email, slack, webhook, sms).",
      "Empty alert data: alert_summaries cannot be empty.",
      "Invalid severity levels: Each severity must be one of (info, warning, critical).",
      "Notification delivery failed: Unable to deliver notifications through specified channels.",
      "Recipient configuration error: One or more recipient groups are not configured."
    ],
