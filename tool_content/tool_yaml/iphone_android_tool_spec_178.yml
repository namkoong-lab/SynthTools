field_name: iphone_android
subfield: Mobile Application Development and Testing
task: Cross-platform mobile app development and framework management
tool_description: |-
  **STEP 1 — Rate task difficulty**

  This task is **hard** due to the broad scope covering multiple platforms (iOS/Android), complex dependencies between different development frameworks and tools, high coordination requirements across build systems and testing environments, significant risk from deployment errors, and substantial infrastructure needs for cross-platform compatibility and testing.

  **STEP 2 — Set a tool budget**

  Given the hard difficulty rating, I'll target **17 tools** to cover the comprehensive workflow from project setup through deployment and maintenance.

  **STEP 3 — List all tool names and dependencies**

  Tools and their data flow:
  1. **Project Scaffold Generator** → produces project structure
  2. **Dependency Version Manager** → consumes package lists, produces version specifications
  3. **Framework Configuration Builder** → consumes project structure, produces config files
  4. **Native Bridge Generator** → consumes API specs, produces bridge code
  5. **Asset Bundler Tool** → consumes asset files, produces optimized bundles
  6. **Platform Build Orchestrator** → consumes source code and configs, produces build artifacts
  7. **Device Emulator Controller** → consumes app builds, produces test environments
  8. **Cross Platform Tester** → consumes builds and test cases, produces test results
  9. **Performance Profiler Tool** → consumes running apps, produces performance metrics
  10. **App Store Validator** → consumes build artifacts, produces compliance reports
  11. **Code Signing Manager** → consumes certificates and builds, produces signed packages
  12. **Deployment Pipeline Controller** → consumes signed packages, produces deployment status
  13. **Feature Flag Manager** → consumes flag configs, produces runtime toggles
  14. **Crash Analytics Collector** → consumes crash data, produces error reports
  15. **Update Distribution Manager** → consumes new builds, produces update packages
  16. **Platform Compatibility Checker** → consumes code and APIs, produces compatibility reports
  17. **Development Environment Synchronizer** → consumes team configs, produces synchronized environments

  **STEP 4 — Multi-tool plans**

  **Simple plans:**
  1. Basic project setup: Project Scaffold Generator → Framework Configuration Builder → Development Environment Synchronizer
  2. Asset optimization: Asset Bundler Tool → Platform Build Orchestrator → App Store Validator

  **Medium plans:**
  1. Testing workflow: Platform Build Orchestrator → Device Emulator Controller → Cross Platform Tester → Performance Profiler Tool
  2. Dependency management: Dependency Version Manager → Platform Compatibility Checker → Framework Configuration Builder → Platform Build Orchestrator

  **Complex plans:**
  1. Full deployment pipeline: Platform Build Orchestrator → App Store Validator → Code Signing Manager → Deployment Pipeline Controller → Update Distribution Manager → Crash Analytics Collector
  2. Comprehensive development cycle: Project Scaffold Generator → Dependency Version Manager → Framework Configuration Builder → Native Bridge Generator → Asset Bundler Tool → Platform Build Orchestrator → Cross Platform Tester → Performance Profiler Tool → Code Signing Manager → Deployment Pipeline Controller

  **STEP 5 — Produce tools**

  ```json
  {
    "tool_name": "Project Scaffold Generator",
    "tool_description": "Creates initial project structure and boilerplate code for cross-platform mobile applications with specified frameworks and platform targets.",
    "parameters": {
      "project_name": {
        "type": "string",
        "required": true,
        "description": "Name of the mobile application project"
      },
      "target_platforms": {
        "type": "array",
        "items": {"type": "string"},
        "required": true,
        "description": "Target platforms: ios, android"
      },
      "framework_type": {
        "type": "string",
        "required": true,
        "description": "Cross-platform framework: react_native, flutter, xamarin, ionic, cordova"
      },
      "package_identifier": {
        "type": "string",
        "required": true,
        "description": "Unique package identifier in reverse domain format"
      }
    },
    "error_messages": [
      "Invalid project name: Project name must be 1-50 characters, alphanumeric and underscores only.",
      "Unsupported platform: Target platforms must be from [ios, android].",
      "Unsupported framework: Framework type must be from [react_native, flutter, xamarin, ionic, cordova].",
      "Invalid package identifier: Must follow reverse domain notation (e.g., com.company.app)."
    ],
    "usage": "Specify project_name, target_platforms array, framework_type, and package_identifier to generate a complete project scaffold with platform-specific configurations.",
    "output_details": {
      "project_path": {
        "type": "string",
        "description": "Path to the generated project directory"
      },
      "created_files": {
        "type": "array",
        "items": {"type": "string"},
        "description": "List of created files and directories"
      },
      "next_steps": {
        "type": "string",
        "description": "Recommended next development steps"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Dependency Version Manager",
    "tool_description": "Manages and resolves version conflicts for cross-platform dependencies, ensuring compatibility across iOS and Android builds.",
    "parameters": {
      "package_file_path": {
        "type": "string",
        "required": true,
        "description": "Path to package configuration file (package.json, pubspec.yaml, etc.)"
      },
      "target_platforms": {
        "type": "array",
        "items": {"type": "string"},
        "required": true,
        "description": "Target platforms for dependency resolution"
      },
      "dependency_names": {
        "type": "array",
        "items": {"type": "string"},
        "required": true,
        "description": "List of dependency package names to manage"
      },
      "version_strategy": {
        "type": "string",
        "required": false,
        "default": "latest_compatible",
        "description": "Version resolution strategy: latest_compatible, pinned, major_latest"
      },
      "include_dev_dependencies": {
        "type": "boolean",
        "required": false,
        "default": false,
        "description": "Whether to include development dependencies in resolution"
      },
      "min_ios_version": {
        "type": "string",
        "required": false,
        "default": "12.0",
        "description": "Minimum iOS version constraint"
      },
      "min_android_api": {
        "type": "integer",
        "required": false,
        "default": 21,
        "description": "Minimum Android API level constraint"
      }
    },
    "error_messages": [
      "Package file not found: Ensure the package configuration file exists at the specified path.",
      "Dependency resolution failed: One or more dependencies have conflicting version requirements.",
      "Platform incompatibility: Some dependencies are not available for specified target platforms.",
      "Version constraint violation: Specified min_ios_version or min_android_api conflicts with dependency requirements.",
      "Invalid version strategy: Use one of [latest_compatible, pinned, major_latest]."
    ],
    "usage": "Provide package_file_path, target_platforms, and dependency_names. Optionally configure version_strategy and platform constraints to resolve and lock compatible versions.",
    "output_details": {
      "resolved_versions": {
        "type": "array",
        "items": {"type": "string"},
        "description": "List of resolved package versions"
      },
      "conflict_warnings": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Warnings about potential version conflicts"
      },
      "updated_file_path": {
        "type": "string",
        "description": "Path to the updated package configuration file"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Framework Configuration Builder",
    "tool_description": "Generates and validates platform-specific configuration files for cross-platform mobile frameworks.",
    "parameters": {
      "project_path": {
        "type": "string",
        "required": true,
        "description": "Path to the mobile project root directory"
      },
      "framework_type": {
        "type": "string",
        "required": true,
        "description": "Framework type: react_native, flutter, xamarin, ionic, cordova"
      },
      "build_variants": {
        "type": "array",
        "items": {"type": "string"},
        "required": true,
        "description": "Build variants: debug, release, staging"
      }
    },
    "error_messages": [
      "Project path not found: Ensure the project directory exists and is accessible.",
      "Unsupported framework: Framework type must be from [react_native, flutter, xamarin, ionic, cordova].",
      "Invalid build variant: Build variants must be from [debug, release, staging].",
      "Configuration conflict: Existing configuration files conflict with generated settings."
    ],
    "usage": "Specify project_path, framework_type, and build_variants to generate appropriate platform configurations for iOS and Android builds.",
    "output_details": {
      "config_files_created": {
        "type": "array",
        "items": {"type": "string"},
        "description": "List of generated configuration files"
      },
      "validation_status": {
        "type": "string",
        "description": "Overall validation status of configurations"
      },
      "warnings": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Configuration warnings and recommendations"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Native Bridge Generator",
    "tool_description": "Creates native code bridges and bindings to interface cross-platform code with platform-specific APIs and native modules.",
    "parameters": {
      "bridge_name": {
        "type": "string",
        "required": true,
        "description": "Name for the generated bridge module"
      },
      "target_platforms": {
        "type": "array",
        "items": {"type": "string"},
        "required": true,
        "description": "Platforms to generate bridges for: ios, android"
      },
      "api_specifications": {
        "type": "array",
        "items": {"type": "string"},
        "required": true,
        "description": "API method signatures to bridge (method_name:return_type:param1_type,param2_type)"
      },
      "native_dependencies": {
        "type": "array",
        "items": {"type": "string"},
        "required": false,
        "default": null,
        "description": "Native libraries or frameworks to link"
      },
      "async_methods": {
        "type": "array",
        "items": {"type": "string"},
        "required": false,
        "default": null,
        "description": "Method names that should be implemented asynchronously"
      }
    },
    "error_messages": [
      "Invalid bridge name: Bridge name must be alphanumeric and start with a letter.",
      "Malformed API specification: API specs must follow format 'method_name:return_type:param1_type,param2_type'.",
      "Unsupported platform: Target platforms must be from [ios, android].",
      "Native dependency not found: Specified native dependencies are not available for target platforms.",
      "Type mapping error: Some parameter or return types cannot be mapped between platforms."
    ],
    "usage": "Define bridge_name, target_platforms, and api_specifications. Optionally specify native_dependencies and async_methods to generate complete native bridge implementations.",
    "output_details": {
      "generated_files": {
        "type": "array",
        "items": {"type": "string"},
        "description": "List of generated bridge files for each platform"
      },
      "integration_steps": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Steps required to integrate the bridge into the project"
      },
      "usage_examples": {
        "type": "string",
        "description": "Example code showing how to use the generated bridge"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Asset Bundler Tool",
    "tool_description": "Optimizes, compresses, and bundles application assets for efficient cross-platform deployment with platform-specific optimizations.",
    "parameters": {
      "asset_directories": {
        "type": "array",
        "items": {"type": "string"},
        "required": true,
        "description": "Paths to directories containing assets to bundle"
      },
      "output_directory": {
        "type": "string",
        "required": true,
        "description": "Directory path for bundled assets output"
      },
      "target_platforms": {
        "type": "array",
        "items": {"type": "string"},
        "required": true,
        "description": "Target platforms for asset optimization"
      },
      "image_quality": {
        "type": "integer",
        "required": false,
        "default": 85,
        "description": "Image compression quality (1-100)"
      },
      "generate_variants": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Generate platform-specific asset variants"
      },
      "include_vector_assets": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Include vector-based assets in bundle"
      }
    },
    "error_messages": [
      "Asset directory not found: One or more specified asset directories do not exist.",
      "Output directory creation failed: Cannot create or access the specified output directory.",
      "Unsupported asset format: Some assets are in unsupported formats for the target platforms.",
      "Image quality out of range: Image quality must be between 1 and 100.",
      "Insufficient disk space: Not enough space available for asset processing and output."
    ],
    "usage": "Specify asset_directories, output_directory, and target_platforms. Configure image_quality and asset generation options to optimize assets for deployment.",
    "output_details": {
      "bundle_size": {
        "type": "integer",
        "description": "Total size of generated asset bundle in bytes"
      },
      "asset_count": {
        "type": "integer",
        "description": "Number of assets processed and bundled"
      },
      "compression_ratio": {
        "type": "number",
        "description": "Compression ratio achieved during bundling"
      },
      "platform_bundles": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Paths to platform-specific asset bundles"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Platform Build Orchestrator",
    "tool_description": "Coordinates and executes cross-platform builds for iOS and Android, managing build environments and generating distributable artifacts.",
    "parameters": {
      "project_path": {
        "type": "string",
        "required": true,
        "description": "Path to the mobile project root directory"
      },
      "build_targets": {
        "type": "array",
        "items": {"type": "string"},
        "required": true,
        "description": "Build targets: ios_debug, ios_release, android_debug, android_release"
      },
      "output_directory": {
        "type": "string",
        "required": true,
        "description": "Directory for build outputs and artifacts"
      },
      "parallel_builds": {
        "type": "boolean",
        "required": false,
        "default": false,
        "description": "Execute platform builds in parallel"
      },
      "clean_before_build": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Clean previous build artifacts before building"
      },
      "build_configuration": {
        "type": "string",
        "required": false,
        "default": "release",
        "description": "Build configuration: debug, release, staging"
      },
      "code_signing_identity": {
        "type": "string",
        "required": false,
        "default": null,
        "description": "Code signing identity for iOS builds"
      },
      "provisioning_profile": {
        "type": "string",
        "required": false,
        "default": null,
        "description": "Provisioning profile UUID for iOS builds"
      },
      "keystore_path": {
        "type": "string",
        "required": false,
        "default": null,
        "description": "Path to Android keystore file"
      },
      "keystore_password": {
        "type": "string",
        "required": false,
        "default": null,
        "description": "Password for Android keystore"
      },
      "key_alias": {
        "type": "string",
        "required": false,
        "default": null,
        "description": "Key alias for Android signing"
      }
    },
    "error_messages": [
      "Project path not found: Ensure the project directory exists and contains valid project files.",
      "Invalid build target: Build targets must be from [ios_debug, ios_release, android_debug, android_release].",
      "Build environment missing: Required build tools or SDKs are not installed or configured.",
      "Code signing failed: iOS code signing identity or provisioning profile is invalid.",
      "Android keystore error: Keystore file not found or password incorrect.",
      "Build compilation failed: Source code compilation errors prevent successful build.",
      "Insufficient permissions: Cannot write to specified output directory."
    ],
    "usage": "Provide project_path, build_targets, and output_directory. Configure signing credentials and build options as needed. The tool handles platform-specific build processes and generates artifacts.",
    "output_details": {
      "build_results": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Build status for each target (success/failure)"
      },
      "artifact_paths": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Paths to generated build artifacts"
      },
      "build_duration": {
        "type": "integer",
        "description": "Total build time in seconds"
      },
      "warnings_count": {
        "type": "integer",
        "description": "Number of build warnings generated"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Device Emulator Controller",
    "tool_description": "Manages and controls iOS simulators and Android emulators for testing cross-platform applications across different device configurations.",
    "parameters": {
      "action": {
        "type": "string",
        "required": true,
        "description": "Action to perform: start, stop, install_app, launch_app, reset"
      },
      "platform": {
        "type": "string",
        "required": true,
        "description": "Target platform: ios or android"
      },
      "device_id": {
        "type": "string",
        "required": false,
        "default": null,
        "description": "Specific device identifier (optional for auto-selection)"
      },
      "app_path": {
        "type": "string",
        "required": false,
        "default": null,
        "description": "Path to app file (.app or .apk) for installation"
      }
    },
    "error_messages": [
      "Invalid action: Action must be one of [start, stop, install_app, launch_app, reset].",
      "Unsupported platform: Platform must be either 'ios' or 'android'.",
      "Device not found: Specified device_id does not exist or is not available.",
      "App installation failed: Cannot install app from specified app_path.",
      "Emulator start failed: Unable to start emulator due to system constraints or configuration errors.",
      "App launch failed: Application could not be launched on the target device."
    ],
    "usage": "Specify action and platform. For app-related actions, provide app_path. Optionally specify device_id for targeting specific devices. The tool manages emulator lifecycle and app deployment.",
    "output_details": {
      "action_status": {
        "type": "string",
        "description": "Status of the requested action (success/failure)"
      },
      "device_info": {
        "type": "string",
        "description": "Information about the target device"
      },
      "execution_time": {
        "type": "integer",
        "description": "Time taken to complete the action in seconds"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Cross Platform Tester",
    "tool_description": "Executes automated tests across multiple platforms and devices, generating comprehensive test reports for cross-platform mobile applications.",
    "parameters": {
      "test_suite_path": {
        "type": "string",
        "required": true,
        "description": "Path to test suite directory or configuration file"
      },
      "target_platforms": {
        "type": "array",
        "items": {"type": "string"},
        "required": true,
        "description": "Platforms to test on: ios, android"
      },
      "test_types": {
        "type": "array",
        "items": {"type": "string"},
        "required": true,
        "description": "Types of tests to run: unit, integration, ui, performance"
      },
      "device_configurations": {
        "type": "array",
        "items": {"type": "string"},
        "required": false,
        "default": null,
        "description": "Specific device configurations to test on"
      },
      "parallel_execution": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Run tests in parallel across devices"
      },
      "generate_screenshots": {
        "type": "boolean",
        "required": false,
        "default": false,
        "description": "Capture screenshots during UI tests"
      },
      "timeout_seconds": {
        "type": "integer",
        "required": false,
        "default": 300,
        "description": "Maximum timeout for test execution"
      }
    },
    "error_messages": [
      "Test suite not found: Specified test suite path does not exist or is not accessible.",
      "Invalid test type: Test types must be from [unit, integration, ui, performance].",
      "Platform not supported: Target platforms must be from [ios, android].",
      "Device configuration error: One or more specified device configurations are not available.",
      "Test execution timeout: Tests exceeded the specified timeout duration.",
      "Test framework error: Required testing frameworks are not properly configured."
    ],
    "usage": "Provide test_suite_path, target_platforms, and test_types. Optionally configure device_configurations and execution settings. The tool runs tests and generates detailed reports.",
    "output_details": {
      "test_results_summary": {
        "type": "string",
        "description": "Overall summary of test execution results"
      },
      "passed_tests": {
        "type": "integer",
        "description": "Number of tests that passed"
      },
      "failed_tests": {
        "type": "integer",
        "description": "Number of tests that failed"
      },
      "execution_time": {
        "type": "integer",
        "description": "Total test execution time in seconds"
      },
      "report_files": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Paths to generated test report files"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Performance Profiler Tool",
    "tool_description": "Profiles mobile application performance across platforms, measuring CPU usage, memory consumption, battery drain, and UI responsiveness.",
    "parameters": {
      "app_identifier": {
        "type": "string",
        "required": true,
        "description": "Bundle identifier or package name of the app to profile"
      },
      "platform": {
        "type": "string",
        "required": true,
        "description": "Target platform: ios or android"
      },
      "profiling_duration": {
        "type": "integer",
        "required": true,
        "description": "Profiling duration in seconds"
      },
      "metrics_to_collect": {
        "type": "array",
        "items": {"type": "string"},
        "required": true,
        "description": "Metrics to profile: cpu, memory, battery, network, ui_responsiveness"
      },
      "device_id": {
        "type": "string",
        "required": false,
        "default": null,
        "description": "Specific device identifier for profiling"
      }
    },
    "error_messages": [
      "App not found: Application with specified identifier is not installed on the target device.",
      "Invalid platform: Platform must be either 'ios' or 'android'.",
      "Invalid metrics: Metrics must be from [cpu, memory, battery, network, ui_responsiveness].",
      "Profiling duration error: Duration must be between 10 and 3600 seconds.",
      "Device not available: Specified device is not connected or accessible.",
      "Profiling failed: Unable to collect performance metrics from the application."
    ],
    "usage": "Specify app_identifier, platform, profiling_duration, and metrics_to_collect. Optionally target a specific device. The tool collects and analyzes performance data during app execution.",
    "output_details": {
      "profiling_summary": {
        "type": "string",
        "description": "Summary of profiling results and key findings"
      },
      "avg_cpu_usage": {
        "type": "number",
        "description": "Average CPU usage percentage during profiling"
      },
      "peak_memory_mb": {
        "type": "number",
        "description": "Peak memory usage in megabytes"
      },
      "battery_drain_rate": {
        "type": "number",
        "description": "Battery drain rate percentage per hour"
      },
      "performance_score": {
        "type": "integer",
        "description": "Overall performance score from 1-100"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "App Store Validator",
    "tool_description": "Validates mobile app builds against App Store and Google Play Store requirements, checking metadata, assets, and compliance rules.",
    "parameters": {
      "app_file_path": {
        "type": "string",
        "required": true,
        "description": "Path to the app file (.ipa for iOS, .aab or .apk for Android)"
      },
      "target_store": {
        "type": "string",
        "required": true,
        "description": "Target app store: app_store, google_play"
      },
      "validation_level": {
        "type": "string",
        "required": false,
        "default": "standard",
        "description": "Validation strictness: basic, standard, strict"
      }
    },
    "error_messages": [
      "App file not found: Specified app file path does not exist or is not accessible.",
      "Invalid app format: App file format is not compatible with the target store.",
      "Unsupported target store: Target store must be either 'app_store' or 'google_play'.",
      "Invalid validation level: Validation level must be from [basic, standard, strict].",
      "Validation failed: App does not meet store requirements (see detailed report)."
    ],
    "usage": "Provide app_file_path and target_store. Optionally set validation_level for different strictness levels. The tool performs comprehensive validation against store guidelines.",
    "output_details": {
      "validation_status": {
        "type": "string",
        "description": "Overall validation result: passed, failed, warning"
      },
      "issues_found": {
        "type": "array",
        "items": {"type": "string"},
        "description": "List of validation issues and violations"
      },
      "recommendations": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Recommendations to improve store compatibility"
      },
      "compliance_score": {
        "type": "integer",
        "description": "Compliance score from 1-100"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Code Signing Manager",
    "tool_description": "Manages code signing certificates, provisioning profiles, and keystore configurations for secure app distribution across platforms.",
    "parameters": {
      "operation": {
        "type": "string",
        "required": true,
        "description": "Operation to perform: sign_ios, sign_android, validate_certificate, create_keystore"
      },
      "app_path": {
        "type": "string",
        "required": true,
        "description": "Path to the app file to sign or validate"
      },
      "certificate_path": {
        "type": "string",
        "required": false,
        "default": null,
        "description": "Path to signing certificate file"
      },
      "provisioning_profile": {
        "type": "string",
        "required": false,
        "default": null,
        "description": "Path to iOS provisioning profile"
      },
      "keystore_path": {
        "type": "string",
        "required": false,
        "default": null,
        "description": "Path to Android keystore file"
      },
      "keystore_password": {
        "type": "string",
        "required": false,
        "default": null,
        "description": "Password for Android keystore"
      },
      "key_alias": {
        "type": "string",
        "required": false,
        "default": null,
        "description": "Key alias for Android signing"
      },
      "output_path": {
        "type": "string",
        "required": false,
        "default": null,
        "description": "Output path for signed app file"
      }
    },
    "error_messages": [
      "Invalid operation: Operation must be from [sign_ios, sign_android, validate_certificate, create_keystore].",
      "App file not found: Specified app file does not exist or is not accessible.",
      "Certificate error: Signing certificate is invalid, expired, or not found.",
      "Provisioning profile error: iOS provisioning profile is invalid or does not match the app identifier.",
      "Keystore error: Android keystore file not found or password incorrect.",
      "Key alias error: Specified key alias does not exist in the keystore.",
      "Signing failed: Code signing process failed due to configuration or certificate issues."
    ],
    "usage": "Specify operation and app_path. Provide appropriate signing credentials based on the operation (certificate_path and provisioning_profile for iOS, keystore details for Android). The tool handles secure code signing.",
    "output_details": {
      "signing_status": {
        "type": "string",
        "description": "Status of the signing operation: success, failed"
      },
      "signed_app_path": {
        "type": "string",
        "description": "Path to the signed application file"
      },
      "certificate_info": {
        "type": "string",
        "description": "Information about the signing certificate used"
      },
      "expiry_date": {
        "type": "string",
        "description": "Certificate or provisioning profile expiry date"
      }
    }
  }
  ```

  ```json
  {
    "tool_name": "Deployment Pipeline Controller",
    "tool_description": "Orchestrates automated deployment pipelines for cross-platform mobile apps to app stores, testing environments, and distribution channels.",
    "parameters": {
      "deployment_target": {
        "type": "string",
        "required": true,
        "description": "Deployment target: app_store, google_play, firebase_distribution, testflight"
      },
      "app_file_path": {
        "type": "string",
        "required": true,
        "description": "Path to signed app file for deployment"
      },
      "credentials_config": {
        "type": "string",
        "required": true,
        "description
