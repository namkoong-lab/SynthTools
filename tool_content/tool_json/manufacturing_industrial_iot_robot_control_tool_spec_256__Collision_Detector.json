{
  "tool_name": "Collision Detector",
  "tool_description": "Detects potential collisions between robot links, with obstacles, or workspace boundaries using geometric collision checking.",
  "parameters": {
    "kinematic_model": {
      "type": "string",
      "required": true,
      "description": "Serialized kinematic chain model with link geometries"
    },
    "current_joint_angles": {
      "type": "array",
      "required": true,
      "description": "Current joint positions in degrees",
      "items": {
        "type": "number"
      }
    },
    "obstacle_positions": {
      "type": "array",
      "required": false,
      "description": "Obstacle center positions [x1,y1,z1,x2,y2,z2,...] in mm",
      "items": {
        "type": "number"
      },
      "default": []
    },
    "obstacle_sizes": {
      "type": "array",
      "required": false,
      "description": "Obstacle dimensions [w1,h1,d1,w2,h2,d2,...] in mm",
      "items": {
        "type": "number"
      },
      "default": []
    },
    "safety_margin": {
      "type": "number",
      "required": false,
      "description": "Additional safety margin in mm",
      "default": 10.0
    }
  },
  "error_messages": [
    "Joint angles mismatch: Number of angles must match kinematic model DOF",
    "Obstacle data mismatch: Obstacle positions and sizes arrays must have compatible lengths",
    "Invalid safety margin: Safety margin must be non-negative",
    "Kinematic model invalid: Cannot extract link geometry information",
    "Computation error: Collision detection failed due to numerical issues"
  ],
  "usage": "Provide kinematic model, current joint angles, and optionally obstacle information. The tool checks for collisions and returns collision status with details.",
  "output_details": {
    "collision_detected": {
      "type": "boolean",
      "description": "Whether any collision was detected"
    },
    "collision_type": {
      "type": "string",
      "description": "Type of collision: self, obstacle, boundary, or none"
    },
    "collision_details": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "description": "Detailed collision information for each detected collision"
    },
    "minimum_distance": {
      "type": "number",
      "description": "Minimum distance to nearest collision in mm"
    }
  }
}