{
  "tool_name": "Component Generator",
  "tool_description": "Generates React/Vue/Angular component boilerplate code with specified props, hooks, and structure based on component type and framework preferences.",
  "parameters": {
    "component_name": {
      "type": "string",
      "required": true,
      "description": "Name of the component to generate"
    },
    "framework": {
      "type": "string",
      "required": true,
      "description": "Target framework: react, vue, angular"
    },
    "component_type": {
      "type": "string",
      "required": true,
      "description": "Type of component: functional, class, stateful, stateless"
    },
    "props": {
      "type": "array",
      "required": false,
      "items": {
        "type": "string"
      },
      "description": "Array of prop names for the component",
      "default": "None"
    },
    "has_state": {
      "type": "boolean",
      "required": false,
      "description": "Whether component needs local state management",
      "default": false
    },
    "typescript": {
      "type": "boolean",
      "required": false,
      "description": "Generate TypeScript version",
      "default": false
    }
  },
  "error_messages": [
    "Invalid framework: Use one of [react, vue, angular].",
    "Invalid component type: Use one of [functional, class, stateful, stateless].",
    "Component name required: Provide a valid component name using PascalCase.",
    "Props array too large: Maximum 20 props allowed per component.",
    "Invalid prop name: Prop names must be valid JavaScript identifiers."
  ],
  "usage": "Specify component_name, framework, and component_type. Optionally add props array, set has_state flag, and enable typescript. Returns generated component code and file structure.",
  "output_details": {
    "component_code": {
      "type": "string",
      "description": "Generated component source code"
    },
    "file_extension": {
      "type": "string",
      "description": "Recommended file extension (.js, .jsx, .ts, .tsx, .vue)"
    },
    "imports_needed": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "description": "List of required imports for the component"
    },
    "props_interface": {
      "type": "string",
      "description": "TypeScript interface definition for props if applicable"
    }
  }
}