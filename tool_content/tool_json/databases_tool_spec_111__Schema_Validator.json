{
  "tool_name": "Schema Validator",
  "tool_description": "Validates DDL statements for syntax correctness, naming conventions, and database-specific compliance rules.",
  "parameters": {
    "ddl_statements": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "required": true,
      "description": "DDL statements to validate"
    },
    "database_type": {
      "type": "string",
      "required": true,
      "description": "Target database type for validation rules"
    },
    "strict_validation": {
      "type": "boolean",
      "required": false,
      "default": true,
      "description": "Whether to apply strict validation rules"
    }
  },
  "error_messages": [
    "Empty DDL statements: No DDL statements provided for validation.",
    "Unsupported database type: Database type is not supported for validation.",
    "Syntax errors: One or more DDL statements contain syntax errors.",
    "Naming convention violations: Object names violate database naming conventions.",
    "Constraint violations: DDL statements violate database-specific constraints."
  ],
  "usage": "Provide DDL statements and database type to validate syntax, naming conventions, and compliance with database-specific rules.",
  "output_details": {
    "validation_status": {
      "type": "string",
      "description": "Overall validation result (passed/failed)"
    },
    "syntax_errors": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "description": "Syntax errors found in DDL statements"
    },
    "warnings": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "description": "Non-blocking validation warnings"
    },
    "validated_statement_count": {
      "type": "integer",
      "description": "Number of statements successfully validated"
    }
  }
}