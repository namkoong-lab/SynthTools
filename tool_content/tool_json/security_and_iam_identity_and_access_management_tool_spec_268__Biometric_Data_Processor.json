{
  "tool_name": "Biometric Data Processor",
  "tool_description": "Processes biometric authentication data including fingerprints, facial recognition, and voice patterns with privacy-preserving template generation.",
  "parameters": {
    "biometric_data": {
      "type": "string",
      "required": true,
      "description": "Base64-encoded biometric sample data"
    },
    "biometric_type": {
      "type": "string",
      "required": true,
      "description": "Type of biometric: fingerprint, face, voice, iris"
    },
    "user_id": {
      "type": "string",
      "required": true,
      "description": "Unique identifier for the user"
    },
    "quality_threshold": {
      "type": "number",
      "required": false,
      "default": 0.7,
      "description": "Minimum quality score for biometric sample (0.1-1.0)"
    },
    "template_format": {
      "type": "string",
      "required": false,
      "default": "iso",
      "description": "Biometric template format: iso, ansi, proprietary"
    },
    "enrollment_mode": {
      "type": "boolean",
      "required": false,
      "default": false,
      "description": "Whether this is enrollment or verification mode"
    },
    "liveness_check": {
      "type": "boolean",
      "required": false,
      "default": true,
      "description": "Whether to perform liveness detection"
    },
    "max_samples": {
      "type": "integer",
      "required": false,
      "default": 3,
      "description": "Maximum number of samples to process (1-10)"
    },
    "matching_threshold": {
      "type": "number",
      "required": false,
      "default": 0.8,
      "description": "Threshold for biometric matching (0.1-1.0)"
    },
    "encryption_enabled": {
      "type": "boolean",
      "required": false,
      "default": true,
      "description": "Whether to encrypt biometric templates"
    },
    "retention_days": {
      "type": "integer",
      "required": false,
      "default": 365,
      "description": "Number of days to retain biometric data (1-3650)"
    },
    "vendor_sdk": {
      "type": "string",
      "required": false,
      "default": "generic",
      "description": "Biometric SDK vendor: generic, neurotechnology, aware, innovatrics"
    },
    "anti_spoofing": {
      "type": "boolean",
      "required": false,
      "default": true,
      "description": "Whether to enable anti-spoofing measures"
    }
  },
  "error_messages": [
    "Invalid biometric_type: Use one of [fingerprint, face, voice, iris]",
    "Invalid biometric_data: Must be valid base64-encoded data",
    "Invalid quality_threshold: Must be between 0.1 and 1.0",
    "Invalid template_format: Use one of [iso, ansi, proprietary]",
    "Invalid max_samples: Must be between 1 and 10",
    "Invalid matching_threshold: Must be between 0.1 and 1.0",
    "Invalid retention_days: Must be between 1 and 3650",
    "Invalid vendor_sdk: Use one of [generic, neurotechnology, aware, innovatrics]",
    "Poor biometric quality: Sample quality below threshold",
    "Liveness check failed: Sample appears to be from non-living source",
    "User not found: The specified user_id does not exist"
  ],
  "usage": "Provide biometric_data (base64), biometric_type, and user_id. Configure quality_threshold, template_format, and other security settings as needed.",
  "output_details": {
    "processing_status": {
      "type": "string",
      "description": "Status of biometric processing: success, failed, poor_quality"
    },
    "quality_score": {
      "type": "number",
      "description": "Quality score of the biometric sample (0.0-1.0)"
    },
    "template_id": {
      "type": "string",
      "description": "Unique identifier for generated biometric template"
    },
    "match_score": {
      "type": "number",
      "description": "Matching score if in verification mode (0.0-1.0)"
    },
    "liveness_passed": {
      "type": "boolean",
      "description": "Whether liveness detection passed"
    },
    "anti_spoofing_passed": {
      "type": "boolean",
      "description": "Whether anti-spoofing checks passed"
    },
    "processing_time": {
      "type": "number",
      "description": "Processing time in milliseconds"
    }
  }
}