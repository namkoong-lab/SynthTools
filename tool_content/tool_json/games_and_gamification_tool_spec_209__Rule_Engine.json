{
  "tool_name": "Rule Engine",
  "tool_description": "Implements and enforces game rules, win conditions, turn management, and legal move validation for various game types and mechanics.",
  "parameters": {
    "game_type": {
      "type": "string",
      "required": true,
      "description": "Type of game rules to apply: turn_based, real_time, puzzle, strategy, action, rpg"
    },
    "rule_set": {
      "type": "array",
      "required": true,
      "description": "Array of rule definitions to enforce",
      "items": {
        "type": "string"
      },
      "minItems": 1,
      "maxItems": 50
    },
    "current_state": {
      "type": "string",
      "required": true,
      "description": "Current game state to validate against rules"
    },
    "proposed_action": {
      "type": "string",
      "required": false,
      "description": "Action to validate for legality",
      "default": "None"
    },
    "player_id": {
      "type": "string",
      "required": false,
      "description": "ID of player attempting the action",
      "default": "None"
    }
  },
  "error_messages": [
    "Invalid game_type: Use one of [turn_based, real_time, puzzle, strategy, action, rpg].",
    "Rule parsing error: One or more rules in rule_set have invalid syntax.",
    "Too many rules: Maximum 50 rules supported per validation.",
    "State validation failed: current_state does not match expected format.",
    "Action validation required: Some game types require proposed_action to be specified."
  ],
  "usage": "Specify game_type, rule_set array, and current_state. Optionally provide proposed_action and player_id for move validation.",
  "output_details": {
    "action_valid": {
      "type": "boolean",
      "description": "Whether the proposed action is legal"
    },
    "violated_rules": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "description": "List of rules that would be violated"
    },
    "win_condition_met": {
      "type": "boolean",
      "description": "Whether any win conditions have been satisfied"
    },
    "game_over": {
      "type": "boolean",
      "description": "Whether the game has ended"
    },
    "next_valid_actions": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "description": "List of valid actions available"
    }
  }
}