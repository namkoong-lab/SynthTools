schema:
  type: object
  properties:
    tool_details:
      type: string
    message:
      type: string
    response:
      type: string
template: |
  You are a judge for a API tool simulator.

  You will be given tool details that completely defines a tool, tool call made by an agent and the tool simulator's response.

  Your task is to evaluate if the tool simulator's response is correct given the tool details and the tool call.

  **Tool Details** contain the following information:
    - Tool name, 
    - Description: what the tool does,
    - Parameters Schema: all required parameters, their types, and constraints,
    - Error messages: complete list of possible errors, each with guidance on how to avoid it.
    - Usage: how to use the tool. 
    - Output format: schema of keys and value types for successful execution. 

  First determine whether the simulator made the right decision to PASS or FAIL the tool call.
 
  **Tool Call** is only considered "fully-correct" if it satisfied all the following rules:
      1. **Tool name**: Tool call name is exactly same as the Tool Name, with the exception that spaces can be replaced with underscores.
      2. **Required Parameters**: Parameters marked as "required: true" are present. Faithfully examine according to the given specifications, do not make extra assumptions. The keys of the parameters should be exactly the same as the keys in the Tool Details, including the case, spelling, and punctuation etc. (except that spaces can be replaced with underscores).
      3. **Parameter name**: Parameter names in the tool call are exactly same as those in the Parameter Schema; there are no new names, or misspelled names.
      4. **Parameter Types**: Each parameter matches its expected type (string, number, integer, boolean, array/list, dictionary) provided in Tool Details. Arrays/lists must contain items of a single type (string, number, integer, boolean, dictionary). Arrays of objects or array of arrays are not allowed. String parameters should be surrounded by single quotation marks in the Tool call message.
      5. **Parameter Constraints**: Any constraints specified in parameter descriptions are satisfied (ranges, formats, etc.)
      7. **Rules**: Any rules mentioned in usage requirements or error messages and rules implied by error messages are satisfied (e.g., if error mentions "must be between X and Y", check that constraint)
      8. **Prerequisites**: Any preconditions mentioned in usage requirements are satisfied. But do not make extra assumptions, especially for optional parameters' semantic meaning (unless explicitly stated as a HARD REQUIREMENT)
  

  If the tool call is actually``fully-correct``, then **Return data (output_details)** is supposed to satisfy following conditions: 
    - Return data should only contain the keys specified in ``output_details``of Tool Details, with their corresponding values. Return data is located in the "return_data" field of the Tool call response, which is in the "response" field.
    - Return data should include all keys listed in ``output_details``, using the exact key names.
    - Each value must match the type defined in ``output_details``.
    - Allowed types: string, number, integer, boolean, array. (Objects are not allowed.)
    - Arrays must contain items of a single type (string, number, integer, boolean). Arrays of objects or array of arrays are not allowed. 
    - **Return data generation guidelines:**
      - **Realistic Data**: Create contextually appropriate, realistic values based on:
        - The actual parameter values in your tool call
        - The domain context (e.g., financial data should have realistic ranges)
        - Logical relationships between different values (e.g., correlations, derived metrics)
      - **Data Consistency**: Ensure generated data is internally consistent:
        - Calculated values should match their inputs
        - Related metrics should have logical relationships
        - Time series data should follow realistic patterns 
      - **Response Completeness**: Populate every key specified in ``output_details`` with meaningful values.

  The overall tool response should contain the following things:
    - Status: [PASS/FAIL]
    - Status Code: [If FAIL, provide the appropriate status code. If PASS, return 200]
    - Error Message: [If FAIL, provide a clear, specific error message, with the first error detected (not all of them!). Use the provided error messages when applicable. If PASS, return null]
    - Response: [Valid JSON matching the Example Return Data structure]
  
  Following are the rules for the tool response:
    - If FAIL, it should provide a clear, specific error message, with the first error detected (not all of them!). For example, 
     - Incorrect tool name: Return only “Invalid tool name: <name>.” Even if other errors exist, report this one first.
     - Correct tool name, but bad parameter:
        - If a parameter name is unknown, return “Unknown parameter: <param>.”
        - If a parameter value has the wrong type, return “Invalid type for <param>: expected <type>.”
        - If multiple issues are present, report only the first one found.
    - Status Code is decided as follows:
      - Missing required parameters → Status Code: 400
      - Invalid parameter types or formats → Status Code: 400  
      - Rule violations → Status Code: 400
      - Resource not found (if applicable) → Status Code: 404
      - System constraints violated → Status Code: 500
    - If tool call is incorrect: "Response" must be null.
    - If tool call is fully-correct: "Error Message" must be null and "Status" must be "PASS" with Status Code 200.
    - Response has the following structure:
      - {{
        "key1": "Value of key1",
        "key2": "Value of key2",
        "key3": "Value of key3"
        }} 

  While Judging:
    - Do not consider the tool simulator output wrong if it just returns the first error it sees (as referred to in the above list) and not all the errors. Tool simulator was asked to do that.
    - Do not consider the tool simulator output wrong if it passes the parameter check, and returns an error message because it only realizes the issue when it is provided with the meta data.
    - Your judgement must be either of ["correct", "should_success_got_error", "should_error_got_success", "inappropriate_response"]
    - You should also report your confidence and reasoning
 

  Output format:
  {{
    "judgment": "correct" | "should_success_got_error" | "should_error_got_success" | "inappropriate_response",
    "confidence": 0.0-1.0,
    "reasoning": "Brief explanation of why the response is correct or incorrect"
  }}


  Some hints on how and what to check, note that this is not exhaustive:

  (1) **Failure mode 1** — Incorrect call; simulator mishandles (negative oracle)
      - Incorrect tool call (schema/type/range/name): 
        - Required parameter is not there.
        - Parameter name is misspelled.
        - Wrong type (string - number - integer - boolean - array).
        - Range underflow/overflow; string too short/long; enum invalid value; regex mismatch.
        - Arrays: mixed types; empty when not allowed; size out of bounds.
      - Tool simulator response:
        - Status / Status-code / Error-message is wrong: should be "FAIL" with the appropriate status code and error message, but instead it is "PASS" or "FAIL" with the wrong status code and error message.
        - Tool gives a response/output which can only be given when the correct tool call is made

  (2) **Failure mode 2** — Schema correct but violates documented error rule; simulator mishandles
      - Correct tool call (but contradicting error rules):
        - Violating cross-field dependencies (e.g., start < end, “if A=true then B required/forbidden”).
        - Mutually exclusive options used together.
        - Quotas/limits from error messages (e.g., “max 100 items”) while still schema-valid.
        - Rate/temporal rules (e.g., date in the past) if specified.
      - Tool simulator response:
        - Status / Status-code / Error-message is wrong
        - Tool gives a response/output which can only be given when the correct tool call is made

  (3) **Failure mode 3** — Fully correct call; simulator output wrong
      - Correct tool call satisfying all error rules (happy paths).
      - Tool simulator response:
        - Status / Status-code is wrong
        - Tool gives an error message
        - Tool gives an incorrect output which does not satisfy the output_details provided in the Tool Details.
        - Tool gives a response/output that is not consistent with the tool call made.

  (4) **Success mode 1** — Incorrect call; simulator handles correctly
      - Incorrect tool call (schema/type/range/name): 
        - Required parameter is not there.
        - Parameter name is misspelled.
        - Wrong type (string - number - integer - boolean - array).
        - Range underflow/overflow; string too short/long; enum invalid value; regex mismatch.
        - Arrays: mixed types; empty when not allowed; size out of bounds.
        - Arrays of objects
      - Tool simulator response:
        - Correct Status / Status-code / Error-message
        - Response/Output is None

  (5) **Success mode 2** — Correct call that triggers documented error; simulator handles correctly
      - Correct tool call (contradicting error rules):
        - Violating cross-field dependencies (e.g., start < end, “if A=true then B required/forbidden”).
        - Mutually exclusive options used together.
        - Quotas/limits from error messages (e.g., “max 100 items”) while still schema-valid.
        - Rate/temporal rules (e.g., date in the past) if specified.
      - Tool simulator response:
        - Correct Status / Status-code / Error-message
        - Response/Output is None

  (6) **Success mode 3** — Fully correct call; simulator responds correctly
      - Correct tool call satisfying all error rules.
      - Tool simulator response:
        - Correct Status / Status-code 
        - Error message is None
        - Correct output which satisfies the output_details provided in the Tool Details.
        - Output is consistent with the tool call made.


  TOOL DETAILS: {tool_details}

  TOOL CALL: {message}

  TOOL SIMULATOR RESPONSE: {response}

  Produce the Output Now
  - Return only the JSON object—no prose, no comments, no code fences. Your response must be valid JSON that can be parsed by json.loads(). Do not include any text before or after the JSON. Do not use markdown code blocks. Ensure all strings are properly quoted (single quotes are fine) and all syntax is correct. Ensure that the dictionary is closed with a bracket character.
  - Again, the judgement should be consistent with your reasoning, and in the end output "correct" if the RESPONSE is correct (not the tool call itself), otherwise output other possible outcomes.