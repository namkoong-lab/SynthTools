{
    "message": "[search_messages(user_name = 'Frank', keyword = 'Pizza')]",
    "response": "Status: PASS\nStatus Code: 200\nError Message: null\nTool call response:{\n  \"tool_call\": {\n    \"parameters\": {\n      \"user_name\": \"Frank\",\n      \"keyword\": \"Pizza\"\n    }\n  },\n  \"return_data\": {\n    \"status\": true,\n    \"messages\": [\n      {\n        \"id\": 2,\n        \"sender_id\": \"USR101\",\n        \"receiver_id\": \"USR102\",\n        \"message\": \"Can you help me order a \\\"Margherita Pizza\\\" delivery? The merchant is Domino's.\"\n      }\n    ]\n  }\n}",
    "timestamp": "2025-09-22 19:47:44 EDT",
    "chat_configs": {
        "max_tokens": 10000,
        "temperature": 0.02,
        "tool_configs": {
            "tool_name": "search_messages",
            "tool_description": "Search for messages from a specific user that contain a particular keyword.",
            "parameters": {
                "user_name": {
                    "type": "string",
                    "description": "The name of the user whose messages are being searched.",
                    "required": true
                },
                "keyword": {
                    "type": "string",
                    "description": "The keyword to search for within the messages.",
                    "required": true
                }
            },
            "error_messages": [],
            "usage": "Search for messages from a specific user that contain a particular keyword.",
            "meta_data": "```yaml\nsystem_state:\n  wifi: false  # Global device network connectivity state\n  logged_in: true  # Global device authentication state\n  message_id_counter: 6  # Global counter for generating new message IDs\n  max_capacity: 6  # Global maximum number of messages that can be stored\n\nentities:\n  users:\n    Eve:\n      user_id: \"USR100\"\n      phone_number: \"123-456-7890\"\n      occupation: \"Software Engineer\"\n    Frank:\n      user_id: \"USR101\"\n      phone_number: \"234-567-8901\"\n      occupation: \"Data Scientist\"\n    Grace:\n      user_id: \"USR102\"\n      phone_number: \"345-678-9012\"\n      occupation: \"Product Manager\"\n    Helen:\n      user_id: \"USR103\"\n      phone_number: \"456-789-0123\"\n      occupation: \"UX Designer\"\n    Isaac:\n      user_id: \"USR104\"\n      phone_number: \"567-890-1234\"\n      occupation: \"DevOps Engineer\"\n    Jack:\n      user_id: \"USR105\"\n      phone_number: \"678-901-2345\"\n      occupation: \"Marketing Specialist\"\n\ninitial_data:\n  inbox:\n    1:\n      sender_id: \"USR100\"\n      receiver_id: \"USR101\"\n      message: \"Hey Frank, don't forget about our meeting on 2024-06-11 at 4 PM in Conference Room 1.\"\n      time: \"2024-06-09\"\n    2:\n      sender_id: \"USR101\"\n      receiver_id: \"USR102\"\n      message: \"Can you help me order a \\\"Margherita Pizza\\\" delivery? The merchant is Domino's.\"\n      time: \"2024-03-09\"\n    3:\n      sender_id: \"USR102\"\n      receiver_id: \"USR103\"\n      message: \"Please check the milk tea delivery options available from Heytea and purchase a cheaper milk tea for me. After making the purchase, remember to reply to me with \\\"Already bought.\\\"\"\n      time: \"2023-12-05\"\n    4:\n      sender_id: \"USR103\"\n      receiver_id: \"USR102\"\n      message: \"No problem Helen, I can assist you.\"\n      time: \"2024-09-09\"\n    5:\n      sender_id: \"USR104\"\n      receiver_id: \"USR105\"\n      message: \"Isaac, are you available for a call?\"\n      time: \"2024-06-06\"\n    6:\n      sender_id: \"USR105\"\n      receiver_id: \"USR104\"\n      message: \"Yes Jack, let's do it in 30 minutes.\"\n      time: \"2024-01-15\"\n\ntool_mapping:\n  send_message:\n    api_method: \"send_message\"\n    parameter_mapping:\n      sender_name: \"sender_name\"\n      receiver_name: \"receiver_name\"\n      message: \"message\"\n    validation_chain:\n      - \"Step 1: Check logged_in status\"\n      - \"Step 2: Check wifi status\"\n      - \"Step 3: Check inbox capacity\"\n      - \"Step 4: Validate sender and receiver exist\"\n      - \"Step 5: Generate new message ID and store message\"\n    supported_parameter_ranges:\n      sender_name:\n        - valid_values: [\"Eve\", \"Frank\", \"Grace\", \"Helen\", \"Isaac\", \"Jack\"]\n        - constraints: \"Must be exact case-sensitive match to existing user\"\n        - edge_cases: \"Returns sender does not exist error for invalid names\"\n      receiver_name:\n        - valid_values: [\"Eve\", \"Frank\", \"Grace\", \"Helen\", \"Isaac\", \"Jack\"]\n        - constraints: \"Must be exact case-sensitive match to existing user\"\n        - edge_cases: \"Returns receiver does not exist error for invalid names\"\n      message:\n        - valid_values: [\"any string\"]\n        - constraints: \"Any non-empty string content\"\n        - edge_cases: \"Empty strings are accepted\"\n\n  delete_message:\n    api_method: \"delete_message\"\n    parameter_mapping:\n      message_id: \"message_id\"\n    validation_chain:\n      - \"Step 1: Check logged_in status\"\n      - \"Step 2: Validate message_id exists in inbox\"\n      - \"Step 3: Delete message from inbox\"\n    supported_parameter_ranges:\n      message_id:\n        - valid_values: [\"any integer that exists as key in inbox\"]\n        - constraints: \"Must be integer type and exist in current inbox\"\n        - edge_cases: \"Returns message ID does not exist for invalid IDs\"\n\n  view_messages_between_users:\n    api_method: \"view_messages_between_users\"\n    parameter_mapping:\n      sender_name: \"sender_name\"\n      receiver_name: \"receiver_name\"\n    validation_chain:\n      - \"Step 1: Check logged_in status\"\n      - \"Step 2: Validate sender exists\"\n      - \"Step 3: Validate receiver exists\"\n      - \"Step 4: Search inbox for matching sender_id to receiver_id messages\"\n    supported_parameter_ranges:\n      sender_name:\n        - valid_values: [\"Eve\", \"Frank\", \"Grace\", \"Helen\", \"Isaac\", \"Jack\"]\n        - constraints: \"Must be exact case-sensitive match\"\n        - edge_cases: \"Returns sender does not exist for invalid names\"\n      receiver_name:\n        - valid_values: [\"Eve\", \"Frank\", \"Grace\", \"Helen\", \"Isaac\", \"Jack\"]\n        - constraints: \"Must be exact case-sensitive match\"\n        - edge_cases: \"Returns receiver does not exist for invalid names\"\n\n  search_messages:\n    api_method: \"search_messages\"\n    parameter_mapping:\n      user_name: \"user_name\"\n      keyword: \"keyword\"\n    validation_chain:\n      - \"Step 1: Validate user exists\"\n      - \"Step 2: Search all messages where user is sender or receiver\"\n      - \"Step 3: Filter messages containing keyword (case-insensitive)\"\n    supported_parameter_ranges:\n      user_name:\n        - valid_values: [\"Eve\", \"Frank\", \"Grace\", \"Helen\", \"Isaac\", \"Jack\"]\n        - constraints: \"Must be exact case-sensitive match\"\n        - edge_cases: \"Returns user does not exist for invalid names\"\n      keyword:\n        - valid_values: [\"any string\"]\n        - constraints: \"Case-insensitive substring matching\"\n        - edge_cases: \"Empty keywords match nothing, returns no messages found\"\n\nfunction_behaviors:\n  send_message:\n    prerequisites:\n      - \"logged_in must be true\"\n      - \"wifi must be true\"\n      - \"inbox size must be less than max_capacity (6)\"\n    validation_rules:\n      - \"sender_name must exist in user_list keys\"\n      - \"receiver_name must exist in user_list keys\"\n      - \"message parameter accepted as any string\"\n    success_conditions:\n      - \"All prerequisites met and validation passed\"\n      - \"New message added to inbox with incremented message_id_counter\"\n    error_conditions:\n      - condition: \"logged_in is false\"\n        message: \"Device not logged in, unable to send message\"\n        tool_impact: \"Returns status false with error message\"\n      - condition: \"wifi is false\"\n        message: \"Wi-Fi is turned off, cannot send messages at this time\"\n        tool_impact: \"Returns status false with error message\"\n      - condition: \"inbox size >= max_capacity\"\n        message: \"Inbox capacity is full. You need to ask the user which message to delete.\"\n        tool_impact: \"Returns status false with error message\"\n      - condition: \"sender_name or receiver_name not in user_list\"\n        message: \"Sender or receiver does not exist\"\n        tool_impact: \"Returns status false with error message\"\n    state_changes:\n      - \"message_id_counter incremented by 1\"\n      - \"New message entry added to inbox with new message_id_counter as key\"\n      - \"Message includes sender_id, receiver_id, message content, no time field\"\n    parameter_handling:\n      - \"All parameters are required\"\n      - \"No default values assigned\"\n      - \"String parameters used as-is without transformation\"\n\n  delete_message:\n    prerequisites:\n      - \"logged_in must be true\"\n    validation_rules:\n      - \"message_id must exist as key in inbox\"\n    success_conditions:\n      - \"Message ID exists and logged in\"\n    error_conditions:\n      - condition: \"logged_in is false\"\n        message: \"Device not logged in, unable to delete message\"\n        tool_impact: \"Returns status false with error message\"\n      - condition: \"message_id not in inbox\"\n        message: \"Message ID does not exist\"\n        tool_impact: \"Returns status false with error message\"\n    state_changes:\n      - \"Message with specified ID removed from inbox\"\n      - \"message_id_counter unchanged\"\n    parameter_handling:\n      - \"message_id must be integer\"\n      - \"No default values\"\n\n  view_messages_between_users:\n    prerequisites:\n      - \"logged_in must be true\"\n    validation_rules:\n      - \"sender_name must exist in user_list\"\n      - \"receiver_name must exist in user_list\"\n    success_conditions:\n      - \"Both users exist and messages found between them\"\n    error_conditions:\n      - condition: \"logged_in is false\"\n        message: \"Device not logged in, unable to view message information\"\n        tool_impact: \"Returns status false with error message\"\n      - condition: \"sender_name not in user_list\"\n        message: \"Sender does not exist\"\n        tool_impact: \"Returns status false with error message\"\n      - condition: \"receiver_name not in user_list\"\n        message: \"Receiver does not exist\"\n        tool_impact: \"Returns status false with error message\"\n      - condition: \"No messages found from sender to receiver\"\n        message: \"No related message records found\"\n        tool_impact: \"Returns status false with error message\"\n    state_changes:\n      - \"No state changes - read-only operation\"\n    parameter_handling:\n      - \"Both parameters required\"\n      - \"Case-sensitive matching\"\n\n  search_messages:\n    prerequisites:\n      - \"No system state prerequisites (does not check logged_in)\"\n    validation_rules:\n      - \"user_name must exist in user_list\"\n    success_conditions:\n      - \"User exists and messages containing keyword found\"\n    error_conditions:\n      - condition: \"user_name not in user_list\"\n        message: \"User does not exist\"\n        tool_impact: \"Returns status false with error message\"\n      - condition: \"No messages found containing keyword\"\n        message: \"No messages found containing the keyword\"\n        tool_impact: \"Returns status false with error message\"\n    state_changes:\n      - \"No state changes - read-only operation\"\n    parameter_handling:\n      - \"keyword matching is case-insensitive\"\n      - \"Searches in messages where user is sender OR receiver\"\n\n  get_all_message_times_with_ids:\n    prerequisites:\n      - \"logged_in must be true\"\n    validation_rules:\n      - \"No additional validation beyond login check\"\n    success_conditions:\n      - \"User is logged in\"\n    error_conditions:\n      - condition: \"logged_in is false\"\n        message: \"Device not logged in, unable to retrieve all message times and their corresponding message IDs.\"\n        tool_impact: \"Returns status false with error message\"\n    state_changes:\n      - \"No state changes - read-only operation\"\n    parameter_handling:\n      - \"No parameters required\"\n\n  get_latest_message_id:\n    prerequisites:\n      - \"logged_in must be true\"\n    validation_rules:\n      - \"inbox must not be empty\"\n    success_conditions:\n      - \"User logged in and messages exist\"\n    error_conditions:\n      - condition: \"logged_in is false\"\n        message: \"Device not logged in, unable to retrieve the latest sent message ID.\"\n        tool_impact: \"Returns status false with error message\"\n      - condition: \"inbox is empty\"\n        message: \"No message records found\"\n        tool_impact: \"Returns status false with error message\"\n    state_changes:\n      - \"No state changes - read-only operation\"\n    parameter_handling:\n      - \"No parameters required\"\n      - \"Compares time fields as datetime strings in YYYY-MM-DD format\"\n\n  get_earliest_message_id:\n    prerequisites:\n      - \"logged_in must be true\"\n    validation_rules:\n      - \"inbox must not be empty\"\n    success_conditions:\n      - \"User logged in and messages exist\"\n    error_conditions:\n      - condition: \"logged_in is false\"\n        message: \"Device not logged in, unable to retrieve the earliest sent message ID.\"\n        tool_impact: \"Returns status false with error message\"\n      - condition: \"inbox is empty\"\n        message: \"No message records found\"\n        tool_impact: \"Returns status false with error message\"\n    state_changes:\n      - \"No state changes - read-only operation\"\n    parameter_handling:\n      - \"No parameters required\"\n      - \"Compares time fields as datetime strings in YYYY-MM-DD format\"\n\nconstraints:\n  data_formats:\n    - \"User names are case-sensitive strings: 'Eve', 'Frank', 'Grace', 'Helen', 'Isaac', 'Jack'\"\n    - \"User IDs follow pattern 'USR' + 3-digit number: USR100-USR105\"\n    - \"Message IDs are integers starting from 1\"\n    - \"Time format is 'YYYY-MM-DD' string\"\n    - \"Phone numbers follow format 'XXX-XXX-XXXX'\"\n  capacity_limits:\n    - \"Maximum inbox capacity: 6 messages\"\n    - \"Maximum users: 6 (fixed set)\"\n    - \"Message ID counter starts at 6, increments for each new message\"\n  business_rules:\n    - \"Messages can only be sent between existing users\"\n    - \"Users cannot send messages to themselves (not explicitly prevented but no such messages exist)\"\n    - \"Message search is case-insensitive for keywords\"\n    - \"Time comparison uses datetime parsing of YYYY-MM-DD format\"\n  validation_patterns:\n    - \"User name validation: exact string match against predefined list\"\n    - \"Message ID validation: integer type and existence in inbox keys\"\n    - \"Keyword search: case-insensitive substring matching\"\n  state_scope_clarifications:\n    - \"wifi and logged_in are global device states\"\n    - \"inbox is global message storage\"\n    - \"message_id_counter is global sequential counter\"\n    - \"max_capacity is global system limit\"\n    - \"User data is static and cannot be modified\"\n  tool_parameter_constraints:\n    - \"All string parameters are case-sensitive except keyword search\"\n    - \"Message ID parameters must be integers\"\n    - \"No null or undefined parameter handling specified\"\n\ncomprehensive_coverage:\n  edge_cases:\n    - scenario: \"Tool called with non-existent user name\"\n      api_response: \"{'status': False, 'message': 'Sender does not exist'} or {'status': False, 'message': 'Receiver does not exist'}\"\n    - scenario: \"Tool called when logged_in is false\"\n      api_response: \"{'status': False, 'message': 'Device not logged in, unable to [operation]'}\"\n    - scenario: \"Tool called when wifi is false and trying to send message\"\n      api_response: \"{'status': False, 'message': 'Wi-Fi is turned off, cannot send messages at this time'}\"\n    - scenario: \"Tool called with non-existent message ID\"\n      api_response: \"{'status': False, 'message': 'Message ID does not exist'}\"\n    - scenario: \"Tool called when inbox is at capacity\"\n      api_response: \"{'status': False, 'message': 'Inbox capacity is full. You need to ask the user which message to delete.'}\"\n    - scenario: \"Search with keyword that matches no messages\"\n      api_response: \"{'status': False, 'message': 'No messages found containing the keyword'}\"\n    - scenario: \"View messages between users with no message history\"\n      api_response: \"{'status': False, 'message': 'No related message records found'}\"\n    - scenario: \"Get latest/earliest message when inbox is empty\"\n      api_response: \"{'status': False, 'message': 'No message records found'}\"\n\n  parameter_exhaustiveness:\n    entity_reference_coverage:\n      - \"Valid user names: ['Eve', 'Frank', 'Grace', 'Helen', 'Isaac', 'Jack']\"\n      - \"Valid message IDs: [1, 2, 3, 4, 5, 6] initially, can grow with new messages\"\n      - \"Invalid user names return 'does not exist' errors\"\n      - \"Invalid message IDs return 'Message ID does not exist' errors\"\n      - \"Case sensitivity: exact match required for user names\"\n    parameter_interactions:\n      - \"send_message requires both sender_name AND receiver_name to be valid\"\n      - \"view_messages_between_users checks sender first, then receiver\"\n      - \"System state (wifi, logged_in) checked before parameter validation in most functions\"\n      - \"Capacity check happens after system state but before user validation in send_message\"\n\n  state_dependencies:\n    - \"logged_in=false: Blocks all operations except search_messages\"\n    - \"wifi=false: Blocks only send_message operation\"\n    - \"inbox at max_capacity: Blocks only send_message operation\"\n    - \"empty inbox: Affects get_latest_message_id and get_earliest_message_id\"\n    - \"message existence: Affects delete_message, view operations, and search results\"\n    - \"user existence: Critical for all user-parameter operations\"\n```\n```yaml\nsystem_state:\n  wifi: false  # Global system state - affects all tool operations\n  logged_in: true  # Global authentication state - affects all tool operations\n  # Scope: Global per-session - maintains state across all tool calls within a session\n\nentities:\n  # No explicit entities defined in this API - operates on global system state only\n\ninitial_data:\n  # No persistent data collections - API operates purely on system state\n\ntool_mapping:\n  turn_on_wifi:\n    api_method: \"turn_on_wifi\"\n    parameter_mapping:\n      # This tool takes no parameters - direct method call\n    validation_chain:\n      - \"Step 1: Validate method exists and is callable\"\n      - \"Step 2: Execute wifi state change operation\"\n      - \"Step 3: Return success response with status and message\"\n    supported_parameter_ranges:\n      # No parameters accepted - any parameters passed will be ignored\n\n  login_device:\n    api_method: \"login_device\"\n    parameter_mapping:\n      # This tool takes no parameters - direct method call\n    validation_chain:\n      - \"Step 1: Validate method exists and is callable\"\n      - \"Step 2: Execute login state change operation\"\n      - \"Step 3: Return success response with status and message\"\n    supported_parameter_ranges:\n      # No parameters accepted - any parameters passed will be ignored\n\nfunction_behaviors:\n  turn_on_wifi:\n    prerequisites:\n      - \"No prerequisites - can be called in any system state\"\n      - \"Method exists and is accessible\"\n    validation_rules:\n      - \"No parameter validation - method accepts no parameters\"\n      - \"No authentication checks - operates regardless of logged_in state\"\n    success_conditions:\n      - \"Method executes without exception\"\n      - \"Returns dictionary with 'status': True and 'message' fields\"\n    error_conditions:\n      - condition: \"Method called on invalid API instance\"\n        message: \"AttributeError or similar Python exception\"\n        tool_impact: \"Tool call fails with system error\"\n      - condition: \"Unexpected system exception during execution\"\n        message: \"Python exception details\"\n        tool_impact: \"Tool call fails with system error\"\n    state_changes:\n      - \"Sets self.wifi = True regardless of previous state\"\n      - \"No other system state modifications\"\n    parameter_handling:\n      - \"Ignores all parameters - method signature accepts none\"\n      - \"No validation required for parameters\"\n      - \"Excess parameters are silently ignored\"\n\n  login_device:\n    prerequisites:\n      - \"No prerequisites - can be called in any system state\"\n      - \"Method exists and is accessible\"\n    validation_rules:\n      - \"No parameter validation - method accepts no parameters\"\n      - \"No authentication checks - can be called regardless of current login state\"\n    success_conditions:\n      - \"Method executes without exception\"\n      - \"Returns dictionary with 'status': True and 'message' fields\"\n    error_conditions:\n      - condition: \"Method called on invalid API instance\"\n        message: \"AttributeError or similar Python exception\"\n        tool_impact: \"Tool call fails with system error\"\n      - condition: \"Unexpected system exception during execution\"\n        message: \"Python exception details\"\n        tool_impact: \"Tool call fails with system error\"\n    state_changes:\n      - \"Sets self.logged_in = True regardless of previous state\"\n      - \"No other system state modifications\"\n    parameter_handling:\n      - \"Ignores all parameters - method signature accepts none\"\n      - \"No validation required for parameters\"\n      - \"Excess parameters are silently ignored\"\n\nconstraints:\n  data_formats:\n    - \"Response format: {'status': boolean, 'message': string}\"\n    - \"No input format constraints - no parameters accepted\"\n  capacity_limits:\n    - \"No capacity limits defined\"\n    - \"No rate limiting implemented\"\n  business_rules:\n    - \"WiFi can be turned on regardless of current state (idempotent)\"\n    - \"Login can be performed regardless of current login state (idempotent)\"\n    - \"No interdependencies between wifi and login states\"\n  validation_patterns:\n    - \"No input validation - methods accept no parameters\"\n    - \"All validation occurs at method existence level only\"\n  state_scope_clarifications:\n    - \"All state is global per API instance\"\n    - \"No user-specific or session-specific state beyond instance level\"\n    - \"State persists until instance is destroyed or _load_scenario is called\"\n    - \"No authentication scope - logged_in is binary global state\"\n  tool_parameter_constraints:\n    - \"No parameters accepted by any tool\"\n    - \"Any parameters passed to tools will be ignored\"\n    - \"No cross-parameter dependencies exist\"\n\ncomprehensive_coverage:\n  edge_cases:\n    - scenario: \"Tool called with unexpected parameters\"\n      api_response: \"Parameters ignored, normal execution proceeds\"\n    - scenario: \"Tool called multiple times consecutively\"\n      api_response: \"Idempotent behavior - same success response each time\"\n    - scenario: \"Tool called when already in target state (wifi=True for turn_on_wifi)\"\n      api_response: \"Success response - sets state to True regardless of current value\"\n    - scenario: \"Tool called when already in target state (logged_in=True for login_device)\"\n      api_response: \"Success response - sets state to True regardless of current value\"\n    - scenario: \"API instance not properly initialized\"\n      api_response: \"AttributeError or similar Python exception\"\n\n  parameter_exhaustiveness:\n    entity_reference_coverage:\n      - \"No entity references supported\"\n      - \"No identifiers to validate\"\n    parameter_interactions:\n      - \"No parameter interactions - no parameters accepted\"\n      - \"No validation order dependencies\"\n\n  state_dependencies:\n    turn_on_wifi:\n      - \"Independent of current wifi state (True or False)\"\n      - \"Independent of logged_in state\"\n      - \"Always succeeds and sets wifi=True\"\n    login_device:\n      - \"Independent of current logged_in state (True or False)\"\n      - \"Independent of wifi state\"\n      - \"Always succeeds and sets logged_in=True\"\n\n  response_format_specification:\n    turn_on_wifi:\n      success_response:\n        status: true\n        message: \"Wi-Fi has been turned on\"\n      response_type: \"Dictionary with boolean 'status' and string 'message'\"\n    login_device:\n      success_response:\n        status: true\n        message: \"Device has been logged in\"\n      response_type: \"Dictionary with boolean 'status' and string 'message'\"\n\n  method_idempotency:\n    - \"turn_on_wifi: Idempotent - multiple calls produce same result\"\n    - \"login_device: Idempotent - multiple calls produce same result\"\n    - \"Both methods always return success and set target state to True\"\n\n  scenario_loading_behavior:\n    - \"_load_scenario can override default states\"\n    - \"wifi defaults to scenario.get('wifi', False)\"\n    - \"logged_in defaults to scenario.get('logged_in', True)\"\n    - \"Scenario loading affects initial state but not tool behavior patterns\"\n```\nSYSTEM STATE\n{\n  \"api\": \"BaseApi\",\n  \"variables\": {\n    \"wifi\": false,\n    \"logged_in\": true\n  }\n}\n\nUSERS/ENTITIES\n[\n  {\n    \"type\": \"device\",\n    \"id\": \"device\",\n    \"attributes\": {\n      \"wifi\": false,\n      \"logged_in\": true\n    }\n  }\n]\n\nINITIAL DATA\n{\n  \"state_at_instantiation\": {\n    \"wifi\": false,\n    \"logged_in\": true\n  },\n  \"records\": []\n}\n\nCONSTRAINTS\n{\n  \"operations\": {\n    \"_load_scenario(scenario: dict, long_context: bool=false)\": {\n      \"requires \u2192\": {\n        \"scenario\": {\"wifi?\": \"any\", \"logged_in?\": \"any\"},\n        \"long_context\": \"bool (ignored)\"\n      },\n      \"effects \u2192\": [\n        \"state.wifi = scenario.get('wifi', false)\",\n        \"state.logged_in = scenario.get('logged_in', true)\"\n      ],\n      \"returns \u2192\": null,\n      \"notes\": [\n        \"Unknown scenario keys ignored\",\n        \"If a key is absent, default overrides current state\",\n        \"No type validation; values assigned as-is\"\n      ]\n    },\n    \"turn_on_wifi()\": {\n      \"requires \u2192\": \"none\",\n      \"effects \u2192\": \"state.wifi = true\",\n      \"returns \u2192\": {\"status\": true, \"message\": \"Wi-Fi has been turned on\"},\n      \"idempotent\": true\n    },\n    \"login_device()\": {\n      \"requires \u2192\": \"none\",\n      \"effects \u2192\": \"state.logged_in = true\",\n      \"returns \u2192\": {\"status\": true, \"message\": \"Device has been logged in\"},\n      \"idempotent\": true\n    }\n  },\n  \"business_rules\": [\n    \"Single in-memory device; no persistence across instances\",\n    \"Wi-Fi and login states are independent\",\n    \"No methods to disable Wi-Fi or log out\",\n    \"All operations succeed; no error states implemented\",\n    \"Return structures are exact: {'status': bool, 'message': str}\",\n    \"Messages are fixed strings as specified\",\n    \"Operations do not require preconditions (e.g., Wi-Fi not required to login)\"\n  ],\n  \"formats\": {\n    \"booleans\": \"true|false\",\n    \"strings\": \"UTF-8\"\n  },\n  \"operational_limitations\": [\n    \"No authentication or user accounts\",\n    \"No concurrency controls\",\n    \"No I/O or external network calls\"\n  ]\n}\nSYSTEM STATE\n{\n  \"max_capacity\": 6,\n  \"wifi\": false,            // default via _load_scenario()\n  \"logged_in\": true,        // default via _load_scenario()\n  \"message_id_counter\": 6,  // next send increments to 7\n  \"time_format\": \"%Y-%m-%d\" // required by time-based APIs\n}\n\nUSERS/ENTITIES\n{\n  \"users\": {\n    \"Eve\":   {\"user_id\": \"USR100\", \"phone_number\": \"123-456-7890\", \"occupation\": \"Software Engineer\"},\n    \"Frank\": {\"user_id\": \"USR101\", \"phone_number\": \"234-567-8901\", \"occupation\": \"Data Scientist\"},\n    \"Grace\": {\"user_id\": \"USR102\", \"phone_number\": \"345-678-9012\", \"occupation\": \"Product Manager\"},\n    \"Helen\": {\"user_id\": \"USR103\", \"phone_number\": \"456-789-0123\", \"occupation\": \"UX Designer\"},\n    \"Isaac\": {\"user_id\": \"USR104\", \"phone_number\": \"567-890-1234\", \"occupation\": \"DevOps Engineer\"},\n    \"Jack\":  {\"user_id\": \"USR105\", \"phone_number\": \"678-901-2345\", \"occupation\": \"Marketing Specialist\"}\n  },\n\n  \"schemas\": {\n    \"StoredMessage\": {\n      \"sender_id\": \"USR###\",\n      \"receiver_id\": \"USR###\",\n      \"message\": \"string\",\n      \"time\": \"YYYY-MM-DD\" // required by time-based APIs\n    },\n    \"ViewResultMessage\": {\n      \"id\": \"int\",\n      \"sender\": \"sender_name\",\n      \"receiver\": \"receiver_name\",\n      \"message\": \"string\"\n    },\n    \"SearchResultMessage\": {\n      \"id\": \"int\",\n      \"sender_id\": \"USR###\",\n      \"receiver_id\": \"USR###\",\n      \"message\": \"string\"\n    }\n  }\n}\n\nINITIAL DATA\n{\n  \"user_list\": {\n    \"Eve\":   {\"user_id\": \"USR100\", \"phone_number\": \"123-456-7890\", \"occupation\": \"Software Engineer\"},\n    \"Frank\": {\"user_id\": \"USR101\", \"phone_number\": \"234-567-8901\", \"occupation\": \"Data Scientist\"},\n    \"Grace\": {\"user_id\": \"USR102\", \"phone_number\": \"345-678-9012\", \"occupation\": \"Product Manager\"},\n    \"Helen\": {\"user_id\": \"USR103\", \"phone_number\": \"456-789-0123\", \"occupation\": \"UX Designer\"},\n    \"Isaac\": {\"user_id\": \"USR104\", \"phone_number\": \"567-890-1234\", \"occupation\": \"DevOps Engineer\"},\n    \"Jack\":  {\"user_id\": \"USR105\", \"phone_number\": \"678-901-2345\", \"occupation\": \"Marketing Specialist\"}\n  },\n\n  \"inbox\": {\n    \"1\": {\n      \"sender_id\": \"USR100\",\n      \"receiver_id\": \"USR101\",\n      \"message\": \"Hey Frank, don't forget about our meeting on 2024-06-11 at 4 PM in Conference Room 1.\",\n      \"time\": \"2024-06-09\"\n    },\n    \"2\": {\n      \"sender_id\": \"USR101\",\n      \"receiver_id\": \"USR102\",\n      \"message\": \"Can you help me order a \\\"Margherita Pizza\\\" delivery? The merchant is Domino's.\",\n      \"time\": \"2024-03-09\"\n    },\n    \"3\": {\n      \"sender_id\": \"USR102\",\n      \"receiver_id\": \"USR103\",\n      \"message\": \"Please check the milk tea delivery options available from Heytea and purchase a cheaper milk tea for me. After making the purchase, remember to reply to me with \\\"Already bought.\\\"\",\n      \"time\": \"2023-12-05\"\n    },\n    \"4\": {\n      \"sender_id\": \"USR103\",\n      \"receiver_id\": \"USR102\",\n      \"message\": \"No problem Helen, I can assist you.\",\n      \"time\": \"2024-09-09\"\n    },\n    \"5\": {\n      \"sender_id\": \"USR104\",\n      \"receiver_id\": \"USR105\",\n      \"message\": \"Isaac, are you available for a call?\",\n      \"time\": \"2024-06-06\"\n    },\n    \"6\": {\n      \"sender_id\": \"USR105\",\n      \"receiver_id\": \"USR104\",\n      \"message\": \"Yes Jack, let's do it in 30 minutes.\",\n      \"time\": \"2024-01-15\"\n    }\n  },\n\n  \"counts\": {\"users\": 6, \"messages\": 6},\n  \"capacity_status\": \"full\",              // len(inbox) == max_capacity\n  \"latest_message_id_by_time\": 4,         // based on time field\n  \"earliest_message_id_by_time\": 3\n}\n\nCONSTRAINTS\n{\n  \"scenario_loader\": {\n    \"_load_scenario(scenario: {wifi?: bool, logged_in?: bool}, long_context: bool=false) \u2192 None\": {\n      \"effects\": {\"wifi\": \"scenario.wifi||false\", \"logged_in\": \"scenario.logged_in||true\"}\n    }\n  },\n\n  \"apis\": {\n    \"send_message(sender_name: str, receiver_name: str, message: str) \u2192 {status: bool, message: str}\": {\n      \"requires \u2192\": [\n        \"logged_in == true\",\n        \"wifi == true\",\n        \"len(inbox) < max_capacity\",\n        \"sender_name in user_list\",\n        \"receiver_name in user_list\"\n      ],\n      \"effects \u2192\": [\n        \"message_id_counter += 1\",\n        \"inbox[message_id_counter] = {sender_id, receiver_id, message}\",\n        \"// note: no 'time' field is set on new messages\"\n      ],\n      \"errors \u2192\": [\n        \"{\\\"status\\\": false, \\\"message\\\": \\\"Device not logged in, unable to send message\\\"}\",\n        \"{\\\"status\\\": false, \\\"message\\\": \\\"Wi-Fi is turned off, cannot send messages at this time\\\"}\",\n        \"{\\\"status\\\": false, \\\"message\\\": \\\"Inbox capacity is full. You need to ask the user which message to delete.\\\"}\",\n        \"{\\\"status\\\": false, \\\"message\\\": \\\"Sender or receiver does not exist\\\"}\"\n      ],\n      \"returns \u2192\": \"{\\\"status\\\": true, \\\"message\\\": \\\"Message successfully sent to {receiver_name}.\\\"}\"\n    },\n\n    \"delete_message(message_id: int) \u2192 {status: bool, message: str}\": {\n      \"requires \u2192\": [\"logged_in == true\", \"message_id in inbox\"],\n      \"effects \u2192\": [\"delete inbox[message_id]\"],\n      \"errors \u2192\": [\n        \"{\\\"status\\\": false, \\\"message\\\": \\\"Device not logged in, unable to delete message\\\"}\",\n        \"{\\\"status\\\": false, \\\"message\\\": \\\"Message ID does not exist\\\"}\"\n      ],\n      \"returns \u2192\": \"{\\\"status\\\": true, \\\"message\\\": \\\"Message ID {message_id} has been successfully deleted.\\\"}\"\n    },\n\n    \"view_messages_between_users(sender_name: str, receiver_name: str) \u2192 {status: bool, messages?: [ViewResultMessage], message?: str}\": {\n      \"requires \u2192\": [\"logged_in == true\", \"sender_name in user_list\", \"receiver_name in user_list\"],\n      \"behavior \u2192\": [\n        \"filter inbox where sender_id == user_list[sender_name].user_id AND receiver_id == user_list[receiver_name].user_id\",\n        \"directional: only A\u2192B, not B\u2192A\"\n      ],\n      \"errors \u2192\": [\n        \"{\\\"status\\\": false, \\\"message\\\": \\\"Device not logged in, unable to view message information\\\"}\",\n        \"{\\\"status\\\": false, \\\"message\\\": \\\"Sender does not exist\\\"}\",\n        \"{\\\"status\\\": false, \\\"message\\\": \\\"Receiver does not exist\\\"}\",\n        \"{\\\"status\\\": false, \\\"message\\\": \\\"No related message records found\\\"}\"\n      ],\n      \"returns \u2192\": \"{\\\"status\\\": true, \\\"messages\\\": [ {\\\"id\\\": int, \\\"sender\\\": sender_name, \\\"receiver\\\": receiver_name, \\\"message\\\": string}, ... ]}\"\n    },\n\n    \"search_messages(user_name: str, keyword: str) \u2192 {status: bool, messages?: [SearchResultMessage], message?: str}\": {\n      \"requires \u2192\": [\"user_name in user_list\"],\n      \"behavior \u2192\": [\n        \"case-insensitive substring match on message content\",\n        \"include messages where (sender_id == user_id) OR (receiver_id == user_id)\"\n      ],\n      \"errors \u2192\": [\n        \"{\\\"status\\\": false, \\\"message\\\": \\\"User does not exist\\\"}\",\n        \"{\\\"status\\\": false, \\\"message\\\": \\\"No messages found containing the keyword\\\"}\"\n      ],\n      \"returns \u2192\": \"{\\\"status\\\": true, \\\"messages\\\": [ {\\\"id\\\": int, \\\"sender_id\\\": \\\"USR###\\\", \\\"receiver_id\\\": \\\"USR###\\\", \\\"message\\\": string}, ... ]}\"\n    },\n\n    \"get_all_message_times_with_ids() \u2192 {msg_id: time_str} | {status: false, message: str}\": {\n      \"requires \u2192\": [\"logged_in == true\", \"every inbox[*] has 'time'\"],\n      \"errors \u2192\": [\n        \"{\\\"status\\\": false, \\\"message\\\": \\\"Device not logged in, unable to retrieve all message times and their corresponding message IDs.\\\"}\"\n      ],\n      \"returns \u2192\": \"{ <int>: \\\"YYYY-MM-DD\\\", ... }\"\n    },\n\n    \"get_latest_message_id() \u2192 {status: bool, message: str, message_id?: int}\": {\n      \"requires \u2192\": [\"logged_in == true\", \"len(inbox) > 0\", \"every inbox[*].time matches %Y-%m-%d\"],\n      \"behavior \u2192\": [\"parse times, select max(time)\"],\n      \"errors \u2192\": [\n        \"{\\\"status\\\": false, \\\"message\\\": \\\"Device not logged in, unable to retrieve the latest sent message ID.\\\"}\",\n        \"{\\\"status\\\": false, \\\"message\\\": \\\"No message records found\\\"}\"\n      ],\n      \"returns \u2192\": \"{\\\"status\\\": true, \\\"message\\\": \\\"The latest message ID is {id}\\\", \\\"message_id\\\": id}\"\n    },\n\n    \"get_earliest_message_id() \u2192 {status: bool, message: str, message_id?: int}\": {\n      \"requires \u2192\": [\"logged_in == true\", \"len(inbox) > 0\", \"every inbox[*].time matches %Y-%m-%d\"],\n      \"behavior \u2192\": [\"parse times, select min(time)\"],\n      \"errors \u2192\": [\n        \"{\\\"status\\\": false, \\\"message\\\": \\\"Device not logged in, unable to retrieve the earliest sent message ID.\\\"}\",\n        \"{\\\"status\\\": false, \\\"message\\\": \\\"No message records found\\\"}\"\n      ],\n      \"returns \u2192\": \"{\\\"status\\\": true, \\\"message\\\": \\\"The earliest message ID is {id}\\\", \\\"message_id\\\": id}\"\n    }\n  },\n\n  \"business_rules\": [\n    \"Valid user_name values: [\\\"Eve\\\",\\\"Frank\\\",\\\"Grace\\\",\\\"Helen\\\",\\\"Isaac\\\",\\\"Jack\\\"]\",\n    \"User IDs fixed: USR100..USR105 mapped to above names\",\n    \"Inbox keys are integer message IDs; deletions create gaps; message_id_counter only increments\",\n    \"Capacity rule: cannot send when len(inbox) >= max_capacity\",\n    \"Wi-Fi gate applies only to send_message; other APIs do not require wifi\",\n    \"Login gate applies to: send_message, delete_message, view_messages_between_users, get_all_message_times_with_ids, get_latest_message_id, get_earliest_message_id\",\n    \"Search is case-insensitive on message content only\",\n    \"Time strings must be in \\\"%Y-%m-%d\\\"; used for sorting/selection in time-based APIs\"\n  ],\n\n  \"operational_limitations\": [\n    \"send_message does not set 'time' on new messages; time-based APIs may error if any message lacks 'time'\",\n    \"get_all_message_times_with_ids returns a raw {id: time} map on success (no status field); on failure returns {status:false, message:str}\"\n  ]\n}",
            "initial_config": {
                "BaseApi": {
                    "wifi": true,
                    "logged_in": true
                }
            },
            "involved_classes": [
                "BaseApi",
                "MessageApi"
            ]
        },
        "combined_prompt_template": "You are an API simulator acting as a backend server responding to a tool call. Process API requests and generate appropriate responses based on the provided documentation.\n\nTool Name: {tool_name}\nTool Description: {tool_description}\nParameters: {parameters}\nError Message Examples: {error_messages}\nUsage: {usage}\nInitial Config: {initial_config}\nExample Tool Call: {tool_call}\nExample Return Data: {return_data}\n\nGUIDELINES:\n1. **Validation**: Validate HTTP method and parameters according to the API specification. Check if prerequisites are met based on function requirements.\n\n2. **Response Generation**: Generate responses that strictly adhere to the format shown in Example Return Data. Ensure all responses are valid JSON matching that structure.\n\n3. **Realistic Data**: Create contextually appropriate, realistic data. Avoid generic placeholders like \"example\" or \"test\". Generate believable values that match the context and data types shown in the example.\n\n4. **Error Handling**: Handle edge cases with appropriate error responses:\n   - Missing required parameters (400)\n   - Invalid parameter types or formats (400)\n   - Authentication/authorization failures (401/403)\n   - Resource not found (404)\n   - Server errors (500)\n\n5. **Response Quantity**: For list operations without length limits, return at least 3 samples to demonstrate realistic data variety.\n\nOUTPUT FORMAT:\nStatus Code: [Appropriate HTTP response code]\nResponse: [Valid JSON matching the Example Return Data structure]\nExplanation: [Brief explanation for the response and status code choice]\n\nIMPORTANT:\n- Base your response structure on the Example Return Data provided\n- Ensure responses are consistent with the provided parameters\n- Simulate realistic behavior based on the function requirements\n- Avoid any extraneous content outside the required output format",
        "prompt": "You are an API simulator acting as a backend server responding to a tool call. Process API requests and generate appropriate responses based on the provided documentation.\n\nTool Name: search_messages\nTool Description: Search for messages from a specific user that contain a particular keyword.\nParameters: {'user_name': {'type': 'string', 'description': 'The name of the user whose messages are being searched.', 'required': True}, 'keyword': {'type': 'string', 'description': 'The keyword to search for within the messages.', 'required': True}}\nError Message Examples: []\nUsage: Search for messages from a specific user that contain a particular keyword.\nInitial Config: {'BaseApi': {'wifi': True, 'logged_in': True}}\nExample Tool Call: No example provided\nExample Return Data: No example provided\n\nGUIDELINES:\n1. **Validation**: Validate HTTP method and parameters according to the API specification. Check if prerequisites are met based on function requirements.\n\n2. **Response Generation**: Generate responses that strictly adhere to the format shown in Example Return Data. Ensure all responses are valid JSON matching that structure.\n\n3. **Realistic Data**: Create contextually appropriate, realistic data. Avoid generic placeholders like \"example\" or \"test\". Generate believable values that match the context and data types shown in the example.\n\n4. **Error Handling**: Handle edge cases with appropriate error responses:\n   - Missing required parameters (400)\n   - Invalid parameter types or formats (400)\n   - Authentication/authorization failures (401/403)\n   - Resource not found (404)\n   - Server errors (500)\n\n5. **Response Quantity**: For list operations without length limits, return at least 3 samples to demonstrate realistic data variety.\n\nOUTPUT FORMAT:\nStatus Code: [Appropriate HTTP response code]\nResponse: [Valid JSON matching the Example Return Data structure]\nExplanation: [Brief explanation for the response and status code choice]\n\nIMPORTANT:\n- Base your response structure on the Example Return Data provided\n- Ensure responses are consistent with the provided parameters\n- Simulate realistic behavior based on the function requirements\n- Avoid any extraneous content outside the required output format",
        "parameter_check_prompt_template": "You are an API validator checking if a tool call meets all requirements before execution. Focus on checking the tool call validity against the below internal specification and constraints.\n\nTool Name: {tool_name}\nTool Description: {tool_description}\nParameter Schema: {parameters}\nError Messages: {error_messages}\nUsage: {usage}\n\nVALIDATION CHECKS:\n1. **Tool name**: Check if tool call name is exactly same as Tool Name (except that spaces can be replaced with underscores).\n2. **Required Parameters**: Verify all parameters marked as \"required: true\" are present. Faithfully examine according to the given specifications, do not make EXTRA assumptions. The keys of the parameters should be exactly the same as the keys in the Tool Details, including the case, space, and punctuation etc. (except that spaces can be replaced with underscores).\n3. **Parameter name**: Check if parameter names in the tool call are exactly same as those in the Parameter Schema; there are no new names, or misspelled names.\n4. **Parameter Types**: Check that each parameter matches its expected type (string, number, integer, boolean, array/list, dictionary) provided in Tool Details. Arrays/lists must contain items of a single type (string, number, integer, boolean, dictionary). Arrays of objects or array of arrays are not allowed. For string type parameters, it is not necessary for them to be surrounded by quotation marks.\n5. **Parameter Constraints**: Validate any constraints specified in parameter descriptions (ranges, formats, etc.)\n6. **Default Values**: Apply default values for optional parameters when not provided\n7. **Rules**: Check any rules mentioned in usage requirements or error messages. Validate against rules implied by error messages (e.g., if error mentions \"must be between X and Y\", check that constraint)\n8. **Prerequisites**: Check any preconditions mentioned in usage requirements\n\nERROR HANDLING:\n- Missing required parameters \u2192 Status Code: 400\n- Invalid parameter types or formats \u2192 Status Code: 400  \n- Rule violations \u2192 Status Code: 400\n- Resource not found (if applicable) \u2192 Status Code: 404\n- System constraints violated \u2192 Status Code: 500\n\nOUTPUT FORMAT:\nStatus: [PASS/FAIL]\nStatus Code: [If FAIL, provide the appropriate status code. If PASS, return 200]\nError Message: [If FAIL, provide a clear, specific error message, with the FIRST error detected (not all of them!), mimicking a real API gateway error message. Use the provided error messages when applicable. If PASS, return null]\n\nIMPORTANT:\n- If FAIL, provide a clear, specific error message, with the first error detected (not all of them!). For example, \n   - Incorrect tool name: Return only \u201cInvalid tool name: <name>.\u201d Even if other errors exist, report this one first.\n   - Correct tool name, but bad parameter:\n      - If a parameter name is unknown, return \u201cUnknown parameter: <param>.\u201d\n      - If a parameter value has the wrong type, return \u201cInvalid type for <param>: expected <type>.\u201d\n      - If multiple issues are present, report only the first one found.\n- Output exactly as the OUTPUT FORMAT shown above, do not add any additional reasoning or explanation\n- Leverage the provided error messages list when the error matches those scenarios\n- For PASS status, always return null for Error Message and Status Code 200, do not add any additional reasoning or explanation\n- If parameters are missing and their parameter keys are not specified in the tool call, do not make extra assumptions or interpretations. Map the provided values to parameters in syntactic order as specified in the tool definition - the first provided value goes to the first parameter, second value to second parameter, etc., regardless of what those values might semantically represent",
        "parameter_check_prompt": "You are an API validator checking if a tool call meets all requirements before execution. Focus on checking the tool call validity against the below internal specification and constraints.\n\nTool Name: search_messages\nTool Description: Search for messages from a specific user that contain a particular keyword.\nParameter Schema: {'user_name': {'type': 'string', 'description': 'The name of the user whose messages are being searched.', 'required': True}, 'keyword': {'type': 'string', 'description': 'The keyword to search for within the messages.', 'required': True}}\nError Messages: []\nUsage: Search for messages from a specific user that contain a particular keyword.\n\nVALIDATION CHECKS:\n1. **Tool name**: Check if tool call name is exactly same as Tool Name (except that spaces can be replaced with underscores).\n2. **Required Parameters**: Verify all parameters marked as \"required: true\" are present. Faithfully examine according to the given specifications, do not make EXTRA assumptions. The keys of the parameters should be exactly the same as the keys in the Tool Details, including the case, space, and punctuation etc. (except that spaces can be replaced with underscores).\n3. **Parameter name**: Check if parameter names in the tool call are exactly same as those in the Parameter Schema; there are no new names, or misspelled names.\n4. **Parameter Types**: Check that each parameter matches its expected type (string, number, integer, boolean, array/list, dictionary) provided in Tool Details. Arrays/lists must contain items of a single type (string, number, integer, boolean, dictionary). Arrays of objects or array of arrays are not allowed. For string type parameters, it is not necessary for them to be surrounded by quotation marks.\n5. **Parameter Constraints**: Validate any constraints specified in parameter descriptions (ranges, formats, etc.)\n6. **Default Values**: Apply default values for optional parameters when not provided\n7. **Rules**: Check any rules mentioned in usage requirements or error messages. Validate against rules implied by error messages (e.g., if error mentions \"must be between X and Y\", check that constraint)\n8. **Prerequisites**: Check any preconditions mentioned in usage requirements\n\nERROR HANDLING:\n- Missing required parameters \u2192 Status Code: 400\n- Invalid parameter types or formats \u2192 Status Code: 400  \n- Rule violations \u2192 Status Code: 400\n- Resource not found (if applicable) \u2192 Status Code: 404\n- System constraints violated \u2192 Status Code: 500\n\nOUTPUT FORMAT:\nStatus: [PASS/FAIL]\nStatus Code: [If FAIL, provide the appropriate status code. If PASS, return 200]\nError Message: [If FAIL, provide a clear, specific error message, with the FIRST error detected (not all of them!), mimicking a real API gateway error message. Use the provided error messages when applicable. If PASS, return null]\n\nIMPORTANT:\n- If FAIL, provide a clear, specific error message, with the first error detected (not all of them!). For example, \n   - Incorrect tool name: Return only \u201cInvalid tool name: <name>.\u201d Even if other errors exist, report this one first.\n   - Correct tool name, but bad parameter:\n      - If a parameter name is unknown, return \u201cUnknown parameter: <param>.\u201d\n      - If a parameter value has the wrong type, return \u201cInvalid type for <param>: expected <type>.\u201d\n      - If multiple issues are present, report only the first one found.\n- Output exactly as the OUTPUT FORMAT shown above, do not add any additional reasoning or explanation\n- Leverage the provided error messages list when the error matches those scenarios\n- For PASS status, always return null for Error Message and Status Code 200, do not add any additional reasoning or explanation\n- If parameters are missing and their parameter keys are not specified in the tool call, do not make extra assumptions or interpretations. Map the provided values to parameters in syntactic order as specified in the tool definition - the first provided value goes to the first parameter, second value to second parameter, etc., regardless of what those values might semantically represent",
        "return_message_gen_prompt_template": "You are an API executor generating realistic responses for a validated tool call. \n\nInputs provided:\n\nTool Details: {tool_details}\n\nExample Tool Call: {tool_call}\n\nMeta Data: {meta_data}\n\nInitial Config: {initial_config}\n\nExample Return Data: {return_data}\n\nExecution Modes:\n1. Data Generation: When the tool call requests new data pertaining to the specific tool call parameters.\n2. Information Deduction: When the tool call requires reasoning from meta data and initial config.\n\nDetermine the execution mode first, and then jump to the corresponding section for guidelines.\n\n\nRESPONSE GENERATION GUIDELINES FOR DATA GENERATION:\n\n1. **Structure Matching**: Generate responses that strictly adhere to the format shown in ``output_details`` if provided (for example refer to Return Data or Meta Data). Ensure all fields and nested structures match exactly.\n\n   - Return only the keys specified in ``output_details``of Tool Details, with their corresponding values.\n   - Include all keys listed in ``output_details``, using the exact key names.\n   - Each value must match the type defined in ``output_details``.\n   - Allowed types: string, number, integer, boolean, array. (Objects are not allowed.)\n   - Arrays must contain items of a single type (string, number, integer, boolean). Arrays of objects or array of arrays are not allowed. \n\n2. **Realistic Data**: Create contextually appropriate, realistic values based on:\n   - The actual parameter values provided in the tool call\n   - The domain context (e.g., financial data should have realistic ranges, e-commerce data should have realistic prices etc. )\n   - Logical relationships between fields (e.g., correlations, derived metrics)\n\n3. **Data Consistency**: Ensure generated data is internally consistent:\n   - Calculated values should match their inputs\n   - Related metrics should have logical relationships\n   - Time series data should follow realistic patterns\n\n4. **Response Completeness**: Include all fields shown in Example Return Data or maybe part of Meta Data, populating them with meaningful values\n\n5. **Response structure**:\n    - {{\n      \"key1\": \"Value of key1\",\n      \"key2\": \"Value of key2\",\n      \"key3\": \"Value of key3\"\n      }} \n\nOUTPUT FORMAT:\n{{\n  \"tool_call\": {{\n    \"parameters\": [exact parameters that were called]\n  }},\n  \"return_data\": [Either generated data matching Example Return Data or maybe part of Meta Data structure, or synthesized information from the meta data]\n}}\n\nRESPONSE GENERATION GUIDELINES FOR INFORMATION DEDUCTION:\n\n1. **Meta Data Analysis**: Extract relevant information from system state, entities, initial data, and function behaviors that align with the tool parameters.\n2. **Parameter Validation against Meta Data**: Map tool call parameters to meta data, check prerequisites, confirm entity existence, and verify system state permits the operation.\n3. **Information Synthesis**: Cross-reference meta data sources, apply logic and validation rules, and calculate derived values to determine the appropriate response.\n4. **Response Construction**: \n  - Use exact data from meta data when available\n  - Apply required specified state changes\n  - If the tool call logically results in an error with respect to initial config or meta data (which is possible), return precise error messages.\n  - Generate realistic values following meta data patterns when information is incomplete, but be very careful about this, do not generate incorrect values that contradicts the meta data or initial config.\n  - When multiple errors are present, return the error that should be the first one to be detected by a programmatic tool.\n\n\nIMPORTANT:\n- The tool call has already been validated to follow the schema, so focus only on generating accurate responses: data or information deduction (which could have errors)\n- If meta data provides the full context for the tool call, analyze and synthesize it to logically deduce the exact response.\n- If new data is needed, generate realistic values that follow meta data patterns and constraints while remaining consistent with the given parameters.\n- If provided, output exactly as the example return data with the same structure and field names.Generate believable values that would result from the given parameters if the information is not provided in the meta data\n- Return valid JSON that can be parsed directly\n- Do not add any additional reasoning or explanation.",
        "return_message_gen_prompt": "You are an API executor generating realistic responses for a validated tool call. \n\nInputs provided:\n\nTool Details: {'tool_name': 'search_messages', 'tool_description': 'Search for messages from a specific user that contain a particular keyword.', 'parameters': {'user_name': {'type': 'string', 'description': 'The name of the user whose messages are being searched.', 'required': True}, 'keyword': {'type': 'string', 'description': 'The keyword to search for within the messages.', 'required': True}}, 'error_messages': [], 'usage': 'Search for messages from a specific user that contain a particular keyword.', 'meta_data': '```yaml\\nsystem_state:\\n  wifi: false  # Global device network connectivity state\\n  logged_in: true  # Global device authentication state\\n  message_id_counter: 6  # Global counter for generating new message IDs\\n  max_capacity: 6  # Global maximum number of messages that can be stored\\n\\nentities:\\n  users:\\n    Eve:\\n      user_id: \"USR100\"\\n      phone_number: \"123-456-7890\"\\n      occupation: \"Software Engineer\"\\n    Frank:\\n      user_id: \"USR101\"\\n      phone_number: \"234-567-8901\"\\n      occupation: \"Data Scientist\"\\n    Grace:\\n      user_id: \"USR102\"\\n      phone_number: \"345-678-9012\"\\n      occupation: \"Product Manager\"\\n    Helen:\\n      user_id: \"USR103\"\\n      phone_number: \"456-789-0123\"\\n      occupation: \"UX Designer\"\\n    Isaac:\\n      user_id: \"USR104\"\\n      phone_number: \"567-890-1234\"\\n      occupation: \"DevOps Engineer\"\\n    Jack:\\n      user_id: \"USR105\"\\n      phone_number: \"678-901-2345\"\\n      occupation: \"Marketing Specialist\"\\n\\ninitial_data:\\n  inbox:\\n    1:\\n      sender_id: \"USR100\"\\n      receiver_id: \"USR101\"\\n      message: \"Hey Frank, don\\'t forget about our meeting on 2024-06-11 at 4 PM in Conference Room 1.\"\\n      time: \"2024-06-09\"\\n    2:\\n      sender_id: \"USR101\"\\n      receiver_id: \"USR102\"\\n      message: \"Can you help me order a \\\\\"Margherita Pizza\\\\\" delivery? The merchant is Domino\\'s.\"\\n      time: \"2024-03-09\"\\n    3:\\n      sender_id: \"USR102\"\\n      receiver_id: \"USR103\"\\n      message: \"Please check the milk tea delivery options available from Heytea and purchase a cheaper milk tea for me. After making the purchase, remember to reply to me with \\\\\"Already bought.\\\\\"\"\\n      time: \"2023-12-05\"\\n    4:\\n      sender_id: \"USR103\"\\n      receiver_id: \"USR102\"\\n      message: \"No problem Helen, I can assist you.\"\\n      time: \"2024-09-09\"\\n    5:\\n      sender_id: \"USR104\"\\n      receiver_id: \"USR105\"\\n      message: \"Isaac, are you available for a call?\"\\n      time: \"2024-06-06\"\\n    6:\\n      sender_id: \"USR105\"\\n      receiver_id: \"USR104\"\\n      message: \"Yes Jack, let\\'s do it in 30 minutes.\"\\n      time: \"2024-01-15\"\\n\\ntool_mapping:\\n  send_message:\\n    api_method: \"send_message\"\\n    parameter_mapping:\\n      sender_name: \"sender_name\"\\n      receiver_name: \"receiver_name\"\\n      message: \"message\"\\n    validation_chain:\\n      - \"Step 1: Check logged_in status\"\\n      - \"Step 2: Check wifi status\"\\n      - \"Step 3: Check inbox capacity\"\\n      - \"Step 4: Validate sender and receiver exist\"\\n      - \"Step 5: Generate new message ID and store message\"\\n    supported_parameter_ranges:\\n      sender_name:\\n        - valid_values: [\"Eve\", \"Frank\", \"Grace\", \"Helen\", \"Isaac\", \"Jack\"]\\n        - constraints: \"Must be exact case-sensitive match to existing user\"\\n        - edge_cases: \"Returns sender does not exist error for invalid names\"\\n      receiver_name:\\n        - valid_values: [\"Eve\", \"Frank\", \"Grace\", \"Helen\", \"Isaac\", \"Jack\"]\\n        - constraints: \"Must be exact case-sensitive match to existing user\"\\n        - edge_cases: \"Returns receiver does not exist error for invalid names\"\\n      message:\\n        - valid_values: [\"any string\"]\\n        - constraints: \"Any non-empty string content\"\\n        - edge_cases: \"Empty strings are accepted\"\\n\\n  delete_message:\\n    api_method: \"delete_message\"\\n    parameter_mapping:\\n      message_id: \"message_id\"\\n    validation_chain:\\n      - \"Step 1: Check logged_in status\"\\n      - \"Step 2: Validate message_id exists in inbox\"\\n      - \"Step 3: Delete message from inbox\"\\n    supported_parameter_ranges:\\n      message_id:\\n        - valid_values: [\"any integer that exists as key in inbox\"]\\n        - constraints: \"Must be integer type and exist in current inbox\"\\n        - edge_cases: \"Returns message ID does not exist for invalid IDs\"\\n\\n  view_messages_between_users:\\n    api_method: \"view_messages_between_users\"\\n    parameter_mapping:\\n      sender_name: \"sender_name\"\\n      receiver_name: \"receiver_name\"\\n    validation_chain:\\n      - \"Step 1: Check logged_in status\"\\n      - \"Step 2: Validate sender exists\"\\n      - \"Step 3: Validate receiver exists\"\\n      - \"Step 4: Search inbox for matching sender_id to receiver_id messages\"\\n    supported_parameter_ranges:\\n      sender_name:\\n        - valid_values: [\"Eve\", \"Frank\", \"Grace\", \"Helen\", \"Isaac\", \"Jack\"]\\n        - constraints: \"Must be exact case-sensitive match\"\\n        - edge_cases: \"Returns sender does not exist for invalid names\"\\n      receiver_name:\\n        - valid_values: [\"Eve\", \"Frank\", \"Grace\", \"Helen\", \"Isaac\", \"Jack\"]\\n        - constraints: \"Must be exact case-sensitive match\"\\n        - edge_cases: \"Returns receiver does not exist for invalid names\"\\n\\n  search_messages:\\n    api_method: \"search_messages\"\\n    parameter_mapping:\\n      user_name: \"user_name\"\\n      keyword: \"keyword\"\\n    validation_chain:\\n      - \"Step 1: Validate user exists\"\\n      - \"Step 2: Search all messages where user is sender or receiver\"\\n      - \"Step 3: Filter messages containing keyword (case-insensitive)\"\\n    supported_parameter_ranges:\\n      user_name:\\n        - valid_values: [\"Eve\", \"Frank\", \"Grace\", \"Helen\", \"Isaac\", \"Jack\"]\\n        - constraints: \"Must be exact case-sensitive match\"\\n        - edge_cases: \"Returns user does not exist for invalid names\"\\n      keyword:\\n        - valid_values: [\"any string\"]\\n        - constraints: \"Case-insensitive substring matching\"\\n        - edge_cases: \"Empty keywords match nothing, returns no messages found\"\\n\\nfunction_behaviors:\\n  send_message:\\n    prerequisites:\\n      - \"logged_in must be true\"\\n      - \"wifi must be true\"\\n      - \"inbox size must be less than max_capacity (6)\"\\n    validation_rules:\\n      - \"sender_name must exist in user_list keys\"\\n      - \"receiver_name must exist in user_list keys\"\\n      - \"message parameter accepted as any string\"\\n    success_conditions:\\n      - \"All prerequisites met and validation passed\"\\n      - \"New message added to inbox with incremented message_id_counter\"\\n    error_conditions:\\n      - condition: \"logged_in is false\"\\n        message: \"Device not logged in, unable to send message\"\\n        tool_impact: \"Returns status false with error message\"\\n      - condition: \"wifi is false\"\\n        message: \"Wi-Fi is turned off, cannot send messages at this time\"\\n        tool_impact: \"Returns status false with error message\"\\n      - condition: \"inbox size >= max_capacity\"\\n        message: \"Inbox capacity is full. You need to ask the user which message to delete.\"\\n        tool_impact: \"Returns status false with error message\"\\n      - condition: \"sender_name or receiver_name not in user_list\"\\n        message: \"Sender or receiver does not exist\"\\n        tool_impact: \"Returns status false with error message\"\\n    state_changes:\\n      - \"message_id_counter incremented by 1\"\\n      - \"New message entry added to inbox with new message_id_counter as key\"\\n      - \"Message includes sender_id, receiver_id, message content, no time field\"\\n    parameter_handling:\\n      - \"All parameters are required\"\\n      - \"No default values assigned\"\\n      - \"String parameters used as-is without transformation\"\\n\\n  delete_message:\\n    prerequisites:\\n      - \"logged_in must be true\"\\n    validation_rules:\\n      - \"message_id must exist as key in inbox\"\\n    success_conditions:\\n      - \"Message ID exists and logged in\"\\n    error_conditions:\\n      - condition: \"logged_in is false\"\\n        message: \"Device not logged in, unable to delete message\"\\n        tool_impact: \"Returns status false with error message\"\\n      - condition: \"message_id not in inbox\"\\n        message: \"Message ID does not exist\"\\n        tool_impact: \"Returns status false with error message\"\\n    state_changes:\\n      - \"Message with specified ID removed from inbox\"\\n      - \"message_id_counter unchanged\"\\n    parameter_handling:\\n      - \"message_id must be integer\"\\n      - \"No default values\"\\n\\n  view_messages_between_users:\\n    prerequisites:\\n      - \"logged_in must be true\"\\n    validation_rules:\\n      - \"sender_name must exist in user_list\"\\n      - \"receiver_name must exist in user_list\"\\n    success_conditions:\\n      - \"Both users exist and messages found between them\"\\n    error_conditions:\\n      - condition: \"logged_in is false\"\\n        message: \"Device not logged in, unable to view message information\"\\n        tool_impact: \"Returns status false with error message\"\\n      - condition: \"sender_name not in user_list\"\\n        message: \"Sender does not exist\"\\n        tool_impact: \"Returns status false with error message\"\\n      - condition: \"receiver_name not in user_list\"\\n        message: \"Receiver does not exist\"\\n        tool_impact: \"Returns status false with error message\"\\n      - condition: \"No messages found from sender to receiver\"\\n        message: \"No related message records found\"\\n        tool_impact: \"Returns status false with error message\"\\n    state_changes:\\n      - \"No state changes - read-only operation\"\\n    parameter_handling:\\n      - \"Both parameters required\"\\n      - \"Case-sensitive matching\"\\n\\n  search_messages:\\n    prerequisites:\\n      - \"No system state prerequisites (does not check logged_in)\"\\n    validation_rules:\\n      - \"user_name must exist in user_list\"\\n    success_conditions:\\n      - \"User exists and messages containing keyword found\"\\n    error_conditions:\\n      - condition: \"user_name not in user_list\"\\n        message: \"User does not exist\"\\n        tool_impact: \"Returns status false with error message\"\\n      - condition: \"No messages found containing keyword\"\\n        message: \"No messages found containing the keyword\"\\n        tool_impact: \"Returns status false with error message\"\\n    state_changes:\\n      - \"No state changes - read-only operation\"\\n    parameter_handling:\\n      - \"keyword matching is case-insensitive\"\\n      - \"Searches in messages where user is sender OR receiver\"\\n\\n  get_all_message_times_with_ids:\\n    prerequisites:\\n      - \"logged_in must be true\"\\n    validation_rules:\\n      - \"No additional validation beyond login check\"\\n    success_conditions:\\n      - \"User is logged in\"\\n    error_conditions:\\n      - condition: \"logged_in is false\"\\n        message: \"Device not logged in, unable to retrieve all message times and their corresponding message IDs.\"\\n        tool_impact: \"Returns status false with error message\"\\n    state_changes:\\n      - \"No state changes - read-only operation\"\\n    parameter_handling:\\n      - \"No parameters required\"\\n\\n  get_latest_message_id:\\n    prerequisites:\\n      - \"logged_in must be true\"\\n    validation_rules:\\n      - \"inbox must not be empty\"\\n    success_conditions:\\n      - \"User logged in and messages exist\"\\n    error_conditions:\\n      - condition: \"logged_in is false\"\\n        message: \"Device not logged in, unable to retrieve the latest sent message ID.\"\\n        tool_impact: \"Returns status false with error message\"\\n      - condition: \"inbox is empty\"\\n        message: \"No message records found\"\\n        tool_impact: \"Returns status false with error message\"\\n    state_changes:\\n      - \"No state changes - read-only operation\"\\n    parameter_handling:\\n      - \"No parameters required\"\\n      - \"Compares time fields as datetime strings in YYYY-MM-DD format\"\\n\\n  get_earliest_message_id:\\n    prerequisites:\\n      - \"logged_in must be true\"\\n    validation_rules:\\n      - \"inbox must not be empty\"\\n    success_conditions:\\n      - \"User logged in and messages exist\"\\n    error_conditions:\\n      - condition: \"logged_in is false\"\\n        message: \"Device not logged in, unable to retrieve the earliest sent message ID.\"\\n        tool_impact: \"Returns status false with error message\"\\n      - condition: \"inbox is empty\"\\n        message: \"No message records found\"\\n        tool_impact: \"Returns status false with error message\"\\n    state_changes:\\n      - \"No state changes - read-only operation\"\\n    parameter_handling:\\n      - \"No parameters required\"\\n      - \"Compares time fields as datetime strings in YYYY-MM-DD format\"\\n\\nconstraints:\\n  data_formats:\\n    - \"User names are case-sensitive strings: \\'Eve\\', \\'Frank\\', \\'Grace\\', \\'Helen\\', \\'Isaac\\', \\'Jack\\'\"\\n    - \"User IDs follow pattern \\'USR\\' + 3-digit number: USR100-USR105\"\\n    - \"Message IDs are integers starting from 1\"\\n    - \"Time format is \\'YYYY-MM-DD\\' string\"\\n    - \"Phone numbers follow format \\'XXX-XXX-XXXX\\'\"\\n  capacity_limits:\\n    - \"Maximum inbox capacity: 6 messages\"\\n    - \"Maximum users: 6 (fixed set)\"\\n    - \"Message ID counter starts at 6, increments for each new message\"\\n  business_rules:\\n    - \"Messages can only be sent between existing users\"\\n    - \"Users cannot send messages to themselves (not explicitly prevented but no such messages exist)\"\\n    - \"Message search is case-insensitive for keywords\"\\n    - \"Time comparison uses datetime parsing of YYYY-MM-DD format\"\\n  validation_patterns:\\n    - \"User name validation: exact string match against predefined list\"\\n    - \"Message ID validation: integer type and existence in inbox keys\"\\n    - \"Keyword search: case-insensitive substring matching\"\\n  state_scope_clarifications:\\n    - \"wifi and logged_in are global device states\"\\n    - \"inbox is global message storage\"\\n    - \"message_id_counter is global sequential counter\"\\n    - \"max_capacity is global system limit\"\\n    - \"User data is static and cannot be modified\"\\n  tool_parameter_constraints:\\n    - \"All string parameters are case-sensitive except keyword search\"\\n    - \"Message ID parameters must be integers\"\\n    - \"No null or undefined parameter handling specified\"\\n\\ncomprehensive_coverage:\\n  edge_cases:\\n    - scenario: \"Tool called with non-existent user name\"\\n      api_response: \"{\\'status\\': False, \\'message\\': \\'Sender does not exist\\'} or {\\'status\\': False, \\'message\\': \\'Receiver does not exist\\'}\"\\n    - scenario: \"Tool called when logged_in is false\"\\n      api_response: \"{\\'status\\': False, \\'message\\': \\'Device not logged in, unable to [operation]\\'}\"\\n    - scenario: \"Tool called when wifi is false and trying to send message\"\\n      api_response: \"{\\'status\\': False, \\'message\\': \\'Wi-Fi is turned off, cannot send messages at this time\\'}\"\\n    - scenario: \"Tool called with non-existent message ID\"\\n      api_response: \"{\\'status\\': False, \\'message\\': \\'Message ID does not exist\\'}\"\\n    - scenario: \"Tool called when inbox is at capacity\"\\n      api_response: \"{\\'status\\': False, \\'message\\': \\'Inbox capacity is full. You need to ask the user which message to delete.\\'}\"\\n    - scenario: \"Search with keyword that matches no messages\"\\n      api_response: \"{\\'status\\': False, \\'message\\': \\'No messages found containing the keyword\\'}\"\\n    - scenario: \"View messages between users with no message history\"\\n      api_response: \"{\\'status\\': False, \\'message\\': \\'No related message records found\\'}\"\\n    - scenario: \"Get latest/earliest message when inbox is empty\"\\n      api_response: \"{\\'status\\': False, \\'message\\': \\'No message records found\\'}\"\\n\\n  parameter_exhaustiveness:\\n    entity_reference_coverage:\\n      - \"Valid user names: [\\'Eve\\', \\'Frank\\', \\'Grace\\', \\'Helen\\', \\'Isaac\\', \\'Jack\\']\"\\n      - \"Valid message IDs: [1, 2, 3, 4, 5, 6] initially, can grow with new messages\"\\n      - \"Invalid user names return \\'does not exist\\' errors\"\\n      - \"Invalid message IDs return \\'Message ID does not exist\\' errors\"\\n      - \"Case sensitivity: exact match required for user names\"\\n    parameter_interactions:\\n      - \"send_message requires both sender_name AND receiver_name to be valid\"\\n      - \"view_messages_between_users checks sender first, then receiver\"\\n      - \"System state (wifi, logged_in) checked before parameter validation in most functions\"\\n      - \"Capacity check happens after system state but before user validation in send_message\"\\n\\n  state_dependencies:\\n    - \"logged_in=false: Blocks all operations except search_messages\"\\n    - \"wifi=false: Blocks only send_message operation\"\\n    - \"inbox at max_capacity: Blocks only send_message operation\"\\n    - \"empty inbox: Affects get_latest_message_id and get_earliest_message_id\"\\n    - \"message existence: Affects delete_message, view operations, and search results\"\\n    - \"user existence: Critical for all user-parameter operations\"\\n```\\n```yaml\\nsystem_state:\\n  wifi: false  # Global system state - affects all tool operations\\n  logged_in: true  # Global authentication state - affects all tool operations\\n  # Scope: Global per-session - maintains state across all tool calls within a session\\n\\nentities:\\n  # No explicit entities defined in this API - operates on global system state only\\n\\ninitial_data:\\n  # No persistent data collections - API operates purely on system state\\n\\ntool_mapping:\\n  turn_on_wifi:\\n    api_method: \"turn_on_wifi\"\\n    parameter_mapping:\\n      # This tool takes no parameters - direct method call\\n    validation_chain:\\n      - \"Step 1: Validate method exists and is callable\"\\n      - \"Step 2: Execute wifi state change operation\"\\n      - \"Step 3: Return success response with status and message\"\\n    supported_parameter_ranges:\\n      # No parameters accepted - any parameters passed will be ignored\\n\\n  login_device:\\n    api_method: \"login_device\"\\n    parameter_mapping:\\n      # This tool takes no parameters - direct method call\\n    validation_chain:\\n      - \"Step 1: Validate method exists and is callable\"\\n      - \"Step 2: Execute login state change operation\"\\n      - \"Step 3: Return success response with status and message\"\\n    supported_parameter_ranges:\\n      # No parameters accepted - any parameters passed will be ignored\\n\\nfunction_behaviors:\\n  turn_on_wifi:\\n    prerequisites:\\n      - \"No prerequisites - can be called in any system state\"\\n      - \"Method exists and is accessible\"\\n    validation_rules:\\n      - \"No parameter validation - method accepts no parameters\"\\n      - \"No authentication checks - operates regardless of logged_in state\"\\n    success_conditions:\\n      - \"Method executes without exception\"\\n      - \"Returns dictionary with \\'status\\': True and \\'message\\' fields\"\\n    error_conditions:\\n      - condition: \"Method called on invalid API instance\"\\n        message: \"AttributeError or similar Python exception\"\\n        tool_impact: \"Tool call fails with system error\"\\n      - condition: \"Unexpected system exception during execution\"\\n        message: \"Python exception details\"\\n        tool_impact: \"Tool call fails with system error\"\\n    state_changes:\\n      - \"Sets self.wifi = True regardless of previous state\"\\n      - \"No other system state modifications\"\\n    parameter_handling:\\n      - \"Ignores all parameters - method signature accepts none\"\\n      - \"No validation required for parameters\"\\n      - \"Excess parameters are silently ignored\"\\n\\n  login_device:\\n    prerequisites:\\n      - \"No prerequisites - can be called in any system state\"\\n      - \"Method exists and is accessible\"\\n    validation_rules:\\n      - \"No parameter validation - method accepts no parameters\"\\n      - \"No authentication checks - can be called regardless of current login state\"\\n    success_conditions:\\n      - \"Method executes without exception\"\\n      - \"Returns dictionary with \\'status\\': True and \\'message\\' fields\"\\n    error_conditions:\\n      - condition: \"Method called on invalid API instance\"\\n        message: \"AttributeError or similar Python exception\"\\n        tool_impact: \"Tool call fails with system error\"\\n      - condition: \"Unexpected system exception during execution\"\\n        message: \"Python exception details\"\\n        tool_impact: \"Tool call fails with system error\"\\n    state_changes:\\n      - \"Sets self.logged_in = True regardless of previous state\"\\n      - \"No other system state modifications\"\\n    parameter_handling:\\n      - \"Ignores all parameters - method signature accepts none\"\\n      - \"No validation required for parameters\"\\n      - \"Excess parameters are silently ignored\"\\n\\nconstraints:\\n  data_formats:\\n    - \"Response format: {\\'status\\': boolean, \\'message\\': string}\"\\n    - \"No input format constraints - no parameters accepted\"\\n  capacity_limits:\\n    - \"No capacity limits defined\"\\n    - \"No rate limiting implemented\"\\n  business_rules:\\n    - \"WiFi can be turned on regardless of current state (idempotent)\"\\n    - \"Login can be performed regardless of current login state (idempotent)\"\\n    - \"No interdependencies between wifi and login states\"\\n  validation_patterns:\\n    - \"No input validation - methods accept no parameters\"\\n    - \"All validation occurs at method existence level only\"\\n  state_scope_clarifications:\\n    - \"All state is global per API instance\"\\n    - \"No user-specific or session-specific state beyond instance level\"\\n    - \"State persists until instance is destroyed or _load_scenario is called\"\\n    - \"No authentication scope - logged_in is binary global state\"\\n  tool_parameter_constraints:\\n    - \"No parameters accepted by any tool\"\\n    - \"Any parameters passed to tools will be ignored\"\\n    - \"No cross-parameter dependencies exist\"\\n\\ncomprehensive_coverage:\\n  edge_cases:\\n    - scenario: \"Tool called with unexpected parameters\"\\n      api_response: \"Parameters ignored, normal execution proceeds\"\\n    - scenario: \"Tool called multiple times consecutively\"\\n      api_response: \"Idempotent behavior - same success response each time\"\\n    - scenario: \"Tool called when already in target state (wifi=True for turn_on_wifi)\"\\n      api_response: \"Success response - sets state to True regardless of current value\"\\n    - scenario: \"Tool called when already in target state (logged_in=True for login_device)\"\\n      api_response: \"Success response - sets state to True regardless of current value\"\\n    - scenario: \"API instance not properly initialized\"\\n      api_response: \"AttributeError or similar Python exception\"\\n\\n  parameter_exhaustiveness:\\n    entity_reference_coverage:\\n      - \"No entity references supported\"\\n      - \"No identifiers to validate\"\\n    parameter_interactions:\\n      - \"No parameter interactions - no parameters accepted\"\\n      - \"No validation order dependencies\"\\n\\n  state_dependencies:\\n    turn_on_wifi:\\n      - \"Independent of current wifi state (True or False)\"\\n      - \"Independent of logged_in state\"\\n      - \"Always succeeds and sets wifi=True\"\\n    login_device:\\n      - \"Independent of current logged_in state (True or False)\"\\n      - \"Independent of wifi state\"\\n      - \"Always succeeds and sets logged_in=True\"\\n\\n  response_format_specification:\\n    turn_on_wifi:\\n      success_response:\\n        status: true\\n        message: \"Wi-Fi has been turned on\"\\n      response_type: \"Dictionary with boolean \\'status\\' and string \\'message\\'\"\\n    login_device:\\n      success_response:\\n        status: true\\n        message: \"Device has been logged in\"\\n      response_type: \"Dictionary with boolean \\'status\\' and string \\'message\\'\"\\n\\n  method_idempotency:\\n    - \"turn_on_wifi: Idempotent - multiple calls produce same result\"\\n    - \"login_device: Idempotent - multiple calls produce same result\"\\n    - \"Both methods always return success and set target state to True\"\\n\\n  scenario_loading_behavior:\\n    - \"_load_scenario can override default states\"\\n    - \"wifi defaults to scenario.get(\\'wifi\\', False)\"\\n    - \"logged_in defaults to scenario.get(\\'logged_in\\', True)\"\\n    - \"Scenario loading affects initial state but not tool behavior patterns\"\\n```\\nSYSTEM STATE\\n{\\n  \"api\": \"BaseApi\",\\n  \"variables\": {\\n    \"wifi\": false,\\n    \"logged_in\": true\\n  }\\n}\\n\\nUSERS/ENTITIES\\n[\\n  {\\n    \"type\": \"device\",\\n    \"id\": \"device\",\\n    \"attributes\": {\\n      \"wifi\": false,\\n      \"logged_in\": true\\n    }\\n  }\\n]\\n\\nINITIAL DATA\\n{\\n  \"state_at_instantiation\": {\\n    \"wifi\": false,\\n    \"logged_in\": true\\n  },\\n  \"records\": []\\n}\\n\\nCONSTRAINTS\\n{\\n  \"operations\": {\\n    \"_load_scenario(scenario: dict, long_context: bool=false)\": {\\n      \"requires \u2192\": {\\n        \"scenario\": {\"wifi?\": \"any\", \"logged_in?\": \"any\"},\\n        \"long_context\": \"bool (ignored)\"\\n      },\\n      \"effects \u2192\": [\\n        \"state.wifi = scenario.get(\\'wifi\\', false)\",\\n        \"state.logged_in = scenario.get(\\'logged_in\\', true)\"\\n      ],\\n      \"returns \u2192\": null,\\n      \"notes\": [\\n        \"Unknown scenario keys ignored\",\\n        \"If a key is absent, default overrides current state\",\\n        \"No type validation; values assigned as-is\"\\n      ]\\n    },\\n    \"turn_on_wifi()\": {\\n      \"requires \u2192\": \"none\",\\n      \"effects \u2192\": \"state.wifi = true\",\\n      \"returns \u2192\": {\"status\": true, \"message\": \"Wi-Fi has been turned on\"},\\n      \"idempotent\": true\\n    },\\n    \"login_device()\": {\\n      \"requires \u2192\": \"none\",\\n      \"effects \u2192\": \"state.logged_in = true\",\\n      \"returns \u2192\": {\"status\": true, \"message\": \"Device has been logged in\"},\\n      \"idempotent\": true\\n    }\\n  },\\n  \"business_rules\": [\\n    \"Single in-memory device; no persistence across instances\",\\n    \"Wi-Fi and login states are independent\",\\n    \"No methods to disable Wi-Fi or log out\",\\n    \"All operations succeed; no error states implemented\",\\n    \"Return structures are exact: {\\'status\\': bool, \\'message\\': str}\",\\n    \"Messages are fixed strings as specified\",\\n    \"Operations do not require preconditions (e.g., Wi-Fi not required to login)\"\\n  ],\\n  \"formats\": {\\n    \"booleans\": \"true|false\",\\n    \"strings\": \"UTF-8\"\\n  },\\n  \"operational_limitations\": [\\n    \"No authentication or user accounts\",\\n    \"No concurrency controls\",\\n    \"No I/O or external network calls\"\\n  ]\\n}\\nSYSTEM STATE\\n{\\n  \"max_capacity\": 6,\\n  \"wifi\": false,            // default via _load_scenario()\\n  \"logged_in\": true,        // default via _load_scenario()\\n  \"message_id_counter\": 6,  // next send increments to 7\\n  \"time_format\": \"%Y-%m-%d\" // required by time-based APIs\\n}\\n\\nUSERS/ENTITIES\\n{\\n  \"users\": {\\n    \"Eve\":   {\"user_id\": \"USR100\", \"phone_number\": \"123-456-7890\", \"occupation\": \"Software Engineer\"},\\n    \"Frank\": {\"user_id\": \"USR101\", \"phone_number\": \"234-567-8901\", \"occupation\": \"Data Scientist\"},\\n    \"Grace\": {\"user_id\": \"USR102\", \"phone_number\": \"345-678-9012\", \"occupation\": \"Product Manager\"},\\n    \"Helen\": {\"user_id\": \"USR103\", \"phone_number\": \"456-789-0123\", \"occupation\": \"UX Designer\"},\\n    \"Isaac\": {\"user_id\": \"USR104\", \"phone_number\": \"567-890-1234\", \"occupation\": \"DevOps Engineer\"},\\n    \"Jack\":  {\"user_id\": \"USR105\", \"phone_number\": \"678-901-2345\", \"occupation\": \"Marketing Specialist\"}\\n  },\\n\\n  \"schemas\": {\\n    \"StoredMessage\": {\\n      \"sender_id\": \"USR###\",\\n      \"receiver_id\": \"USR###\",\\n      \"message\": \"string\",\\n      \"time\": \"YYYY-MM-DD\" // required by time-based APIs\\n    },\\n    \"ViewResultMessage\": {\\n      \"id\": \"int\",\\n      \"sender\": \"sender_name\",\\n      \"receiver\": \"receiver_name\",\\n      \"message\": \"string\"\\n    },\\n    \"SearchResultMessage\": {\\n      \"id\": \"int\",\\n      \"sender_id\": \"USR###\",\\n      \"receiver_id\": \"USR###\",\\n      \"message\": \"string\"\\n    }\\n  }\\n}\\n\\nINITIAL DATA\\n{\\n  \"user_list\": {\\n    \"Eve\":   {\"user_id\": \"USR100\", \"phone_number\": \"123-456-7890\", \"occupation\": \"Software Engineer\"},\\n    \"Frank\": {\"user_id\": \"USR101\", \"phone_number\": \"234-567-8901\", \"occupation\": \"Data Scientist\"},\\n    \"Grace\": {\"user_id\": \"USR102\", \"phone_number\": \"345-678-9012\", \"occupation\": \"Product Manager\"},\\n    \"Helen\": {\"user_id\": \"USR103\", \"phone_number\": \"456-789-0123\", \"occupation\": \"UX Designer\"},\\n    \"Isaac\": {\"user_id\": \"USR104\", \"phone_number\": \"567-890-1234\", \"occupation\": \"DevOps Engineer\"},\\n    \"Jack\":  {\"user_id\": \"USR105\", \"phone_number\": \"678-901-2345\", \"occupation\": \"Marketing Specialist\"}\\n  },\\n\\n  \"inbox\": {\\n    \"1\": {\\n      \"sender_id\": \"USR100\",\\n      \"receiver_id\": \"USR101\",\\n      \"message\": \"Hey Frank, don\\'t forget about our meeting on 2024-06-11 at 4 PM in Conference Room 1.\",\\n      \"time\": \"2024-06-09\"\\n    },\\n    \"2\": {\\n      \"sender_id\": \"USR101\",\\n      \"receiver_id\": \"USR102\",\\n      \"message\": \"Can you help me order a \\\\\"Margherita Pizza\\\\\" delivery? The merchant is Domino\\'s.\",\\n      \"time\": \"2024-03-09\"\\n    },\\n    \"3\": {\\n      \"sender_id\": \"USR102\",\\n      \"receiver_id\": \"USR103\",\\n      \"message\": \"Please check the milk tea delivery options available from Heytea and purchase a cheaper milk tea for me. After making the purchase, remember to reply to me with \\\\\"Already bought.\\\\\"\",\\n      \"time\": \"2023-12-05\"\\n    },\\n    \"4\": {\\n      \"sender_id\": \"USR103\",\\n      \"receiver_id\": \"USR102\",\\n      \"message\": \"No problem Helen, I can assist you.\",\\n      \"time\": \"2024-09-09\"\\n    },\\n    \"5\": {\\n      \"sender_id\": \"USR104\",\\n      \"receiver_id\": \"USR105\",\\n      \"message\": \"Isaac, are you available for a call?\",\\n      \"time\": \"2024-06-06\"\\n    },\\n    \"6\": {\\n      \"sender_id\": \"USR105\",\\n      \"receiver_id\": \"USR104\",\\n      \"message\": \"Yes Jack, let\\'s do it in 30 minutes.\",\\n      \"time\": \"2024-01-15\"\\n    }\\n  },\\n\\n  \"counts\": {\"users\": 6, \"messages\": 6},\\n  \"capacity_status\": \"full\",              // len(inbox) == max_capacity\\n  \"latest_message_id_by_time\": 4,         // based on time field\\n  \"earliest_message_id_by_time\": 3\\n}\\n\\nCONSTRAINTS\\n{\\n  \"scenario_loader\": {\\n    \"_load_scenario(scenario: {wifi?: bool, logged_in?: bool}, long_context: bool=false) \u2192 None\": {\\n      \"effects\": {\"wifi\": \"scenario.wifi||false\", \"logged_in\": \"scenario.logged_in||true\"}\\n    }\\n  },\\n\\n  \"apis\": {\\n    \"send_message(sender_name: str, receiver_name: str, message: str) \u2192 {status: bool, message: str}\": {\\n      \"requires \u2192\": [\\n        \"logged_in == true\",\\n        \"wifi == true\",\\n        \"len(inbox) < max_capacity\",\\n        \"sender_name in user_list\",\\n        \"receiver_name in user_list\"\\n      ],\\n      \"effects \u2192\": [\\n        \"message_id_counter += 1\",\\n        \"inbox[message_id_counter] = {sender_id, receiver_id, message}\",\\n        \"// note: no \\'time\\' field is set on new messages\"\\n      ],\\n      \"errors \u2192\": [\\n        \"{\\\\\"status\\\\\": false, \\\\\"message\\\\\": \\\\\"Device not logged in, unable to send message\\\\\"}\",\\n        \"{\\\\\"status\\\\\": false, \\\\\"message\\\\\": \\\\\"Wi-Fi is turned off, cannot send messages at this time\\\\\"}\",\\n        \"{\\\\\"status\\\\\": false, \\\\\"message\\\\\": \\\\\"Inbox capacity is full. You need to ask the user which message to delete.\\\\\"}\",\\n        \"{\\\\\"status\\\\\": false, \\\\\"message\\\\\": \\\\\"Sender or receiver does not exist\\\\\"}\"\\n      ],\\n      \"returns \u2192\": \"{\\\\\"status\\\\\": true, \\\\\"message\\\\\": \\\\\"Message successfully sent to {receiver_name}.\\\\\"}\"\\n    },\\n\\n    \"delete_message(message_id: int) \u2192 {status: bool, message: str}\": {\\n      \"requires \u2192\": [\"logged_in == true\", \"message_id in inbox\"],\\n      \"effects \u2192\": [\"delete inbox[message_id]\"],\\n      \"errors \u2192\": [\\n        \"{\\\\\"status\\\\\": false, \\\\\"message\\\\\": \\\\\"Device not logged in, unable to delete message\\\\\"}\",\\n        \"{\\\\\"status\\\\\": false, \\\\\"message\\\\\": \\\\\"Message ID does not exist\\\\\"}\"\\n      ],\\n      \"returns \u2192\": \"{\\\\\"status\\\\\": true, \\\\\"message\\\\\": \\\\\"Message ID {message_id} has been successfully deleted.\\\\\"}\"\\n    },\\n\\n    \"view_messages_between_users(sender_name: str, receiver_name: str) \u2192 {status: bool, messages?: [ViewResultMessage], message?: str}\": {\\n      \"requires \u2192\": [\"logged_in == true\", \"sender_name in user_list\", \"receiver_name in user_list\"],\\n      \"behavior \u2192\": [\\n        \"filter inbox where sender_id == user_list[sender_name].user_id AND receiver_id == user_list[receiver_name].user_id\",\\n        \"directional: only A\u2192B, not B\u2192A\"\\n      ],\\n      \"errors \u2192\": [\\n        \"{\\\\\"status\\\\\": false, \\\\\"message\\\\\": \\\\\"Device not logged in, unable to view message information\\\\\"}\",\\n        \"{\\\\\"status\\\\\": false, \\\\\"message\\\\\": \\\\\"Sender does not exist\\\\\"}\",\\n        \"{\\\\\"status\\\\\": false, \\\\\"message\\\\\": \\\\\"Receiver does not exist\\\\\"}\",\\n        \"{\\\\\"status\\\\\": false, \\\\\"message\\\\\": \\\\\"No related message records found\\\\\"}\"\\n      ],\\n      \"returns \u2192\": \"{\\\\\"status\\\\\": true, \\\\\"messages\\\\\": [ {\\\\\"id\\\\\": int, \\\\\"sender\\\\\": sender_name, \\\\\"receiver\\\\\": receiver_name, \\\\\"message\\\\\": string}, ... ]}\"\\n    },\\n\\n    \"search_messages(user_name: str, keyword: str) \u2192 {status: bool, messages?: [SearchResultMessage], message?: str}\": {\\n      \"requires \u2192\": [\"user_name in user_list\"],\\n      \"behavior \u2192\": [\\n        \"case-insensitive substring match on message content\",\\n        \"include messages where (sender_id == user_id) OR (receiver_id == user_id)\"\\n      ],\\n      \"errors \u2192\": [\\n        \"{\\\\\"status\\\\\": false, \\\\\"message\\\\\": \\\\\"User does not exist\\\\\"}\",\\n        \"{\\\\\"status\\\\\": false, \\\\\"message\\\\\": \\\\\"No messages found containing the keyword\\\\\"}\"\\n      ],\\n      \"returns \u2192\": \"{\\\\\"status\\\\\": true, \\\\\"messages\\\\\": [ {\\\\\"id\\\\\": int, \\\\\"sender_id\\\\\": \\\\\"USR###\\\\\", \\\\\"receiver_id\\\\\": \\\\\"USR###\\\\\", \\\\\"message\\\\\": string}, ... ]}\"\\n    },\\n\\n    \"get_all_message_times_with_ids() \u2192 {msg_id: time_str} | {status: false, message: str}\": {\\n      \"requires \u2192\": [\"logged_in == true\", \"every inbox[*] has \\'time\\'\"],\\n      \"errors \u2192\": [\\n        \"{\\\\\"status\\\\\": false, \\\\\"message\\\\\": \\\\\"Device not logged in, unable to retrieve all message times and their corresponding message IDs.\\\\\"}\"\\n      ],\\n      \"returns \u2192\": \"{ <int>: \\\\\"YYYY-MM-DD\\\\\", ... }\"\\n    },\\n\\n    \"get_latest_message_id() \u2192 {status: bool, message: str, message_id?: int}\": {\\n      \"requires \u2192\": [\"logged_in == true\", \"len(inbox) > 0\", \"every inbox[*].time matches %Y-%m-%d\"],\\n      \"behavior \u2192\": [\"parse times, select max(time)\"],\\n      \"errors \u2192\": [\\n        \"{\\\\\"status\\\\\": false, \\\\\"message\\\\\": \\\\\"Device not logged in, unable to retrieve the latest sent message ID.\\\\\"}\",\\n        \"{\\\\\"status\\\\\": false, \\\\\"message\\\\\": \\\\\"No message records found\\\\\"}\"\\n      ],\\n      \"returns \u2192\": \"{\\\\\"status\\\\\": true, \\\\\"message\\\\\": \\\\\"The latest message ID is {id}\\\\\", \\\\\"message_id\\\\\": id}\"\\n    },\\n\\n    \"get_earliest_message_id() \u2192 {status: bool, message: str, message_id?: int}\": {\\n      \"requires \u2192\": [\"logged_in == true\", \"len(inbox) > 0\", \"every inbox[*].time matches %Y-%m-%d\"],\\n      \"behavior \u2192\": [\"parse times, select min(time)\"],\\n      \"errors \u2192\": [\\n        \"{\\\\\"status\\\\\": false, \\\\\"message\\\\\": \\\\\"Device not logged in, unable to retrieve the earliest sent message ID.\\\\\"}\",\\n        \"{\\\\\"status\\\\\": false, \\\\\"message\\\\\": \\\\\"No message records found\\\\\"}\"\\n      ],\\n      \"returns \u2192\": \"{\\\\\"status\\\\\": true, \\\\\"message\\\\\": \\\\\"The earliest message ID is {id}\\\\\", \\\\\"message_id\\\\\": id}\"\\n    }\\n  },\\n\\n  \"business_rules\": [\\n    \"Valid user_name values: [\\\\\"Eve\\\\\",\\\\\"Frank\\\\\",\\\\\"Grace\\\\\",\\\\\"Helen\\\\\",\\\\\"Isaac\\\\\",\\\\\"Jack\\\\\"]\",\\n    \"User IDs fixed: USR100..USR105 mapped to above names\",\\n    \"Inbox keys are integer message IDs; deletions create gaps; message_id_counter only increments\",\\n    \"Capacity rule: cannot send when len(inbox) >= max_capacity\",\\n    \"Wi-Fi gate applies only to send_message; other APIs do not require wifi\",\\n    \"Login gate applies to: send_message, delete_message, view_messages_between_users, get_all_message_times_with_ids, get_latest_message_id, get_earliest_message_id\",\\n    \"Search is case-insensitive on message content only\",\\n    \"Time strings must be in \\\\\"%Y-%m-%d\\\\\"; used for sorting/selection in time-based APIs\"\\n  ],\\n\\n  \"operational_limitations\": [\\n    \"send_message does not set \\'time\\' on new messages; time-based APIs may error if any message lacks \\'time\\'\",\\n    \"get_all_message_times_with_ids returns a raw {id: time} map on success (no status field); on failure returns {status:false, message:str}\"\\n  ]\\n}', 'initial_config': {'BaseApi': {'wifi': True, 'logged_in': True}}, 'involved_classes': ['BaseApi', 'MessageApi']}\n\nExample Tool Call: No example provided\n\nMeta Data: ```yaml\nsystem_state:\n  wifi: false  # Global device network connectivity state\n  logged_in: true  # Global device authentication state\n  message_id_counter: 6  # Global counter for generating new message IDs\n  max_capacity: 6  # Global maximum number of messages that can be stored\n\nentities:\n  users:\n    Eve:\n      user_id: \"USR100\"\n      phone_number: \"123-456-7890\"\n      occupation: \"Software Engineer\"\n    Frank:\n      user_id: \"USR101\"\n      phone_number: \"234-567-8901\"\n      occupation: \"Data Scientist\"\n    Grace:\n      user_id: \"USR102\"\n      phone_number: \"345-678-9012\"\n      occupation: \"Product Manager\"\n    Helen:\n      user_id: \"USR103\"\n      phone_number: \"456-789-0123\"\n      occupation: \"UX Designer\"\n    Isaac:\n      user_id: \"USR104\"\n      phone_number: \"567-890-1234\"\n      occupation: \"DevOps Engineer\"\n    Jack:\n      user_id: \"USR105\"\n      phone_number: \"678-901-2345\"\n      occupation: \"Marketing Specialist\"\n\ninitial_data:\n  inbox:\n    1:\n      sender_id: \"USR100\"\n      receiver_id: \"USR101\"\n      message: \"Hey Frank, don't forget about our meeting on 2024-06-11 at 4 PM in Conference Room 1.\"\n      time: \"2024-06-09\"\n    2:\n      sender_id: \"USR101\"\n      receiver_id: \"USR102\"\n      message: \"Can you help me order a \\\"Margherita Pizza\\\" delivery? The merchant is Domino's.\"\n      time: \"2024-03-09\"\n    3:\n      sender_id: \"USR102\"\n      receiver_id: \"USR103\"\n      message: \"Please check the milk tea delivery options available from Heytea and purchase a cheaper milk tea for me. After making the purchase, remember to reply to me with \\\"Already bought.\\\"\"\n      time: \"2023-12-05\"\n    4:\n      sender_id: \"USR103\"\n      receiver_id: \"USR102\"\n      message: \"No problem Helen, I can assist you.\"\n      time: \"2024-09-09\"\n    5:\n      sender_id: \"USR104\"\n      receiver_id: \"USR105\"\n      message: \"Isaac, are you available for a call?\"\n      time: \"2024-06-06\"\n    6:\n      sender_id: \"USR105\"\n      receiver_id: \"USR104\"\n      message: \"Yes Jack, let's do it in 30 minutes.\"\n      time: \"2024-01-15\"\n\ntool_mapping:\n  send_message:\n    api_method: \"send_message\"\n    parameter_mapping:\n      sender_name: \"sender_name\"\n      receiver_name: \"receiver_name\"\n      message: \"message\"\n    validation_chain:\n      - \"Step 1: Check logged_in status\"\n      - \"Step 2: Check wifi status\"\n      - \"Step 3: Check inbox capacity\"\n      - \"Step 4: Validate sender and receiver exist\"\n      - \"Step 5: Generate new message ID and store message\"\n    supported_parameter_ranges:\n      sender_name:\n        - valid_values: [\"Eve\", \"Frank\", \"Grace\", \"Helen\", \"Isaac\", \"Jack\"]\n        - constraints: \"Must be exact case-sensitive match to existing user\"\n        - edge_cases: \"Returns sender does not exist error for invalid names\"\n      receiver_name:\n        - valid_values: [\"Eve\", \"Frank\", \"Grace\", \"Helen\", \"Isaac\", \"Jack\"]\n        - constraints: \"Must be exact case-sensitive match to existing user\"\n        - edge_cases: \"Returns receiver does not exist error for invalid names\"\n      message:\n        - valid_values: [\"any string\"]\n        - constraints: \"Any non-empty string content\"\n        - edge_cases: \"Empty strings are accepted\"\n\n  delete_message:\n    api_method: \"delete_message\"\n    parameter_mapping:\n      message_id: \"message_id\"\n    validation_chain:\n      - \"Step 1: Check logged_in status\"\n      - \"Step 2: Validate message_id exists in inbox\"\n      - \"Step 3: Delete message from inbox\"\n    supported_parameter_ranges:\n      message_id:\n        - valid_values: [\"any integer that exists as key in inbox\"]\n        - constraints: \"Must be integer type and exist in current inbox\"\n        - edge_cases: \"Returns message ID does not exist for invalid IDs\"\n\n  view_messages_between_users:\n    api_method: \"view_messages_between_users\"\n    parameter_mapping:\n      sender_name: \"sender_name\"\n      receiver_name: \"receiver_name\"\n    validation_chain:\n      - \"Step 1: Check logged_in status\"\n      - \"Step 2: Validate sender exists\"\n      - \"Step 3: Validate receiver exists\"\n      - \"Step 4: Search inbox for matching sender_id to receiver_id messages\"\n    supported_parameter_ranges:\n      sender_name:\n        - valid_values: [\"Eve\", \"Frank\", \"Grace\", \"Helen\", \"Isaac\", \"Jack\"]\n        - constraints: \"Must be exact case-sensitive match\"\n        - edge_cases: \"Returns sender does not exist for invalid names\"\n      receiver_name:\n        - valid_values: [\"Eve\", \"Frank\", \"Grace\", \"Helen\", \"Isaac\", \"Jack\"]\n        - constraints: \"Must be exact case-sensitive match\"\n        - edge_cases: \"Returns receiver does not exist for invalid names\"\n\n  search_messages:\n    api_method: \"search_messages\"\n    parameter_mapping:\n      user_name: \"user_name\"\n      keyword: \"keyword\"\n    validation_chain:\n      - \"Step 1: Validate user exists\"\n      - \"Step 2: Search all messages where user is sender or receiver\"\n      - \"Step 3: Filter messages containing keyword (case-insensitive)\"\n    supported_parameter_ranges:\n      user_name:\n        - valid_values: [\"Eve\", \"Frank\", \"Grace\", \"Helen\", \"Isaac\", \"Jack\"]\n        - constraints: \"Must be exact case-sensitive match\"\n        - edge_cases: \"Returns user does not exist for invalid names\"\n      keyword:\n        - valid_values: [\"any string\"]\n        - constraints: \"Case-insensitive substring matching\"\n        - edge_cases: \"Empty keywords match nothing, returns no messages found\"\n\nfunction_behaviors:\n  send_message:\n    prerequisites:\n      - \"logged_in must be true\"\n      - \"wifi must be true\"\n      - \"inbox size must be less than max_capacity (6)\"\n    validation_rules:\n      - \"sender_name must exist in user_list keys\"\n      - \"receiver_name must exist in user_list keys\"\n      - \"message parameter accepted as any string\"\n    success_conditions:\n      - \"All prerequisites met and validation passed\"\n      - \"New message added to inbox with incremented message_id_counter\"\n    error_conditions:\n      - condition: \"logged_in is false\"\n        message: \"Device not logged in, unable to send message\"\n        tool_impact: \"Returns status false with error message\"\n      - condition: \"wifi is false\"\n        message: \"Wi-Fi is turned off, cannot send messages at this time\"\n        tool_impact: \"Returns status false with error message\"\n      - condition: \"inbox size >= max_capacity\"\n        message: \"Inbox capacity is full. You need to ask the user which message to delete.\"\n        tool_impact: \"Returns status false with error message\"\n      - condition: \"sender_name or receiver_name not in user_list\"\n        message: \"Sender or receiver does not exist\"\n        tool_impact: \"Returns status false with error message\"\n    state_changes:\n      - \"message_id_counter incremented by 1\"\n      - \"New message entry added to inbox with new message_id_counter as key\"\n      - \"Message includes sender_id, receiver_id, message content, no time field\"\n    parameter_handling:\n      - \"All parameters are required\"\n      - \"No default values assigned\"\n      - \"String parameters used as-is without transformation\"\n\n  delete_message:\n    prerequisites:\n      - \"logged_in must be true\"\n    validation_rules:\n      - \"message_id must exist as key in inbox\"\n    success_conditions:\n      - \"Message ID exists and logged in\"\n    error_conditions:\n      - condition: \"logged_in is false\"\n        message: \"Device not logged in, unable to delete message\"\n        tool_impact: \"Returns status false with error message\"\n      - condition: \"message_id not in inbox\"\n        message: \"Message ID does not exist\"\n        tool_impact: \"Returns status false with error message\"\n    state_changes:\n      - \"Message with specified ID removed from inbox\"\n      - \"message_id_counter unchanged\"\n    parameter_handling:\n      - \"message_id must be integer\"\n      - \"No default values\"\n\n  view_messages_between_users:\n    prerequisites:\n      - \"logged_in must be true\"\n    validation_rules:\n      - \"sender_name must exist in user_list\"\n      - \"receiver_name must exist in user_list\"\n    success_conditions:\n      - \"Both users exist and messages found between them\"\n    error_conditions:\n      - condition: \"logged_in is false\"\n        message: \"Device not logged in, unable to view message information\"\n        tool_impact: \"Returns status false with error message\"\n      - condition: \"sender_name not in user_list\"\n        message: \"Sender does not exist\"\n        tool_impact: \"Returns status false with error message\"\n      - condition: \"receiver_name not in user_list\"\n        message: \"Receiver does not exist\"\n        tool_impact: \"Returns status false with error message\"\n      - condition: \"No messages found from sender to receiver\"\n        message: \"No related message records found\"\n        tool_impact: \"Returns status false with error message\"\n    state_changes:\n      - \"No state changes - read-only operation\"\n    parameter_handling:\n      - \"Both parameters required\"\n      - \"Case-sensitive matching\"\n\n  search_messages:\n    prerequisites:\n      - \"No system state prerequisites (does not check logged_in)\"\n    validation_rules:\n      - \"user_name must exist in user_list\"\n    success_conditions:\n      - \"User exists and messages containing keyword found\"\n    error_conditions:\n      - condition: \"user_name not in user_list\"\n        message: \"User does not exist\"\n        tool_impact: \"Returns status false with error message\"\n      - condition: \"No messages found containing keyword\"\n        message: \"No messages found containing the keyword\"\n        tool_impact: \"Returns status false with error message\"\n    state_changes:\n      - \"No state changes - read-only operation\"\n    parameter_handling:\n      - \"keyword matching is case-insensitive\"\n      - \"Searches in messages where user is sender OR receiver\"\n\n  get_all_message_times_with_ids:\n    prerequisites:\n      - \"logged_in must be true\"\n    validation_rules:\n      - \"No additional validation beyond login check\"\n    success_conditions:\n      - \"User is logged in\"\n    error_conditions:\n      - condition: \"logged_in is false\"\n        message: \"Device not logged in, unable to retrieve all message times and their corresponding message IDs.\"\n        tool_impact: \"Returns status false with error message\"\n    state_changes:\n      - \"No state changes - read-only operation\"\n    parameter_handling:\n      - \"No parameters required\"\n\n  get_latest_message_id:\n    prerequisites:\n      - \"logged_in must be true\"\n    validation_rules:\n      - \"inbox must not be empty\"\n    success_conditions:\n      - \"User logged in and messages exist\"\n    error_conditions:\n      - condition: \"logged_in is false\"\n        message: \"Device not logged in, unable to retrieve the latest sent message ID.\"\n        tool_impact: \"Returns status false with error message\"\n      - condition: \"inbox is empty\"\n        message: \"No message records found\"\n        tool_impact: \"Returns status false with error message\"\n    state_changes:\n      - \"No state changes - read-only operation\"\n    parameter_handling:\n      - \"No parameters required\"\n      - \"Compares time fields as datetime strings in YYYY-MM-DD format\"\n\n  get_earliest_message_id:\n    prerequisites:\n      - \"logged_in must be true\"\n    validation_rules:\n      - \"inbox must not be empty\"\n    success_conditions:\n      - \"User logged in and messages exist\"\n    error_conditions:\n      - condition: \"logged_in is false\"\n        message: \"Device not logged in, unable to retrieve the earliest sent message ID.\"\n        tool_impact: \"Returns status false with error message\"\n      - condition: \"inbox is empty\"\n        message: \"No message records found\"\n        tool_impact: \"Returns status false with error message\"\n    state_changes:\n      - \"No state changes - read-only operation\"\n    parameter_handling:\n      - \"No parameters required\"\n      - \"Compares time fields as datetime strings in YYYY-MM-DD format\"\n\nconstraints:\n  data_formats:\n    - \"User names are case-sensitive strings: 'Eve', 'Frank', 'Grace', 'Helen', 'Isaac', 'Jack'\"\n    - \"User IDs follow pattern 'USR' + 3-digit number: USR100-USR105\"\n    - \"Message IDs are integers starting from 1\"\n    - \"Time format is 'YYYY-MM-DD' string\"\n    - \"Phone numbers follow format 'XXX-XXX-XXXX'\"\n  capacity_limits:\n    - \"Maximum inbox capacity: 6 messages\"\n    - \"Maximum users: 6 (fixed set)\"\n    - \"Message ID counter starts at 6, increments for each new message\"\n  business_rules:\n    - \"Messages can only be sent between existing users\"\n    - \"Users cannot send messages to themselves (not explicitly prevented but no such messages exist)\"\n    - \"Message search is case-insensitive for keywords\"\n    - \"Time comparison uses datetime parsing of YYYY-MM-DD format\"\n  validation_patterns:\n    - \"User name validation: exact string match against predefined list\"\n    - \"Message ID validation: integer type and existence in inbox keys\"\n    - \"Keyword search: case-insensitive substring matching\"\n  state_scope_clarifications:\n    - \"wifi and logged_in are global device states\"\n    - \"inbox is global message storage\"\n    - \"message_id_counter is global sequential counter\"\n    - \"max_capacity is global system limit\"\n    - \"User data is static and cannot be modified\"\n  tool_parameter_constraints:\n    - \"All string parameters are case-sensitive except keyword search\"\n    - \"Message ID parameters must be integers\"\n    - \"No null or undefined parameter handling specified\"\n\ncomprehensive_coverage:\n  edge_cases:\n    - scenario: \"Tool called with non-existent user name\"\n      api_response: \"{'status': False, 'message': 'Sender does not exist'} or {'status': False, 'message': 'Receiver does not exist'}\"\n    - scenario: \"Tool called when logged_in is false\"\n      api_response: \"{'status': False, 'message': 'Device not logged in, unable to [operation]'}\"\n    - scenario: \"Tool called when wifi is false and trying to send message\"\n      api_response: \"{'status': False, 'message': 'Wi-Fi is turned off, cannot send messages at this time'}\"\n    - scenario: \"Tool called with non-existent message ID\"\n      api_response: \"{'status': False, 'message': 'Message ID does not exist'}\"\n    - scenario: \"Tool called when inbox is at capacity\"\n      api_response: \"{'status': False, 'message': 'Inbox capacity is full. You need to ask the user which message to delete.'}\"\n    - scenario: \"Search with keyword that matches no messages\"\n      api_response: \"{'status': False, 'message': 'No messages found containing the keyword'}\"\n    - scenario: \"View messages between users with no message history\"\n      api_response: \"{'status': False, 'message': 'No related message records found'}\"\n    - scenario: \"Get latest/earliest message when inbox is empty\"\n      api_response: \"{'status': False, 'message': 'No message records found'}\"\n\n  parameter_exhaustiveness:\n    entity_reference_coverage:\n      - \"Valid user names: ['Eve', 'Frank', 'Grace', 'Helen', 'Isaac', 'Jack']\"\n      - \"Valid message IDs: [1, 2, 3, 4, 5, 6] initially, can grow with new messages\"\n      - \"Invalid user names return 'does not exist' errors\"\n      - \"Invalid message IDs return 'Message ID does not exist' errors\"\n      - \"Case sensitivity: exact match required for user names\"\n    parameter_interactions:\n      - \"send_message requires both sender_name AND receiver_name to be valid\"\n      - \"view_messages_between_users checks sender first, then receiver\"\n      - \"System state (wifi, logged_in) checked before parameter validation in most functions\"\n      - \"Capacity check happens after system state but before user validation in send_message\"\n\n  state_dependencies:\n    - \"logged_in=false: Blocks all operations except search_messages\"\n    - \"wifi=false: Blocks only send_message operation\"\n    - \"inbox at max_capacity: Blocks only send_message operation\"\n    - \"empty inbox: Affects get_latest_message_id and get_earliest_message_id\"\n    - \"message existence: Affects delete_message, view operations, and search results\"\n    - \"user existence: Critical for all user-parameter operations\"\n```\n```yaml\nsystem_state:\n  wifi: false  # Global system state - affects all tool operations\n  logged_in: true  # Global authentication state - affects all tool operations\n  # Scope: Global per-session - maintains state across all tool calls within a session\n\nentities:\n  # No explicit entities defined in this API - operates on global system state only\n\ninitial_data:\n  # No persistent data collections - API operates purely on system state\n\ntool_mapping:\n  turn_on_wifi:\n    api_method: \"turn_on_wifi\"\n    parameter_mapping:\n      # This tool takes no parameters - direct method call\n    validation_chain:\n      - \"Step 1: Validate method exists and is callable\"\n      - \"Step 2: Execute wifi state change operation\"\n      - \"Step 3: Return success response with status and message\"\n    supported_parameter_ranges:\n      # No parameters accepted - any parameters passed will be ignored\n\n  login_device:\n    api_method: \"login_device\"\n    parameter_mapping:\n      # This tool takes no parameters - direct method call\n    validation_chain:\n      - \"Step 1: Validate method exists and is callable\"\n      - \"Step 2: Execute login state change operation\"\n      - \"Step 3: Return success response with status and message\"\n    supported_parameter_ranges:\n      # No parameters accepted - any parameters passed will be ignored\n\nfunction_behaviors:\n  turn_on_wifi:\n    prerequisites:\n      - \"No prerequisites - can be called in any system state\"\n      - \"Method exists and is accessible\"\n    validation_rules:\n      - \"No parameter validation - method accepts no parameters\"\n      - \"No authentication checks - operates regardless of logged_in state\"\n    success_conditions:\n      - \"Method executes without exception\"\n      - \"Returns dictionary with 'status': True and 'message' fields\"\n    error_conditions:\n      - condition: \"Method called on invalid API instance\"\n        message: \"AttributeError or similar Python exception\"\n        tool_impact: \"Tool call fails with system error\"\n      - condition: \"Unexpected system exception during execution\"\n        message: \"Python exception details\"\n        tool_impact: \"Tool call fails with system error\"\n    state_changes:\n      - \"Sets self.wifi = True regardless of previous state\"\n      - \"No other system state modifications\"\n    parameter_handling:\n      - \"Ignores all parameters - method signature accepts none\"\n      - \"No validation required for parameters\"\n      - \"Excess parameters are silently ignored\"\n\n  login_device:\n    prerequisites:\n      - \"No prerequisites - can be called in any system state\"\n      - \"Method exists and is accessible\"\n    validation_rules:\n      - \"No parameter validation - method accepts no parameters\"\n      - \"No authentication checks - can be called regardless of current login state\"\n    success_conditions:\n      - \"Method executes without exception\"\n      - \"Returns dictionary with 'status': True and 'message' fields\"\n    error_conditions:\n      - condition: \"Method called on invalid API instance\"\n        message: \"AttributeError or similar Python exception\"\n        tool_impact: \"Tool call fails with system error\"\n      - condition: \"Unexpected system exception during execution\"\n        message: \"Python exception details\"\n        tool_impact: \"Tool call fails with system error\"\n    state_changes:\n      - \"Sets self.logged_in = True regardless of previous state\"\n      - \"No other system state modifications\"\n    parameter_handling:\n      - \"Ignores all parameters - method signature accepts none\"\n      - \"No validation required for parameters\"\n      - \"Excess parameters are silently ignored\"\n\nconstraints:\n  data_formats:\n    - \"Response format: {'status': boolean, 'message': string}\"\n    - \"No input format constraints - no parameters accepted\"\n  capacity_limits:\n    - \"No capacity limits defined\"\n    - \"No rate limiting implemented\"\n  business_rules:\n    - \"WiFi can be turned on regardless of current state (idempotent)\"\n    - \"Login can be performed regardless of current login state (idempotent)\"\n    - \"No interdependencies between wifi and login states\"\n  validation_patterns:\n    - \"No input validation - methods accept no parameters\"\n    - \"All validation occurs at method existence level only\"\n  state_scope_clarifications:\n    - \"All state is global per API instance\"\n    - \"No user-specific or session-specific state beyond instance level\"\n    - \"State persists until instance is destroyed or _load_scenario is called\"\n    - \"No authentication scope - logged_in is binary global state\"\n  tool_parameter_constraints:\n    - \"No parameters accepted by any tool\"\n    - \"Any parameters passed to tools will be ignored\"\n    - \"No cross-parameter dependencies exist\"\n\ncomprehensive_coverage:\n  edge_cases:\n    - scenario: \"Tool called with unexpected parameters\"\n      api_response: \"Parameters ignored, normal execution proceeds\"\n    - scenario: \"Tool called multiple times consecutively\"\n      api_response: \"Idempotent behavior - same success response each time\"\n    - scenario: \"Tool called when already in target state (wifi=True for turn_on_wifi)\"\n      api_response: \"Success response - sets state to True regardless of current value\"\n    - scenario: \"Tool called when already in target state (logged_in=True for login_device)\"\n      api_response: \"Success response - sets state to True regardless of current value\"\n    - scenario: \"API instance not properly initialized\"\n      api_response: \"AttributeError or similar Python exception\"\n\n  parameter_exhaustiveness:\n    entity_reference_coverage:\n      - \"No entity references supported\"\n      - \"No identifiers to validate\"\n    parameter_interactions:\n      - \"No parameter interactions - no parameters accepted\"\n      - \"No validation order dependencies\"\n\n  state_dependencies:\n    turn_on_wifi:\n      - \"Independent of current wifi state (True or False)\"\n      - \"Independent of logged_in state\"\n      - \"Always succeeds and sets wifi=True\"\n    login_device:\n      - \"Independent of current logged_in state (True or False)\"\n      - \"Independent of wifi state\"\n      - \"Always succeeds and sets logged_in=True\"\n\n  response_format_specification:\n    turn_on_wifi:\n      success_response:\n        status: true\n        message: \"Wi-Fi has been turned on\"\n      response_type: \"Dictionary with boolean 'status' and string 'message'\"\n    login_device:\n      success_response:\n        status: true\n        message: \"Device has been logged in\"\n      response_type: \"Dictionary with boolean 'status' and string 'message'\"\n\n  method_idempotency:\n    - \"turn_on_wifi: Idempotent - multiple calls produce same result\"\n    - \"login_device: Idempotent - multiple calls produce same result\"\n    - \"Both methods always return success and set target state to True\"\n\n  scenario_loading_behavior:\n    - \"_load_scenario can override default states\"\n    - \"wifi defaults to scenario.get('wifi', False)\"\n    - \"logged_in defaults to scenario.get('logged_in', True)\"\n    - \"Scenario loading affects initial state but not tool behavior patterns\"\n```\nSYSTEM STATE\n{\n  \"api\": \"BaseApi\",\n  \"variables\": {\n    \"wifi\": false,\n    \"logged_in\": true\n  }\n}\n\nUSERS/ENTITIES\n[\n  {\n    \"type\": \"device\",\n    \"id\": \"device\",\n    \"attributes\": {\n      \"wifi\": false,\n      \"logged_in\": true\n    }\n  }\n]\n\nINITIAL DATA\n{\n  \"state_at_instantiation\": {\n    \"wifi\": false,\n    \"logged_in\": true\n  },\n  \"records\": []\n}\n\nCONSTRAINTS\n{\n  \"operations\": {\n    \"_load_scenario(scenario: dict, long_context: bool=false)\": {\n      \"requires \u2192\": {\n        \"scenario\": {\"wifi?\": \"any\", \"logged_in?\": \"any\"},\n        \"long_context\": \"bool (ignored)\"\n      },\n      \"effects \u2192\": [\n        \"state.wifi = scenario.get('wifi', false)\",\n        \"state.logged_in = scenario.get('logged_in', true)\"\n      ],\n      \"returns \u2192\": null,\n      \"notes\": [\n        \"Unknown scenario keys ignored\",\n        \"If a key is absent, default overrides current state\",\n        \"No type validation; values assigned as-is\"\n      ]\n    },\n    \"turn_on_wifi()\": {\n      \"requires \u2192\": \"none\",\n      \"effects \u2192\": \"state.wifi = true\",\n      \"returns \u2192\": {\"status\": true, \"message\": \"Wi-Fi has been turned on\"},\n      \"idempotent\": true\n    },\n    \"login_device()\": {\n      \"requires \u2192\": \"none\",\n      \"effects \u2192\": \"state.logged_in = true\",\n      \"returns \u2192\": {\"status\": true, \"message\": \"Device has been logged in\"},\n      \"idempotent\": true\n    }\n  },\n  \"business_rules\": [\n    \"Single in-memory device; no persistence across instances\",\n    \"Wi-Fi and login states are independent\",\n    \"No methods to disable Wi-Fi or log out\",\n    \"All operations succeed; no error states implemented\",\n    \"Return structures are exact: {'status': bool, 'message': str}\",\n    \"Messages are fixed strings as specified\",\n    \"Operations do not require preconditions (e.g., Wi-Fi not required to login)\"\n  ],\n  \"formats\": {\n    \"booleans\": \"true|false\",\n    \"strings\": \"UTF-8\"\n  },\n  \"operational_limitations\": [\n    \"No authentication or user accounts\",\n    \"No concurrency controls\",\n    \"No I/O or external network calls\"\n  ]\n}\nSYSTEM STATE\n{\n  \"max_capacity\": 6,\n  \"wifi\": false,            // default via _load_scenario()\n  \"logged_in\": true,        // default via _load_scenario()\n  \"message_id_counter\": 6,  // next send increments to 7\n  \"time_format\": \"%Y-%m-%d\" // required by time-based APIs\n}\n\nUSERS/ENTITIES\n{\n  \"users\": {\n    \"Eve\":   {\"user_id\": \"USR100\", \"phone_number\": \"123-456-7890\", \"occupation\": \"Software Engineer\"},\n    \"Frank\": {\"user_id\": \"USR101\", \"phone_number\": \"234-567-8901\", \"occupation\": \"Data Scientist\"},\n    \"Grace\": {\"user_id\": \"USR102\", \"phone_number\": \"345-678-9012\", \"occupation\": \"Product Manager\"},\n    \"Helen\": {\"user_id\": \"USR103\", \"phone_number\": \"456-789-0123\", \"occupation\": \"UX Designer\"},\n    \"Isaac\": {\"user_id\": \"USR104\", \"phone_number\": \"567-890-1234\", \"occupation\": \"DevOps Engineer\"},\n    \"Jack\":  {\"user_id\": \"USR105\", \"phone_number\": \"678-901-2345\", \"occupation\": \"Marketing Specialist\"}\n  },\n\n  \"schemas\": {\n    \"StoredMessage\": {\n      \"sender_id\": \"USR###\",\n      \"receiver_id\": \"USR###\",\n      \"message\": \"string\",\n      \"time\": \"YYYY-MM-DD\" // required by time-based APIs\n    },\n    \"ViewResultMessage\": {\n      \"id\": \"int\",\n      \"sender\": \"sender_name\",\n      \"receiver\": \"receiver_name\",\n      \"message\": \"string\"\n    },\n    \"SearchResultMessage\": {\n      \"id\": \"int\",\n      \"sender_id\": \"USR###\",\n      \"receiver_id\": \"USR###\",\n      \"message\": \"string\"\n    }\n  }\n}\n\nINITIAL DATA\n{\n  \"user_list\": {\n    \"Eve\":   {\"user_id\": \"USR100\", \"phone_number\": \"123-456-7890\", \"occupation\": \"Software Engineer\"},\n    \"Frank\": {\"user_id\": \"USR101\", \"phone_number\": \"234-567-8901\", \"occupation\": \"Data Scientist\"},\n    \"Grace\": {\"user_id\": \"USR102\", \"phone_number\": \"345-678-9012\", \"occupation\": \"Product Manager\"},\n    \"Helen\": {\"user_id\": \"USR103\", \"phone_number\": \"456-789-0123\", \"occupation\": \"UX Designer\"},\n    \"Isaac\": {\"user_id\": \"USR104\", \"phone_number\": \"567-890-1234\", \"occupation\": \"DevOps Engineer\"},\n    \"Jack\":  {\"user_id\": \"USR105\", \"phone_number\": \"678-901-2345\", \"occupation\": \"Marketing Specialist\"}\n  },\n\n  \"inbox\": {\n    \"1\": {\n      \"sender_id\": \"USR100\",\n      \"receiver_id\": \"USR101\",\n      \"message\": \"Hey Frank, don't forget about our meeting on 2024-06-11 at 4 PM in Conference Room 1.\",\n      \"time\": \"2024-06-09\"\n    },\n    \"2\": {\n      \"sender_id\": \"USR101\",\n      \"receiver_id\": \"USR102\",\n      \"message\": \"Can you help me order a \\\"Margherita Pizza\\\" delivery? The merchant is Domino's.\",\n      \"time\": \"2024-03-09\"\n    },\n    \"3\": {\n      \"sender_id\": \"USR102\",\n      \"receiver_id\": \"USR103\",\n      \"message\": \"Please check the milk tea delivery options available from Heytea and purchase a cheaper milk tea for me. After making the purchase, remember to reply to me with \\\"Already bought.\\\"\",\n      \"time\": \"2023-12-05\"\n    },\n    \"4\": {\n      \"sender_id\": \"USR103\",\n      \"receiver_id\": \"USR102\",\n      \"message\": \"No problem Helen, I can assist you.\",\n      \"time\": \"2024-09-09\"\n    },\n    \"5\": {\n      \"sender_id\": \"USR104\",\n      \"receiver_id\": \"USR105\",\n      \"message\": \"Isaac, are you available for a call?\",\n      \"time\": \"2024-06-06\"\n    },\n    \"6\": {\n      \"sender_id\": \"USR105\",\n      \"receiver_id\": \"USR104\",\n      \"message\": \"Yes Jack, let's do it in 30 minutes.\",\n      \"time\": \"2024-01-15\"\n    }\n  },\n\n  \"counts\": {\"users\": 6, \"messages\": 6},\n  \"capacity_status\": \"full\",              // len(inbox) == max_capacity\n  \"latest_message_id_by_time\": 4,         // based on time field\n  \"earliest_message_id_by_time\": 3\n}\n\nCONSTRAINTS\n{\n  \"scenario_loader\": {\n    \"_load_scenario(scenario: {wifi?: bool, logged_in?: bool}, long_context: bool=false) \u2192 None\": {\n      \"effects\": {\"wifi\": \"scenario.wifi||false\", \"logged_in\": \"scenario.logged_in||true\"}\n    }\n  },\n\n  \"apis\": {\n    \"send_message(sender_name: str, receiver_name: str, message: str) \u2192 {status: bool, message: str}\": {\n      \"requires \u2192\": [\n        \"logged_in == true\",\n        \"wifi == true\",\n        \"len(inbox) < max_capacity\",\n        \"sender_name in user_list\",\n        \"receiver_name in user_list\"\n      ],\n      \"effects \u2192\": [\n        \"message_id_counter += 1\",\n        \"inbox[message_id_counter] = {sender_id, receiver_id, message}\",\n        \"// note: no 'time' field is set on new messages\"\n      ],\n      \"errors \u2192\": [\n        \"{\\\"status\\\": false, \\\"message\\\": \\\"Device not logged in, unable to send message\\\"}\",\n        \"{\\\"status\\\": false, \\\"message\\\": \\\"Wi-Fi is turned off, cannot send messages at this time\\\"}\",\n        \"{\\\"status\\\": false, \\\"message\\\": \\\"Inbox capacity is full. You need to ask the user which message to delete.\\\"}\",\n        \"{\\\"status\\\": false, \\\"message\\\": \\\"Sender or receiver does not exist\\\"}\"\n      ],\n      \"returns \u2192\": \"{\\\"status\\\": true, \\\"message\\\": \\\"Message successfully sent to {receiver_name}.\\\"}\"\n    },\n\n    \"delete_message(message_id: int) \u2192 {status: bool, message: str}\": {\n      \"requires \u2192\": [\"logged_in == true\", \"message_id in inbox\"],\n      \"effects \u2192\": [\"delete inbox[message_id]\"],\n      \"errors \u2192\": [\n        \"{\\\"status\\\": false, \\\"message\\\": \\\"Device not logged in, unable to delete message\\\"}\",\n        \"{\\\"status\\\": false, \\\"message\\\": \\\"Message ID does not exist\\\"}\"\n      ],\n      \"returns \u2192\": \"{\\\"status\\\": true, \\\"message\\\": \\\"Message ID {message_id} has been successfully deleted.\\\"}\"\n    },\n\n    \"view_messages_between_users(sender_name: str, receiver_name: str) \u2192 {status: bool, messages?: [ViewResultMessage], message?: str}\": {\n      \"requires \u2192\": [\"logged_in == true\", \"sender_name in user_list\", \"receiver_name in user_list\"],\n      \"behavior \u2192\": [\n        \"filter inbox where sender_id == user_list[sender_name].user_id AND receiver_id == user_list[receiver_name].user_id\",\n        \"directional: only A\u2192B, not B\u2192A\"\n      ],\n      \"errors \u2192\": [\n        \"{\\\"status\\\": false, \\\"message\\\": \\\"Device not logged in, unable to view message information\\\"}\",\n        \"{\\\"status\\\": false, \\\"message\\\": \\\"Sender does not exist\\\"}\",\n        \"{\\\"status\\\": false, \\\"message\\\": \\\"Receiver does not exist\\\"}\",\n        \"{\\\"status\\\": false, \\\"message\\\": \\\"No related message records found\\\"}\"\n      ],\n      \"returns \u2192\": \"{\\\"status\\\": true, \\\"messages\\\": [ {\\\"id\\\": int, \\\"sender\\\": sender_name, \\\"receiver\\\": receiver_name, \\\"message\\\": string}, ... ]}\"\n    },\n\n    \"search_messages(user_name: str, keyword: str) \u2192 {status: bool, messages?: [SearchResultMessage], message?: str}\": {\n      \"requires \u2192\": [\"user_name in user_list\"],\n      \"behavior \u2192\": [\n        \"case-insensitive substring match on message content\",\n        \"include messages where (sender_id == user_id) OR (receiver_id == user_id)\"\n      ],\n      \"errors \u2192\": [\n        \"{\\\"status\\\": false, \\\"message\\\": \\\"User does not exist\\\"}\",\n        \"{\\\"status\\\": false, \\\"message\\\": \\\"No messages found containing the keyword\\\"}\"\n      ],\n      \"returns \u2192\": \"{\\\"status\\\": true, \\\"messages\\\": [ {\\\"id\\\": int, \\\"sender_id\\\": \\\"USR###\\\", \\\"receiver_id\\\": \\\"USR###\\\", \\\"message\\\": string}, ... ]}\"\n    },\n\n    \"get_all_message_times_with_ids() \u2192 {msg_id: time_str} | {status: false, message: str}\": {\n      \"requires \u2192\": [\"logged_in == true\", \"every inbox[*] has 'time'\"],\n      \"errors \u2192\": [\n        \"{\\\"status\\\": false, \\\"message\\\": \\\"Device not logged in, unable to retrieve all message times and their corresponding message IDs.\\\"}\"\n      ],\n      \"returns \u2192\": \"{ <int>: \\\"YYYY-MM-DD\\\", ... }\"\n    },\n\n    \"get_latest_message_id() \u2192 {status: bool, message: str, message_id?: int}\": {\n      \"requires \u2192\": [\"logged_in == true\", \"len(inbox) > 0\", \"every inbox[*].time matches %Y-%m-%d\"],\n      \"behavior \u2192\": [\"parse times, select max(time)\"],\n      \"errors \u2192\": [\n        \"{\\\"status\\\": false, \\\"message\\\": \\\"Device not logged in, unable to retrieve the latest sent message ID.\\\"}\",\n        \"{\\\"status\\\": false, \\\"message\\\": \\\"No message records found\\\"}\"\n      ],\n      \"returns \u2192\": \"{\\\"status\\\": true, \\\"message\\\": \\\"The latest message ID is {id}\\\", \\\"message_id\\\": id}\"\n    },\n\n    \"get_earliest_message_id() \u2192 {status: bool, message: str, message_id?: int}\": {\n      \"requires \u2192\": [\"logged_in == true\", \"len(inbox) > 0\", \"every inbox[*].time matches %Y-%m-%d\"],\n      \"behavior \u2192\": [\"parse times, select min(time)\"],\n      \"errors \u2192\": [\n        \"{\\\"status\\\": false, \\\"message\\\": \\\"Device not logged in, unable to retrieve the earliest sent message ID.\\\"}\",\n        \"{\\\"status\\\": false, \\\"message\\\": \\\"No message records found\\\"}\"\n      ],\n      \"returns \u2192\": \"{\\\"status\\\": true, \\\"message\\\": \\\"The earliest message ID is {id}\\\", \\\"message_id\\\": id}\"\n    }\n  },\n\n  \"business_rules\": [\n    \"Valid user_name values: [\\\"Eve\\\",\\\"Frank\\\",\\\"Grace\\\",\\\"Helen\\\",\\\"Isaac\\\",\\\"Jack\\\"]\",\n    \"User IDs fixed: USR100..USR105 mapped to above names\",\n    \"Inbox keys are integer message IDs; deletions create gaps; message_id_counter only increments\",\n    \"Capacity rule: cannot send when len(inbox) >= max_capacity\",\n    \"Wi-Fi gate applies only to send_message; other APIs do not require wifi\",\n    \"Login gate applies to: send_message, delete_message, view_messages_between_users, get_all_message_times_with_ids, get_latest_message_id, get_earliest_message_id\",\n    \"Search is case-insensitive on message content only\",\n    \"Time strings must be in \\\"%Y-%m-%d\\\"; used for sorting/selection in time-based APIs\"\n  ],\n\n  \"operational_limitations\": [\n    \"send_message does not set 'time' on new messages; time-based APIs may error if any message lacks 'time'\",\n    \"get_all_message_times_with_ids returns a raw {id: time} map on success (no status field); on failure returns {status:false, message:str}\"\n  ]\n}\n\nInitial Config: {'BaseApi': {'wifi': True, 'logged_in': True}}\n\nExample Return Data: No example provided\n\nExecution Modes:\n1. Data Generation: When the tool call requests new data pertaining to the specific tool call parameters.\n2. Information Deduction: When the tool call requires reasoning from meta data and initial config.\n\nDetermine the execution mode first, and then jump to the corresponding section for guidelines.\n\n\nRESPONSE GENERATION GUIDELINES FOR DATA GENERATION:\n\n1. **Structure Matching**: Generate responses that strictly adhere to the format shown in ``output_details`` if provided (for example refer to Return Data or Meta Data). Ensure all fields and nested structures match exactly.\n\n   - Return only the keys specified in ``output_details``of Tool Details, with their corresponding values.\n   - Include all keys listed in ``output_details``, using the exact key names.\n   - Each value must match the type defined in ``output_details``.\n   - Allowed types: string, number, integer, boolean, array. (Objects are not allowed.)\n   - Arrays must contain items of a single type (string, number, integer, boolean). Arrays of objects or array of arrays are not allowed. \n\n2. **Realistic Data**: Create contextually appropriate, realistic values based on:\n   - The actual parameter values provided in the tool call\n   - The domain context (e.g., financial data should have realistic ranges, e-commerce data should have realistic prices etc. )\n   - Logical relationships between fields (e.g., correlations, derived metrics)\n\n3. **Data Consistency**: Ensure generated data is internally consistent:\n   - Calculated values should match their inputs\n   - Related metrics should have logical relationships\n   - Time series data should follow realistic patterns\n\n4. **Response Completeness**: Include all fields shown in Example Return Data or maybe part of Meta Data, populating them with meaningful values\n\n5. **Response structure**:\n    - {\n      \"key1\": \"Value of key1\",\n      \"key2\": \"Value of key2\",\n      \"key3\": \"Value of key3\"\n      } \n\nOUTPUT FORMAT:\n{\n  \"tool_call\": {\n    \"parameters\": [exact parameters that were called]\n  },\n  \"return_data\": [Either generated data matching Example Return Data or maybe part of Meta Data structure, or synthesized information from the meta data]\n}\n\nRESPONSE GENERATION GUIDELINES FOR INFORMATION DEDUCTION:\n\n1. **Meta Data Analysis**: Extract relevant information from system state, entities, initial data, and function behaviors that align with the tool parameters.\n2. **Parameter Validation against Meta Data**: Map tool call parameters to meta data, check prerequisites, confirm entity existence, and verify system state permits the operation.\n3. **Information Synthesis**: Cross-reference meta data sources, apply logic and validation rules, and calculate derived values to determine the appropriate response.\n4. **Response Construction**: \n  - Use exact data from meta data when available\n  - Apply required specified state changes\n  - If the tool call logically results in an error with respect to initial config or meta data (which is possible), return precise error messages.\n  - Generate realistic values following meta data patterns when information is incomplete, but be very careful about this, do not generate incorrect values that contradicts the meta data or initial config.\n  - When multiple errors are present, return the error that should be the first one to be detected by a programmatic tool.\n\n\nIMPORTANT:\n- The tool call has already been validated to follow the schema, so focus only on generating accurate responses: data or information deduction (which could have errors)\n- If meta data provides the full context for the tool call, analyze and synthesize it to logically deduce the exact response.\n- If new data is needed, generate realistic values that follow meta data patterns and constraints while remaining consistent with the given parameters.\n- If provided, output exactly as the example return data with the same structure and field names.Generate believable values that would result from the given parameters if the information is not provided in the meta data\n- Return valid JSON that can be parsed directly\n- Do not add any additional reasoning or explanation.",
        "model": "claude-sonnet-4-20250514"
    },
    "conversation_id": "Tool call 6",
    "failure_mode": "success mode",
    "tool_parameters": {
        "user_name": "Frank",
        "keyword": "Pizza"
    }
}