{
    "tool_name": "add_reminder",
    "tool_description": "Add a new reminder.",
    "parameters": {
        "title": {
            "type": "string",
            "description": "The title of the reminder.",
            "required": true
        },
        "description": {
            "type": "string",
            "description": "The description of the reminder.",
            "required": true
        },
        "time": {
            "type": "string",
            "description": "The time of the reminder, in the format YYYY-MM-DD HH:MM.",
            "required": true
        }
    },
    "error_messages": [],
    "usage": "Add a new reminder.",
    "meta_data": "```yaml\nsystem_state:\n  wifi: false  # Global system state - network connectivity\n  logged_in: true  # Global system state - user authentication status\n  max_capacity: 6  # Global constant - maximum number of reminders allowed\n  reminder_id_counter: 3  # Global counter - tracks next available reminder ID\n\nentities:\n  reminders:\n    1:\n      reminder_id: 1001\n      title: \"Doctor's Appointment\"\n      description: \"Visit Dr. Smith for a checkup.\"\n      time: \"2024-07-15 09:30\"\n      notified: false\n    2:\n      reminder_id: 1002\n      title: \"Team Meeting\"\n      description: \"Monthly project review with the team.\"\n      time: \"2024-07-17 11:00\"\n      notified: false\n    3:\n      reminder_id: 1003\n      title: \"To-do list\"\n      description: \"First, help Frank place a food delivery order at \\\"Hema Fresh,\\\" ordering two \\\"Fresh Gift Packs.\\\" Then, send a message to Frank saying, \\\"The price of the purchased goods is () yuan.\\\" Replace the parentheses with the actual amount, keeping one decimal place.\"\n      time: \"2024-07-16 11:00\"\n      notified: false\n\ninitial_data:\n  reminder_collection:\n    1001:\n      reminder_id: 1001\n      title: \"Doctor's Appointment\"\n      description: \"Visit Dr. Smith for a checkup.\"\n      time: \"2024-07-15 09:30\"\n      notified: false\n    1002:\n      reminder_id: 1002\n      title: \"Team Meeting\"\n      description: \"Monthly project review with the team.\"\n      time: \"2024-07-17 11:00\"\n      notified: false\n    1003:\n      reminder_id: 1003\n      title: \"To-do list\"\n      description: \"First, help Frank place a food delivery order at \\\"Hema Fresh,\\\" ordering two \\\"Fresh Gift Packs.\\\" Then, send a message to Frank saying, \\\"The price of the purchased goods is () yuan.\\\" Replace the parentheses with the actual amount, keeping one decimal place.\"\n      time: \"2024-07-16 11:00\"\n      notified: false\n\ntool_mapping:\n  view_reminder_by_title:\n    api_method: \"view_reminder_by_title\"\n    parameter_mapping:\n      title: \"title\"\n    validation_chain:\n      - \"Step 1: Check if device is logged in\"\n      - \"Step 2: Validate title parameter is string\"\n      - \"Step 3: Search for reminder with matching title\"\n      - \"Step 4: Return reminder details or not found message\"\n    supported_parameter_ranges:\n      title:\n        valid_values: [\"Any string value\"]\n        constraints: \"Must be a string, case-sensitive exact match\"\n        edge_cases: \"Empty string, None, or non-existent titles return not found message\"\n\n  add_reminder:\n    api_method: \"add_reminder\"\n    parameter_mapping:\n      title: \"title\"\n      description: \"description\"\n      time: \"time\"\n    validation_chain:\n      - \"Step 1: Check if device is logged in\"\n      - \"Step 2: Check if reminder capacity is available\"\n      - \"Step 3: Validate all required parameters\"\n      - \"Step 4: Increment reminder_id_counter\"\n      - \"Step 5: Create new reminder entry\"\n    supported_parameter_ranges:\n      title:\n        valid_values: [\"Any string value\"]\n        constraints: \"Required string parameter\"\n        edge_cases: \"Empty string accepted, None causes error\"\n      description:\n        valid_values: [\"Any string value\"]\n        constraints: \"Required string parameter\"\n        edge_cases: \"Empty string accepted, None causes error\"\n      time:\n        valid_values: [\"datetime object or string in format YYYY-MM-DD HH:MM\"]\n        constraints: \"Required datetime parameter\"\n        edge_cases: \"Invalid datetime format causes error\"\n\n  delete_reminder:\n    api_method: \"delete_reminder\"\n    parameter_mapping:\n      reminder_id: \"reminder_id\"\n    validation_chain:\n      - \"Step 1: Check if device is logged in\"\n      - \"Step 2: Validate reminder_id is integer\"\n      - \"Step 3: Check if reminder_id exists in reminder_list\"\n      - \"Step 4: Remove reminder from reminder_list\"\n    supported_parameter_ranges:\n      reminder_id:\n        valid_values: [\"Positive integers corresponding to existing reminder keys\"]\n        constraints: \"Must be integer, must exist in reminder_list\"\n        edge_cases: \"Non-existent IDs, negative numbers, non-integers return error\"\n\n  view_all_reminders:\n    api_method: \"view_all_reminders\"\n    parameter_mapping: {}\n    validation_chain:\n      - \"Step 1: Check if reminder_list is empty\"\n      - \"Step 2: Extract reminder details (excluding reminder_id)\"\n      - \"Step 3: Return formatted list of reminders\"\n    supported_parameter_ranges: {}\n\nfunction_behaviors:\n  view_reminder_by_title:\n    prerequisites:\n      - \"System must have logged_in = True\"\n    validation_rules:\n      - \"Title parameter must be provided as string\"\n      - \"Title matching is case-sensitive and exact\"\n    success_conditions:\n      - \"Device is logged in and title matches existing reminder\"\n    error_conditions:\n      - condition: \"Device not logged in\"\n        message: \"The device is not logged in, so you cannot view notifications\"\n        tool_impact: \"Returns status: false with error message\"\n      - condition: \"No reminder found with specified title\"\n        message: \"No reminder found with the title '{title}'.\"\n        tool_impact: \"Returns status: false with not found message\"\n    state_changes:\n      - \"No state changes - read-only operation\"\n    parameter_handling:\n      - \"Missing title parameter causes method error\"\n      - \"Empty title string searches for reminder with empty title\"\n      - \"Case-sensitive exact string matching\"\n\n  add_reminder:\n    prerequisites:\n      - \"System must have logged_in = True\"\n      - \"Reminder count must be less than max_capacity (6)\"\n    validation_rules:\n      - \"All parameters (title, description, time) are required\"\n      - \"Title and description must be strings\"\n      - \"Time must be datetime object\"\n    success_conditions:\n      - \"Device logged in, capacity available, valid parameters\"\n    error_conditions:\n      - condition: \"Device not logged in\"\n        message: \"Device not logged in. Unable to add a new reminder.\"\n        tool_impact: \"Returns status: false with login error\"\n      - condition: \"Reminder capacity full (6+ reminders)\"\n        message: \"Reminder capacity is full. Unable to add a new reminder.\"\n        tool_impact: \"Returns status: false with capacity error\"\n    state_changes:\n      - \"Increments reminder_id_counter by 1\"\n      - \"Adds new reminder to reminder_list with new counter value as key\"\n      - \"Sets notified: false for new reminder\"\n    parameter_handling:\n      - \"All parameters are required - missing parameters cause error\"\n      - \"Time parameter stored as provided (datetime or string)\"\n      - \"Generated reminder_id uses incremented counter, not provided ID\"\n\n  delete_reminder:\n    prerequisites:\n      - \"System must have logged_in = True\"\n      - \"Reminder with specified ID must exist\"\n    validation_rules:\n      - \"reminder_id must be integer\"\n      - \"reminder_id must exist as key in reminder_list\"\n    success_conditions:\n      - \"Device logged in and valid reminder_id provided\"\n    error_conditions:\n      - condition: \"Device not logged in\"\n        message: \"Device not logged in. Unable to delete the specified reminder.\"\n        tool_impact: \"Returns status: false with login error\"\n      - condition: \"Reminder ID does not exist\"\n        message: \"Reminder ID does not exist.\"\n        tool_impact: \"Returns status: false with ID error\"\n    state_changes:\n      - \"Removes reminder entry from reminder_list\"\n      - \"Does not modify reminder_id_counter\"\n    parameter_handling:\n      - \"reminder_id must be provided as integer\"\n      - \"Non-existent IDs return specific error message\"\n\n  view_all_reminders:\n    prerequisites:\n      - \"No login requirement for this method\"\n    validation_rules:\n      - \"No parameter validation required\"\n    success_conditions:\n      - \"At least one reminder exists in reminder_list\"\n    error_conditions:\n      - condition: \"No reminders in reminder_list\"\n        message: \"No reminders found.\"\n        tool_impact: \"Returns status: false with no reminders message\"\n    state_changes:\n      - \"No state changes - read-only operation\"\n    parameter_handling:\n      - \"No parameters required\"\n      - \"Returns simplified reminder format without reminder_id field\"\n\nconstraints:\n  data_formats:\n    - \"reminder_id: integer (auto-generated, starts from 4 for new reminders)\"\n    - \"title: string (any length, case-sensitive)\"\n    - \"description: string (any length, supports multi-line)\"\n    - \"time: string in 'YYYY-MM-DD HH:MM' format or datetime object\"\n    - \"notified: boolean (always false for new reminders)\"\n  \n  capacity_limits:\n    - \"Maximum 6 reminders total (max_capacity = 6)\"\n    - \"reminder_id_counter increments sequentially, starts at 3\"\n  \n  business_rules:\n    - \"Login required for view_reminder_by_title, add_reminder, delete_reminder\"\n    - \"No login required for view_all_reminders\"\n    - \"Title matching is case-sensitive and exact\"\n    - \"New reminders always created with notified: false\"\n  \n  validation_patterns:\n    - \"reminder_id: Must be integer, must exist in reminder_list keys\"\n    - \"title: String matching is exact and case-sensitive\"\n    - \"All required parameters must be provided\"\n  \n  state_scope_clarifications:\n    - \"logged_in: Global system state affecting most operations\"\n    - \"wifi: Global system state (present but not used in current methods)\"\n    - \"max_capacity: Global constant, unchangeable\"\n    - \"reminder_list: Global collection indexed by sequential integers\"\n    - \"reminder_id_counter: Global counter, only increments on add_reminder\"\n  \n  tool_parameter_constraints:\n    - \"title parameter: Required string, case-sensitive matching\"\n    - \"reminder_id parameter: Must be existing key in reminder_list\"\n    - \"time parameter: Accepts datetime object or formatted string\"\n    - \"No optional parameters - all method parameters are required\"\n\ncomprehensive_coverage:\n  edge_cases:\n    - scenario: \"Tool called with non-existent reminder_id\"\n      api_response: \"{status: false, message: 'Reminder ID does not exist.'}\"\n    - scenario: \"Tool called when device not logged in\"\n      api_response: \"{status: false, message: 'Device not logged in. Unable to [operation].'}\"\n    - scenario: \"Add reminder when at capacity (6 reminders)\"\n      api_response: \"{status: false, message: 'Reminder capacity is full. Unable to add a new reminder.'}\"\n    - scenario: \"View reminder by title when title doesn't exist\"\n      api_response: \"{status: false, message: 'No reminder found with the title \\\\'[title]\\\\\\'.'}\"\n    - scenario: \"View all reminders when list is empty\"\n      api_response: \"{status: false, message: 'No reminders found.'}\"\n  \n  parameter_exhaustiveness:\n    entity_reference_coverage:\n      - \"Valid reminder_ids: 1, 2, 3 (initial state)\"\n      - \"Valid titles: 'Doctor\\\\'s Appointment', 'Team Meeting', 'To-do list'\"\n      - \"Invalid reminder_ids: Any integer not in reminder_list keys\"\n      - \"Invalid titles: Any string not exactly matching existing titles\"\n      - \"Case sensitivity: 'doctor\\\\'s appointment' != 'Doctor\\\\'s Appointment'\"\n    \n    parameter_interactions:\n      - \"login state affects all operations except view_all_reminders\"\n      - \"capacity check occurs before parameter validation in add_reminder\"\n      - \"reminder_id must exist for delete_reminder to succeed\"\n  \n  state_dependencies:\n    - \"logged_in = false: Blocks view_reminder_by_title, add_reminder, delete_reminder\"\n    - \"logged_in = true: Allows all operations subject to other constraints\"\n    - \"reminder_list length >= 6: Blocks add_reminder regardless of login state\"\n    - \"reminder_list empty: Causes view_all_reminders to return no results\"\n    - \"wifi state: Present in system but does not affect any current operations\"\n```\n```yaml\nsystem_state:\n  wifi: false  # Global system state - affects all tool operations\n  logged_in: true  # Global authentication state - affects all tool operations\n  # Scope: Global per-session - maintains state across all tool calls within a session\n\nentities:\n  # No explicit entities defined in this API - operates on global system state only\n\ninitial_data:\n  # No persistent data collections - API operates purely on system state\n\ntool_mapping:\n  turn_on_wifi:\n    api_method: \"turn_on_wifi\"\n    parameter_mapping:\n      # This tool takes no parameters - direct method call\n    validation_chain:\n      - \"Step 1: Validate method exists and is callable\"\n      - \"Step 2: Execute wifi state change operation\"\n      - \"Step 3: Return success response with status and message\"\n    supported_parameter_ranges:\n      # No parameters accepted - any parameters passed will be ignored\n\n  login_device:\n    api_method: \"login_device\"\n    parameter_mapping:\n      # This tool takes no parameters - direct method call\n    validation_chain:\n      - \"Step 1: Validate method exists and is callable\"\n      - \"Step 2: Execute login state change operation\"\n      - \"Step 3: Return success response with status and message\"\n    supported_parameter_ranges:\n      # No parameters accepted - any parameters passed will be ignored\n\nfunction_behaviors:\n  turn_on_wifi:\n    prerequisites:\n      - \"No prerequisites - can be called in any system state\"\n      - \"Method exists and is accessible\"\n    validation_rules:\n      - \"No parameter validation - method accepts no parameters\"\n      - \"No authentication checks - operates regardless of logged_in state\"\n    success_conditions:\n      - \"Method executes without exception\"\n      - \"Returns dictionary with 'status': True and 'message' fields\"\n    error_conditions:\n      - condition: \"Method called on invalid API instance\"\n        message: \"AttributeError or similar Python exception\"\n        tool_impact: \"Tool call fails with system error\"\n      - condition: \"Unexpected system exception during execution\"\n        message: \"Python exception details\"\n        tool_impact: \"Tool call fails with system error\"\n    state_changes:\n      - \"Sets self.wifi = True regardless of previous state\"\n      - \"No other system state modifications\"\n    parameter_handling:\n      - \"Ignores all parameters - method signature accepts none\"\n      - \"No validation required for parameters\"\n      - \"Excess parameters are silently ignored\"\n\n  login_device:\n    prerequisites:\n      - \"No prerequisites - can be called in any system state\"\n      - \"Method exists and is accessible\"\n    validation_rules:\n      - \"No parameter validation - method accepts no parameters\"\n      - \"No authentication checks - can be called regardless of current login state\"\n    success_conditions:\n      - \"Method executes without exception\"\n      - \"Returns dictionary with 'status': True and 'message' fields\"\n    error_conditions:\n      - condition: \"Method called on invalid API instance\"\n        message: \"AttributeError or similar Python exception\"\n        tool_impact: \"Tool call fails with system error\"\n      - condition: \"Unexpected system exception during execution\"\n        message: \"Python exception details\"\n        tool_impact: \"Tool call fails with system error\"\n    state_changes:\n      - \"Sets self.logged_in = True regardless of previous state\"\n      - \"No other system state modifications\"\n    parameter_handling:\n      - \"Ignores all parameters - method signature accepts none\"\n      - \"No validation required for parameters\"\n      - \"Excess parameters are silently ignored\"\n\nconstraints:\n  data_formats:\n    - \"Response format: {'status': boolean, 'message': string}\"\n    - \"No input format constraints - no parameters accepted\"\n  capacity_limits:\n    - \"No capacity limits defined\"\n    - \"No rate limiting implemented\"\n  business_rules:\n    - \"WiFi can be turned on regardless of current state (idempotent)\"\n    - \"Login can be performed regardless of current login state (idempotent)\"\n    - \"No interdependencies between wifi and login states\"\n  validation_patterns:\n    - \"No input validation - methods accept no parameters\"\n    - \"All validation occurs at method existence level only\"\n  state_scope_clarifications:\n    - \"All state is global per API instance\"\n    - \"No user-specific or session-specific state beyond instance level\"\n    - \"State persists until instance is destroyed or _load_scenario is called\"\n    - \"No authentication scope - logged_in is binary global state\"\n  tool_parameter_constraints:\n    - \"No parameters accepted by any tool\"\n    - \"Any parameters passed to tools will be ignored\"\n    - \"No cross-parameter dependencies exist\"\n\ncomprehensive_coverage:\n  edge_cases:\n    - scenario: \"Tool called with unexpected parameters\"\n      api_response: \"Parameters ignored, normal execution proceeds\"\n    - scenario: \"Tool called multiple times consecutively\"\n      api_response: \"Idempotent behavior - same success response each time\"\n    - scenario: \"Tool called when already in target state (wifi=True for turn_on_wifi)\"\n      api_response: \"Success response - sets state to True regardless of current value\"\n    - scenario: \"Tool called when already in target state (logged_in=True for login_device)\"\n      api_response: \"Success response - sets state to True regardless of current value\"\n    - scenario: \"API instance not properly initialized\"\n      api_response: \"AttributeError or similar Python exception\"\n\n  parameter_exhaustiveness:\n    entity_reference_coverage:\n      - \"No entity references supported\"\n      - \"No identifiers to validate\"\n    parameter_interactions:\n      - \"No parameter interactions - no parameters accepted\"\n      - \"No validation order dependencies\"\n\n  state_dependencies:\n    turn_on_wifi:\n      - \"Independent of current wifi state (True or False)\"\n      - \"Independent of logged_in state\"\n      - \"Always succeeds and sets wifi=True\"\n    login_device:\n      - \"Independent of current logged_in state (True or False)\"\n      - \"Independent of wifi state\"\n      - \"Always succeeds and sets logged_in=True\"\n\n  response_format_specification:\n    turn_on_wifi:\n      success_response:\n        status: true\n        message: \"Wi-Fi has been turned on\"\n      response_type: \"Dictionary with boolean 'status' and string 'message'\"\n    login_device:\n      success_response:\n        status: true\n        message: \"Device has been logged in\"\n      response_type: \"Dictionary with boolean 'status' and string 'message'\"\n\n  method_idempotency:\n    - \"turn_on_wifi: Idempotent - multiple calls produce same result\"\n    - \"login_device: Idempotent - multiple calls produce same result\"\n    - \"Both methods always return success and set target state to True\"\n\n  scenario_loading_behavior:\n    - \"_load_scenario can override default states\"\n    - \"wifi defaults to scenario.get('wifi', False)\"\n    - \"logged_in defaults to scenario.get('logged_in', True)\"\n    - \"Scenario loading affects initial state but not tool behavior patterns\"\n```\nSYSTEM STATE:\n{\n  \"class\": \"BaseApi\",\n  \"state\": {\n    \"wifi\": false,          // bool\n    \"logged_in\": true       // bool\n  },\n  \"scenario_keys\": [\"wifi\", \"logged_in\"]\n}\n\nUSERS/ENTITIES:\n{\n  \"entities\": [\n    {\n      \"id\": \"device_1\",\n      \"type\": \"BaseApi\",\n      \"attributes\": {\n        \"wifi\": false,\n        \"logged_in\": true\n      }\n    }\n  ]\n}\n\nINITIAL DATA:\n{\n  \"on_init\": {\n    \"wifi\": false,\n    \"logged_in\": true\n  },\n  \"preexisting_records\": []\n}\n\nCONSTRAINTS:\n- _load_scenario(scenario: dict, long_context: bool=false)\n  \u2192 inputs:\n    {\n      \"scenario\": {\n        \"wifi\": <bool|absent>,\n        \"logged_in\": <bool|absent>,\n        \"...\": \"ignored\"\n      },\n      \"long_context\": <bool> // unused\n    }\n  \u2192 effects:\n    - wifi := scenario.get(\"wifi\", false)\n    - logged_in := scenario.get(\"logged_in\", true)\n  \u2192 returns: None\n\n- turn_on_wifi()\n  \u2192 pre: none\n  \u2192 effects: wifi := true\n  \u2192 returns: {\"status\": true, \"message\": \"Wi-Fi has been turned on\"}\n\n- login_device()\n  \u2192 pre: none\n  \u2192 effects: logged_in := true\n  \u2192 returns: {\"status\": true, \"message\": \"Device has been logged in\"}\n\n- State domains:\n  \u2192 wifi \u2208 {true, false}\n  \u2192 logged_in \u2208 {true, false}\n\n- Operational rules:\n  \u2192 Methods are synchronous; no exceptions defined\n  \u2192 Return payloads are fixed as shown; status always true\n  \u2192 No logout or Wi-Fi off operation available\n  \u2192 Unknown scenario keys are ignored\n  \u2192 Multiple invocations of setters are idempotent (state remains true once set)\nSYSTEM STATE\n{\n  \"class\": \"MessageApi\",\n  \"inherits\": \"BaseApi\",\n  \"max_capacity\": 6,\n  \"message_id_counter\": 6,\n  \"wifi\": false,            // set via _load_scenario; default False\n  \"logged_in\": true,        // set via _load_scenario; default True\n  \"data_structures\": {\n    \"user_list\": \"Dict[str(name) \u2192 {user_id, phone_number, occupation}]\",\n    \"inbox\": \"Dict[int(message_id) \u2192 {sender_id, receiver_id, message, time?}]\"\n  }\n}\n\nUSERS/ENTITIES\n{\n  \"users\": {\n    \"Eve\":   { \"user_id\": \"USR100\", \"phone_number\": \"123-456-7890\", \"occupation\": \"Software Engineer\" },\n    \"Frank\": { \"user_id\": \"USR101\", \"phone_number\": \"234-567-8901\", \"occupation\": \"Data Scientist\" },\n    \"Grace\": { \"user_id\": \"USR102\", \"phone_number\": \"345-678-9012\", \"occupation\": \"Product Manager\" },\n    \"Helen\": { \"user_id\": \"USR103\", \"phone_number\": \"456-789-0123\", \"occupation\": \"UX Designer\" },\n    \"Isaac\": { \"user_id\": \"USR104\", \"phone_number\": \"567-890-1234\", \"occupation\": \"DevOps Engineer\" },\n    \"Jack\":  { \"user_id\": \"USR105\", \"phone_number\": \"678-901-2345\", \"occupation\": \"Marketing Specialist\" }\n  },\n  \"message_record_schema\": {\n    \"id\": \"int (key in inbox)\",\n    \"sender_id\": \"string (USR100\u2013USR105)\",\n    \"receiver_id\": \"string (USR100\u2013USR105)\",\n    \"message\": \"string\",\n    \"time\": \"string 'YYYY-MM-DD' | omitted (newly sent messages omit 'time')\"\n  }\n}\n\nINITIAL DATA\n{\n  \"inbox\": {\n    \"1\": {\n      \"sender_id\": \"USR100\",\n      \"receiver_id\": \"USR101\",\n      \"message\": \"Hey Frank, don't forget about our meeting on 2024-06-11 at 4 PM in Conference Room 1.\",\n      \"time\": \"2024-06-09\"\n    },\n    \"2\": {\n      \"sender_id\": \"USR101\",\n      \"receiver_id\": \"USR102\",\n      \"message\": \"Can you help me order a \\\"Margherita Pizza\\\" delivery? The merchant is Domino's.\",\n      \"time\": \"2024-03-09\"\n    },\n    \"3\": {\n      \"sender_id\": \"USR102\",\n      \"receiver_id\": \"USR103\",\n      \"message\": \"Please check the milk tea delivery options available from Heytea and purchase a cheaper milk tea for me. After making the purchase, remember to reply to me with \\\"Already bought.\\\"\",\n      \"time\": \"2023-12-05\"\n    },\n    \"4\": {\n      \"sender_id\": \"USR103\",\n      \"receiver_id\": \"USR102\",\n      \"message\": \"No problem Helen, I can assist you.\",\n      \"time\": \"2024-09-09\"\n    },\n    \"5\": {\n      \"sender_id\": \"USR104\",\n      \"receiver_id\": \"USR105\",\n      \"message\": \"Isaac, are you available for a call?\",\n      \"time\": \"2024-06-06\"\n    },\n    \"6\": {\n      \"sender_id\": \"USR105\",\n      \"receiver_id\": \"USR104\",\n      \"message\": \"Yes Jack, let's do it in 30 minutes.\",\n      \"time\": \"2024-01-15\"\n    }\n  }\n}\n\nCONSTRAINTS\n{\n  \"_load_scenario(scenario: dict, long_context=False)\": {\n    \"Requires \u2192\": \"None\",\n    \"Effect \u2192\": \"wifi = scenario.get('wifi', False); logged_in = scenario.get('logged_in', True)\",\n    \"Returns \u2192\": \"None\"\n  },\n\n  \"send_message(sender_name: str, receiver_name: str, message: str)\": {\n    \"Requires \u2192\": [\n      \"logged_in == True\",\n      \"wifi == True\",\n      \"len(inbox) < max_capacity\",\n      \"sender_name \u2208 user_list\",\n      \"receiver_name \u2208 user_list\"\n    ],\n    \"Effect \u2192\": [\n      \"message_id_counter += 1\",\n      \"inbox[message_id_counter] = { sender_id, receiver_id, message }  // 'time' not set\"\n    ],\n    \"Returns \u2192\": \"{ 'status': True|False, 'message': str }\",\n    \"Errors \u2192\": [\n      \"{status: False, message: 'Device not logged in, unable to send message'}\",\n      \"{status: False, message: 'Wi-Fi is turned off, cannot send messages at this time'}\",\n      \"{status: False, message: 'Inbox capacity is full. You need to ask the user which message to delete.'}\",\n      \"{status: False, message: 'Sender or receiver does not exist'}\"\n    ],\n    \"Success \u2192\": \"{status: True, message: 'Message successfully sent to {receiver_name}.'}\"\n  },\n\n  \"delete_message(message_id: int)\": {\n    \"Requires \u2192\": [\n      \"logged_in == True\",\n      \"message_id \u2208 inbox\"\n    ],\n    \"Effect \u2192\": \"del inbox[message_id]\",\n    \"Returns \u2192\": \"{ 'status': True|False, 'message': str }\",\n    \"Errors \u2192\": [\n      \"{status: False, message: 'Device not logged in, unable to delete message'}\",\n      \"{status: False, message: 'Message ID does not exist'}\"\n    ],\n    \"Success \u2192\": \"{status: True, message: 'Message ID {message_id} has been successfully deleted.'}\"\n  },\n\n  \"view_messages_between_users(sender_name: str, receiver_name: str)\": {\n    \"Requires \u2192\": [\n      \"logged_in == True\",\n      \"sender_name \u2208 user_list\",\n      \"receiver_name \u2208 user_list\"\n    ],\n    \"Behavior \u2192\": \"Filter inbox where sender_id == user_list[sender_name].user_id AND receiver_id == user_list[receiver_name].user_id (one-way only)\",\n    \"Returns \u2192\": \"{ 'status': True|False, 'message'?: str, 'messages'?: [ {id, sender, receiver, message} ] }\",\n    \"NoMatch \u2192\": \"{status: False, message: 'No related message records found'}\"\n  },\n\n  \"search_messages(user_name: str, keyword: str)\": {\n    \"Requires \u2192\": \"user_name \u2208 user_list\",\n    \"Behavior \u2192\": \"Case-insensitive substring match on 'message' for all inbox records where sender_id == user_id OR receiver_id == user_id\",\n    \"Returns \u2192\": \"{ 'status': True|False, 'message'?: str, 'messages'?: [ {id, sender_id, receiver_id, message} ] }\",\n    \"Notes \u2192\": \"Does not require logged_in or wifi\",\n    \"NoMatch \u2192\": \"{status: False, message: 'No messages found containing the keyword'}\",\n    \"Errors \u2192\": \"{status: False, message: 'User does not exist'}\"\n  },\n\n  \"get_all_message_times_with_ids()\": {\n    \"Requires \u2192\": \"logged_in == True\",\n    \"Returns \u2192\": \"Dict[int(message_id) \u2192 str(time 'YYYY-MM-DD')] | { 'status': False, 'message': str }\",\n    \"Errors \u2192\": \"{status: False, message: 'Device not logged in, unable to retrieve all message times and their corresponding message IDs.'}\",\n    \"Limitations \u2192\": \"Assumes every inbox record has 'time'; messages created via send_message lack 'time' and will raise at access\"\n  },\n\n  \"get_latest_message_id()\": {\n    \"Requires \u2192\": [\n      \"logged_in == True\",\n      \"inbox not empty\",\n      \"every message has time matching '%Y-%m-%d'\"\n    ],\n    \"Behavior \u2192\": \"latest = argmax over datetime.strptime(time, '%Y-%m-%d')\",\n    \"Returns \u2192\": \"{ 'status': True|False, 'message': str, 'message_id'?: int }\",\n    \"Errors \u2192\": [\n      \"{status: False, message: 'Device not logged in, unable to retrieve the latest sent message ID.'}\",\n      \"{status: False, message: 'No message records found'}\"\n    ]\n  },\n\n  \"get_earliest_message_id()\": {\n    \"Requires \u2192\": [\n      \"logged_in == True\",\n      \"inbox not empty\",\n      \"every message has time matching '%Y-%m-%d'\"\n    ],\n    \"Behavior \u2192\": \"earliest = argmin over datetime.strptime(time, '%Y-%m-%d')\",\n    \"Returns \u2192\": \"{ 'status': True|False, 'message': str, 'message_id'?: int }\",\n    \"Errors \u2192\": [\n      \"{status: False, message: 'Device not logged in, unable to retrieve the earliest sent message ID.'}\",\n      \"{status: False, message: 'No message records found'}\"\n    ]\n  },\n\n  \"business_rules\": {\n    \"capacity\": \"len(inbox) <= max_capacity; initial len(inbox) == 6 (full) \u2192 send_message fails until a delete frees space\",\n    \"time_format\": \"YYYY-MM-DD; parsed via datetime.strptime('%Y-%m-%d')\",\n    \"user_id_pattern\": \"USR100\u2013USR105\",\n    \"phone_number_format\": \"NNN-NNN-NNNN\",\n    \"directionality\": \"view_messages_between_users is directional (A\u2192B only)\",\n    \"case_sensitivity\": \"keyword matching is case-insensitive\",\n    \"network_auth\": {\n      \"send_message\": \"requires logged_in && wifi\",\n      \"delete_message\": \"requires logged_in\",\n      \"view_messages_between_users\": \"requires logged_in\",\n      \"search_messages\": \"does not require logged_in or wifi\",\n      \"get_*_message_id / get_all_message_times_with_ids\": \"require logged_in\"\n    }\n  }\n}",
    "initial_config": {
        "BaseApi": {
            "wifi": true,
            "logged_in": true
        }
    },
    "involved_classes": [
        "BaseApi",
        "ReminderApi"
    ]
}